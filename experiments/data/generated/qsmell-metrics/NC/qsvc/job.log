Python 3.7.8
Module(body=[Expr(value=Str(s='Quantum Support Vector Classifier')), Import(names=[alias(name='warnings', asname=None)]), ImportFrom(module='typing', names=[alias(name='Optional', asname=None)], level=0), ImportFrom(module='qiskit.utils.algorithm_globals', names=[alias(name='algorithm_globals', asname=None)], level=0), ImportFrom(module='sklearn.svm', names=[alias(name='SVC', asname=None)], level=0), ImportFrom(module='qiskit_machine_learning.algorithms.serializable_model', names=[alias(name='SerializableModelMixin', asname=None)], level=0), ImportFrom(module='qiskit_machine_learning.exceptions', names=[alias(name='QiskitMachineLearningWarning', asname=None)], level=0), ImportFrom(module='qiskit_machine_learning.kernels.quantum_kernel', names=[alias(name='QuantumKernel', asname=None)], level=0), ClassDef(name='QSVC', bases=[Name(id='SVC', ctx=Load()), Name(id='SerializableModelMixin', ctx=Load())], keywords=[], body=[Expr(value=Str(s='Quantum Support Vector Classifier.\n\n    This class shows how to use a quantum kernel for classification. The class extends\n    `sklearn.svm.SVC <https://scikit-learn.org/stable/modules/generated/sklearn.svm.SVC.html>`_,\n    and thus inherits its methods like ``fit`` and ``predict`` used in the example below.\n    Read more in the `sklearn user guide\n    <https://scikit-learn.org/stable/modules/svm.html#svm-classification>`_.\n\n    **Example**\n\n    .. code-block::\n\n        qsvc = QSVC(quantum_kernel=qkernel)\n        qsvc.fit(sample_train,label_train)\n        qsvc.predict(sample_test)\n    ')), FunctionDef(name='__init__', args=arguments(args=[arg(arg='self', annotation=None)], vararg=arg(arg='args', annotation=None), kwonlyargs=[arg(arg='quantum_kernel', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Name(id='QuantumKernel', ctx=Load())), ctx=Load()))], kw_defaults=[NameConstant(value=None)], kwarg=arg(arg='kwargs', annotation=None), defaults=[]), body=[Expr(value=Str(s='\n        Args:\n            quantum_kernel: QuantumKernel to be used for classification.\n            *args: Variable length argument list to pass to SVC constructor.\n            **kwargs: Arbitrary keyword arguments to pass to SVC constructor.\n        ')), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='args', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Num(n=0)]), body=[Assign(targets=[Name(id='msg', ctx=Store())], value=JoinedStr(values=[Str(s='Positional arguments ('), FormattedValue(value=Name(id='args', ctx=Load()), conversion=-1, format_spec=None), Str(s=') are deprecated as of version 0.3.0 and will be removed no sooner than 3 months after the release. Instead use keyword arguments.')])), Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='warn', ctx=Load()), args=[Name(id='msg', ctx=Load()), Name(id='DeprecationWarning', ctx=Load())], keywords=[keyword(arg='stacklevel', value=Num(n=2))]))], orelse=[]), If(test=Compare(left=Str(s='kernel'), ops=[In()], comparators=[Name(id='kwargs', ctx=Load())]), body=[Assign(targets=[Name(id='msg', ctx=Store())], value=Str(s="'kernel' argument is not supported and will be discarded, please use 'quantum_kernel' instead.")), Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='warn', ctx=Load()), args=[Name(id='msg', ctx=Load()), Name(id='QiskitMachineLearningWarning', ctx=Load())], keywords=[keyword(arg='stacklevel', value=Num(n=2))])), Delete(targets=[Subscript(value=Name(id='kwargs', ctx=Load()), slice=Index(value=Str(s='kernel')), ctx=Del())])], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_kernel', ctx=Store())], value=IfExp(test=Name(id='quantum_kernel', ctx=Load()), body=Name(id='quantum_kernel', ctx=Load()), orelse=Call(func=Name(id='QuantumKernel', ctx=Load()), args=[], keywords=[]))), If(test=Compare(left=Str(s='random_state'), ops=[NotIn()], comparators=[Name(id='kwargs', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='kwargs', ctx=Load()), slice=Index(value=Str(s='random_state')), ctx=Store())], value=Attribute(value=Name(id='algorithm_globals', ctx=Load()), attr='random_seed', ctx=Load()))], orelse=[]), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(arg='kernel', value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_kernel', ctx=Load()), attr='evaluate', ctx=Load())), keyword(arg=None, value=Name(id='kwargs', ctx=Load()))]))], decorator_list=[], returns=None), FunctionDef(name='quantum_kernel', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Returns quantum kernel')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_kernel', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='QuantumKernel', ctx=Load())), FunctionDef(name='quantum_kernel', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='quantum_kernel', annotation=Name(id='QuantumKernel', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Sets quantum kernel')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_kernel', ctx=Store())], value=Name(id='quantum_kernel', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='kernel', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_kernel', ctx=Load()), attr='evaluate', ctx=Load()))], decorator_list=[Attribute(value=Name(id='quantum_kernel', ctx=Load()), attr='setter', ctx=Load())], returns=None), FunctionDef(name='_get_param_names', args=arguments(args=[arg(arg='cls', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Assign(targets=[Name(id='names', ctx=Store())], value=Call(func=Attribute(value=Name(id='SVC', ctx=Load()), attr='_get_param_names', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='names', ctx=Load()), attr='remove', ctx=Load()), args=[Str(s='kernel')], keywords=[])), Return(value=Call(func=Name(id='sorted', ctx=Load()), args=[BinOp(left=Name(id='names', ctx=Load()), op=Add(), right=List(elts=[Str(s='quantum_kernel')], ctx=Load()))], keywords=[]))], decorator_list=[Name(id='classmethod', ctx=Load())], returns=None)], decorator_list=[])])
Expr(value=Str(s='Quantum Support Vector Classifier'))
Import(names=[alias(name='warnings', asname=None)])
ImportFrom(module='typing', names=[alias(name='Optional', asname=None)], level=0)
ImportFrom(module='qiskit.utils.algorithm_globals', names=[alias(name='algorithm_globals', asname=None)], level=0)
ImportFrom(module='sklearn.svm', names=[alias(name='SVC', asname=None)], level=0)
ImportFrom(module='qiskit_machine_learning.algorithms.serializable_model', names=[alias(name='SerializableModelMixin', asname=None)], level=0)
ImportFrom(module='qiskit_machine_learning.exceptions', names=[alias(name='QiskitMachineLearningWarning', asname=None)], level=0)
ImportFrom(module='qiskit_machine_learning.kernels.quantum_kernel', names=[alias(name='QuantumKernel', asname=None)], level=0)
ClassDef(name='QSVC', bases=[Name(id='SVC', ctx=Load()), Name(id='SerializableModelMixin', ctx=Load())], keywords=[], body=[Expr(value=Str(s='Quantum Support Vector Classifier.\n\n    This class shows how to use a quantum kernel for classification. The class extends\n    `sklearn.svm.SVC <https://scikit-learn.org/stable/modules/generated/sklearn.svm.SVC.html>`_,\n    and thus inherits its methods like ``fit`` and ``predict`` used in the example below.\n    Read more in the `sklearn user guide\n    <https://scikit-learn.org/stable/modules/svm.html#svm-classification>`_.\n\n    **Example**\n\n    .. code-block::\n\n        qsvc = QSVC(quantum_kernel=qkernel)\n        qsvc.fit(sample_train,label_train)\n        qsvc.predict(sample_test)\n    ')), FunctionDef(name='__init__', args=arguments(args=[arg(arg='self', annotation=None)], vararg=arg(arg='args', annotation=None), kwonlyargs=[arg(arg='quantum_kernel', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Name(id='QuantumKernel', ctx=Load())), ctx=Load()))], kw_defaults=[NameConstant(value=None)], kwarg=arg(arg='kwargs', annotation=None), defaults=[]), body=[Expr(value=Str(s='\n        Args:\n            quantum_kernel: QuantumKernel to be used for classification.\n            *args: Variable length argument list to pass to SVC constructor.\n            **kwargs: Arbitrary keyword arguments to pass to SVC constructor.\n        ')), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='args', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Num(n=0)]), body=[Assign(targets=[Name(id='msg', ctx=Store())], value=JoinedStr(values=[Str(s='Positional arguments ('), FormattedValue(value=Name(id='args', ctx=Load()), conversion=-1, format_spec=None), Str(s=') are deprecated as of version 0.3.0 and will be removed no sooner than 3 months after the release. Instead use keyword arguments.')])), Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='warn', ctx=Load()), args=[Name(id='msg', ctx=Load()), Name(id='DeprecationWarning', ctx=Load())], keywords=[keyword(arg='stacklevel', value=Num(n=2))]))], orelse=[]), If(test=Compare(left=Str(s='kernel'), ops=[In()], comparators=[Name(id='kwargs', ctx=Load())]), body=[Assign(targets=[Name(id='msg', ctx=Store())], value=Str(s="'kernel' argument is not supported and will be discarded, please use 'quantum_kernel' instead.")), Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='warn', ctx=Load()), args=[Name(id='msg', ctx=Load()), Name(id='QiskitMachineLearningWarning', ctx=Load())], keywords=[keyword(arg='stacklevel', value=Num(n=2))])), Delete(targets=[Subscript(value=Name(id='kwargs', ctx=Load()), slice=Index(value=Str(s='kernel')), ctx=Del())])], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_kernel', ctx=Store())], value=IfExp(test=Name(id='quantum_kernel', ctx=Load()), body=Name(id='quantum_kernel', ctx=Load()), orelse=Call(func=Name(id='QuantumKernel', ctx=Load()), args=[], keywords=[]))), If(test=Compare(left=Str(s='random_state'), ops=[NotIn()], comparators=[Name(id='kwargs', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='kwargs', ctx=Load()), slice=Index(value=Str(s='random_state')), ctx=Store())], value=Attribute(value=Name(id='algorithm_globals', ctx=Load()), attr='random_seed', ctx=Load()))], orelse=[]), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(arg='kernel', value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_kernel', ctx=Load()), attr='evaluate', ctx=Load())), keyword(arg=None, value=Name(id='kwargs', ctx=Load()))]))], decorator_list=[], returns=None), FunctionDef(name='quantum_kernel', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Returns quantum kernel')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_kernel', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='QuantumKernel', ctx=Load())), FunctionDef(name='quantum_kernel', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='quantum_kernel', annotation=Name(id='QuantumKernel', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Sets quantum kernel')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_kernel', ctx=Store())], value=Name(id='quantum_kernel', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='kernel', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_kernel', ctx=Load()), attr='evaluate', ctx=Load()))], decorator_list=[Attribute(value=Name(id='quantum_kernel', ctx=Load()), attr='setter', ctx=Load())], returns=None), FunctionDef(name='_get_param_names', args=arguments(args=[arg(arg='cls', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Assign(targets=[Name(id='names', ctx=Store())], value=Call(func=Attribute(value=Name(id='SVC', ctx=Load()), attr='_get_param_names', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='names', ctx=Load()), attr='remove', ctx=Load()), args=[Str(s='kernel')], keywords=[])), Return(value=Call(func=Name(id='sorted', ctx=Load()), args=[BinOp(left=Name(id='names', ctx=Load()), op=Add(), right=List(elts=[Str(s='quantum_kernel')], ctx=Load()))], keywords=[]))], decorator_list=[Name(id='classmethod', ctx=Load())], returns=None)], decorator_list=[])
Str(s='Quantum Support Vector Classifier')
alias(name='warnings', asname=None)
alias(name='Optional', asname=None)
alias(name='algorithm_globals', asname=None)
alias(name='SVC', asname=None)
alias(name='SerializableModelMixin', asname=None)
alias(name='QiskitMachineLearningWarning', asname=None)
alias(name='QuantumKernel', asname=None)
Name(id='SVC', ctx=Load())
Name(id='SerializableModelMixin', ctx=Load())
Expr(value=Str(s='Quantum Support Vector Classifier.\n\n    This class shows how to use a quantum kernel for classification. The class extends\n    `sklearn.svm.SVC <https://scikit-learn.org/stable/modules/generated/sklearn.svm.SVC.html>`_,\n    and thus inherits its methods like ``fit`` and ``predict`` used in the example below.\n    Read more in the `sklearn user guide\n    <https://scikit-learn.org/stable/modules/svm.html#svm-classification>`_.\n\n    **Example**\n\n    .. code-block::\n\n        qsvc = QSVC(quantum_kernel=qkernel)\n        qsvc.fit(sample_train,label_train)\n        qsvc.predict(sample_test)\n    '))
FunctionDef(name='__init__', args=arguments(args=[arg(arg='self', annotation=None)], vararg=arg(arg='args', annotation=None), kwonlyargs=[arg(arg='quantum_kernel', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Name(id='QuantumKernel', ctx=Load())), ctx=Load()))], kw_defaults=[NameConstant(value=None)], kwarg=arg(arg='kwargs', annotation=None), defaults=[]), body=[Expr(value=Str(s='\n        Args:\n            quantum_kernel: QuantumKernel to be used for classification.\n            *args: Variable length argument list to pass to SVC constructor.\n            **kwargs: Arbitrary keyword arguments to pass to SVC constructor.\n        ')), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='args', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Num(n=0)]), body=[Assign(targets=[Name(id='msg', ctx=Store())], value=JoinedStr(values=[Str(s='Positional arguments ('), FormattedValue(value=Name(id='args', ctx=Load()), conversion=-1, format_spec=None), Str(s=') are deprecated as of version 0.3.0 and will be removed no sooner than 3 months after the release. Instead use keyword arguments.')])), Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='warn', ctx=Load()), args=[Name(id='msg', ctx=Load()), Name(id='DeprecationWarning', ctx=Load())], keywords=[keyword(arg='stacklevel', value=Num(n=2))]))], orelse=[]), If(test=Compare(left=Str(s='kernel'), ops=[In()], comparators=[Name(id='kwargs', ctx=Load())]), body=[Assign(targets=[Name(id='msg', ctx=Store())], value=Str(s="'kernel' argument is not supported and will be discarded, please use 'quantum_kernel' instead.")), Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='warn', ctx=Load()), args=[Name(id='msg', ctx=Load()), Name(id='QiskitMachineLearningWarning', ctx=Load())], keywords=[keyword(arg='stacklevel', value=Num(n=2))])), Delete(targets=[Subscript(value=Name(id='kwargs', ctx=Load()), slice=Index(value=Str(s='kernel')), ctx=Del())])], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_kernel', ctx=Store())], value=IfExp(test=Name(id='quantum_kernel', ctx=Load()), body=Name(id='quantum_kernel', ctx=Load()), orelse=Call(func=Name(id='QuantumKernel', ctx=Load()), args=[], keywords=[]))), If(test=Compare(left=Str(s='random_state'), ops=[NotIn()], comparators=[Name(id='kwargs', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='kwargs', ctx=Load()), slice=Index(value=Str(s='random_state')), ctx=Store())], value=Attribute(value=Name(id='algorithm_globals', ctx=Load()), attr='random_seed', ctx=Load()))], orelse=[]), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(arg='kernel', value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_kernel', ctx=Load()), attr='evaluate', ctx=Load())), keyword(arg=None, value=Name(id='kwargs', ctx=Load()))]))], decorator_list=[], returns=None)
FunctionDef(name='quantum_kernel', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Returns quantum kernel')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_kernel', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='QuantumKernel', ctx=Load()))
FunctionDef(name='quantum_kernel', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='quantum_kernel', annotation=Name(id='QuantumKernel', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Sets quantum kernel')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_kernel', ctx=Store())], value=Name(id='quantum_kernel', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='kernel', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_kernel', ctx=Load()), attr='evaluate', ctx=Load()))], decorator_list=[Attribute(value=Name(id='quantum_kernel', ctx=Load()), attr='setter', ctx=Load())], returns=None)
FunctionDef(name='_get_param_names', args=arguments(args=[arg(arg='cls', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Assign(targets=[Name(id='names', ctx=Store())], value=Call(func=Attribute(value=Name(id='SVC', ctx=Load()), attr='_get_param_names', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='names', ctx=Load()), attr='remove', ctx=Load()), args=[Str(s='kernel')], keywords=[])), Return(value=Call(func=Name(id='sorted', ctx=Load()), args=[BinOp(left=Name(id='names', ctx=Load()), op=Add(), right=List(elts=[Str(s='quantum_kernel')], ctx=Load()))], keywords=[]))], decorator_list=[Name(id='classmethod', ctx=Load())], returns=None)
Load()
Load()
Str(s='Quantum Support Vector Classifier.\n\n    This class shows how to use a quantum kernel for classification. The class extends\n    `sklearn.svm.SVC <https://scikit-learn.org/stable/modules/generated/sklearn.svm.SVC.html>`_,\n    and thus inherits its methods like ``fit`` and ``predict`` used in the example below.\n    Read more in the `sklearn user guide\n    <https://scikit-learn.org/stable/modules/svm.html#svm-classification>`_.\n\n    **Example**\n\n    .. code-block::\n\n        qsvc = QSVC(quantum_kernel=qkernel)\n        qsvc.fit(sample_train,label_train)\n        qsvc.predict(sample_test)\n    ')
arguments(args=[arg(arg='self', annotation=None)], vararg=arg(arg='args', annotation=None), kwonlyargs=[arg(arg='quantum_kernel', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Name(id='QuantumKernel', ctx=Load())), ctx=Load()))], kw_defaults=[NameConstant(value=None)], kwarg=arg(arg='kwargs', annotation=None), defaults=[])
Expr(value=Str(s='\n        Args:\n            quantum_kernel: QuantumKernel to be used for classification.\n            *args: Variable length argument list to pass to SVC constructor.\n            **kwargs: Arbitrary keyword arguments to pass to SVC constructor.\n        '))
If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='args', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Num(n=0)]), body=[Assign(targets=[Name(id='msg', ctx=Store())], value=JoinedStr(values=[Str(s='Positional arguments ('), FormattedValue(value=Name(id='args', ctx=Load()), conversion=-1, format_spec=None), Str(s=') are deprecated as of version 0.3.0 and will be removed no sooner than 3 months after the release. Instead use keyword arguments.')])), Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='warn', ctx=Load()), args=[Name(id='msg', ctx=Load()), Name(id='DeprecationWarning', ctx=Load())], keywords=[keyword(arg='stacklevel', value=Num(n=2))]))], orelse=[])
If(test=Compare(left=Str(s='kernel'), ops=[In()], comparators=[Name(id='kwargs', ctx=Load())]), body=[Assign(targets=[Name(id='msg', ctx=Store())], value=Str(s="'kernel' argument is not supported and will be discarded, please use 'quantum_kernel' instead.")), Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='warn', ctx=Load()), args=[Name(id='msg', ctx=Load()), Name(id='QiskitMachineLearningWarning', ctx=Load())], keywords=[keyword(arg='stacklevel', value=Num(n=2))])), Delete(targets=[Subscript(value=Name(id='kwargs', ctx=Load()), slice=Index(value=Str(s='kernel')), ctx=Del())])], orelse=[])
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_kernel', ctx=Store())], value=IfExp(test=Name(id='quantum_kernel', ctx=Load()), body=Name(id='quantum_kernel', ctx=Load()), orelse=Call(func=Name(id='QuantumKernel', ctx=Load()), args=[], keywords=[])))
If(test=Compare(left=Str(s='random_state'), ops=[NotIn()], comparators=[Name(id='kwargs', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='kwargs', ctx=Load()), slice=Index(value=Str(s='random_state')), ctx=Store())], value=Attribute(value=Name(id='algorithm_globals', ctx=Load()), attr='random_seed', ctx=Load()))], orelse=[])
Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(arg='kernel', value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_kernel', ctx=Load()), attr='evaluate', ctx=Load())), keyword(arg=None, value=Name(id='kwargs', ctx=Load()))]))
arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Expr(value=Str(s='Returns quantum kernel'))
Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_kernel', ctx=Load()))
Name(id='property', ctx=Load())
Name(id='QuantumKernel', ctx=Load())
arguments(args=[arg(arg='self', annotation=None), arg(arg='quantum_kernel', annotation=Name(id='QuantumKernel', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Expr(value=Str(s='Sets quantum kernel'))
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_kernel', ctx=Store())], value=Name(id='quantum_kernel', ctx=Load()))
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='kernel', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_kernel', ctx=Load()), attr='evaluate', ctx=Load()))
Attribute(value=Name(id='quantum_kernel', ctx=Load()), attr='setter', ctx=Load())
arguments(args=[arg(arg='cls', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Assign(targets=[Name(id='names', ctx=Store())], value=Call(func=Attribute(value=Name(id='SVC', ctx=Load()), attr='_get_param_names', ctx=Load()), args=[], keywords=[]))
Expr(value=Call(func=Attribute(value=Name(id='names', ctx=Load()), attr='remove', ctx=Load()), args=[Str(s='kernel')], keywords=[]))
Return(value=Call(func=Name(id='sorted', ctx=Load()), args=[BinOp(left=Name(id='names', ctx=Load()), op=Add(), right=List(elts=[Str(s='quantum_kernel')], ctx=Load()))], keywords=[]))
Name(id='classmethod', ctx=Load())
arg(arg='self', annotation=None)
arg(arg='args', annotation=None)
arg(arg='quantum_kernel', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Name(id='QuantumKernel', ctx=Load())), ctx=Load()))
NameConstant(value=None)
arg(arg='kwargs', annotation=None)
Str(s='\n        Args:\n            quantum_kernel: QuantumKernel to be used for classification.\n            *args: Variable length argument list to pass to SVC constructor.\n            **kwargs: Arbitrary keyword arguments to pass to SVC constructor.\n        ')
Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='args', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Num(n=0)])
Assign(targets=[Name(id='msg', ctx=Store())], value=JoinedStr(values=[Str(s='Positional arguments ('), FormattedValue(value=Name(id='args', ctx=Load()), conversion=-1, format_spec=None), Str(s=') are deprecated as of version 0.3.0 and will be removed no sooner than 3 months after the release. Instead use keyword arguments.')]))
Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='warn', ctx=Load()), args=[Name(id='msg', ctx=Load()), Name(id='DeprecationWarning', ctx=Load())], keywords=[keyword(arg='stacklevel', value=Num(n=2))]))
Compare(left=Str(s='kernel'), ops=[In()], comparators=[Name(id='kwargs', ctx=Load())])
Assign(targets=[Name(id='msg', ctx=Store())], value=Str(s="'kernel' argument is not supported and will be discarded, please use 'quantum_kernel' instead."))
Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='warn', ctx=Load()), args=[Name(id='msg', ctx=Load()), Name(id='QiskitMachineLearningWarning', ctx=Load())], keywords=[keyword(arg='stacklevel', value=Num(n=2))]))
Delete(targets=[Subscript(value=Name(id='kwargs', ctx=Load()), slice=Index(value=Str(s='kernel')), ctx=Del())])
Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_kernel', ctx=Store())
IfExp(test=Name(id='quantum_kernel', ctx=Load()), body=Name(id='quantum_kernel', ctx=Load()), orelse=Call(func=Name(id='QuantumKernel', ctx=Load()), args=[], keywords=[]))
Compare(left=Str(s='random_state'), ops=[NotIn()], comparators=[Name(id='kwargs', ctx=Load())])
Assign(targets=[Subscript(value=Name(id='kwargs', ctx=Load()), slice=Index(value=Str(s='random_state')), ctx=Store())], value=Attribute(value=Name(id='algorithm_globals', ctx=Load()), attr='random_seed', ctx=Load()))
Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(arg='kernel', value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_kernel', ctx=Load()), attr='evaluate', ctx=Load())), keyword(arg=None, value=Name(id='kwargs', ctx=Load()))])
arg(arg='self', annotation=None)
Str(s='Returns quantum kernel')
Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_kernel', ctx=Load())
Load()
Load()
arg(arg='self', annotation=None)
arg(arg='quantum_kernel', annotation=Name(id='QuantumKernel', ctx=Load()))
Str(s='Sets quantum kernel')
Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_kernel', ctx=Store())
Name(id='quantum_kernel', ctx=Load())
Attribute(value=Name(id='self', ctx=Load()), attr='kernel', ctx=Store())
Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_kernel', ctx=Load()), attr='evaluate', ctx=Load())
Name(id='quantum_kernel', ctx=Load())
Load()
arg(arg='cls', annotation=None)
Name(id='names', ctx=Store())
Call(func=Attribute(value=Name(id='SVC', ctx=Load()), attr='_get_param_names', ctx=Load()), args=[], keywords=[])
Call(func=Attribute(value=Name(id='names', ctx=Load()), attr='remove', ctx=Load()), args=[Str(s='kernel')], keywords=[])
Call(func=Name(id='sorted', ctx=Load()), args=[BinOp(left=Name(id='names', ctx=Load()), op=Add(), right=List(elts=[Str(s='quantum_kernel')], ctx=Load()))], keywords=[])
Load()
Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Name(id='QuantumKernel', ctx=Load())), ctx=Load())
Call(func=Name(id='len', ctx=Load()), args=[Name(id='args', ctx=Load())], keywords=[])
NotEq()
Num(n=0)
Name(id='msg', ctx=Store())
JoinedStr(values=[Str(s='Positional arguments ('), FormattedValue(value=Name(id='args', ctx=Load()), conversion=-1, format_spec=None), Str(s=') are deprecated as of version 0.3.0 and will be removed no sooner than 3 months after the release. Instead use keyword arguments.')])
Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='warn', ctx=Load()), args=[Name(id='msg', ctx=Load()), Name(id='DeprecationWarning', ctx=Load())], keywords=[keyword(arg='stacklevel', value=Num(n=2))])
Str(s='kernel')
In()
Name(id='kwargs', ctx=Load())
Name(id='msg', ctx=Store())
Str(s="'kernel' argument is not supported and will be discarded, please use 'quantum_kernel' instead.")
Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='warn', ctx=Load()), args=[Name(id='msg', ctx=Load()), Name(id='QiskitMachineLearningWarning', ctx=Load())], keywords=[keyword(arg='stacklevel', value=Num(n=2))])
Subscript(value=Name(id='kwargs', ctx=Load()), slice=Index(value=Str(s='kernel')), ctx=Del())
Name(id='self', ctx=Load())
Store()
Name(id='quantum_kernel', ctx=Load())
Name(id='quantum_kernel', ctx=Load())
Call(func=Name(id='QuantumKernel', ctx=Load()), args=[], keywords=[])
Str(s='random_state')
NotIn()
Name(id='kwargs', ctx=Load())
Subscript(value=Name(id='kwargs', ctx=Load()), slice=Index(value=Str(s='random_state')), ctx=Store())
Attribute(value=Name(id='algorithm_globals', ctx=Load()), attr='random_seed', ctx=Load())
Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load())
Starred(value=Name(id='args', ctx=Load()), ctx=Load())
keyword(arg='kernel', value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_kernel', ctx=Load()), attr='evaluate', ctx=Load()))
keyword(arg=None, value=Name(id='kwargs', ctx=Load()))
Name(id='self', ctx=Load())
Load()
Name(id='QuantumKernel', ctx=Load())
Name(id='self', ctx=Load())
Store()
Load()
Name(id='self', ctx=Load())
Store()
Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_kernel', ctx=Load())
Load()
Load()
Store()
Attribute(value=Name(id='SVC', ctx=Load()), attr='_get_param_names', ctx=Load())
Attribute(value=Name(id='names', ctx=Load()), attr='remove', ctx=Load())
Str(s='kernel')
Name(id='sorted', ctx=Load())
BinOp(left=Name(id='names', ctx=Load()), op=Add(), right=List(elts=[Str(s='quantum_kernel')], ctx=Load()))
Name(id='Optional', ctx=Load())
Index(value=Name(id='QuantumKernel', ctx=Load()))
Load()
Name(id='len', ctx=Load())
Name(id='args', ctx=Load())
Store()
Str(s='Positional arguments (')
FormattedValue(value=Name(id='args', ctx=Load()), conversion=-1, format_spec=None)
Str(s=') are deprecated as of version 0.3.0 and will be removed no sooner than 3 months after the release. Instead use keyword arguments.')
Attribute(value=Name(id='warnings', ctx=Load()), attr='warn', ctx=Load())
Name(id='msg', ctx=Load())
Name(id='DeprecationWarning', ctx=Load())
keyword(arg='stacklevel', value=Num(n=2))
Load()
Store()
Attribute(value=Name(id='warnings', ctx=Load()), attr='warn', ctx=Load())
Name(id='msg', ctx=Load())
Name(id='QiskitMachineLearningWarning', ctx=Load())
keyword(arg='stacklevel', value=Num(n=2))
Name(id='kwargs', ctx=Load())
Index(value=Str(s='kernel'))
Del()
Load()
Load()
Load()
Name(id='QuantumKernel', ctx=Load())
Load()
Name(id='kwargs', ctx=Load())
Index(value=Str(s='random_state'))
Store()
Name(id='algorithm_globals', ctx=Load())
Load()
Call(func=Name(id='super', ctx=Load()), args=[], keywords=[])
Load()
Name(id='args', ctx=Load())
Load()
Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_kernel', ctx=Load()), attr='evaluate', ctx=Load())
Name(id='kwargs', ctx=Load())
Load()
Load()
Load()
Load()
Name(id='self', ctx=Load())
Load()
Name(id='SVC', ctx=Load())
Load()
Name(id='names', ctx=Load())
Load()
Load()
Name(id='names', ctx=Load())
Add()
List(elts=[Str(s='quantum_kernel')], ctx=Load())
Load()
Name(id='QuantumKernel', ctx=Load())
Load()
Load()
Name(id='args', ctx=Load())
Name(id='warnings', ctx=Load())
Load()
Load()
Load()
Num(n=2)
Name(id='warnings', ctx=Load())
Load()
Load()
Load()
Num(n=2)
Load()
Str(s='kernel')
Load()
Load()
Str(s='random_state')
Load()
Name(id='super', ctx=Load())
Load()
Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_kernel', ctx=Load())
Load()
Load()
Load()
Load()
Load()
Load()
Str(s='quantum_kernel')
Load()
Load()
Load()
Load()
Load()
Load()
Name(id='self', ctx=Load())
Load()
Load()
Module(body=[Expr(value=Str(s='Quantum Support Vector Classifier')), Import(names=[alias(name='warnings', asname=None)]), ImportFrom(module='typing', names=[alias(name='Optional', asname=None)], level=0), ImportFrom(module='qiskit.utils.algorithm_globals', names=[alias(name='algorithm_globals', asname=None)], level=0), ImportFrom(module='sklearn.svm', names=[alias(name='SVC', asname=None)], level=0), ImportFrom(module='qiskit_machine_learning.algorithms.serializable_model', names=[alias(name='SerializableModelMixin', asname=None)], level=0), ImportFrom(module='qiskit_machine_learning.exceptions', names=[alias(name='QiskitMachineLearningWarning', asname=None)], level=0), ImportFrom(module='qiskit_machine_learning.kernels.quantum_kernel', names=[alias(name='QuantumKernel', asname=None)], level=0), ClassDef(name='QSVC', bases=[Name(id='SVC', ctx=Load()), Name(id='SerializableModelMixin', ctx=Load())], keywords=[], body=[Expr(value=Str(s='Quantum Support Vector Classifier.\n\n    This class shows how to use a quantum kernel for classification. The class extends\n    `sklearn.svm.SVC <https://scikit-learn.org/stable/modules/generated/sklearn.svm.SVC.html>`_,\n    and thus inherits its methods like ``fit`` and ``predict`` used in the example below.\n    Read more in the `sklearn user guide\n    <https://scikit-learn.org/stable/modules/svm.html#svm-classification>`_.\n\n    **Example**\n\n    .. code-block::\n\n        qsvc = QSVC(quantum_kernel=qkernel)\n        qsvc.fit(sample_train,label_train)\n        qsvc.predict(sample_test)\n    ')), FunctionDef(name='__init__', args=arguments(args=[arg(arg='self', annotation=None)], vararg=arg(arg='args', annotation=None), kwonlyargs=[arg(arg='quantum_kernel', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Name(id='QuantumKernel', ctx=Load())), ctx=Load()))], kw_defaults=[NameConstant(value=None)], kwarg=arg(arg='kwargs', annotation=None), defaults=[]), body=[Expr(value=Str(s='\n        Args:\n            quantum_kernel: QuantumKernel to be used for classification.\n            *args: Variable length argument list to pass to SVC constructor.\n            **kwargs: Arbitrary keyword arguments to pass to SVC constructor.\n        ')), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='args', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Num(n=0)]), body=[Assign(targets=[Name(id='msg', ctx=Store())], value=JoinedStr(values=[Str(s='Positional arguments ('), FormattedValue(value=Name(id='args', ctx=Load()), conversion=-1, format_spec=None), Str(s=') are deprecated as of version 0.3.0 and will be removed no sooner than 3 months after the release. Instead use keyword arguments.')])), Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='warn', ctx=Load()), args=[Name(id='msg', ctx=Load()), Name(id='DeprecationWarning', ctx=Load())], keywords=[keyword(arg='stacklevel', value=Num(n=2))]))], orelse=[]), If(test=Compare(left=Str(s='kernel'), ops=[In()], comparators=[Name(id='kwargs', ctx=Load())]), body=[Assign(targets=[Name(id='msg', ctx=Store())], value=Str(s="'kernel' argument is not supported and will be discarded, please use 'quantum_kernel' instead.")), Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='warn', ctx=Load()), args=[Name(id='msg', ctx=Load()), Name(id='QiskitMachineLearningWarning', ctx=Load())], keywords=[keyword(arg='stacklevel', value=Num(n=2))])), Delete(targets=[Subscript(value=Name(id='kwargs', ctx=Load()), slice=Index(value=Str(s='kernel')), ctx=Del())])], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_kernel', ctx=Store())], value=IfExp(test=Name(id='quantum_kernel', ctx=Load()), body=Name(id='quantum_kernel', ctx=Load()), orelse=Call(func=Name(id='QuantumKernel', ctx=Load()), args=[], keywords=[]))), If(test=Compare(left=Str(s='random_state'), ops=[NotIn()], comparators=[Name(id='kwargs', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='kwargs', ctx=Load()), slice=Index(value=Str(s='random_state')), ctx=Store())], value=Attribute(value=Name(id='algorithm_globals', ctx=Load()), attr='random_seed', ctx=Load()))], orelse=[]), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(arg='kernel', value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_kernel', ctx=Load()), attr='evaluate', ctx=Load())), keyword(arg=None, value=Name(id='kwargs', ctx=Load()))]))], decorator_list=[], returns=None), FunctionDef(name='quantum_kernel', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Returns quantum kernel')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_kernel', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='QuantumKernel', ctx=Load())), FunctionDef(name='quantum_kernel', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='quantum_kernel', annotation=Name(id='QuantumKernel', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Sets quantum kernel')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_kernel', ctx=Store())], value=Name(id='quantum_kernel', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='kernel', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_kernel', ctx=Load()), attr='evaluate', ctx=Load()))], decorator_list=[Attribute(value=Name(id='quantum_kernel', ctx=Load()), attr='setter', ctx=Load())], returns=None), FunctionDef(name='_get_param_names', args=arguments(args=[arg(arg='cls', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Assign(targets=[Name(id='names', ctx=Store())], value=Call(func=Attribute(value=Name(id='SVC', ctx=Load()), attr='_get_param_names', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='names', ctx=Load()), attr='remove', ctx=Load()), args=[Str(s='kernel')], keywords=[])), Return(value=Call(func=Name(id='sorted', ctx=Load()), args=[BinOp(left=Name(id='names', ctx=Load()), op=Add(), right=List(elts=[Str(s='quantum_kernel')], ctx=Load()))], keywords=[]))], decorator_list=[Name(id='classmethod', ctx=Load())], returns=None)], decorator_list=[])])
Expr(value=Str(s='Quantum Support Vector Classifier'))
Import(names=[alias(name='warnings', asname=None)])
ImportFrom(module='typing', names=[alias(name='Optional', asname=None)], level=0)
ImportFrom(module='qiskit.utils.algorithm_globals', names=[alias(name='algorithm_globals', asname=None)], level=0)
ImportFrom(module='sklearn.svm', names=[alias(name='SVC', asname=None)], level=0)
ImportFrom(module='qiskit_machine_learning.algorithms.serializable_model', names=[alias(name='SerializableModelMixin', asname=None)], level=0)
ImportFrom(module='qiskit_machine_learning.exceptions', names=[alias(name='QiskitMachineLearningWarning', asname=None)], level=0)
ImportFrom(module='qiskit_machine_learning.kernels.quantum_kernel', names=[alias(name='QuantumKernel', asname=None)], level=0)
ClassDef(name='QSVC', bases=[Name(id='SVC', ctx=Load()), Name(id='SerializableModelMixin', ctx=Load())], keywords=[], body=[Expr(value=Str(s='Quantum Support Vector Classifier.\n\n    This class shows how to use a quantum kernel for classification. The class extends\n    `sklearn.svm.SVC <https://scikit-learn.org/stable/modules/generated/sklearn.svm.SVC.html>`_,\n    and thus inherits its methods like ``fit`` and ``predict`` used in the example below.\n    Read more in the `sklearn user guide\n    <https://scikit-learn.org/stable/modules/svm.html#svm-classification>`_.\n\n    **Example**\n\n    .. code-block::\n\n        qsvc = QSVC(quantum_kernel=qkernel)\n        qsvc.fit(sample_train,label_train)\n        qsvc.predict(sample_test)\n    ')), FunctionDef(name='__init__', args=arguments(args=[arg(arg='self', annotation=None)], vararg=arg(arg='args', annotation=None), kwonlyargs=[arg(arg='quantum_kernel', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Name(id='QuantumKernel', ctx=Load())), ctx=Load()))], kw_defaults=[NameConstant(value=None)], kwarg=arg(arg='kwargs', annotation=None), defaults=[]), body=[Expr(value=Str(s='\n        Args:\n            quantum_kernel: QuantumKernel to be used for classification.\n            *args: Variable length argument list to pass to SVC constructor.\n            **kwargs: Arbitrary keyword arguments to pass to SVC constructor.\n        ')), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='args', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Num(n=0)]), body=[Assign(targets=[Name(id='msg', ctx=Store())], value=JoinedStr(values=[Str(s='Positional arguments ('), FormattedValue(value=Name(id='args', ctx=Load()), conversion=-1, format_spec=None), Str(s=') are deprecated as of version 0.3.0 and will be removed no sooner than 3 months after the release. Instead use keyword arguments.')])), Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='warn', ctx=Load()), args=[Name(id='msg', ctx=Load()), Name(id='DeprecationWarning', ctx=Load())], keywords=[keyword(arg='stacklevel', value=Num(n=2))]))], orelse=[]), If(test=Compare(left=Str(s='kernel'), ops=[In()], comparators=[Name(id='kwargs', ctx=Load())]), body=[Assign(targets=[Name(id='msg', ctx=Store())], value=Str(s="'kernel' argument is not supported and will be discarded, please use 'quantum_kernel' instead.")), Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='warn', ctx=Load()), args=[Name(id='msg', ctx=Load()), Name(id='QiskitMachineLearningWarning', ctx=Load())], keywords=[keyword(arg='stacklevel', value=Num(n=2))])), Delete(targets=[Subscript(value=Name(id='kwargs', ctx=Load()), slice=Index(value=Str(s='kernel')), ctx=Del())])], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_kernel', ctx=Store())], value=IfExp(test=Name(id='quantum_kernel', ctx=Load()), body=Name(id='quantum_kernel', ctx=Load()), orelse=Call(func=Name(id='QuantumKernel', ctx=Load()), args=[], keywords=[]))), If(test=Compare(left=Str(s='random_state'), ops=[NotIn()], comparators=[Name(id='kwargs', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='kwargs', ctx=Load()), slice=Index(value=Str(s='random_state')), ctx=Store())], value=Attribute(value=Name(id='algorithm_globals', ctx=Load()), attr='random_seed', ctx=Load()))], orelse=[]), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(arg='kernel', value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_kernel', ctx=Load()), attr='evaluate', ctx=Load())), keyword(arg=None, value=Name(id='kwargs', ctx=Load()))]))], decorator_list=[], returns=None), FunctionDef(name='quantum_kernel', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Returns quantum kernel')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_kernel', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='QuantumKernel', ctx=Load())), FunctionDef(name='quantum_kernel', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='quantum_kernel', annotation=Name(id='QuantumKernel', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Sets quantum kernel')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_kernel', ctx=Store())], value=Name(id='quantum_kernel', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='kernel', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_kernel', ctx=Load()), attr='evaluate', ctx=Load()))], decorator_list=[Attribute(value=Name(id='quantum_kernel', ctx=Load()), attr='setter', ctx=Load())], returns=None), FunctionDef(name='_get_param_names', args=arguments(args=[arg(arg='cls', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Assign(targets=[Name(id='names', ctx=Store())], value=Call(func=Attribute(value=Name(id='SVC', ctx=Load()), attr='_get_param_names', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='names', ctx=Load()), attr='remove', ctx=Load()), args=[Str(s='kernel')], keywords=[])), Return(value=Call(func=Name(id='sorted', ctx=Load()), args=[BinOp(left=Name(id='names', ctx=Load()), op=Add(), right=List(elts=[Str(s='quantum_kernel')], ctx=Load()))], keywords=[]))], decorator_list=[Name(id='classmethod', ctx=Load())], returns=None)], decorator_list=[])
Str(s='Quantum Support Vector Classifier')
alias(name='warnings', asname=None)
alias(name='Optional', asname=None)
alias(name='algorithm_globals', asname=None)
alias(name='SVC', asname=None)
alias(name='SerializableModelMixin', asname=None)
alias(name='QiskitMachineLearningWarning', asname=None)
alias(name='QuantumKernel', asname=None)
Name(id='SVC', ctx=Load())
Name(id='SerializableModelMixin', ctx=Load())
Expr(value=Str(s='Quantum Support Vector Classifier.\n\n    This class shows how to use a quantum kernel for classification. The class extends\n    `sklearn.svm.SVC <https://scikit-learn.org/stable/modules/generated/sklearn.svm.SVC.html>`_,\n    and thus inherits its methods like ``fit`` and ``predict`` used in the example below.\n    Read more in the `sklearn user guide\n    <https://scikit-learn.org/stable/modules/svm.html#svm-classification>`_.\n\n    **Example**\n\n    .. code-block::\n\n        qsvc = QSVC(quantum_kernel=qkernel)\n        qsvc.fit(sample_train,label_train)\n        qsvc.predict(sample_test)\n    '))
FunctionDef(name='__init__', args=arguments(args=[arg(arg='self', annotation=None)], vararg=arg(arg='args', annotation=None), kwonlyargs=[arg(arg='quantum_kernel', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Name(id='QuantumKernel', ctx=Load())), ctx=Load()))], kw_defaults=[NameConstant(value=None)], kwarg=arg(arg='kwargs', annotation=None), defaults=[]), body=[Expr(value=Str(s='\n        Args:\n            quantum_kernel: QuantumKernel to be used for classification.\n            *args: Variable length argument list to pass to SVC constructor.\n            **kwargs: Arbitrary keyword arguments to pass to SVC constructor.\n        ')), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='args', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Num(n=0)]), body=[Assign(targets=[Name(id='msg', ctx=Store())], value=JoinedStr(values=[Str(s='Positional arguments ('), FormattedValue(value=Name(id='args', ctx=Load()), conversion=-1, format_spec=None), Str(s=') are deprecated as of version 0.3.0 and will be removed no sooner than 3 months after the release. Instead use keyword arguments.')])), Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='warn', ctx=Load()), args=[Name(id='msg', ctx=Load()), Name(id='DeprecationWarning', ctx=Load())], keywords=[keyword(arg='stacklevel', value=Num(n=2))]))], orelse=[]), If(test=Compare(left=Str(s='kernel'), ops=[In()], comparators=[Name(id='kwargs', ctx=Load())]), body=[Assign(targets=[Name(id='msg', ctx=Store())], value=Str(s="'kernel' argument is not supported and will be discarded, please use 'quantum_kernel' instead.")), Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='warn', ctx=Load()), args=[Name(id='msg', ctx=Load()), Name(id='QiskitMachineLearningWarning', ctx=Load())], keywords=[keyword(arg='stacklevel', value=Num(n=2))])), Delete(targets=[Subscript(value=Name(id='kwargs', ctx=Load()), slice=Index(value=Str(s='kernel')), ctx=Del())])], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_kernel', ctx=Store())], value=IfExp(test=Name(id='quantum_kernel', ctx=Load()), body=Name(id='quantum_kernel', ctx=Load()), orelse=Call(func=Name(id='QuantumKernel', ctx=Load()), args=[], keywords=[]))), If(test=Compare(left=Str(s='random_state'), ops=[NotIn()], comparators=[Name(id='kwargs', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='kwargs', ctx=Load()), slice=Index(value=Str(s='random_state')), ctx=Store())], value=Attribute(value=Name(id='algorithm_globals', ctx=Load()), attr='random_seed', ctx=Load()))], orelse=[]), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(arg='kernel', value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_kernel', ctx=Load()), attr='evaluate', ctx=Load())), keyword(arg=None, value=Name(id='kwargs', ctx=Load()))]))], decorator_list=[], returns=None)
FunctionDef(name='quantum_kernel', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Returns quantum kernel')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_kernel', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='QuantumKernel', ctx=Load()))
FunctionDef(name='quantum_kernel', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='quantum_kernel', annotation=Name(id='QuantumKernel', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Sets quantum kernel')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_kernel', ctx=Store())], value=Name(id='quantum_kernel', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='kernel', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_kernel', ctx=Load()), attr='evaluate', ctx=Load()))], decorator_list=[Attribute(value=Name(id='quantum_kernel', ctx=Load()), attr='setter', ctx=Load())], returns=None)
FunctionDef(name='_get_param_names', args=arguments(args=[arg(arg='cls', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Assign(targets=[Name(id='names', ctx=Store())], value=Call(func=Attribute(value=Name(id='SVC', ctx=Load()), attr='_get_param_names', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='names', ctx=Load()), attr='remove', ctx=Load()), args=[Str(s='kernel')], keywords=[])), Return(value=Call(func=Name(id='sorted', ctx=Load()), args=[BinOp(left=Name(id='names', ctx=Load()), op=Add(), right=List(elts=[Str(s='quantum_kernel')], ctx=Load()))], keywords=[]))], decorator_list=[Name(id='classmethod', ctx=Load())], returns=None)
Load()
Load()
Str(s='Quantum Support Vector Classifier.\n\n    This class shows how to use a quantum kernel for classification. The class extends\n    `sklearn.svm.SVC <https://scikit-learn.org/stable/modules/generated/sklearn.svm.SVC.html>`_,\n    and thus inherits its methods like ``fit`` and ``predict`` used in the example below.\n    Read more in the `sklearn user guide\n    <https://scikit-learn.org/stable/modules/svm.html#svm-classification>`_.\n\n    **Example**\n\n    .. code-block::\n\n        qsvc = QSVC(quantum_kernel=qkernel)\n        qsvc.fit(sample_train,label_train)\n        qsvc.predict(sample_test)\n    ')
arguments(args=[arg(arg='self', annotation=None)], vararg=arg(arg='args', annotation=None), kwonlyargs=[arg(arg='quantum_kernel', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Name(id='QuantumKernel', ctx=Load())), ctx=Load()))], kw_defaults=[NameConstant(value=None)], kwarg=arg(arg='kwargs', annotation=None), defaults=[])
Expr(value=Str(s='\n        Args:\n            quantum_kernel: QuantumKernel to be used for classification.\n            *args: Variable length argument list to pass to SVC constructor.\n            **kwargs: Arbitrary keyword arguments to pass to SVC constructor.\n        '))
If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='args', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Num(n=0)]), body=[Assign(targets=[Name(id='msg', ctx=Store())], value=JoinedStr(values=[Str(s='Positional arguments ('), FormattedValue(value=Name(id='args', ctx=Load()), conversion=-1, format_spec=None), Str(s=') are deprecated as of version 0.3.0 and will be removed no sooner than 3 months after the release. Instead use keyword arguments.')])), Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='warn', ctx=Load()), args=[Name(id='msg', ctx=Load()), Name(id='DeprecationWarning', ctx=Load())], keywords=[keyword(arg='stacklevel', value=Num(n=2))]))], orelse=[])
If(test=Compare(left=Str(s='kernel'), ops=[In()], comparators=[Name(id='kwargs', ctx=Load())]), body=[Assign(targets=[Name(id='msg', ctx=Store())], value=Str(s="'kernel' argument is not supported and will be discarded, please use 'quantum_kernel' instead.")), Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='warn', ctx=Load()), args=[Name(id='msg', ctx=Load()), Name(id='QiskitMachineLearningWarning', ctx=Load())], keywords=[keyword(arg='stacklevel', value=Num(n=2))])), Delete(targets=[Subscript(value=Name(id='kwargs', ctx=Load()), slice=Index(value=Str(s='kernel')), ctx=Del())])], orelse=[])
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_kernel', ctx=Store())], value=IfExp(test=Name(id='quantum_kernel', ctx=Load()), body=Name(id='quantum_kernel', ctx=Load()), orelse=Call(func=Name(id='QuantumKernel', ctx=Load()), args=[], keywords=[])))
If(test=Compare(left=Str(s='random_state'), ops=[NotIn()], comparators=[Name(id='kwargs', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='kwargs', ctx=Load()), slice=Index(value=Str(s='random_state')), ctx=Store())], value=Attribute(value=Name(id='algorithm_globals', ctx=Load()), attr='random_seed', ctx=Load()))], orelse=[])
Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(arg='kernel', value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_kernel', ctx=Load()), attr='evaluate', ctx=Load())), keyword(arg=None, value=Name(id='kwargs', ctx=Load()))]))
arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Expr(value=Str(s='Returns quantum kernel'))
Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_kernel', ctx=Load()))
Name(id='property', ctx=Load())
Name(id='QuantumKernel', ctx=Load())
arguments(args=[arg(arg='self', annotation=None), arg(arg='quantum_kernel', annotation=Name(id='QuantumKernel', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Expr(value=Str(s='Sets quantum kernel'))
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_kernel', ctx=Store())], value=Name(id='quantum_kernel', ctx=Load()))
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='kernel', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_kernel', ctx=Load()), attr='evaluate', ctx=Load()))
Attribute(value=Name(id='quantum_kernel', ctx=Load()), attr='setter', ctx=Load())
arguments(args=[arg(arg='cls', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Assign(targets=[Name(id='names', ctx=Store())], value=Call(func=Attribute(value=Name(id='SVC', ctx=Load()), attr='_get_param_names', ctx=Load()), args=[], keywords=[]))
Expr(value=Call(func=Attribute(value=Name(id='names', ctx=Load()), attr='remove', ctx=Load()), args=[Str(s='kernel')], keywords=[]))
Return(value=Call(func=Name(id='sorted', ctx=Load()), args=[BinOp(left=Name(id='names', ctx=Load()), op=Add(), right=List(elts=[Str(s='quantum_kernel')], ctx=Load()))], keywords=[]))
Name(id='classmethod', ctx=Load())
arg(arg='self', annotation=None)
arg(arg='args', annotation=None)
arg(arg='quantum_kernel', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Name(id='QuantumKernel', ctx=Load())), ctx=Load()))
NameConstant(value=None)
arg(arg='kwargs', annotation=None)
Str(s='\n        Args:\n            quantum_kernel: QuantumKernel to be used for classification.\n            *args: Variable length argument list to pass to SVC constructor.\n            **kwargs: Arbitrary keyword arguments to pass to SVC constructor.\n        ')
Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='args', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Num(n=0)])
Assign(targets=[Name(id='msg', ctx=Store())], value=JoinedStr(values=[Str(s='Positional arguments ('), FormattedValue(value=Name(id='args', ctx=Load()), conversion=-1, format_spec=None), Str(s=') are deprecated as of version 0.3.0 and will be removed no sooner than 3 months after the release. Instead use keyword arguments.')]))
Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='warn', ctx=Load()), args=[Name(id='msg', ctx=Load()), Name(id='DeprecationWarning', ctx=Load())], keywords=[keyword(arg='stacklevel', value=Num(n=2))]))
Compare(left=Str(s='kernel'), ops=[In()], comparators=[Name(id='kwargs', ctx=Load())])
Assign(targets=[Name(id='msg', ctx=Store())], value=Str(s="'kernel' argument is not supported and will be discarded, please use 'quantum_kernel' instead."))
Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='warn', ctx=Load()), args=[Name(id='msg', ctx=Load()), Name(id='QiskitMachineLearningWarning', ctx=Load())], keywords=[keyword(arg='stacklevel', value=Num(n=2))]))
Delete(targets=[Subscript(value=Name(id='kwargs', ctx=Load()), slice=Index(value=Str(s='kernel')), ctx=Del())])
Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_kernel', ctx=Store())
IfExp(test=Name(id='quantum_kernel', ctx=Load()), body=Name(id='quantum_kernel', ctx=Load()), orelse=Call(func=Name(id='QuantumKernel', ctx=Load()), args=[], keywords=[]))
Compare(left=Str(s='random_state'), ops=[NotIn()], comparators=[Name(id='kwargs', ctx=Load())])
Assign(targets=[Subscript(value=Name(id='kwargs', ctx=Load()), slice=Index(value=Str(s='random_state')), ctx=Store())], value=Attribute(value=Name(id='algorithm_globals', ctx=Load()), attr='random_seed', ctx=Load()))
Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(arg='kernel', value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_kernel', ctx=Load()), attr='evaluate', ctx=Load())), keyword(arg=None, value=Name(id='kwargs', ctx=Load()))])
arg(arg='self', annotation=None)
Str(s='Returns quantum kernel')
Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_kernel', ctx=Load())
Load()
Load()
arg(arg='self', annotation=None)
arg(arg='quantum_kernel', annotation=Name(id='QuantumKernel', ctx=Load()))
Str(s='Sets quantum kernel')
Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_kernel', ctx=Store())
Name(id='quantum_kernel', ctx=Load())
Attribute(value=Name(id='self', ctx=Load()), attr='kernel', ctx=Store())
Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_kernel', ctx=Load()), attr='evaluate', ctx=Load())
Name(id='quantum_kernel', ctx=Load())
Load()
arg(arg='cls', annotation=None)
Name(id='names', ctx=Store())
Call(func=Attribute(value=Name(id='SVC', ctx=Load()), attr='_get_param_names', ctx=Load()), args=[], keywords=[])
Call(func=Attribute(value=Name(id='names', ctx=Load()), attr='remove', ctx=Load()), args=[Str(s='kernel')], keywords=[])
Call(func=Name(id='sorted', ctx=Load()), args=[BinOp(left=Name(id='names', ctx=Load()), op=Add(), right=List(elts=[Str(s='quantum_kernel')], ctx=Load()))], keywords=[])
Load()
Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Name(id='QuantumKernel', ctx=Load())), ctx=Load())
Call(func=Name(id='len', ctx=Load()), args=[Name(id='args', ctx=Load())], keywords=[])
NotEq()
Num(n=0)
Name(id='msg', ctx=Store())
JoinedStr(values=[Str(s='Positional arguments ('), FormattedValue(value=Name(id='args', ctx=Load()), conversion=-1, format_spec=None), Str(s=') are deprecated as of version 0.3.0 and will be removed no sooner than 3 months after the release. Instead use keyword arguments.')])
Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='warn', ctx=Load()), args=[Name(id='msg', ctx=Load()), Name(id='DeprecationWarning', ctx=Load())], keywords=[keyword(arg='stacklevel', value=Num(n=2))])
Str(s='kernel')
In()
Name(id='kwargs', ctx=Load())
Name(id='msg', ctx=Store())
Str(s="'kernel' argument is not supported and will be discarded, please use 'quantum_kernel' instead.")
Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='warn', ctx=Load()), args=[Name(id='msg', ctx=Load()), Name(id='QiskitMachineLearningWarning', ctx=Load())], keywords=[keyword(arg='stacklevel', value=Num(n=2))])
Subscript(value=Name(id='kwargs', ctx=Load()), slice=Index(value=Str(s='kernel')), ctx=Del())
Name(id='self', ctx=Load())
Store()
Name(id='quantum_kernel', ctx=Load())
Name(id='quantum_kernel', ctx=Load())
Call(func=Name(id='QuantumKernel', ctx=Load()), args=[], keywords=[])
Str(s='random_state')
NotIn()
Name(id='kwargs', ctx=Load())
Subscript(value=Name(id='kwargs', ctx=Load()), slice=Index(value=Str(s='random_state')), ctx=Store())
Attribute(value=Name(id='algorithm_globals', ctx=Load()), attr='random_seed', ctx=Load())
Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load())
Starred(value=Name(id='args', ctx=Load()), ctx=Load())
keyword(arg='kernel', value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_kernel', ctx=Load()), attr='evaluate', ctx=Load()))
keyword(arg=None, value=Name(id='kwargs', ctx=Load()))
Name(id='self', ctx=Load())
Load()
Name(id='QuantumKernel', ctx=Load())
Name(id='self', ctx=Load())
Store()
Load()
Name(id='self', ctx=Load())
Store()
Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_kernel', ctx=Load())
Load()
Load()
Store()
Attribute(value=Name(id='SVC', ctx=Load()), attr='_get_param_names', ctx=Load())
Attribute(value=Name(id='names', ctx=Load()), attr='remove', ctx=Load())
Str(s='kernel')
Name(id='sorted', ctx=Load())
BinOp(left=Name(id='names', ctx=Load()), op=Add(), right=List(elts=[Str(s='quantum_kernel')], ctx=Load()))
Name(id='Optional', ctx=Load())
Index(value=Name(id='QuantumKernel', ctx=Load()))
Load()
Name(id='len', ctx=Load())
Name(id='args', ctx=Load())
Store()
Str(s='Positional arguments (')
FormattedValue(value=Name(id='args', ctx=Load()), conversion=-1, format_spec=None)
Str(s=') are deprecated as of version 0.3.0 and will be removed no sooner than 3 months after the release. Instead use keyword arguments.')
Attribute(value=Name(id='warnings', ctx=Load()), attr='warn', ctx=Load())
Name(id='msg', ctx=Load())
Name(id='DeprecationWarning', ctx=Load())
keyword(arg='stacklevel', value=Num(n=2))
Load()
Store()
Attribute(value=Name(id='warnings', ctx=Load()), attr='warn', ctx=Load())
Name(id='msg', ctx=Load())
Name(id='QiskitMachineLearningWarning', ctx=Load())
keyword(arg='stacklevel', value=Num(n=2))
Name(id='kwargs', ctx=Load())
Index(value=Str(s='kernel'))
Del()
Load()
Load()
Load()
Name(id='QuantumKernel', ctx=Load())
Load()
Name(id='kwargs', ctx=Load())
Index(value=Str(s='random_state'))
Store()
Name(id='algorithm_globals', ctx=Load())
Load()
Call(func=Name(id='super', ctx=Load()), args=[], keywords=[])
Load()
Name(id='args', ctx=Load())
Load()
Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_kernel', ctx=Load()), attr='evaluate', ctx=Load())
Name(id='kwargs', ctx=Load())
Load()
Load()
Load()
Load()
Name(id='self', ctx=Load())
Load()
Name(id='SVC', ctx=Load())
Load()
Name(id='names', ctx=Load())
Load()
Load()
Name(id='names', ctx=Load())
Add()
List(elts=[Str(s='quantum_kernel')], ctx=Load())
Load()
Name(id='QuantumKernel', ctx=Load())
Load()
Load()
Name(id='args', ctx=Load())
Name(id='warnings', ctx=Load())
Load()
Load()
Load()
Num(n=2)
Name(id='warnings', ctx=Load())
Load()
Load()
Load()
Num(n=2)
Load()
Str(s='kernel')
Load()
Load()
Str(s='random_state')
Load()
Name(id='super', ctx=Load())
Load()
Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_kernel', ctx=Load())
Load()
Load()
Load()
Load()
Load()
Load()
Str(s='quantum_kernel')
Load()
Load()
Load()
Load()
Load()
Load()
Name(id='self', ctx=Load())
Load()
Load()
  metric  value
0     NC      0
DONE!
