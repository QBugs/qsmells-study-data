Python 3.7.8
Module(body=[Expr(value=Str(s=' The Quantum Approximate Optimization Algorithm. ')), ImportFrom(module='typing', names=[alias(name='List', asname=None), alias(name='Callable', asname=None), alias(name='Optional', asname=None), alias(name='Union', asname=None)], level=0), Import(names=[alias(name='numpy', asname='np')]), ImportFrom(module='qiskit.algorithms.optimizers', names=[alias(name='Minimizer', asname=None), alias(name='Optimizer', asname=None)], level=0), ImportFrom(module='qiskit.circuit', names=[alias(name='QuantumCircuit', asname=None)], level=0), ImportFrom(module='qiskit.opflow', names=[alias(name='OperatorBase', asname=None), alias(name='ExpectationBase', asname=None)], level=0), ImportFrom(module='qiskit.opflow.gradients', names=[alias(name='GradientBase', asname=None)], level=0), ImportFrom(module='qiskit.providers', names=[alias(name='Backend', asname=None)], level=0), ImportFrom(module='qiskit.utils.quantum_instance', names=[alias(name='QuantumInstance', asname=None)], level=0), ImportFrom(module='qiskit.utils.validation', names=[alias(name='validate_min', asname=None)], level=0), ImportFrom(module='qiskit.circuit.library.n_local.qaoa_ansatz', names=[alias(name='QAOAAnsatz', asname=None)], level=0), ImportFrom(module='qiskit.algorithms.minimum_eigen_solvers.vqe', names=[alias(name='VQE', asname=None)], level=0), ClassDef(name='QAOA', bases=[Name(id='VQE', ctx=Load())], keywords=[], body=[Expr(value=Str(s="\n    The Quantum Approximate Optimization Algorithm.\n\n    `QAOA <https://arxiv.org/abs/1411.4028>`__ is a well-known algorithm for finding approximate\n    solutions to combinatorial-optimization problems.\n\n    The QAOA implementation directly extends :class:`VQE` and inherits VQE's optimization structure.\n    However, unlike VQE, which can be configured with arbitrary ansatzes,\n    QAOA uses its own fine-tuned ansatz, which comprises :math:`p` parameterized global\n    :math:`x` rotations and :math:`p` different parameterizations of the problem hamiltonian.\n    QAOA is thus principally configured  by the single integer parameter, *p*,\n    which dictates the depth of the ansatz, and thus affects the approximation quality.\n\n    An optional array of :math:`2p` parameter values, as the *initial_point*, may be provided as the\n    starting **beta** and **gamma** parameters (as identically named in the\n    original `QAOA paper <https://arxiv.org/abs/1411.4028>`__) for the QAOA ansatz.\n\n    An operator or a parameterized quantum circuit may optionally also be provided as a custom\n    `mixer` Hamiltonian. This allows, as discussed in\n    `this paper <https://doi.org/10.1103/PhysRevApplied.5.034007>`__ for quantum annealing,\n    and in `this paper <https://arxiv.org/abs/1709.03489>`__ for QAOA,\n    to run constrained optimization problems where the mixer constrains\n    the evolution to a feasible subspace of the full Hilbert space.\n    ")), FunctionDef(name='__init__', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='optimizer', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='Optimizer', ctx=Load()), Name(id='Minimizer', ctx=Load())], ctx=Load())), ctx=Load())), ctx=Load())), arg(arg='reps', annotation=Name(id='int', ctx=Load())), arg(arg='initial_state', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Name(id='QuantumCircuit', ctx=Load())), ctx=Load())), arg(arg='mixer', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='QuantumCircuit', ctx=Load()), Name(id='OperatorBase', ctx=Load())], ctx=Load())), ctx=Load())), arg(arg='initial_point', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), ctx=Load())), arg(arg='gradient', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='GradientBase', ctx=Load()), Subscript(value=Name(id='Callable', ctx=Load()), slice=Index(value=Tuple(elts=[List(elts=[Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Name(id='List', ctx=Load())], ctx=Load())), ctx=Load())], ctx=Load()), Name(id='List', ctx=Load())], ctx=Load())), ctx=Load())], ctx=Load())), ctx=Load())), ctx=Load())), arg(arg='expectation', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Name(id='ExpectationBase', ctx=Load())), ctx=Load())), arg(arg='include_custom', annotation=Name(id='bool', ctx=Load())), arg(arg='max_evals_grouped', annotation=Name(id='int', ctx=Load())), arg(arg='callback', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Subscript(value=Name(id='Callable', ctx=Load()), slice=Index(value=Tuple(elts=[List(elts=[Name(id='int', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Name(id='float', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load()), NameConstant(value=None)], ctx=Load())), ctx=Load())), ctx=Load())), arg(arg='quantum_instance', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='QuantumInstance', ctx=Load()), Name(id='Backend', ctx=Load())], ctx=Load())), ctx=Load())), ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[NameConstant(value=None), Num(n=1), NameConstant(value=None), NameConstant(value=None), NameConstant(value=None), NameConstant(value=None), NameConstant(value=None), NameConstant(value=False), Num(n=1), NameConstant(value=None), NameConstant(value=None)]), body=[Expr(value=Str(s='\n        Args:\n            optimizer: A classical optimizer, see also :class:`~qiskit.algorithms.VQE` for\n                more details on the possible types.\n            reps: the integer parameter :math:`p` as specified in https://arxiv.org/abs/1411.4028,\n                Has a minimum valid value of 1.\n            initial_state: An optional initial state to prepend the QAOA circuit with\n            mixer: the mixer Hamiltonian to evolve with or a custom quantum circuit. Allows support\n                of optimizations in constrained subspaces as per https://arxiv.org/abs/1709.03489\n                as well as warm-starting the optimization as introduced\n                in http://arxiv.org/abs/2009.10095.\n            initial_point: An optional initial point (i.e. initial parameter values)\n                for the optimizer. If ``None`` then it will simply compute a random one.\n            gradient: An optional gradient operator respectively a gradient function used for\n                      optimization.\n            expectation: The Expectation converter for taking the average value of the\n                Observable over the ansatz state function. When None (the default) an\n                :class:`~qiskit.opflow.expectations.ExpectationFactory` is used to select\n                an appropriate expectation based on the operator and backend. When using Aer\n                qasm_simulator backend, with paulis, it is however much faster to leverage custom\n                Aer function for the computation but, although VQE performs much faster\n                with it, the outcome is ideal, with no shot noise, like using a state vector\n                simulator. If you are just looking for the quickest performance when choosing Aer\n                qasm_simulator and the lack of shot noise is not an issue then set `include_custom`\n                parameter here to True (defaults to False).\n            include_custom: When `expectation` parameter here is None setting this to True will\n                allow the factory to include the custom Aer pauli expectation.\n            max_evals_grouped: Max number of evaluations performed simultaneously. Signals the\n                given optimizer that more than one set of parameters can be supplied so that\n                potentially the expectation values can be computed in parallel. Typically this is\n                possible when a finite difference gradient is used by the optimizer such that\n                multiple points to compute the gradient can be passed and if computed in parallel\n                improve overall execution time. Ignored if a gradient operator or function is\n                given.\n            callback: a callback that can access the intermediate data during the optimization.\n                Four parameter values are passed to the callback as follows during each evaluation\n                by the optimizer for its current set of parameters as it works towards the minimum.\n                These are: the evaluation count, the optimizer parameters for the\n                ansatz, the evaluated mean and the evaluated standard deviation.\n            quantum_instance: Quantum Instance or Backend\n        ')), Expr(value=Call(func=Name(id='validate_min', ctx=Load()), args=[Str(s='reps'), Name(id='reps', ctx=Load()), Num(n=1)], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_reps', ctx=Store())], value=Name(id='reps', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_mixer', ctx=Store())], value=Name(id='mixer', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_initial_state', ctx=Store())], value=Name(id='initial_state', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_cost_operator', ctx=Store())], value=NameConstant(value=None)), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[keyword(arg='ansatz', value=NameConstant(value=None)), keyword(arg='optimizer', value=Name(id='optimizer', ctx=Load())), keyword(arg='initial_point', value=Name(id='initial_point', ctx=Load())), keyword(arg='gradient', value=Name(id='gradient', ctx=Load())), keyword(arg='expectation', value=Name(id='expectation', ctx=Load())), keyword(arg='include_custom', value=Name(id='include_custom', ctx=Load())), keyword(arg='max_evals_grouped', value=Name(id='max_evals_grouped', ctx=Load())), keyword(arg='callback', value=Name(id='callback', ctx=Load())), keyword(arg='quantum_instance', value=Name(id='quantum_instance', ctx=Load()))]))], decorator_list=[], returns=NameConstant(value=None)), FunctionDef(name='_check_operator_ansatz', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='operator', annotation=Name(id='OperatorBase', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[If(test=Compare(left=Name(id='operator', ctx=Load()), ops=[NotEq()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='_cost_operator', ctx=Load())]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_cost_operator', ctx=Store())], value=Name(id='operator', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='ansatz', ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id='QAOAAnsatz', ctx=Load()), args=[Name(id='operator', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_reps', ctx=Load())], keywords=[keyword(arg='initial_state', value=Attribute(value=Name(id='self', ctx=Load()), attr='_initial_state', ctx=Load())), keyword(arg='mixer_operator', value=Attribute(value=Name(id='self', ctx=Load()), attr='_mixer', ctx=Load()))]), attr='decompose', ctx=Load()), args=[], keywords=[]))], orelse=[])], decorator_list=[], returns=Name(id='OperatorBase', ctx=Load())), FunctionDef(name='initial_state', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='\n        Returns:\n            Returns the initial state.\n        ')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_initial_state', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Name(id='QuantumCircuit', ctx=Load())), ctx=Load())), FunctionDef(name='initial_state', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='initial_state', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Name(id='QuantumCircuit', ctx=Load())), ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='\n        Args:\n            initial_state: Initial state to set.\n        ')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_initial_state', ctx=Store())], value=Name(id='initial_state', ctx=Load()))], decorator_list=[Attribute(value=Name(id='initial_state', ctx=Load()), attr='setter', ctx=Load())], returns=NameConstant(value=None)), FunctionDef(name='mixer', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='\n        Returns:\n            Returns the mixer.\n        ')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_mixer', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='QuantumCircuit', ctx=Load()), Name(id='OperatorBase', ctx=Load())], ctx=Load())), ctx=Load())), FunctionDef(name='mixer', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='mixer', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='QuantumCircuit', ctx=Load()), Name(id='OperatorBase', ctx=Load())], ctx=Load())), ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='\n        Args:\n            mixer: Mixer to set.\n        ')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_mixer', ctx=Store())], value=Name(id='mixer', ctx=Load()))], decorator_list=[Attribute(value=Name(id='mixer', ctx=Load()), attr='setter', ctx=Load())], returns=NameConstant(value=None))], decorator_list=[])])
Expr(value=Str(s=' The Quantum Approximate Optimization Algorithm. '))
ImportFrom(module='typing', names=[alias(name='List', asname=None), alias(name='Callable', asname=None), alias(name='Optional', asname=None), alias(name='Union', asname=None)], level=0)
Import(names=[alias(name='numpy', asname='np')])
ImportFrom(module='qiskit.algorithms.optimizers', names=[alias(name='Minimizer', asname=None), alias(name='Optimizer', asname=None)], level=0)
ImportFrom(module='qiskit.circuit', names=[alias(name='QuantumCircuit', asname=None)], level=0)
ImportFrom(module='qiskit.opflow', names=[alias(name='OperatorBase', asname=None), alias(name='ExpectationBase', asname=None)], level=0)
ImportFrom(module='qiskit.opflow.gradients', names=[alias(name='GradientBase', asname=None)], level=0)
ImportFrom(module='qiskit.providers', names=[alias(name='Backend', asname=None)], level=0)
ImportFrom(module='qiskit.utils.quantum_instance', names=[alias(name='QuantumInstance', asname=None)], level=0)
ImportFrom(module='qiskit.utils.validation', names=[alias(name='validate_min', asname=None)], level=0)
ImportFrom(module='qiskit.circuit.library.n_local.qaoa_ansatz', names=[alias(name='QAOAAnsatz', asname=None)], level=0)
ImportFrom(module='qiskit.algorithms.minimum_eigen_solvers.vqe', names=[alias(name='VQE', asname=None)], level=0)
ClassDef(name='QAOA', bases=[Name(id='VQE', ctx=Load())], keywords=[], body=[Expr(value=Str(s="\n    The Quantum Approximate Optimization Algorithm.\n\n    `QAOA <https://arxiv.org/abs/1411.4028>`__ is a well-known algorithm for finding approximate\n    solutions to combinatorial-optimization problems.\n\n    The QAOA implementation directly extends :class:`VQE` and inherits VQE's optimization structure.\n    However, unlike VQE, which can be configured with arbitrary ansatzes,\n    QAOA uses its own fine-tuned ansatz, which comprises :math:`p` parameterized global\n    :math:`x` rotations and :math:`p` different parameterizations of the problem hamiltonian.\n    QAOA is thus principally configured  by the single integer parameter, *p*,\n    which dictates the depth of the ansatz, and thus affects the approximation quality.\n\n    An optional array of :math:`2p` parameter values, as the *initial_point*, may be provided as the\n    starting **beta** and **gamma** parameters (as identically named in the\n    original `QAOA paper <https://arxiv.org/abs/1411.4028>`__) for the QAOA ansatz.\n\n    An operator or a parameterized quantum circuit may optionally also be provided as a custom\n    `mixer` Hamiltonian. This allows, as discussed in\n    `this paper <https://doi.org/10.1103/PhysRevApplied.5.034007>`__ for quantum annealing,\n    and in `this paper <https://arxiv.org/abs/1709.03489>`__ for QAOA,\n    to run constrained optimization problems where the mixer constrains\n    the evolution to a feasible subspace of the full Hilbert space.\n    ")), FunctionDef(name='__init__', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='optimizer', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='Optimizer', ctx=Load()), Name(id='Minimizer', ctx=Load())], ctx=Load())), ctx=Load())), ctx=Load())), arg(arg='reps', annotation=Name(id='int', ctx=Load())), arg(arg='initial_state', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Name(id='QuantumCircuit', ctx=Load())), ctx=Load())), arg(arg='mixer', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='QuantumCircuit', ctx=Load()), Name(id='OperatorBase', ctx=Load())], ctx=Load())), ctx=Load())), arg(arg='initial_point', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), ctx=Load())), arg(arg='gradient', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='GradientBase', ctx=Load()), Subscript(value=Name(id='Callable', ctx=Load()), slice=Index(value=Tuple(elts=[List(elts=[Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Name(id='List', ctx=Load())], ctx=Load())), ctx=Load())], ctx=Load()), Name(id='List', ctx=Load())], ctx=Load())), ctx=Load())], ctx=Load())), ctx=Load())), ctx=Load())), arg(arg='expectation', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Name(id='ExpectationBase', ctx=Load())), ctx=Load())), arg(arg='include_custom', annotation=Name(id='bool', ctx=Load())), arg(arg='max_evals_grouped', annotation=Name(id='int', ctx=Load())), arg(arg='callback', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Subscript(value=Name(id='Callable', ctx=Load()), slice=Index(value=Tuple(elts=[List(elts=[Name(id='int', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Name(id='float', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load()), NameConstant(value=None)], ctx=Load())), ctx=Load())), ctx=Load())), arg(arg='quantum_instance', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='QuantumInstance', ctx=Load()), Name(id='Backend', ctx=Load())], ctx=Load())), ctx=Load())), ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[NameConstant(value=None), Num(n=1), NameConstant(value=None), NameConstant(value=None), NameConstant(value=None), NameConstant(value=None), NameConstant(value=None), NameConstant(value=False), Num(n=1), NameConstant(value=None), NameConstant(value=None)]), body=[Expr(value=Str(s='\n        Args:\n            optimizer: A classical optimizer, see also :class:`~qiskit.algorithms.VQE` for\n                more details on the possible types.\n            reps: the integer parameter :math:`p` as specified in https://arxiv.org/abs/1411.4028,\n                Has a minimum valid value of 1.\n            initial_state: An optional initial state to prepend the QAOA circuit with\n            mixer: the mixer Hamiltonian to evolve with or a custom quantum circuit. Allows support\n                of optimizations in constrained subspaces as per https://arxiv.org/abs/1709.03489\n                as well as warm-starting the optimization as introduced\n                in http://arxiv.org/abs/2009.10095.\n            initial_point: An optional initial point (i.e. initial parameter values)\n                for the optimizer. If ``None`` then it will simply compute a random one.\n            gradient: An optional gradient operator respectively a gradient function used for\n                      optimization.\n            expectation: The Expectation converter for taking the average value of the\n                Observable over the ansatz state function. When None (the default) an\n                :class:`~qiskit.opflow.expectations.ExpectationFactory` is used to select\n                an appropriate expectation based on the operator and backend. When using Aer\n                qasm_simulator backend, with paulis, it is however much faster to leverage custom\n                Aer function for the computation but, although VQE performs much faster\n                with it, the outcome is ideal, with no shot noise, like using a state vector\n                simulator. If you are just looking for the quickest performance when choosing Aer\n                qasm_simulator and the lack of shot noise is not an issue then set `include_custom`\n                parameter here to True (defaults to False).\n            include_custom: When `expectation` parameter here is None setting this to True will\n                allow the factory to include the custom Aer pauli expectation.\n            max_evals_grouped: Max number of evaluations performed simultaneously. Signals the\n                given optimizer that more than one set of parameters can be supplied so that\n                potentially the expectation values can be computed in parallel. Typically this is\n                possible when a finite difference gradient is used by the optimizer such that\n                multiple points to compute the gradient can be passed and if computed in parallel\n                improve overall execution time. Ignored if a gradient operator or function is\n                given.\n            callback: a callback that can access the intermediate data during the optimization.\n                Four parameter values are passed to the callback as follows during each evaluation\n                by the optimizer for its current set of parameters as it works towards the minimum.\n                These are: the evaluation count, the optimizer parameters for the\n                ansatz, the evaluated mean and the evaluated standard deviation.\n            quantum_instance: Quantum Instance or Backend\n        ')), Expr(value=Call(func=Name(id='validate_min', ctx=Load()), args=[Str(s='reps'), Name(id='reps', ctx=Load()), Num(n=1)], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_reps', ctx=Store())], value=Name(id='reps', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_mixer', ctx=Store())], value=Name(id='mixer', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_initial_state', ctx=Store())], value=Name(id='initial_state', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_cost_operator', ctx=Store())], value=NameConstant(value=None)), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[keyword(arg='ansatz', value=NameConstant(value=None)), keyword(arg='optimizer', value=Name(id='optimizer', ctx=Load())), keyword(arg='initial_point', value=Name(id='initial_point', ctx=Load())), keyword(arg='gradient', value=Name(id='gradient', ctx=Load())), keyword(arg='expectation', value=Name(id='expectation', ctx=Load())), keyword(arg='include_custom', value=Name(id='include_custom', ctx=Load())), keyword(arg='max_evals_grouped', value=Name(id='max_evals_grouped', ctx=Load())), keyword(arg='callback', value=Name(id='callback', ctx=Load())), keyword(arg='quantum_instance', value=Name(id='quantum_instance', ctx=Load()))]))], decorator_list=[], returns=NameConstant(value=None)), FunctionDef(name='_check_operator_ansatz', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='operator', annotation=Name(id='OperatorBase', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[If(test=Compare(left=Name(id='operator', ctx=Load()), ops=[NotEq()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='_cost_operator', ctx=Load())]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_cost_operator', ctx=Store())], value=Name(id='operator', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='ansatz', ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id='QAOAAnsatz', ctx=Load()), args=[Name(id='operator', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_reps', ctx=Load())], keywords=[keyword(arg='initial_state', value=Attribute(value=Name(id='self', ctx=Load()), attr='_initial_state', ctx=Load())), keyword(arg='mixer_operator', value=Attribute(value=Name(id='self', ctx=Load()), attr='_mixer', ctx=Load()))]), attr='decompose', ctx=Load()), args=[], keywords=[]))], orelse=[])], decorator_list=[], returns=Name(id='OperatorBase', ctx=Load())), FunctionDef(name='initial_state', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='\n        Returns:\n            Returns the initial state.\n        ')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_initial_state', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Name(id='QuantumCircuit', ctx=Load())), ctx=Load())), FunctionDef(name='initial_state', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='initial_state', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Name(id='QuantumCircuit', ctx=Load())), ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='\n        Args:\n            initial_state: Initial state to set.\n        ')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_initial_state', ctx=Store())], value=Name(id='initial_state', ctx=Load()))], decorator_list=[Attribute(value=Name(id='initial_state', ctx=Load()), attr='setter', ctx=Load())], returns=NameConstant(value=None)), FunctionDef(name='mixer', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='\n        Returns:\n            Returns the mixer.\n        ')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_mixer', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='QuantumCircuit', ctx=Load()), Name(id='OperatorBase', ctx=Load())], ctx=Load())), ctx=Load())), FunctionDef(name='mixer', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='mixer', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='QuantumCircuit', ctx=Load()), Name(id='OperatorBase', ctx=Load())], ctx=Load())), ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='\n        Args:\n            mixer: Mixer to set.\n        ')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_mixer', ctx=Store())], value=Name(id='mixer', ctx=Load()))], decorator_list=[Attribute(value=Name(id='mixer', ctx=Load()), attr='setter', ctx=Load())], returns=NameConstant(value=None))], decorator_list=[])
Str(s=' The Quantum Approximate Optimization Algorithm. ')
alias(name='List', asname=None)
alias(name='Callable', asname=None)
alias(name='Optional', asname=None)
alias(name='Union', asname=None)
alias(name='numpy', asname='np')
alias(name='Minimizer', asname=None)
alias(name='Optimizer', asname=None)
alias(name='QuantumCircuit', asname=None)
alias(name='OperatorBase', asname=None)
alias(name='ExpectationBase', asname=None)
alias(name='GradientBase', asname=None)
alias(name='Backend', asname=None)
alias(name='QuantumInstance', asname=None)
alias(name='validate_min', asname=None)
alias(name='QAOAAnsatz', asname=None)
alias(name='VQE', asname=None)
Name(id='VQE', ctx=Load())
Expr(value=Str(s="\n    The Quantum Approximate Optimization Algorithm.\n\n    `QAOA <https://arxiv.org/abs/1411.4028>`__ is a well-known algorithm for finding approximate\n    solutions to combinatorial-optimization problems.\n\n    The QAOA implementation directly extends :class:`VQE` and inherits VQE's optimization structure.\n    However, unlike VQE, which can be configured with arbitrary ansatzes,\n    QAOA uses its own fine-tuned ansatz, which comprises :math:`p` parameterized global\n    :math:`x` rotations and :math:`p` different parameterizations of the problem hamiltonian.\n    QAOA is thus principally configured  by the single integer parameter, *p*,\n    which dictates the depth of the ansatz, and thus affects the approximation quality.\n\n    An optional array of :math:`2p` parameter values, as the *initial_point*, may be provided as the\n    starting **beta** and **gamma** parameters (as identically named in the\n    original `QAOA paper <https://arxiv.org/abs/1411.4028>`__) for the QAOA ansatz.\n\n    An operator or a parameterized quantum circuit may optionally also be provided as a custom\n    `mixer` Hamiltonian. This allows, as discussed in\n    `this paper <https://doi.org/10.1103/PhysRevApplied.5.034007>`__ for quantum annealing,\n    and in `this paper <https://arxiv.org/abs/1709.03489>`__ for QAOA,\n    to run constrained optimization problems where the mixer constrains\n    the evolution to a feasible subspace of the full Hilbert space.\n    "))
FunctionDef(name='__init__', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='optimizer', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='Optimizer', ctx=Load()), Name(id='Minimizer', ctx=Load())], ctx=Load())), ctx=Load())), ctx=Load())), arg(arg='reps', annotation=Name(id='int', ctx=Load())), arg(arg='initial_state', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Name(id='QuantumCircuit', ctx=Load())), ctx=Load())), arg(arg='mixer', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='QuantumCircuit', ctx=Load()), Name(id='OperatorBase', ctx=Load())], ctx=Load())), ctx=Load())), arg(arg='initial_point', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), ctx=Load())), arg(arg='gradient', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='GradientBase', ctx=Load()), Subscript(value=Name(id='Callable', ctx=Load()), slice=Index(value=Tuple(elts=[List(elts=[Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Name(id='List', ctx=Load())], ctx=Load())), ctx=Load())], ctx=Load()), Name(id='List', ctx=Load())], ctx=Load())), ctx=Load())], ctx=Load())), ctx=Load())), ctx=Load())), arg(arg='expectation', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Name(id='ExpectationBase', ctx=Load())), ctx=Load())), arg(arg='include_custom', annotation=Name(id='bool', ctx=Load())), arg(arg='max_evals_grouped', annotation=Name(id='int', ctx=Load())), arg(arg='callback', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Subscript(value=Name(id='Callable', ctx=Load()), slice=Index(value=Tuple(elts=[List(elts=[Name(id='int', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Name(id='float', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load()), NameConstant(value=None)], ctx=Load())), ctx=Load())), ctx=Load())), arg(arg='quantum_instance', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='QuantumInstance', ctx=Load()), Name(id='Backend', ctx=Load())], ctx=Load())), ctx=Load())), ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[NameConstant(value=None), Num(n=1), NameConstant(value=None), NameConstant(value=None), NameConstant(value=None), NameConstant(value=None), NameConstant(value=None), NameConstant(value=False), Num(n=1), NameConstant(value=None), NameConstant(value=None)]), body=[Expr(value=Str(s='\n        Args:\n            optimizer: A classical optimizer, see also :class:`~qiskit.algorithms.VQE` for\n                more details on the possible types.\n            reps: the integer parameter :math:`p` as specified in https://arxiv.org/abs/1411.4028,\n                Has a minimum valid value of 1.\n            initial_state: An optional initial state to prepend the QAOA circuit with\n            mixer: the mixer Hamiltonian to evolve with or a custom quantum circuit. Allows support\n                of optimizations in constrained subspaces as per https://arxiv.org/abs/1709.03489\n                as well as warm-starting the optimization as introduced\n                in http://arxiv.org/abs/2009.10095.\n            initial_point: An optional initial point (i.e. initial parameter values)\n                for the optimizer. If ``None`` then it will simply compute a random one.\n            gradient: An optional gradient operator respectively a gradient function used for\n                      optimization.\n            expectation: The Expectation converter for taking the average value of the\n                Observable over the ansatz state function. When None (the default) an\n                :class:`~qiskit.opflow.expectations.ExpectationFactory` is used to select\n                an appropriate expectation based on the operator and backend. When using Aer\n                qasm_simulator backend, with paulis, it is however much faster to leverage custom\n                Aer function for the computation but, although VQE performs much faster\n                with it, the outcome is ideal, with no shot noise, like using a state vector\n                simulator. If you are just looking for the quickest performance when choosing Aer\n                qasm_simulator and the lack of shot noise is not an issue then set `include_custom`\n                parameter here to True (defaults to False).\n            include_custom: When `expectation` parameter here is None setting this to True will\n                allow the factory to include the custom Aer pauli expectation.\n            max_evals_grouped: Max number of evaluations performed simultaneously. Signals the\n                given optimizer that more than one set of parameters can be supplied so that\n                potentially the expectation values can be computed in parallel. Typically this is\n                possible when a finite difference gradient is used by the optimizer such that\n                multiple points to compute the gradient can be passed and if computed in parallel\n                improve overall execution time. Ignored if a gradient operator or function is\n                given.\n            callback: a callback that can access the intermediate data during the optimization.\n                Four parameter values are passed to the callback as follows during each evaluation\n                by the optimizer for its current set of parameters as it works towards the minimum.\n                These are: the evaluation count, the optimizer parameters for the\n                ansatz, the evaluated mean and the evaluated standard deviation.\n            quantum_instance: Quantum Instance or Backend\n        ')), Expr(value=Call(func=Name(id='validate_min', ctx=Load()), args=[Str(s='reps'), Name(id='reps', ctx=Load()), Num(n=1)], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_reps', ctx=Store())], value=Name(id='reps', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_mixer', ctx=Store())], value=Name(id='mixer', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_initial_state', ctx=Store())], value=Name(id='initial_state', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_cost_operator', ctx=Store())], value=NameConstant(value=None)), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[keyword(arg='ansatz', value=NameConstant(value=None)), keyword(arg='optimizer', value=Name(id='optimizer', ctx=Load())), keyword(arg='initial_point', value=Name(id='initial_point', ctx=Load())), keyword(arg='gradient', value=Name(id='gradient', ctx=Load())), keyword(arg='expectation', value=Name(id='expectation', ctx=Load())), keyword(arg='include_custom', value=Name(id='include_custom', ctx=Load())), keyword(arg='max_evals_grouped', value=Name(id='max_evals_grouped', ctx=Load())), keyword(arg='callback', value=Name(id='callback', ctx=Load())), keyword(arg='quantum_instance', value=Name(id='quantum_instance', ctx=Load()))]))], decorator_list=[], returns=NameConstant(value=None))
FunctionDef(name='_check_operator_ansatz', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='operator', annotation=Name(id='OperatorBase', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[If(test=Compare(left=Name(id='operator', ctx=Load()), ops=[NotEq()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='_cost_operator', ctx=Load())]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_cost_operator', ctx=Store())], value=Name(id='operator', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='ansatz', ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id='QAOAAnsatz', ctx=Load()), args=[Name(id='operator', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_reps', ctx=Load())], keywords=[keyword(arg='initial_state', value=Attribute(value=Name(id='self', ctx=Load()), attr='_initial_state', ctx=Load())), keyword(arg='mixer_operator', value=Attribute(value=Name(id='self', ctx=Load()), attr='_mixer', ctx=Load()))]), attr='decompose', ctx=Load()), args=[], keywords=[]))], orelse=[])], decorator_list=[], returns=Name(id='OperatorBase', ctx=Load()))
FunctionDef(name='initial_state', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='\n        Returns:\n            Returns the initial state.\n        ')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_initial_state', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Name(id='QuantumCircuit', ctx=Load())), ctx=Load()))
FunctionDef(name='initial_state', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='initial_state', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Name(id='QuantumCircuit', ctx=Load())), ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='\n        Args:\n            initial_state: Initial state to set.\n        ')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_initial_state', ctx=Store())], value=Name(id='initial_state', ctx=Load()))], decorator_list=[Attribute(value=Name(id='initial_state', ctx=Load()), attr='setter', ctx=Load())], returns=NameConstant(value=None))
FunctionDef(name='mixer', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='\n        Returns:\n            Returns the mixer.\n        ')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_mixer', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='QuantumCircuit', ctx=Load()), Name(id='OperatorBase', ctx=Load())], ctx=Load())), ctx=Load()))
FunctionDef(name='mixer', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='mixer', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='QuantumCircuit', ctx=Load()), Name(id='OperatorBase', ctx=Load())], ctx=Load())), ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='\n        Args:\n            mixer: Mixer to set.\n        ')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_mixer', ctx=Store())], value=Name(id='mixer', ctx=Load()))], decorator_list=[Attribute(value=Name(id='mixer', ctx=Load()), attr='setter', ctx=Load())], returns=NameConstant(value=None))
Load()
Str(s="\n    The Quantum Approximate Optimization Algorithm.\n\n    `QAOA <https://arxiv.org/abs/1411.4028>`__ is a well-known algorithm for finding approximate\n    solutions to combinatorial-optimization problems.\n\n    The QAOA implementation directly extends :class:`VQE` and inherits VQE's optimization structure.\n    However, unlike VQE, which can be configured with arbitrary ansatzes,\n    QAOA uses its own fine-tuned ansatz, which comprises :math:`p` parameterized global\n    :math:`x` rotations and :math:`p` different parameterizations of the problem hamiltonian.\n    QAOA is thus principally configured  by the single integer parameter, *p*,\n    which dictates the depth of the ansatz, and thus affects the approximation quality.\n\n    An optional array of :math:`2p` parameter values, as the *initial_point*, may be provided as the\n    starting **beta** and **gamma** parameters (as identically named in the\n    original `QAOA paper <https://arxiv.org/abs/1411.4028>`__) for the QAOA ansatz.\n\n    An operator or a parameterized quantum circuit may optionally also be provided as a custom\n    `mixer` Hamiltonian. This allows, as discussed in\n    `this paper <https://doi.org/10.1103/PhysRevApplied.5.034007>`__ for quantum annealing,\n    and in `this paper <https://arxiv.org/abs/1709.03489>`__ for QAOA,\n    to run constrained optimization problems where the mixer constrains\n    the evolution to a feasible subspace of the full Hilbert space.\n    ")
arguments(args=[arg(arg='self', annotation=None), arg(arg='optimizer', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='Optimizer', ctx=Load()), Name(id='Minimizer', ctx=Load())], ctx=Load())), ctx=Load())), ctx=Load())), arg(arg='reps', annotation=Name(id='int', ctx=Load())), arg(arg='initial_state', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Name(id='QuantumCircuit', ctx=Load())), ctx=Load())), arg(arg='mixer', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='QuantumCircuit', ctx=Load()), Name(id='OperatorBase', ctx=Load())], ctx=Load())), ctx=Load())), arg(arg='initial_point', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), ctx=Load())), arg(arg='gradient', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='GradientBase', ctx=Load()), Subscript(value=Name(id='Callable', ctx=Load()), slice=Index(value=Tuple(elts=[List(elts=[Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Name(id='List', ctx=Load())], ctx=Load())), ctx=Load())], ctx=Load()), Name(id='List', ctx=Load())], ctx=Load())), ctx=Load())], ctx=Load())), ctx=Load())), ctx=Load())), arg(arg='expectation', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Name(id='ExpectationBase', ctx=Load())), ctx=Load())), arg(arg='include_custom', annotation=Name(id='bool', ctx=Load())), arg(arg='max_evals_grouped', annotation=Name(id='int', ctx=Load())), arg(arg='callback', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Subscript(value=Name(id='Callable', ctx=Load()), slice=Index(value=Tuple(elts=[List(elts=[Name(id='int', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Name(id='float', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load()), NameConstant(value=None)], ctx=Load())), ctx=Load())), ctx=Load())), arg(arg='quantum_instance', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='QuantumInstance', ctx=Load()), Name(id='Backend', ctx=Load())], ctx=Load())), ctx=Load())), ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[NameConstant(value=None), Num(n=1), NameConstant(value=None), NameConstant(value=None), NameConstant(value=None), NameConstant(value=None), NameConstant(value=None), NameConstant(value=False), Num(n=1), NameConstant(value=None), NameConstant(value=None)])
Expr(value=Str(s='\n        Args:\n            optimizer: A classical optimizer, see also :class:`~qiskit.algorithms.VQE` for\n                more details on the possible types.\n            reps: the integer parameter :math:`p` as specified in https://arxiv.org/abs/1411.4028,\n                Has a minimum valid value of 1.\n            initial_state: An optional initial state to prepend the QAOA circuit with\n            mixer: the mixer Hamiltonian to evolve with or a custom quantum circuit. Allows support\n                of optimizations in constrained subspaces as per https://arxiv.org/abs/1709.03489\n                as well as warm-starting the optimization as introduced\n                in http://arxiv.org/abs/2009.10095.\n            initial_point: An optional initial point (i.e. initial parameter values)\n                for the optimizer. If ``None`` then it will simply compute a random one.\n            gradient: An optional gradient operator respectively a gradient function used for\n                      optimization.\n            expectation: The Expectation converter for taking the average value of the\n                Observable over the ansatz state function. When None (the default) an\n                :class:`~qiskit.opflow.expectations.ExpectationFactory` is used to select\n                an appropriate expectation based on the operator and backend. When using Aer\n                qasm_simulator backend, with paulis, it is however much faster to leverage custom\n                Aer function for the computation but, although VQE performs much faster\n                with it, the outcome is ideal, with no shot noise, like using a state vector\n                simulator. If you are just looking for the quickest performance when choosing Aer\n                qasm_simulator and the lack of shot noise is not an issue then set `include_custom`\n                parameter here to True (defaults to False).\n            include_custom: When `expectation` parameter here is None setting this to True will\n                allow the factory to include the custom Aer pauli expectation.\n            max_evals_grouped: Max number of evaluations performed simultaneously. Signals the\n                given optimizer that more than one set of parameters can be supplied so that\n                potentially the expectation values can be computed in parallel. Typically this is\n                possible when a finite difference gradient is used by the optimizer such that\n                multiple points to compute the gradient can be passed and if computed in parallel\n                improve overall execution time. Ignored if a gradient operator or function is\n                given.\n            callback: a callback that can access the intermediate data during the optimization.\n                Four parameter values are passed to the callback as follows during each evaluation\n                by the optimizer for its current set of parameters as it works towards the minimum.\n                These are: the evaluation count, the optimizer parameters for the\n                ansatz, the evaluated mean and the evaluated standard deviation.\n            quantum_instance: Quantum Instance or Backend\n        '))
Expr(value=Call(func=Name(id='validate_min', ctx=Load()), args=[Str(s='reps'), Name(id='reps', ctx=Load()), Num(n=1)], keywords=[]))
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_reps', ctx=Store())], value=Name(id='reps', ctx=Load()))
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_mixer', ctx=Store())], value=Name(id='mixer', ctx=Load()))
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_initial_state', ctx=Store())], value=Name(id='initial_state', ctx=Load()))
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_cost_operator', ctx=Store())], value=NameConstant(value=None))
Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[keyword(arg='ansatz', value=NameConstant(value=None)), keyword(arg='optimizer', value=Name(id='optimizer', ctx=Load())), keyword(arg='initial_point', value=Name(id='initial_point', ctx=Load())), keyword(arg='gradient', value=Name(id='gradient', ctx=Load())), keyword(arg='expectation', value=Name(id='expectation', ctx=Load())), keyword(arg='include_custom', value=Name(id='include_custom', ctx=Load())), keyword(arg='max_evals_grouped', value=Name(id='max_evals_grouped', ctx=Load())), keyword(arg='callback', value=Name(id='callback', ctx=Load())), keyword(arg='quantum_instance', value=Name(id='quantum_instance', ctx=Load()))]))
NameConstant(value=None)
arguments(args=[arg(arg='self', annotation=None), arg(arg='operator', annotation=Name(id='OperatorBase', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
If(test=Compare(left=Name(id='operator', ctx=Load()), ops=[NotEq()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='_cost_operator', ctx=Load())]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_cost_operator', ctx=Store())], value=Name(id='operator', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='ansatz', ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id='QAOAAnsatz', ctx=Load()), args=[Name(id='operator', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_reps', ctx=Load())], keywords=[keyword(arg='initial_state', value=Attribute(value=Name(id='self', ctx=Load()), attr='_initial_state', ctx=Load())), keyword(arg='mixer_operator', value=Attribute(value=Name(id='self', ctx=Load()), attr='_mixer', ctx=Load()))]), attr='decompose', ctx=Load()), args=[], keywords=[]))], orelse=[])
Name(id='OperatorBase', ctx=Load())
arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Expr(value=Str(s='\n        Returns:\n            Returns the initial state.\n        '))
Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_initial_state', ctx=Load()))
Name(id='property', ctx=Load())
Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Name(id='QuantumCircuit', ctx=Load())), ctx=Load())
arguments(args=[arg(arg='self', annotation=None), arg(arg='initial_state', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Name(id='QuantumCircuit', ctx=Load())), ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Expr(value=Str(s='\n        Args:\n            initial_state: Initial state to set.\n        '))
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_initial_state', ctx=Store())], value=Name(id='initial_state', ctx=Load()))
Attribute(value=Name(id='initial_state', ctx=Load()), attr='setter', ctx=Load())
NameConstant(value=None)
arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Expr(value=Str(s='\n        Returns:\n            Returns the mixer.\n        '))
Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_mixer', ctx=Load()))
Name(id='property', ctx=Load())
Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='QuantumCircuit', ctx=Load()), Name(id='OperatorBase', ctx=Load())], ctx=Load())), ctx=Load())
arguments(args=[arg(arg='self', annotation=None), arg(arg='mixer', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='QuantumCircuit', ctx=Load()), Name(id='OperatorBase', ctx=Load())], ctx=Load())), ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Expr(value=Str(s='\n        Args:\n            mixer: Mixer to set.\n        '))
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_mixer', ctx=Store())], value=Name(id='mixer', ctx=Load()))
Attribute(value=Name(id='mixer', ctx=Load()), attr='setter', ctx=Load())
NameConstant(value=None)
arg(arg='self', annotation=None)
arg(arg='optimizer', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='Optimizer', ctx=Load()), Name(id='Minimizer', ctx=Load())], ctx=Load())), ctx=Load())), ctx=Load()))
arg(arg='reps', annotation=Name(id='int', ctx=Load()))
arg(arg='initial_state', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Name(id='QuantumCircuit', ctx=Load())), ctx=Load()))
arg(arg='mixer', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='QuantumCircuit', ctx=Load()), Name(id='OperatorBase', ctx=Load())], ctx=Load())), ctx=Load()))
arg(arg='initial_point', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), ctx=Load()))
arg(arg='gradient', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='GradientBase', ctx=Load()), Subscript(value=Name(id='Callable', ctx=Load()), slice=Index(value=Tuple(elts=[List(elts=[Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Name(id='List', ctx=Load())], ctx=Load())), ctx=Load())], ctx=Load()), Name(id='List', ctx=Load())], ctx=Load())), ctx=Load())], ctx=Load())), ctx=Load())), ctx=Load()))
arg(arg='expectation', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Name(id='ExpectationBase', ctx=Load())), ctx=Load()))
arg(arg='include_custom', annotation=Name(id='bool', ctx=Load()))
arg(arg='max_evals_grouped', annotation=Name(id='int', ctx=Load()))
arg(arg='callback', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Subscript(value=Name(id='Callable', ctx=Load()), slice=Index(value=Tuple(elts=[List(elts=[Name(id='int', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Name(id='float', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load()), NameConstant(value=None)], ctx=Load())), ctx=Load())), ctx=Load()))
arg(arg='quantum_instance', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='QuantumInstance', ctx=Load()), Name(id='Backend', ctx=Load())], ctx=Load())), ctx=Load())), ctx=Load()))
NameConstant(value=None)
Num(n=1)
NameConstant(value=None)
NameConstant(value=None)
NameConstant(value=None)
NameConstant(value=None)
NameConstant(value=None)
NameConstant(value=False)
Num(n=1)
NameConstant(value=None)
NameConstant(value=None)
Str(s='\n        Args:\n            optimizer: A classical optimizer, see also :class:`~qiskit.algorithms.VQE` for\n                more details on the possible types.\n            reps: the integer parameter :math:`p` as specified in https://arxiv.org/abs/1411.4028,\n                Has a minimum valid value of 1.\n            initial_state: An optional initial state to prepend the QAOA circuit with\n            mixer: the mixer Hamiltonian to evolve with or a custom quantum circuit. Allows support\n                of optimizations in constrained subspaces as per https://arxiv.org/abs/1709.03489\n                as well as warm-starting the optimization as introduced\n                in http://arxiv.org/abs/2009.10095.\n            initial_point: An optional initial point (i.e. initial parameter values)\n                for the optimizer. If ``None`` then it will simply compute a random one.\n            gradient: An optional gradient operator respectively a gradient function used for\n                      optimization.\n            expectation: The Expectation converter for taking the average value of the\n                Observable over the ansatz state function. When None (the default) an\n                :class:`~qiskit.opflow.expectations.ExpectationFactory` is used to select\n                an appropriate expectation based on the operator and backend. When using Aer\n                qasm_simulator backend, with paulis, it is however much faster to leverage custom\n                Aer function for the computation but, although VQE performs much faster\n                with it, the outcome is ideal, with no shot noise, like using a state vector\n                simulator. If you are just looking for the quickest performance when choosing Aer\n                qasm_simulator and the lack of shot noise is not an issue then set `include_custom`\n                parameter here to True (defaults to False).\n            include_custom: When `expectation` parameter here is None setting this to True will\n                allow the factory to include the custom Aer pauli expectation.\n            max_evals_grouped: Max number of evaluations performed simultaneously. Signals the\n                given optimizer that more than one set of parameters can be supplied so that\n                potentially the expectation values can be computed in parallel. Typically this is\n                possible when a finite difference gradient is used by the optimizer such that\n                multiple points to compute the gradient can be passed and if computed in parallel\n                improve overall execution time. Ignored if a gradient operator or function is\n                given.\n            callback: a callback that can access the intermediate data during the optimization.\n                Four parameter values are passed to the callback as follows during each evaluation\n                by the optimizer for its current set of parameters as it works towards the minimum.\n                These are: the evaluation count, the optimizer parameters for the\n                ansatz, the evaluated mean and the evaluated standard deviation.\n            quantum_instance: Quantum Instance or Backend\n        ')
Call(func=Name(id='validate_min', ctx=Load()), args=[Str(s='reps'), Name(id='reps', ctx=Load()), Num(n=1)], keywords=[])
Attribute(value=Name(id='self', ctx=Load()), attr='_reps', ctx=Store())
Name(id='reps', ctx=Load())
Attribute(value=Name(id='self', ctx=Load()), attr='_mixer', ctx=Store())
Name(id='mixer', ctx=Load())
Attribute(value=Name(id='self', ctx=Load()), attr='_initial_state', ctx=Store())
Name(id='initial_state', ctx=Load())
Attribute(value=Name(id='self', ctx=Load()), attr='_cost_operator', ctx=Store())
NameConstant(value=None)
Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[keyword(arg='ansatz', value=NameConstant(value=None)), keyword(arg='optimizer', value=Name(id='optimizer', ctx=Load())), keyword(arg='initial_point', value=Name(id='initial_point', ctx=Load())), keyword(arg='gradient', value=Name(id='gradient', ctx=Load())), keyword(arg='expectation', value=Name(id='expectation', ctx=Load())), keyword(arg='include_custom', value=Name(id='include_custom', ctx=Load())), keyword(arg='max_evals_grouped', value=Name(id='max_evals_grouped', ctx=Load())), keyword(arg='callback', value=Name(id='callback', ctx=Load())), keyword(arg='quantum_instance', value=Name(id='quantum_instance', ctx=Load()))])
arg(arg='self', annotation=None)
arg(arg='operator', annotation=Name(id='OperatorBase', ctx=Load()))
Compare(left=Name(id='operator', ctx=Load()), ops=[NotEq()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='_cost_operator', ctx=Load())])
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_cost_operator', ctx=Store())], value=Name(id='operator', ctx=Load()))
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='ansatz', ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id='QAOAAnsatz', ctx=Load()), args=[Name(id='operator', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_reps', ctx=Load())], keywords=[keyword(arg='initial_state', value=Attribute(value=Name(id='self', ctx=Load()), attr='_initial_state', ctx=Load())), keyword(arg='mixer_operator', value=Attribute(value=Name(id='self', ctx=Load()), attr='_mixer', ctx=Load()))]), attr='decompose', ctx=Load()), args=[], keywords=[]))
Load()
arg(arg='self', annotation=None)
Str(s='\n        Returns:\n            Returns the initial state.\n        ')
Attribute(value=Name(id='self', ctx=Load()), attr='_initial_state', ctx=Load())
Load()
Name(id='Optional', ctx=Load())
Index(value=Name(id='QuantumCircuit', ctx=Load()))
Load()
arg(arg='self', annotation=None)
arg(arg='initial_state', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Name(id='QuantumCircuit', ctx=Load())), ctx=Load()))
Str(s='\n        Args:\n            initial_state: Initial state to set.\n        ')
Attribute(value=Name(id='self', ctx=Load()), attr='_initial_state', ctx=Store())
Name(id='initial_state', ctx=Load())
Name(id='initial_state', ctx=Load())
Load()
arg(arg='self', annotation=None)
Str(s='\n        Returns:\n            Returns the mixer.\n        ')
Attribute(value=Name(id='self', ctx=Load()), attr='_mixer', ctx=Load())
Load()
Name(id='Union', ctx=Load())
Index(value=Tuple(elts=[Name(id='QuantumCircuit', ctx=Load()), Name(id='OperatorBase', ctx=Load())], ctx=Load()))
Load()
arg(arg='self', annotation=None)
arg(arg='mixer', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='QuantumCircuit', ctx=Load()), Name(id='OperatorBase', ctx=Load())], ctx=Load())), ctx=Load()))
Str(s='\n        Args:\n            mixer: Mixer to set.\n        ')
Attribute(value=Name(id='self', ctx=Load()), attr='_mixer', ctx=Store())
Name(id='mixer', ctx=Load())
Name(id='mixer', ctx=Load())
Load()
Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='Optimizer', ctx=Load()), Name(id='Minimizer', ctx=Load())], ctx=Load())), ctx=Load())), ctx=Load())
Name(id='int', ctx=Load())
Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Name(id='QuantumCircuit', ctx=Load())), ctx=Load())
Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='QuantumCircuit', ctx=Load()), Name(id='OperatorBase', ctx=Load())], ctx=Load())), ctx=Load())
Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), ctx=Load())
Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='GradientBase', ctx=Load()), Subscript(value=Name(id='Callable', ctx=Load()), slice=Index(value=Tuple(elts=[List(elts=[Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Name(id='List', ctx=Load())], ctx=Load())), ctx=Load())], ctx=Load()), Name(id='List', ctx=Load())], ctx=Load())), ctx=Load())], ctx=Load())), ctx=Load())), ctx=Load())
Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Name(id='ExpectationBase', ctx=Load())), ctx=Load())
Name(id='bool', ctx=Load())
Name(id='int', ctx=Load())
Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Subscript(value=Name(id='Callable', ctx=Load()), slice=Index(value=Tuple(elts=[List(elts=[Name(id='int', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Name(id='float', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load()), NameConstant(value=None)], ctx=Load())), ctx=Load())), ctx=Load())
Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='QuantumInstance', ctx=Load()), Name(id='Backend', ctx=Load())], ctx=Load())), ctx=Load())), ctx=Load())
Name(id='validate_min', ctx=Load())
Str(s='reps')
Name(id='reps', ctx=Load())
Num(n=1)
Name(id='self', ctx=Load())
Store()
Load()
Name(id='self', ctx=Load())
Store()
Load()
Name(id='self', ctx=Load())
Store()
Load()
Name(id='self', ctx=Load())
Store()
Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load())
keyword(arg='ansatz', value=NameConstant(value=None))
keyword(arg='optimizer', value=Name(id='optimizer', ctx=Load()))
keyword(arg='initial_point', value=Name(id='initial_point', ctx=Load()))
keyword(arg='gradient', value=Name(id='gradient', ctx=Load()))
keyword(arg='expectation', value=Name(id='expectation', ctx=Load()))
keyword(arg='include_custom', value=Name(id='include_custom', ctx=Load()))
keyword(arg='max_evals_grouped', value=Name(id='max_evals_grouped', ctx=Load()))
keyword(arg='callback', value=Name(id='callback', ctx=Load()))
keyword(arg='quantum_instance', value=Name(id='quantum_instance', ctx=Load()))
Name(id='OperatorBase', ctx=Load())
Name(id='operator', ctx=Load())
NotEq()
Attribute(value=Name(id='self', ctx=Load()), attr='_cost_operator', ctx=Load())
Attribute(value=Name(id='self', ctx=Load()), attr='_cost_operator', ctx=Store())
Name(id='operator', ctx=Load())
Attribute(value=Name(id='self', ctx=Load()), attr='ansatz', ctx=Store())
Call(func=Attribute(value=Call(func=Name(id='QAOAAnsatz', ctx=Load()), args=[Name(id='operator', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_reps', ctx=Load())], keywords=[keyword(arg='initial_state', value=Attribute(value=Name(id='self', ctx=Load()), attr='_initial_state', ctx=Load())), keyword(arg='mixer_operator', value=Attribute(value=Name(id='self', ctx=Load()), attr='_mixer', ctx=Load()))]), attr='decompose', ctx=Load()), args=[], keywords=[])
Name(id='self', ctx=Load())
Load()
Load()
Name(id='QuantumCircuit', ctx=Load())
Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Name(id='QuantumCircuit', ctx=Load())), ctx=Load())
Name(id='self', ctx=Load())
Store()
Load()
Load()
Name(id='self', ctx=Load())
Load()
Load()
Tuple(elts=[Name(id='QuantumCircuit', ctx=Load()), Name(id='OperatorBase', ctx=Load())], ctx=Load())
Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='QuantumCircuit', ctx=Load()), Name(id='OperatorBase', ctx=Load())], ctx=Load())), ctx=Load())
Name(id='self', ctx=Load())
Store()
Load()
Load()
Name(id='Optional', ctx=Load())
Index(value=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='Optimizer', ctx=Load()), Name(id='Minimizer', ctx=Load())], ctx=Load())), ctx=Load()))
Load()
Load()
Name(id='Optional', ctx=Load())
Index(value=Name(id='QuantumCircuit', ctx=Load()))
Load()
Name(id='Union', ctx=Load())
Index(value=Tuple(elts=[Name(id='QuantumCircuit', ctx=Load()), Name(id='OperatorBase', ctx=Load())], ctx=Load()))
Load()
Name(id='Optional', ctx=Load())
Index(value=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()))
Load()
Name(id='Optional', ctx=Load())
Index(value=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='GradientBase', ctx=Load()), Subscript(value=Name(id='Callable', ctx=Load()), slice=Index(value=Tuple(elts=[List(elts=[Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Name(id='List', ctx=Load())], ctx=Load())), ctx=Load())], ctx=Load()), Name(id='List', ctx=Load())], ctx=Load())), ctx=Load())], ctx=Load())), ctx=Load()))
Load()
Name(id='Optional', ctx=Load())
Index(value=Name(id='ExpectationBase', ctx=Load()))
Load()
Load()
Load()
Name(id='Optional', ctx=Load())
Index(value=Subscript(value=Name(id='Callable', ctx=Load()), slice=Index(value=Tuple(elts=[List(elts=[Name(id='int', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Name(id='float', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load()), NameConstant(value=None)], ctx=Load())), ctx=Load()))
Load()
Name(id='Optional', ctx=Load())
Index(value=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='QuantumInstance', ctx=Load()), Name(id='Backend', ctx=Load())], ctx=Load())), ctx=Load()))
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Call(func=Name(id='super', ctx=Load()), args=[], keywords=[])
Load()
NameConstant(value=None)
Name(id='optimizer', ctx=Load())
Name(id='initial_point', ctx=Load())
Name(id='gradient', ctx=Load())
Name(id='expectation', ctx=Load())
Name(id='include_custom', ctx=Load())
Name(id='max_evals_grouped', ctx=Load())
Name(id='callback', ctx=Load())
Name(id='quantum_instance', ctx=Load())
Load()
Load()
Name(id='self', ctx=Load())
Load()
Name(id='self', ctx=Load())
Store()
Load()
Name(id='self', ctx=Load())
Store()
Attribute(value=Call(func=Name(id='QAOAAnsatz', ctx=Load()), args=[Name(id='operator', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_reps', ctx=Load())], keywords=[keyword(arg='initial_state', value=Attribute(value=Name(id='self', ctx=Load()), attr='_initial_state', ctx=Load())), keyword(arg='mixer_operator', value=Attribute(value=Name(id='self', ctx=Load()), attr='_mixer', ctx=Load()))]), attr='decompose', ctx=Load())
Load()
Load()
Name(id='Optional', ctx=Load())
Index(value=Name(id='QuantumCircuit', ctx=Load()))
Load()
Load()
Load()
Name(id='QuantumCircuit', ctx=Load())
Name(id='OperatorBase', ctx=Load())
Load()
Name(id='Union', ctx=Load())
Index(value=Tuple(elts=[Name(id='QuantumCircuit', ctx=Load()), Name(id='OperatorBase', ctx=Load())], ctx=Load()))
Load()
Load()
Load()
Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='Optimizer', ctx=Load()), Name(id='Minimizer', ctx=Load())], ctx=Load())), ctx=Load())
Load()
Name(id='QuantumCircuit', ctx=Load())
Load()
Tuple(elts=[Name(id='QuantumCircuit', ctx=Load()), Name(id='OperatorBase', ctx=Load())], ctx=Load())
Load()
Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())
Load()
Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='GradientBase', ctx=Load()), Subscript(value=Name(id='Callable', ctx=Load()), slice=Index(value=Tuple(elts=[List(elts=[Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Name(id='List', ctx=Load())], ctx=Load())), ctx=Load())], ctx=Load()), Name(id='List', ctx=Load())], ctx=Load())), ctx=Load())], ctx=Load())), ctx=Load())
Load()
Name(id='ExpectationBase', ctx=Load())
Load()
Subscript(value=Name(id='Callable', ctx=Load()), slice=Index(value=Tuple(elts=[List(elts=[Name(id='int', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Name(id='float', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load()), NameConstant(value=None)], ctx=Load())), ctx=Load())
Load()
Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='QuantumInstance', ctx=Load()), Name(id='Backend', ctx=Load())], ctx=Load())), ctx=Load())
Name(id='super', ctx=Load())
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Call(func=Name(id='QAOAAnsatz', ctx=Load()), args=[Name(id='operator', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_reps', ctx=Load())], keywords=[keyword(arg='initial_state', value=Attribute(value=Name(id='self', ctx=Load()), attr='_initial_state', ctx=Load())), keyword(arg='mixer_operator', value=Attribute(value=Name(id='self', ctx=Load()), attr='_mixer', ctx=Load()))])
Load()
Load()
Name(id='QuantumCircuit', ctx=Load())
Load()
Load()
Load()
Tuple(elts=[Name(id='QuantumCircuit', ctx=Load()), Name(id='OperatorBase', ctx=Load())], ctx=Load())
Name(id='Union', ctx=Load())
Index(value=Tuple(elts=[Name(id='Optimizer', ctx=Load()), Name(id='Minimizer', ctx=Load())], ctx=Load()))
Load()
Load()
Name(id='QuantumCircuit', ctx=Load())
Name(id='OperatorBase', ctx=Load())
Load()
Name(id='np', ctx=Load())
Load()
Name(id='Union', ctx=Load())
Index(value=Tuple(elts=[Name(id='GradientBase', ctx=Load()), Subscript(value=Name(id='Callable', ctx=Load()), slice=Index(value=Tuple(elts=[List(elts=[Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Name(id='List', ctx=Load())], ctx=Load())), ctx=Load())], ctx=Load()), Name(id='List', ctx=Load())], ctx=Load())), ctx=Load())], ctx=Load()))
Load()
Load()
Name(id='Callable', ctx=Load())
Index(value=Tuple(elts=[List(elts=[Name(id='int', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Name(id='float', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load()), NameConstant(value=None)], ctx=Load()))
Load()
Name(id='Union', ctx=Load())
Index(value=Tuple(elts=[Name(id='QuantumInstance', ctx=Load()), Name(id='Backend', ctx=Load())], ctx=Load()))
Load()
Load()
Name(id='QAOAAnsatz', ctx=Load())
Name(id='operator', ctx=Load())
Attribute(value=Name(id='self', ctx=Load()), attr='_reps', ctx=Load())
keyword(arg='initial_state', value=Attribute(value=Name(id='self', ctx=Load()), attr='_initial_state', ctx=Load()))
keyword(arg='mixer_operator', value=Attribute(value=Name(id='self', ctx=Load()), attr='_mixer', ctx=Load()))
Load()
Name(id='QuantumCircuit', ctx=Load())
Name(id='OperatorBase', ctx=Load())
Load()
Load()
Tuple(elts=[Name(id='Optimizer', ctx=Load()), Name(id='Minimizer', ctx=Load())], ctx=Load())
Load()
Load()
Load()
Load()
Tuple(elts=[Name(id='GradientBase', ctx=Load()), Subscript(value=Name(id='Callable', ctx=Load()), slice=Index(value=Tuple(elts=[List(elts=[Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Name(id='List', ctx=Load())], ctx=Load())), ctx=Load())], ctx=Load()), Name(id='List', ctx=Load())], ctx=Load())), ctx=Load())], ctx=Load())
Load()
Tuple(elts=[List(elts=[Name(id='int', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Name(id='float', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load()), NameConstant(value=None)], ctx=Load())
Load()
Tuple(elts=[Name(id='QuantumInstance', ctx=Load()), Name(id='Backend', ctx=Load())], ctx=Load())
Load()
Load()
Name(id='self', ctx=Load())
Load()
Attribute(value=Name(id='self', ctx=Load()), attr='_initial_state', ctx=Load())
Attribute(value=Name(id='self', ctx=Load()), attr='_mixer', ctx=Load())
Load()
Load()
Name(id='Optimizer', ctx=Load())
Name(id='Minimizer', ctx=Load())
Load()
Name(id='GradientBase', ctx=Load())
Subscript(value=Name(id='Callable', ctx=Load()), slice=Index(value=Tuple(elts=[List(elts=[Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Name(id='List', ctx=Load())], ctx=Load())), ctx=Load())], ctx=Load()), Name(id='List', ctx=Load())], ctx=Load())), ctx=Load())
Load()
List(elts=[Name(id='int', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Name(id='float', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load())
NameConstant(value=None)
Load()
Name(id='QuantumInstance', ctx=Load())
Name(id='Backend', ctx=Load())
Load()
Load()
Name(id='self', ctx=Load())
Load()
Name(id='self', ctx=Load())
Load()
Load()
Load()
Load()
Name(id='Callable', ctx=Load())
Index(value=Tuple(elts=[List(elts=[Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Name(id='List', ctx=Load())], ctx=Load())), ctx=Load())], ctx=Load()), Name(id='List', ctx=Load())], ctx=Load()))
Load()
Name(id='int', ctx=Load())
Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())
Name(id='float', ctx=Load())
Name(id='float', ctx=Load())
Load()
Load()
Load()
Load()
Load()
Load()
Tuple(elts=[List(elts=[Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Name(id='List', ctx=Load())], ctx=Load())), ctx=Load())], ctx=Load()), Name(id='List', ctx=Load())], ctx=Load())
Load()
Name(id='np', ctx=Load())
Load()
Load()
Load()
List(elts=[Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Name(id='List', ctx=Load())], ctx=Load())), ctx=Load())], ctx=Load())
Name(id='List', ctx=Load())
Load()
Load()
Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Name(id='List', ctx=Load())], ctx=Load())), ctx=Load())
Load()
Load()
Name(id='Union', ctx=Load())
Index(value=Tuple(elts=[Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Name(id='List', ctx=Load())], ctx=Load()))
Load()
Load()
Tuple(elts=[Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Name(id='List', ctx=Load())], ctx=Load())
Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())
Name(id='List', ctx=Load())
Load()
Name(id='np', ctx=Load())
Load()
Load()
Load()
Module(body=[Expr(value=Str(s=' The Quantum Approximate Optimization Algorithm. ')), ImportFrom(module='typing', names=[alias(name='List', asname=None), alias(name='Callable', asname=None), alias(name='Optional', asname=None), alias(name='Union', asname=None)], level=0), Import(names=[alias(name='numpy', asname='np')]), ImportFrom(module='qiskit.algorithms.optimizers', names=[alias(name='Minimizer', asname=None), alias(name='Optimizer', asname=None)], level=0), ImportFrom(module='qiskit.circuit', names=[alias(name='QuantumCircuit', asname=None)], level=0), ImportFrom(module='qiskit.opflow', names=[alias(name='OperatorBase', asname=None), alias(name='ExpectationBase', asname=None)], level=0), ImportFrom(module='qiskit.opflow.gradients', names=[alias(name='GradientBase', asname=None)], level=0), ImportFrom(module='qiskit.providers', names=[alias(name='Backend', asname=None)], level=0), ImportFrom(module='qiskit.utils.quantum_instance', names=[alias(name='QuantumInstance', asname=None)], level=0), ImportFrom(module='qiskit.utils.validation', names=[alias(name='validate_min', asname=None)], level=0), ImportFrom(module='qiskit.circuit.library.n_local.qaoa_ansatz', names=[alias(name='QAOAAnsatz', asname=None)], level=0), ImportFrom(module='qiskit.algorithms.minimum_eigen_solvers.vqe', names=[alias(name='VQE', asname=None)], level=0), ClassDef(name='QAOA', bases=[Name(id='VQE', ctx=Load())], keywords=[], body=[Expr(value=Str(s="\n    The Quantum Approximate Optimization Algorithm.\n\n    `QAOA <https://arxiv.org/abs/1411.4028>`__ is a well-known algorithm for finding approximate\n    solutions to combinatorial-optimization problems.\n\n    The QAOA implementation directly extends :class:`VQE` and inherits VQE's optimization structure.\n    However, unlike VQE, which can be configured with arbitrary ansatzes,\n    QAOA uses its own fine-tuned ansatz, which comprises :math:`p` parameterized global\n    :math:`x` rotations and :math:`p` different parameterizations of the problem hamiltonian.\n    QAOA is thus principally configured  by the single integer parameter, *p*,\n    which dictates the depth of the ansatz, and thus affects the approximation quality.\n\n    An optional array of :math:`2p` parameter values, as the *initial_point*, may be provided as the\n    starting **beta** and **gamma** parameters (as identically named in the\n    original `QAOA paper <https://arxiv.org/abs/1411.4028>`__) for the QAOA ansatz.\n\n    An operator or a parameterized quantum circuit may optionally also be provided as a custom\n    `mixer` Hamiltonian. This allows, as discussed in\n    `this paper <https://doi.org/10.1103/PhysRevApplied.5.034007>`__ for quantum annealing,\n    and in `this paper <https://arxiv.org/abs/1709.03489>`__ for QAOA,\n    to run constrained optimization problems where the mixer constrains\n    the evolution to a feasible subspace of the full Hilbert space.\n    ")), FunctionDef(name='__init__', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='optimizer', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='Optimizer', ctx=Load()), Name(id='Minimizer', ctx=Load())], ctx=Load())), ctx=Load())), ctx=Load())), arg(arg='reps', annotation=Name(id='int', ctx=Load())), arg(arg='initial_state', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Name(id='QuantumCircuit', ctx=Load())), ctx=Load())), arg(arg='mixer', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='QuantumCircuit', ctx=Load()), Name(id='OperatorBase', ctx=Load())], ctx=Load())), ctx=Load())), arg(arg='initial_point', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), ctx=Load())), arg(arg='gradient', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='GradientBase', ctx=Load()), Subscript(value=Name(id='Callable', ctx=Load()), slice=Index(value=Tuple(elts=[List(elts=[Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Name(id='List', ctx=Load())], ctx=Load())), ctx=Load())], ctx=Load()), Name(id='List', ctx=Load())], ctx=Load())), ctx=Load())], ctx=Load())), ctx=Load())), ctx=Load())), arg(arg='expectation', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Name(id='ExpectationBase', ctx=Load())), ctx=Load())), arg(arg='include_custom', annotation=Name(id='bool', ctx=Load())), arg(arg='max_evals_grouped', annotation=Name(id='int', ctx=Load())), arg(arg='callback', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Subscript(value=Name(id='Callable', ctx=Load()), slice=Index(value=Tuple(elts=[List(elts=[Name(id='int', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Name(id='float', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load()), NameConstant(value=None)], ctx=Load())), ctx=Load())), ctx=Load())), arg(arg='quantum_instance', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='QuantumInstance', ctx=Load()), Name(id='Backend', ctx=Load())], ctx=Load())), ctx=Load())), ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[NameConstant(value=None), Num(n=1), NameConstant(value=None), NameConstant(value=None), NameConstant(value=None), NameConstant(value=None), NameConstant(value=None), NameConstant(value=False), Num(n=1), NameConstant(value=None), NameConstant(value=None)]), body=[Expr(value=Str(s='\n        Args:\n            optimizer: A classical optimizer, see also :class:`~qiskit.algorithms.VQE` for\n                more details on the possible types.\n            reps: the integer parameter :math:`p` as specified in https://arxiv.org/abs/1411.4028,\n                Has a minimum valid value of 1.\n            initial_state: An optional initial state to prepend the QAOA circuit with\n            mixer: the mixer Hamiltonian to evolve with or a custom quantum circuit. Allows support\n                of optimizations in constrained subspaces as per https://arxiv.org/abs/1709.03489\n                as well as warm-starting the optimization as introduced\n                in http://arxiv.org/abs/2009.10095.\n            initial_point: An optional initial point (i.e. initial parameter values)\n                for the optimizer. If ``None`` then it will simply compute a random one.\n            gradient: An optional gradient operator respectively a gradient function used for\n                      optimization.\n            expectation: The Expectation converter for taking the average value of the\n                Observable over the ansatz state function. When None (the default) an\n                :class:`~qiskit.opflow.expectations.ExpectationFactory` is used to select\n                an appropriate expectation based on the operator and backend. When using Aer\n                qasm_simulator backend, with paulis, it is however much faster to leverage custom\n                Aer function for the computation but, although VQE performs much faster\n                with it, the outcome is ideal, with no shot noise, like using a state vector\n                simulator. If you are just looking for the quickest performance when choosing Aer\n                qasm_simulator and the lack of shot noise is not an issue then set `include_custom`\n                parameter here to True (defaults to False).\n            include_custom: When `expectation` parameter here is None setting this to True will\n                allow the factory to include the custom Aer pauli expectation.\n            max_evals_grouped: Max number of evaluations performed simultaneously. Signals the\n                given optimizer that more than one set of parameters can be supplied so that\n                potentially the expectation values can be computed in parallel. Typically this is\n                possible when a finite difference gradient is used by the optimizer such that\n                multiple points to compute the gradient can be passed and if computed in parallel\n                improve overall execution time. Ignored if a gradient operator or function is\n                given.\n            callback: a callback that can access the intermediate data during the optimization.\n                Four parameter values are passed to the callback as follows during each evaluation\n                by the optimizer for its current set of parameters as it works towards the minimum.\n                These are: the evaluation count, the optimizer parameters for the\n                ansatz, the evaluated mean and the evaluated standard deviation.\n            quantum_instance: Quantum Instance or Backend\n        ')), Expr(value=Call(func=Name(id='validate_min', ctx=Load()), args=[Str(s='reps'), Name(id='reps', ctx=Load()), Num(n=1)], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_reps', ctx=Store())], value=Name(id='reps', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_mixer', ctx=Store())], value=Name(id='mixer', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_initial_state', ctx=Store())], value=Name(id='initial_state', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_cost_operator', ctx=Store())], value=NameConstant(value=None)), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[keyword(arg='ansatz', value=NameConstant(value=None)), keyword(arg='optimizer', value=Name(id='optimizer', ctx=Load())), keyword(arg='initial_point', value=Name(id='initial_point', ctx=Load())), keyword(arg='gradient', value=Name(id='gradient', ctx=Load())), keyword(arg='expectation', value=Name(id='expectation', ctx=Load())), keyword(arg='include_custom', value=Name(id='include_custom', ctx=Load())), keyword(arg='max_evals_grouped', value=Name(id='max_evals_grouped', ctx=Load())), keyword(arg='callback', value=Name(id='callback', ctx=Load())), keyword(arg='quantum_instance', value=Name(id='quantum_instance', ctx=Load()))]))], decorator_list=[], returns=NameConstant(value=None)), FunctionDef(name='_check_operator_ansatz', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='operator', annotation=Name(id='OperatorBase', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[If(test=Compare(left=Name(id='operator', ctx=Load()), ops=[NotEq()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='_cost_operator', ctx=Load())]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_cost_operator', ctx=Store())], value=Name(id='operator', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='ansatz', ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id='QAOAAnsatz', ctx=Load()), args=[Name(id='operator', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_reps', ctx=Load())], keywords=[keyword(arg='initial_state', value=Attribute(value=Name(id='self', ctx=Load()), attr='_initial_state', ctx=Load())), keyword(arg='mixer_operator', value=Attribute(value=Name(id='self', ctx=Load()), attr='_mixer', ctx=Load()))]), attr='decompose', ctx=Load()), args=[], keywords=[]))], orelse=[])], decorator_list=[], returns=Name(id='OperatorBase', ctx=Load())), FunctionDef(name='initial_state', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='\n        Returns:\n            Returns the initial state.\n        ')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_initial_state', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Name(id='QuantumCircuit', ctx=Load())), ctx=Load())), FunctionDef(name='initial_state', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='initial_state', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Name(id='QuantumCircuit', ctx=Load())), ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='\n        Args:\n            initial_state: Initial state to set.\n        ')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_initial_state', ctx=Store())], value=Name(id='initial_state', ctx=Load()))], decorator_list=[Attribute(value=Name(id='initial_state', ctx=Load()), attr='setter', ctx=Load())], returns=NameConstant(value=None)), FunctionDef(name='mixer', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='\n        Returns:\n            Returns the mixer.\n        ')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_mixer', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='QuantumCircuit', ctx=Load()), Name(id='OperatorBase', ctx=Load())], ctx=Load())), ctx=Load())), FunctionDef(name='mixer', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='mixer', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='QuantumCircuit', ctx=Load()), Name(id='OperatorBase', ctx=Load())], ctx=Load())), ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='\n        Args:\n            mixer: Mixer to set.\n        ')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_mixer', ctx=Store())], value=Name(id='mixer', ctx=Load()))], decorator_list=[Attribute(value=Name(id='mixer', ctx=Load()), attr='setter', ctx=Load())], returns=NameConstant(value=None))], decorator_list=[])])
Expr(value=Str(s=' The Quantum Approximate Optimization Algorithm. '))
ImportFrom(module='typing', names=[alias(name='List', asname=None), alias(name='Callable', asname=None), alias(name='Optional', asname=None), alias(name='Union', asname=None)], level=0)
Import(names=[alias(name='numpy', asname='np')])
ImportFrom(module='qiskit.algorithms.optimizers', names=[alias(name='Minimizer', asname=None), alias(name='Optimizer', asname=None)], level=0)
ImportFrom(module='qiskit.circuit', names=[alias(name='QuantumCircuit', asname=None)], level=0)
ImportFrom(module='qiskit.opflow', names=[alias(name='OperatorBase', asname=None), alias(name='ExpectationBase', asname=None)], level=0)
ImportFrom(module='qiskit.opflow.gradients', names=[alias(name='GradientBase', asname=None)], level=0)
ImportFrom(module='qiskit.providers', names=[alias(name='Backend', asname=None)], level=0)
ImportFrom(module='qiskit.utils.quantum_instance', names=[alias(name='QuantumInstance', asname=None)], level=0)
ImportFrom(module='qiskit.utils.validation', names=[alias(name='validate_min', asname=None)], level=0)
ImportFrom(module='qiskit.circuit.library.n_local.qaoa_ansatz', names=[alias(name='QAOAAnsatz', asname=None)], level=0)
ImportFrom(module='qiskit.algorithms.minimum_eigen_solvers.vqe', names=[alias(name='VQE', asname=None)], level=0)
ClassDef(name='QAOA', bases=[Name(id='VQE', ctx=Load())], keywords=[], body=[Expr(value=Str(s="\n    The Quantum Approximate Optimization Algorithm.\n\n    `QAOA <https://arxiv.org/abs/1411.4028>`__ is a well-known algorithm for finding approximate\n    solutions to combinatorial-optimization problems.\n\n    The QAOA implementation directly extends :class:`VQE` and inherits VQE's optimization structure.\n    However, unlike VQE, which can be configured with arbitrary ansatzes,\n    QAOA uses its own fine-tuned ansatz, which comprises :math:`p` parameterized global\n    :math:`x` rotations and :math:`p` different parameterizations of the problem hamiltonian.\n    QAOA is thus principally configured  by the single integer parameter, *p*,\n    which dictates the depth of the ansatz, and thus affects the approximation quality.\n\n    An optional array of :math:`2p` parameter values, as the *initial_point*, may be provided as the\n    starting **beta** and **gamma** parameters (as identically named in the\n    original `QAOA paper <https://arxiv.org/abs/1411.4028>`__) for the QAOA ansatz.\n\n    An operator or a parameterized quantum circuit may optionally also be provided as a custom\n    `mixer` Hamiltonian. This allows, as discussed in\n    `this paper <https://doi.org/10.1103/PhysRevApplied.5.034007>`__ for quantum annealing,\n    and in `this paper <https://arxiv.org/abs/1709.03489>`__ for QAOA,\n    to run constrained optimization problems where the mixer constrains\n    the evolution to a feasible subspace of the full Hilbert space.\n    ")), FunctionDef(name='__init__', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='optimizer', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='Optimizer', ctx=Load()), Name(id='Minimizer', ctx=Load())], ctx=Load())), ctx=Load())), ctx=Load())), arg(arg='reps', annotation=Name(id='int', ctx=Load())), arg(arg='initial_state', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Name(id='QuantumCircuit', ctx=Load())), ctx=Load())), arg(arg='mixer', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='QuantumCircuit', ctx=Load()), Name(id='OperatorBase', ctx=Load())], ctx=Load())), ctx=Load())), arg(arg='initial_point', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), ctx=Load())), arg(arg='gradient', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='GradientBase', ctx=Load()), Subscript(value=Name(id='Callable', ctx=Load()), slice=Index(value=Tuple(elts=[List(elts=[Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Name(id='List', ctx=Load())], ctx=Load())), ctx=Load())], ctx=Load()), Name(id='List', ctx=Load())], ctx=Load())), ctx=Load())], ctx=Load())), ctx=Load())), ctx=Load())), arg(arg='expectation', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Name(id='ExpectationBase', ctx=Load())), ctx=Load())), arg(arg='include_custom', annotation=Name(id='bool', ctx=Load())), arg(arg='max_evals_grouped', annotation=Name(id='int', ctx=Load())), arg(arg='callback', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Subscript(value=Name(id='Callable', ctx=Load()), slice=Index(value=Tuple(elts=[List(elts=[Name(id='int', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Name(id='float', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load()), NameConstant(value=None)], ctx=Load())), ctx=Load())), ctx=Load())), arg(arg='quantum_instance', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='QuantumInstance', ctx=Load()), Name(id='Backend', ctx=Load())], ctx=Load())), ctx=Load())), ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[NameConstant(value=None), Num(n=1), NameConstant(value=None), NameConstant(value=None), NameConstant(value=None), NameConstant(value=None), NameConstant(value=None), NameConstant(value=False), Num(n=1), NameConstant(value=None), NameConstant(value=None)]), body=[Expr(value=Str(s='\n        Args:\n            optimizer: A classical optimizer, see also :class:`~qiskit.algorithms.VQE` for\n                more details on the possible types.\n            reps: the integer parameter :math:`p` as specified in https://arxiv.org/abs/1411.4028,\n                Has a minimum valid value of 1.\n            initial_state: An optional initial state to prepend the QAOA circuit with\n            mixer: the mixer Hamiltonian to evolve with or a custom quantum circuit. Allows support\n                of optimizations in constrained subspaces as per https://arxiv.org/abs/1709.03489\n                as well as warm-starting the optimization as introduced\n                in http://arxiv.org/abs/2009.10095.\n            initial_point: An optional initial point (i.e. initial parameter values)\n                for the optimizer. If ``None`` then it will simply compute a random one.\n            gradient: An optional gradient operator respectively a gradient function used for\n                      optimization.\n            expectation: The Expectation converter for taking the average value of the\n                Observable over the ansatz state function. When None (the default) an\n                :class:`~qiskit.opflow.expectations.ExpectationFactory` is used to select\n                an appropriate expectation based on the operator and backend. When using Aer\n                qasm_simulator backend, with paulis, it is however much faster to leverage custom\n                Aer function for the computation but, although VQE performs much faster\n                with it, the outcome is ideal, with no shot noise, like using a state vector\n                simulator. If you are just looking for the quickest performance when choosing Aer\n                qasm_simulator and the lack of shot noise is not an issue then set `include_custom`\n                parameter here to True (defaults to False).\n            include_custom: When `expectation` parameter here is None setting this to True will\n                allow the factory to include the custom Aer pauli expectation.\n            max_evals_grouped: Max number of evaluations performed simultaneously. Signals the\n                given optimizer that more than one set of parameters can be supplied so that\n                potentially the expectation values can be computed in parallel. Typically this is\n                possible when a finite difference gradient is used by the optimizer such that\n                multiple points to compute the gradient can be passed and if computed in parallel\n                improve overall execution time. Ignored if a gradient operator or function is\n                given.\n            callback: a callback that can access the intermediate data during the optimization.\n                Four parameter values are passed to the callback as follows during each evaluation\n                by the optimizer for its current set of parameters as it works towards the minimum.\n                These are: the evaluation count, the optimizer parameters for the\n                ansatz, the evaluated mean and the evaluated standard deviation.\n            quantum_instance: Quantum Instance or Backend\n        ')), Expr(value=Call(func=Name(id='validate_min', ctx=Load()), args=[Str(s='reps'), Name(id='reps', ctx=Load()), Num(n=1)], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_reps', ctx=Store())], value=Name(id='reps', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_mixer', ctx=Store())], value=Name(id='mixer', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_initial_state', ctx=Store())], value=Name(id='initial_state', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_cost_operator', ctx=Store())], value=NameConstant(value=None)), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[keyword(arg='ansatz', value=NameConstant(value=None)), keyword(arg='optimizer', value=Name(id='optimizer', ctx=Load())), keyword(arg='initial_point', value=Name(id='initial_point', ctx=Load())), keyword(arg='gradient', value=Name(id='gradient', ctx=Load())), keyword(arg='expectation', value=Name(id='expectation', ctx=Load())), keyword(arg='include_custom', value=Name(id='include_custom', ctx=Load())), keyword(arg='max_evals_grouped', value=Name(id='max_evals_grouped', ctx=Load())), keyword(arg='callback', value=Name(id='callback', ctx=Load())), keyword(arg='quantum_instance', value=Name(id='quantum_instance', ctx=Load()))]))], decorator_list=[], returns=NameConstant(value=None)), FunctionDef(name='_check_operator_ansatz', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='operator', annotation=Name(id='OperatorBase', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[If(test=Compare(left=Name(id='operator', ctx=Load()), ops=[NotEq()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='_cost_operator', ctx=Load())]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_cost_operator', ctx=Store())], value=Name(id='operator', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='ansatz', ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id='QAOAAnsatz', ctx=Load()), args=[Name(id='operator', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_reps', ctx=Load())], keywords=[keyword(arg='initial_state', value=Attribute(value=Name(id='self', ctx=Load()), attr='_initial_state', ctx=Load())), keyword(arg='mixer_operator', value=Attribute(value=Name(id='self', ctx=Load()), attr='_mixer', ctx=Load()))]), attr='decompose', ctx=Load()), args=[], keywords=[]))], orelse=[])], decorator_list=[], returns=Name(id='OperatorBase', ctx=Load())), FunctionDef(name='initial_state', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='\n        Returns:\n            Returns the initial state.\n        ')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_initial_state', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Name(id='QuantumCircuit', ctx=Load())), ctx=Load())), FunctionDef(name='initial_state', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='initial_state', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Name(id='QuantumCircuit', ctx=Load())), ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='\n        Args:\n            initial_state: Initial state to set.\n        ')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_initial_state', ctx=Store())], value=Name(id='initial_state', ctx=Load()))], decorator_list=[Attribute(value=Name(id='initial_state', ctx=Load()), attr='setter', ctx=Load())], returns=NameConstant(value=None)), FunctionDef(name='mixer', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='\n        Returns:\n            Returns the mixer.\n        ')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_mixer', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='QuantumCircuit', ctx=Load()), Name(id='OperatorBase', ctx=Load())], ctx=Load())), ctx=Load())), FunctionDef(name='mixer', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='mixer', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='QuantumCircuit', ctx=Load()), Name(id='OperatorBase', ctx=Load())], ctx=Load())), ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='\n        Args:\n            mixer: Mixer to set.\n        ')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_mixer', ctx=Store())], value=Name(id='mixer', ctx=Load()))], decorator_list=[Attribute(value=Name(id='mixer', ctx=Load()), attr='setter', ctx=Load())], returns=NameConstant(value=None))], decorator_list=[])
Str(s=' The Quantum Approximate Optimization Algorithm. ')
alias(name='List', asname=None)
alias(name='Callable', asname=None)
alias(name='Optional', asname=None)
alias(name='Union', asname=None)
alias(name='numpy', asname='np')
alias(name='Minimizer', asname=None)
alias(name='Optimizer', asname=None)
alias(name='QuantumCircuit', asname=None)
alias(name='OperatorBase', asname=None)
alias(name='ExpectationBase', asname=None)
alias(name='GradientBase', asname=None)
alias(name='Backend', asname=None)
alias(name='QuantumInstance', asname=None)
alias(name='validate_min', asname=None)
alias(name='QAOAAnsatz', asname=None)
alias(name='VQE', asname=None)
Name(id='VQE', ctx=Load())
Expr(value=Str(s="\n    The Quantum Approximate Optimization Algorithm.\n\n    `QAOA <https://arxiv.org/abs/1411.4028>`__ is a well-known algorithm for finding approximate\n    solutions to combinatorial-optimization problems.\n\n    The QAOA implementation directly extends :class:`VQE` and inherits VQE's optimization structure.\n    However, unlike VQE, which can be configured with arbitrary ansatzes,\n    QAOA uses its own fine-tuned ansatz, which comprises :math:`p` parameterized global\n    :math:`x` rotations and :math:`p` different parameterizations of the problem hamiltonian.\n    QAOA is thus principally configured  by the single integer parameter, *p*,\n    which dictates the depth of the ansatz, and thus affects the approximation quality.\n\n    An optional array of :math:`2p` parameter values, as the *initial_point*, may be provided as the\n    starting **beta** and **gamma** parameters (as identically named in the\n    original `QAOA paper <https://arxiv.org/abs/1411.4028>`__) for the QAOA ansatz.\n\n    An operator or a parameterized quantum circuit may optionally also be provided as a custom\n    `mixer` Hamiltonian. This allows, as discussed in\n    `this paper <https://doi.org/10.1103/PhysRevApplied.5.034007>`__ for quantum annealing,\n    and in `this paper <https://arxiv.org/abs/1709.03489>`__ for QAOA,\n    to run constrained optimization problems where the mixer constrains\n    the evolution to a feasible subspace of the full Hilbert space.\n    "))
FunctionDef(name='__init__', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='optimizer', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='Optimizer', ctx=Load()), Name(id='Minimizer', ctx=Load())], ctx=Load())), ctx=Load())), ctx=Load())), arg(arg='reps', annotation=Name(id='int', ctx=Load())), arg(arg='initial_state', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Name(id='QuantumCircuit', ctx=Load())), ctx=Load())), arg(arg='mixer', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='QuantumCircuit', ctx=Load()), Name(id='OperatorBase', ctx=Load())], ctx=Load())), ctx=Load())), arg(arg='initial_point', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), ctx=Load())), arg(arg='gradient', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='GradientBase', ctx=Load()), Subscript(value=Name(id='Callable', ctx=Load()), slice=Index(value=Tuple(elts=[List(elts=[Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Name(id='List', ctx=Load())], ctx=Load())), ctx=Load())], ctx=Load()), Name(id='List', ctx=Load())], ctx=Load())), ctx=Load())], ctx=Load())), ctx=Load())), ctx=Load())), arg(arg='expectation', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Name(id='ExpectationBase', ctx=Load())), ctx=Load())), arg(arg='include_custom', annotation=Name(id='bool', ctx=Load())), arg(arg='max_evals_grouped', annotation=Name(id='int', ctx=Load())), arg(arg='callback', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Subscript(value=Name(id='Callable', ctx=Load()), slice=Index(value=Tuple(elts=[List(elts=[Name(id='int', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Name(id='float', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load()), NameConstant(value=None)], ctx=Load())), ctx=Load())), ctx=Load())), arg(arg='quantum_instance', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='QuantumInstance', ctx=Load()), Name(id='Backend', ctx=Load())], ctx=Load())), ctx=Load())), ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[NameConstant(value=None), Num(n=1), NameConstant(value=None), NameConstant(value=None), NameConstant(value=None), NameConstant(value=None), NameConstant(value=None), NameConstant(value=False), Num(n=1), NameConstant(value=None), NameConstant(value=None)]), body=[Expr(value=Str(s='\n        Args:\n            optimizer: A classical optimizer, see also :class:`~qiskit.algorithms.VQE` for\n                more details on the possible types.\n            reps: the integer parameter :math:`p` as specified in https://arxiv.org/abs/1411.4028,\n                Has a minimum valid value of 1.\n            initial_state: An optional initial state to prepend the QAOA circuit with\n            mixer: the mixer Hamiltonian to evolve with or a custom quantum circuit. Allows support\n                of optimizations in constrained subspaces as per https://arxiv.org/abs/1709.03489\n                as well as warm-starting the optimization as introduced\n                in http://arxiv.org/abs/2009.10095.\n            initial_point: An optional initial point (i.e. initial parameter values)\n                for the optimizer. If ``None`` then it will simply compute a random one.\n            gradient: An optional gradient operator respectively a gradient function used for\n                      optimization.\n            expectation: The Expectation converter for taking the average value of the\n                Observable over the ansatz state function. When None (the default) an\n                :class:`~qiskit.opflow.expectations.ExpectationFactory` is used to select\n                an appropriate expectation based on the operator and backend. When using Aer\n                qasm_simulator backend, with paulis, it is however much faster to leverage custom\n                Aer function for the computation but, although VQE performs much faster\n                with it, the outcome is ideal, with no shot noise, like using a state vector\n                simulator. If you are just looking for the quickest performance when choosing Aer\n                qasm_simulator and the lack of shot noise is not an issue then set `include_custom`\n                parameter here to True (defaults to False).\n            include_custom: When `expectation` parameter here is None setting this to True will\n                allow the factory to include the custom Aer pauli expectation.\n            max_evals_grouped: Max number of evaluations performed simultaneously. Signals the\n                given optimizer that more than one set of parameters can be supplied so that\n                potentially the expectation values can be computed in parallel. Typically this is\n                possible when a finite difference gradient is used by the optimizer such that\n                multiple points to compute the gradient can be passed and if computed in parallel\n                improve overall execution time. Ignored if a gradient operator or function is\n                given.\n            callback: a callback that can access the intermediate data during the optimization.\n                Four parameter values are passed to the callback as follows during each evaluation\n                by the optimizer for its current set of parameters as it works towards the minimum.\n                These are: the evaluation count, the optimizer parameters for the\n                ansatz, the evaluated mean and the evaluated standard deviation.\n            quantum_instance: Quantum Instance or Backend\n        ')), Expr(value=Call(func=Name(id='validate_min', ctx=Load()), args=[Str(s='reps'), Name(id='reps', ctx=Load()), Num(n=1)], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_reps', ctx=Store())], value=Name(id='reps', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_mixer', ctx=Store())], value=Name(id='mixer', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_initial_state', ctx=Store())], value=Name(id='initial_state', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_cost_operator', ctx=Store())], value=NameConstant(value=None)), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[keyword(arg='ansatz', value=NameConstant(value=None)), keyword(arg='optimizer', value=Name(id='optimizer', ctx=Load())), keyword(arg='initial_point', value=Name(id='initial_point', ctx=Load())), keyword(arg='gradient', value=Name(id='gradient', ctx=Load())), keyword(arg='expectation', value=Name(id='expectation', ctx=Load())), keyword(arg='include_custom', value=Name(id='include_custom', ctx=Load())), keyword(arg='max_evals_grouped', value=Name(id='max_evals_grouped', ctx=Load())), keyword(arg='callback', value=Name(id='callback', ctx=Load())), keyword(arg='quantum_instance', value=Name(id='quantum_instance', ctx=Load()))]))], decorator_list=[], returns=NameConstant(value=None))
FunctionDef(name='_check_operator_ansatz', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='operator', annotation=Name(id='OperatorBase', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[If(test=Compare(left=Name(id='operator', ctx=Load()), ops=[NotEq()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='_cost_operator', ctx=Load())]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_cost_operator', ctx=Store())], value=Name(id='operator', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='ansatz', ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id='QAOAAnsatz', ctx=Load()), args=[Name(id='operator', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_reps', ctx=Load())], keywords=[keyword(arg='initial_state', value=Attribute(value=Name(id='self', ctx=Load()), attr='_initial_state', ctx=Load())), keyword(arg='mixer_operator', value=Attribute(value=Name(id='self', ctx=Load()), attr='_mixer', ctx=Load()))]), attr='decompose', ctx=Load()), args=[], keywords=[]))], orelse=[])], decorator_list=[], returns=Name(id='OperatorBase', ctx=Load()))
FunctionDef(name='initial_state', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='\n        Returns:\n            Returns the initial state.\n        ')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_initial_state', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Name(id='QuantumCircuit', ctx=Load())), ctx=Load()))
FunctionDef(name='initial_state', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='initial_state', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Name(id='QuantumCircuit', ctx=Load())), ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='\n        Args:\n            initial_state: Initial state to set.\n        ')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_initial_state', ctx=Store())], value=Name(id='initial_state', ctx=Load()))], decorator_list=[Attribute(value=Name(id='initial_state', ctx=Load()), attr='setter', ctx=Load())], returns=NameConstant(value=None))
FunctionDef(name='mixer', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='\n        Returns:\n            Returns the mixer.\n        ')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_mixer', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='QuantumCircuit', ctx=Load()), Name(id='OperatorBase', ctx=Load())], ctx=Load())), ctx=Load()))
FunctionDef(name='mixer', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='mixer', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='QuantumCircuit', ctx=Load()), Name(id='OperatorBase', ctx=Load())], ctx=Load())), ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='\n        Args:\n            mixer: Mixer to set.\n        ')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_mixer', ctx=Store())], value=Name(id='mixer', ctx=Load()))], decorator_list=[Attribute(value=Name(id='mixer', ctx=Load()), attr='setter', ctx=Load())], returns=NameConstant(value=None))
Load()
Str(s="\n    The Quantum Approximate Optimization Algorithm.\n\n    `QAOA <https://arxiv.org/abs/1411.4028>`__ is a well-known algorithm for finding approximate\n    solutions to combinatorial-optimization problems.\n\n    The QAOA implementation directly extends :class:`VQE` and inherits VQE's optimization structure.\n    However, unlike VQE, which can be configured with arbitrary ansatzes,\n    QAOA uses its own fine-tuned ansatz, which comprises :math:`p` parameterized global\n    :math:`x` rotations and :math:`p` different parameterizations of the problem hamiltonian.\n    QAOA is thus principally configured  by the single integer parameter, *p*,\n    which dictates the depth of the ansatz, and thus affects the approximation quality.\n\n    An optional array of :math:`2p` parameter values, as the *initial_point*, may be provided as the\n    starting **beta** and **gamma** parameters (as identically named in the\n    original `QAOA paper <https://arxiv.org/abs/1411.4028>`__) for the QAOA ansatz.\n\n    An operator or a parameterized quantum circuit may optionally also be provided as a custom\n    `mixer` Hamiltonian. This allows, as discussed in\n    `this paper <https://doi.org/10.1103/PhysRevApplied.5.034007>`__ for quantum annealing,\n    and in `this paper <https://arxiv.org/abs/1709.03489>`__ for QAOA,\n    to run constrained optimization problems where the mixer constrains\n    the evolution to a feasible subspace of the full Hilbert space.\n    ")
arguments(args=[arg(arg='self', annotation=None), arg(arg='optimizer', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='Optimizer', ctx=Load()), Name(id='Minimizer', ctx=Load())], ctx=Load())), ctx=Load())), ctx=Load())), arg(arg='reps', annotation=Name(id='int', ctx=Load())), arg(arg='initial_state', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Name(id='QuantumCircuit', ctx=Load())), ctx=Load())), arg(arg='mixer', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='QuantumCircuit', ctx=Load()), Name(id='OperatorBase', ctx=Load())], ctx=Load())), ctx=Load())), arg(arg='initial_point', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), ctx=Load())), arg(arg='gradient', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='GradientBase', ctx=Load()), Subscript(value=Name(id='Callable', ctx=Load()), slice=Index(value=Tuple(elts=[List(elts=[Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Name(id='List', ctx=Load())], ctx=Load())), ctx=Load())], ctx=Load()), Name(id='List', ctx=Load())], ctx=Load())), ctx=Load())], ctx=Load())), ctx=Load())), ctx=Load())), arg(arg='expectation', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Name(id='ExpectationBase', ctx=Load())), ctx=Load())), arg(arg='include_custom', annotation=Name(id='bool', ctx=Load())), arg(arg='max_evals_grouped', annotation=Name(id='int', ctx=Load())), arg(arg='callback', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Subscript(value=Name(id='Callable', ctx=Load()), slice=Index(value=Tuple(elts=[List(elts=[Name(id='int', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Name(id='float', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load()), NameConstant(value=None)], ctx=Load())), ctx=Load())), ctx=Load())), arg(arg='quantum_instance', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='QuantumInstance', ctx=Load()), Name(id='Backend', ctx=Load())], ctx=Load())), ctx=Load())), ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[NameConstant(value=None), Num(n=1), NameConstant(value=None), NameConstant(value=None), NameConstant(value=None), NameConstant(value=None), NameConstant(value=None), NameConstant(value=False), Num(n=1), NameConstant(value=None), NameConstant(value=None)])
Expr(value=Str(s='\n        Args:\n            optimizer: A classical optimizer, see also :class:`~qiskit.algorithms.VQE` for\n                more details on the possible types.\n            reps: the integer parameter :math:`p` as specified in https://arxiv.org/abs/1411.4028,\n                Has a minimum valid value of 1.\n            initial_state: An optional initial state to prepend the QAOA circuit with\n            mixer: the mixer Hamiltonian to evolve with or a custom quantum circuit. Allows support\n                of optimizations in constrained subspaces as per https://arxiv.org/abs/1709.03489\n                as well as warm-starting the optimization as introduced\n                in http://arxiv.org/abs/2009.10095.\n            initial_point: An optional initial point (i.e. initial parameter values)\n                for the optimizer. If ``None`` then it will simply compute a random one.\n            gradient: An optional gradient operator respectively a gradient function used for\n                      optimization.\n            expectation: The Expectation converter for taking the average value of the\n                Observable over the ansatz state function. When None (the default) an\n                :class:`~qiskit.opflow.expectations.ExpectationFactory` is used to select\n                an appropriate expectation based on the operator and backend. When using Aer\n                qasm_simulator backend, with paulis, it is however much faster to leverage custom\n                Aer function for the computation but, although VQE performs much faster\n                with it, the outcome is ideal, with no shot noise, like using a state vector\n                simulator. If you are just looking for the quickest performance when choosing Aer\n                qasm_simulator and the lack of shot noise is not an issue then set `include_custom`\n                parameter here to True (defaults to False).\n            include_custom: When `expectation` parameter here is None setting this to True will\n                allow the factory to include the custom Aer pauli expectation.\n            max_evals_grouped: Max number of evaluations performed simultaneously. Signals the\n                given optimizer that more than one set of parameters can be supplied so that\n                potentially the expectation values can be computed in parallel. Typically this is\n                possible when a finite difference gradient is used by the optimizer such that\n                multiple points to compute the gradient can be passed and if computed in parallel\n                improve overall execution time. Ignored if a gradient operator or function is\n                given.\n            callback: a callback that can access the intermediate data during the optimization.\n                Four parameter values are passed to the callback as follows during each evaluation\n                by the optimizer for its current set of parameters as it works towards the minimum.\n                These are: the evaluation count, the optimizer parameters for the\n                ansatz, the evaluated mean and the evaluated standard deviation.\n            quantum_instance: Quantum Instance or Backend\n        '))
Expr(value=Call(func=Name(id='validate_min', ctx=Load()), args=[Str(s='reps'), Name(id='reps', ctx=Load()), Num(n=1)], keywords=[]))
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_reps', ctx=Store())], value=Name(id='reps', ctx=Load()))
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_mixer', ctx=Store())], value=Name(id='mixer', ctx=Load()))
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_initial_state', ctx=Store())], value=Name(id='initial_state', ctx=Load()))
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_cost_operator', ctx=Store())], value=NameConstant(value=None))
Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[keyword(arg='ansatz', value=NameConstant(value=None)), keyword(arg='optimizer', value=Name(id='optimizer', ctx=Load())), keyword(arg='initial_point', value=Name(id='initial_point', ctx=Load())), keyword(arg='gradient', value=Name(id='gradient', ctx=Load())), keyword(arg='expectation', value=Name(id='expectation', ctx=Load())), keyword(arg='include_custom', value=Name(id='include_custom', ctx=Load())), keyword(arg='max_evals_grouped', value=Name(id='max_evals_grouped', ctx=Load())), keyword(arg='callback', value=Name(id='callback', ctx=Load())), keyword(arg='quantum_instance', value=Name(id='quantum_instance', ctx=Load()))]))
NameConstant(value=None)
arguments(args=[arg(arg='self', annotation=None), arg(arg='operator', annotation=Name(id='OperatorBase', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
If(test=Compare(left=Name(id='operator', ctx=Load()), ops=[NotEq()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='_cost_operator', ctx=Load())]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_cost_operator', ctx=Store())], value=Name(id='operator', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='ansatz', ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id='QAOAAnsatz', ctx=Load()), args=[Name(id='operator', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_reps', ctx=Load())], keywords=[keyword(arg='initial_state', value=Attribute(value=Name(id='self', ctx=Load()), attr='_initial_state', ctx=Load())), keyword(arg='mixer_operator', value=Attribute(value=Name(id='self', ctx=Load()), attr='_mixer', ctx=Load()))]), attr='decompose', ctx=Load()), args=[], keywords=[]))], orelse=[])
Name(id='OperatorBase', ctx=Load())
arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Expr(value=Str(s='\n        Returns:\n            Returns the initial state.\n        '))
Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_initial_state', ctx=Load()))
Name(id='property', ctx=Load())
Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Name(id='QuantumCircuit', ctx=Load())), ctx=Load())
arguments(args=[arg(arg='self', annotation=None), arg(arg='initial_state', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Name(id='QuantumCircuit', ctx=Load())), ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Expr(value=Str(s='\n        Args:\n            initial_state: Initial state to set.\n        '))
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_initial_state', ctx=Store())], value=Name(id='initial_state', ctx=Load()))
Attribute(value=Name(id='initial_state', ctx=Load()), attr='setter', ctx=Load())
NameConstant(value=None)
arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Expr(value=Str(s='\n        Returns:\n            Returns the mixer.\n        '))
Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_mixer', ctx=Load()))
Name(id='property', ctx=Load())
Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='QuantumCircuit', ctx=Load()), Name(id='OperatorBase', ctx=Load())], ctx=Load())), ctx=Load())
arguments(args=[arg(arg='self', annotation=None), arg(arg='mixer', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='QuantumCircuit', ctx=Load()), Name(id='OperatorBase', ctx=Load())], ctx=Load())), ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Expr(value=Str(s='\n        Args:\n            mixer: Mixer to set.\n        '))
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_mixer', ctx=Store())], value=Name(id='mixer', ctx=Load()))
Attribute(value=Name(id='mixer', ctx=Load()), attr='setter', ctx=Load())
NameConstant(value=None)
arg(arg='self', annotation=None)
arg(arg='optimizer', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='Optimizer', ctx=Load()), Name(id='Minimizer', ctx=Load())], ctx=Load())), ctx=Load())), ctx=Load()))
arg(arg='reps', annotation=Name(id='int', ctx=Load()))
arg(arg='initial_state', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Name(id='QuantumCircuit', ctx=Load())), ctx=Load()))
arg(arg='mixer', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='QuantumCircuit', ctx=Load()), Name(id='OperatorBase', ctx=Load())], ctx=Load())), ctx=Load()))
arg(arg='initial_point', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), ctx=Load()))
arg(arg='gradient', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='GradientBase', ctx=Load()), Subscript(value=Name(id='Callable', ctx=Load()), slice=Index(value=Tuple(elts=[List(elts=[Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Name(id='List', ctx=Load())], ctx=Load())), ctx=Load())], ctx=Load()), Name(id='List', ctx=Load())], ctx=Load())), ctx=Load())], ctx=Load())), ctx=Load())), ctx=Load()))
arg(arg='expectation', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Name(id='ExpectationBase', ctx=Load())), ctx=Load()))
arg(arg='include_custom', annotation=Name(id='bool', ctx=Load()))
arg(arg='max_evals_grouped', annotation=Name(id='int', ctx=Load()))
arg(arg='callback', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Subscript(value=Name(id='Callable', ctx=Load()), slice=Index(value=Tuple(elts=[List(elts=[Name(id='int', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Name(id='float', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load()), NameConstant(value=None)], ctx=Load())), ctx=Load())), ctx=Load()))
arg(arg='quantum_instance', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='QuantumInstance', ctx=Load()), Name(id='Backend', ctx=Load())], ctx=Load())), ctx=Load())), ctx=Load()))
NameConstant(value=None)
Num(n=1)
NameConstant(value=None)
NameConstant(value=None)
NameConstant(value=None)
NameConstant(value=None)
NameConstant(value=None)
NameConstant(value=False)
Num(n=1)
NameConstant(value=None)
NameConstant(value=None)
Str(s='\n        Args:\n            optimizer: A classical optimizer, see also :class:`~qiskit.algorithms.VQE` for\n                more details on the possible types.\n            reps: the integer parameter :math:`p` as specified in https://arxiv.org/abs/1411.4028,\n                Has a minimum valid value of 1.\n            initial_state: An optional initial state to prepend the QAOA circuit with\n            mixer: the mixer Hamiltonian to evolve with or a custom quantum circuit. Allows support\n                of optimizations in constrained subspaces as per https://arxiv.org/abs/1709.03489\n                as well as warm-starting the optimization as introduced\n                in http://arxiv.org/abs/2009.10095.\n            initial_point: An optional initial point (i.e. initial parameter values)\n                for the optimizer. If ``None`` then it will simply compute a random one.\n            gradient: An optional gradient operator respectively a gradient function used for\n                      optimization.\n            expectation: The Expectation converter for taking the average value of the\n                Observable over the ansatz state function. When None (the default) an\n                :class:`~qiskit.opflow.expectations.ExpectationFactory` is used to select\n                an appropriate expectation based on the operator and backend. When using Aer\n                qasm_simulator backend, with paulis, it is however much faster to leverage custom\n                Aer function for the computation but, although VQE performs much faster\n                with it, the outcome is ideal, with no shot noise, like using a state vector\n                simulator. If you are just looking for the quickest performance when choosing Aer\n                qasm_simulator and the lack of shot noise is not an issue then set `include_custom`\n                parameter here to True (defaults to False).\n            include_custom: When `expectation` parameter here is None setting this to True will\n                allow the factory to include the custom Aer pauli expectation.\n            max_evals_grouped: Max number of evaluations performed simultaneously. Signals the\n                given optimizer that more than one set of parameters can be supplied so that\n                potentially the expectation values can be computed in parallel. Typically this is\n                possible when a finite difference gradient is used by the optimizer such that\n                multiple points to compute the gradient can be passed and if computed in parallel\n                improve overall execution time. Ignored if a gradient operator or function is\n                given.\n            callback: a callback that can access the intermediate data during the optimization.\n                Four parameter values are passed to the callback as follows during each evaluation\n                by the optimizer for its current set of parameters as it works towards the minimum.\n                These are: the evaluation count, the optimizer parameters for the\n                ansatz, the evaluated mean and the evaluated standard deviation.\n            quantum_instance: Quantum Instance or Backend\n        ')
Call(func=Name(id='validate_min', ctx=Load()), args=[Str(s='reps'), Name(id='reps', ctx=Load()), Num(n=1)], keywords=[])
Attribute(value=Name(id='self', ctx=Load()), attr='_reps', ctx=Store())
Name(id='reps', ctx=Load())
Attribute(value=Name(id='self', ctx=Load()), attr='_mixer', ctx=Store())
Name(id='mixer', ctx=Load())
Attribute(value=Name(id='self', ctx=Load()), attr='_initial_state', ctx=Store())
Name(id='initial_state', ctx=Load())
Attribute(value=Name(id='self', ctx=Load()), attr='_cost_operator', ctx=Store())
NameConstant(value=None)
Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[keyword(arg='ansatz', value=NameConstant(value=None)), keyword(arg='optimizer', value=Name(id='optimizer', ctx=Load())), keyword(arg='initial_point', value=Name(id='initial_point', ctx=Load())), keyword(arg='gradient', value=Name(id='gradient', ctx=Load())), keyword(arg='expectation', value=Name(id='expectation', ctx=Load())), keyword(arg='include_custom', value=Name(id='include_custom', ctx=Load())), keyword(arg='max_evals_grouped', value=Name(id='max_evals_grouped', ctx=Load())), keyword(arg='callback', value=Name(id='callback', ctx=Load())), keyword(arg='quantum_instance', value=Name(id='quantum_instance', ctx=Load()))])
arg(arg='self', annotation=None)
arg(arg='operator', annotation=Name(id='OperatorBase', ctx=Load()))
Compare(left=Name(id='operator', ctx=Load()), ops=[NotEq()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='_cost_operator', ctx=Load())])
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_cost_operator', ctx=Store())], value=Name(id='operator', ctx=Load()))
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='ansatz', ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id='QAOAAnsatz', ctx=Load()), args=[Name(id='operator', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_reps', ctx=Load())], keywords=[keyword(arg='initial_state', value=Attribute(value=Name(id='self', ctx=Load()), attr='_initial_state', ctx=Load())), keyword(arg='mixer_operator', value=Attribute(value=Name(id='self', ctx=Load()), attr='_mixer', ctx=Load()))]), attr='decompose', ctx=Load()), args=[], keywords=[]))
Load()
arg(arg='self', annotation=None)
Str(s='\n        Returns:\n            Returns the initial state.\n        ')
Attribute(value=Name(id='self', ctx=Load()), attr='_initial_state', ctx=Load())
Load()
Name(id='Optional', ctx=Load())
Index(value=Name(id='QuantumCircuit', ctx=Load()))
Load()
arg(arg='self', annotation=None)
arg(arg='initial_state', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Name(id='QuantumCircuit', ctx=Load())), ctx=Load()))
Str(s='\n        Args:\n            initial_state: Initial state to set.\n        ')
Attribute(value=Name(id='self', ctx=Load()), attr='_initial_state', ctx=Store())
Name(id='initial_state', ctx=Load())
Name(id='initial_state', ctx=Load())
Load()
arg(arg='self', annotation=None)
Str(s='\n        Returns:\n            Returns the mixer.\n        ')
Attribute(value=Name(id='self', ctx=Load()), attr='_mixer', ctx=Load())
Load()
Name(id='Union', ctx=Load())
Index(value=Tuple(elts=[Name(id='QuantumCircuit', ctx=Load()), Name(id='OperatorBase', ctx=Load())], ctx=Load()))
Load()
arg(arg='self', annotation=None)
arg(arg='mixer', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='QuantumCircuit', ctx=Load()), Name(id='OperatorBase', ctx=Load())], ctx=Load())), ctx=Load()))
Str(s='\n        Args:\n            mixer: Mixer to set.\n        ')
Attribute(value=Name(id='self', ctx=Load()), attr='_mixer', ctx=Store())
Name(id='mixer', ctx=Load())
Name(id='mixer', ctx=Load())
Load()
Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='Optimizer', ctx=Load()), Name(id='Minimizer', ctx=Load())], ctx=Load())), ctx=Load())), ctx=Load())
Name(id='int', ctx=Load())
Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Name(id='QuantumCircuit', ctx=Load())), ctx=Load())
Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='QuantumCircuit', ctx=Load()), Name(id='OperatorBase', ctx=Load())], ctx=Load())), ctx=Load())
Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), ctx=Load())
Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='GradientBase', ctx=Load()), Subscript(value=Name(id='Callable', ctx=Load()), slice=Index(value=Tuple(elts=[List(elts=[Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Name(id='List', ctx=Load())], ctx=Load())), ctx=Load())], ctx=Load()), Name(id='List', ctx=Load())], ctx=Load())), ctx=Load())], ctx=Load())), ctx=Load())), ctx=Load())
Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Name(id='ExpectationBase', ctx=Load())), ctx=Load())
Name(id='bool', ctx=Load())
Name(id='int', ctx=Load())
Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Subscript(value=Name(id='Callable', ctx=Load()), slice=Index(value=Tuple(elts=[List(elts=[Name(id='int', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Name(id='float', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load()), NameConstant(value=None)], ctx=Load())), ctx=Load())), ctx=Load())
Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='QuantumInstance', ctx=Load()), Name(id='Backend', ctx=Load())], ctx=Load())), ctx=Load())), ctx=Load())
Name(id='validate_min', ctx=Load())
Str(s='reps')
Name(id='reps', ctx=Load())
Num(n=1)
Name(id='self', ctx=Load())
Store()
Load()
Name(id='self', ctx=Load())
Store()
Load()
Name(id='self', ctx=Load())
Store()
Load()
Name(id='self', ctx=Load())
Store()
Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load())
keyword(arg='ansatz', value=NameConstant(value=None))
keyword(arg='optimizer', value=Name(id='optimizer', ctx=Load()))
keyword(arg='initial_point', value=Name(id='initial_point', ctx=Load()))
keyword(arg='gradient', value=Name(id='gradient', ctx=Load()))
keyword(arg='expectation', value=Name(id='expectation', ctx=Load()))
keyword(arg='include_custom', value=Name(id='include_custom', ctx=Load()))
keyword(arg='max_evals_grouped', value=Name(id='max_evals_grouped', ctx=Load()))
keyword(arg='callback', value=Name(id='callback', ctx=Load()))
keyword(arg='quantum_instance', value=Name(id='quantum_instance', ctx=Load()))
Name(id='OperatorBase', ctx=Load())
Name(id='operator', ctx=Load())
NotEq()
Attribute(value=Name(id='self', ctx=Load()), attr='_cost_operator', ctx=Load())
Attribute(value=Name(id='self', ctx=Load()), attr='_cost_operator', ctx=Store())
Name(id='operator', ctx=Load())
Attribute(value=Name(id='self', ctx=Load()), attr='ansatz', ctx=Store())
Call(func=Attribute(value=Call(func=Name(id='QAOAAnsatz', ctx=Load()), args=[Name(id='operator', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_reps', ctx=Load())], keywords=[keyword(arg='initial_state', value=Attribute(value=Name(id='self', ctx=Load()), attr='_initial_state', ctx=Load())), keyword(arg='mixer_operator', value=Attribute(value=Name(id='self', ctx=Load()), attr='_mixer', ctx=Load()))]), attr='decompose', ctx=Load()), args=[], keywords=[])
Name(id='self', ctx=Load())
Load()
Load()
Name(id='QuantumCircuit', ctx=Load())
Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Name(id='QuantumCircuit', ctx=Load())), ctx=Load())
Name(id='self', ctx=Load())
Store()
Load()
Load()
Name(id='self', ctx=Load())
Load()
Load()
Tuple(elts=[Name(id='QuantumCircuit', ctx=Load()), Name(id='OperatorBase', ctx=Load())], ctx=Load())
Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='QuantumCircuit', ctx=Load()), Name(id='OperatorBase', ctx=Load())], ctx=Load())), ctx=Load())
Name(id='self', ctx=Load())
Store()
Load()
Load()
Name(id='Optional', ctx=Load())
Index(value=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='Optimizer', ctx=Load()), Name(id='Minimizer', ctx=Load())], ctx=Load())), ctx=Load()))
Load()
Load()
Name(id='Optional', ctx=Load())
Index(value=Name(id='QuantumCircuit', ctx=Load()))
Load()
Name(id='Union', ctx=Load())
Index(value=Tuple(elts=[Name(id='QuantumCircuit', ctx=Load()), Name(id='OperatorBase', ctx=Load())], ctx=Load()))
Load()
Name(id='Optional', ctx=Load())
Index(value=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()))
Load()
Name(id='Optional', ctx=Load())
Index(value=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='GradientBase', ctx=Load()), Subscript(value=Name(id='Callable', ctx=Load()), slice=Index(value=Tuple(elts=[List(elts=[Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Name(id='List', ctx=Load())], ctx=Load())), ctx=Load())], ctx=Load()), Name(id='List', ctx=Load())], ctx=Load())), ctx=Load())], ctx=Load())), ctx=Load()))
Load()
Name(id='Optional', ctx=Load())
Index(value=Name(id='ExpectationBase', ctx=Load()))
Load()
Load()
Load()
Name(id='Optional', ctx=Load())
Index(value=Subscript(value=Name(id='Callable', ctx=Load()), slice=Index(value=Tuple(elts=[List(elts=[Name(id='int', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Name(id='float', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load()), NameConstant(value=None)], ctx=Load())), ctx=Load()))
Load()
Name(id='Optional', ctx=Load())
Index(value=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='QuantumInstance', ctx=Load()), Name(id='Backend', ctx=Load())], ctx=Load())), ctx=Load()))
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Call(func=Name(id='super', ctx=Load()), args=[], keywords=[])
Load()
NameConstant(value=None)
Name(id='optimizer', ctx=Load())
Name(id='initial_point', ctx=Load())
Name(id='gradient', ctx=Load())
Name(id='expectation', ctx=Load())
Name(id='include_custom', ctx=Load())
Name(id='max_evals_grouped', ctx=Load())
Name(id='callback', ctx=Load())
Name(id='quantum_instance', ctx=Load())
Load()
Load()
Name(id='self', ctx=Load())
Load()
Name(id='self', ctx=Load())
Store()
Load()
Name(id='self', ctx=Load())
Store()
Attribute(value=Call(func=Name(id='QAOAAnsatz', ctx=Load()), args=[Name(id='operator', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_reps', ctx=Load())], keywords=[keyword(arg='initial_state', value=Attribute(value=Name(id='self', ctx=Load()), attr='_initial_state', ctx=Load())), keyword(arg='mixer_operator', value=Attribute(value=Name(id='self', ctx=Load()), attr='_mixer', ctx=Load()))]), attr='decompose', ctx=Load())
Load()
Load()
Name(id='Optional', ctx=Load())
Index(value=Name(id='QuantumCircuit', ctx=Load()))
Load()
Load()
Load()
Name(id='QuantumCircuit', ctx=Load())
Name(id='OperatorBase', ctx=Load())
Load()
Name(id='Union', ctx=Load())
Index(value=Tuple(elts=[Name(id='QuantumCircuit', ctx=Load()), Name(id='OperatorBase', ctx=Load())], ctx=Load()))
Load()
Load()
Load()
Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='Optimizer', ctx=Load()), Name(id='Minimizer', ctx=Load())], ctx=Load())), ctx=Load())
Load()
Name(id='QuantumCircuit', ctx=Load())
Load()
Tuple(elts=[Name(id='QuantumCircuit', ctx=Load()), Name(id='OperatorBase', ctx=Load())], ctx=Load())
Load()
Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())
Load()
Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='GradientBase', ctx=Load()), Subscript(value=Name(id='Callable', ctx=Load()), slice=Index(value=Tuple(elts=[List(elts=[Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Name(id='List', ctx=Load())], ctx=Load())), ctx=Load())], ctx=Load()), Name(id='List', ctx=Load())], ctx=Load())), ctx=Load())], ctx=Load())), ctx=Load())
Load()
Name(id='ExpectationBase', ctx=Load())
Load()
Subscript(value=Name(id='Callable', ctx=Load()), slice=Index(value=Tuple(elts=[List(elts=[Name(id='int', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Name(id='float', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load()), NameConstant(value=None)], ctx=Load())), ctx=Load())
Load()
Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='QuantumInstance', ctx=Load()), Name(id='Backend', ctx=Load())], ctx=Load())), ctx=Load())
Name(id='super', ctx=Load())
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Call(func=Name(id='QAOAAnsatz', ctx=Load()), args=[Name(id='operator', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_reps', ctx=Load())], keywords=[keyword(arg='initial_state', value=Attribute(value=Name(id='self', ctx=Load()), attr='_initial_state', ctx=Load())), keyword(arg='mixer_operator', value=Attribute(value=Name(id='self', ctx=Load()), attr='_mixer', ctx=Load()))])
Load()
Load()
Name(id='QuantumCircuit', ctx=Load())
Load()
Load()
Load()
Tuple(elts=[Name(id='QuantumCircuit', ctx=Load()), Name(id='OperatorBase', ctx=Load())], ctx=Load())
Name(id='Union', ctx=Load())
Index(value=Tuple(elts=[Name(id='Optimizer', ctx=Load()), Name(id='Minimizer', ctx=Load())], ctx=Load()))
Load()
Load()
Name(id='QuantumCircuit', ctx=Load())
Name(id='OperatorBase', ctx=Load())
Load()
Name(id='np', ctx=Load())
Load()
Name(id='Union', ctx=Load())
Index(value=Tuple(elts=[Name(id='GradientBase', ctx=Load()), Subscript(value=Name(id='Callable', ctx=Load()), slice=Index(value=Tuple(elts=[List(elts=[Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Name(id='List', ctx=Load())], ctx=Load())), ctx=Load())], ctx=Load()), Name(id='List', ctx=Load())], ctx=Load())), ctx=Load())], ctx=Load()))
Load()
Load()
Name(id='Callable', ctx=Load())
Index(value=Tuple(elts=[List(elts=[Name(id='int', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Name(id='float', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load()), NameConstant(value=None)], ctx=Load()))
Load()
Name(id='Union', ctx=Load())
Index(value=Tuple(elts=[Name(id='QuantumInstance', ctx=Load()), Name(id='Backend', ctx=Load())], ctx=Load()))
Load()
Load()
Name(id='QAOAAnsatz', ctx=Load())
Name(id='operator', ctx=Load())
Attribute(value=Name(id='self', ctx=Load()), attr='_reps', ctx=Load())
keyword(arg='initial_state', value=Attribute(value=Name(id='self', ctx=Load()), attr='_initial_state', ctx=Load()))
keyword(arg='mixer_operator', value=Attribute(value=Name(id='self', ctx=Load()), attr='_mixer', ctx=Load()))
Load()
Name(id='QuantumCircuit', ctx=Load())
Name(id='OperatorBase', ctx=Load())
Load()
Load()
Tuple(elts=[Name(id='Optimizer', ctx=Load()), Name(id='Minimizer', ctx=Load())], ctx=Load())
Load()
Load()
Load()
Load()
Tuple(elts=[Name(id='GradientBase', ctx=Load()), Subscript(value=Name(id='Callable', ctx=Load()), slice=Index(value=Tuple(elts=[List(elts=[Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Name(id='List', ctx=Load())], ctx=Load())), ctx=Load())], ctx=Load()), Name(id='List', ctx=Load())], ctx=Load())), ctx=Load())], ctx=Load())
Load()
Tuple(elts=[List(elts=[Name(id='int', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Name(id='float', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load()), NameConstant(value=None)], ctx=Load())
Load()
Tuple(elts=[Name(id='QuantumInstance', ctx=Load()), Name(id='Backend', ctx=Load())], ctx=Load())
Load()
Load()
Name(id='self', ctx=Load())
Load()
Attribute(value=Name(id='self', ctx=Load()), attr='_initial_state', ctx=Load())
Attribute(value=Name(id='self', ctx=Load()), attr='_mixer', ctx=Load())
Load()
Load()
Name(id='Optimizer', ctx=Load())
Name(id='Minimizer', ctx=Load())
Load()
Name(id='GradientBase', ctx=Load())
Subscript(value=Name(id='Callable', ctx=Load()), slice=Index(value=Tuple(elts=[List(elts=[Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Name(id='List', ctx=Load())], ctx=Load())), ctx=Load())], ctx=Load()), Name(id='List', ctx=Load())], ctx=Load())), ctx=Load())
Load()
List(elts=[Name(id='int', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Name(id='float', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load())
NameConstant(value=None)
Load()
Name(id='QuantumInstance', ctx=Load())
Name(id='Backend', ctx=Load())
Load()
Load()
Name(id='self', ctx=Load())
Load()
Name(id='self', ctx=Load())
Load()
Load()
Load()
Load()
Name(id='Callable', ctx=Load())
Index(value=Tuple(elts=[List(elts=[Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Name(id='List', ctx=Load())], ctx=Load())), ctx=Load())], ctx=Load()), Name(id='List', ctx=Load())], ctx=Load()))
Load()
Name(id='int', ctx=Load())
Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())
Name(id='float', ctx=Load())
Name(id='float', ctx=Load())
Load()
Load()
Load()
Load()
Load()
Load()
Tuple(elts=[List(elts=[Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Name(id='List', ctx=Load())], ctx=Load())), ctx=Load())], ctx=Load()), Name(id='List', ctx=Load())], ctx=Load())
Load()
Name(id='np', ctx=Load())
Load()
Load()
Load()
List(elts=[Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Name(id='List', ctx=Load())], ctx=Load())), ctx=Load())], ctx=Load())
Name(id='List', ctx=Load())
Load()
Load()
Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Name(id='List', ctx=Load())], ctx=Load())), ctx=Load())
Load()
Load()
Name(id='Union', ctx=Load())
Index(value=Tuple(elts=[Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Name(id='List', ctx=Load())], ctx=Load()))
Load()
Load()
Tuple(elts=[Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Name(id='List', ctx=Load())], ctx=Load())
Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())
Name(id='List', ctx=Load())
Load()
Name(id='np', ctx=Load())
Load()
Load()
Load()
  metric  value
0     NC      0
DONE!
