Python 3.7.8
Module(body=[Expr(value=Str(s='Faster Amplitude Estimation.')), ImportFrom(module='typing', names=[alias(name='Optional', asname=None), alias(name='Union', asname=None), alias(name='List', asname=None), alias(name='Tuple', asname=None)], level=0), Import(names=[alias(name='numpy', asname='np')]), ImportFrom(module='qiskit.circuit', names=[alias(name='QuantumCircuit', asname=None), alias(name='ClassicalRegister', asname=None)], level=0), ImportFrom(module='qiskit.providers', names=[alias(name='Backend', asname=None)], level=0), ImportFrom(module='qiskit.utils', names=[alias(name='QuantumInstance', asname=None)], level=0), ImportFrom(module='qiskit.algorithms.exceptions', names=[alias(name='AlgorithmError', asname=None)], level=0), ImportFrom(module='amplitude_estimator', names=[alias(name='AmplitudeEstimator', asname=None), alias(name='AmplitudeEstimatorResult', asname=None)], level=1), ImportFrom(module='estimation_problem', names=[alias(name='EstimationProblem', asname=None)], level=1), ClassDef(name='FasterAmplitudeEstimation', bases=[Name(id='AmplitudeEstimator', ctx=Load())], keywords=[], body=[Expr(value=Str(s='The Faster Amplitude Estimation algorithm.\n\n    The Faster Amplitude Estimation (FAE) [1] algorithm is a variant of Quantum Amplitude\n    Estimation (QAE), where the Quantum Phase Estimation (QPE) by an iterative Grover search,\n    similar to [2].\n\n    Due to the iterative version of the QPE, this algorithm does not require any additional\n    qubits, as the originally proposed QAE [3] and thus the resulting circuits are less complex.\n\n    References:\n\n        [1]: K. Nakaji. Faster Amplitude Estimation, 2020;\n            `arXiv:2002.02417 <https://arxiv.org/pdf/2003.02417.pdf>`_\n        [2]: D. Grinko et al. Iterative Amplitude Estimation, 2019;\n            `arXiv:1912.05559 <http://arxiv.org/abs/1912.05559>`_\n        [3]: G. Brassard et al. Quantum Amplitude Amplification and Estimation, 2000;\n            `arXiv:quant-ph/0005055 <http://arxiv.org/abs/quant-ph/0005055>`_\n\n    ')), FunctionDef(name='__init__', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='delta', annotation=Name(id='float', ctx=Load())), arg(arg='maxiter', annotation=Name(id='int', ctx=Load())), arg(arg='rescale', annotation=Name(id='bool', ctx=Load())), arg(arg='quantum_instance', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='QuantumInstance', ctx=Load()), Name(id='Backend', ctx=Load())], ctx=Load())), ctx=Load())), ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[NameConstant(value=True), NameConstant(value=None)]), body=[Expr(value=Str(s='\n        Args:\n            delta: The probability that the true value is outside of the final confidence interval.\n            maxiter: The number of iterations, the maximal power of Q is `2 ** (maxiter - 1)`.\n            rescale: Whether to rescale the problem passed to `estimate`.\n            quantum_instance: The quantum instance or backend to run the circuits.\n\n        .. note::\n\n            This algorithm overwrites the number of shots set in the ``quantum_instance``\n            argument, but will reset them to the initial number after running.\n\n        ')), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='quantum_instance', ctx=Store())], value=Name(id='quantum_instance', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_shots', ctx=Store())], value=Tuple(elts=[Call(func=Name(id='int', ctx=Load()), args=[BinOp(left=Num(n=1944), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='log', ctx=Load()), args=[BinOp(left=Num(n=2), op=Div(), right=Name(id='delta', ctx=Load()))], keywords=[]))], keywords=[]), Call(func=Name(id='int', ctx=Load()), args=[BinOp(left=Num(n=972), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='log', ctx=Load()), args=[BinOp(left=Num(n=2), op=Div(), right=Name(id='delta', ctx=Load()))], keywords=[]))], keywords=[])], ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_rescale', ctx=Store())], value=Name(id='rescale', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_delta', ctx=Store())], value=Name(id='delta', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_maxiter', ctx=Store())], value=Name(id='maxiter', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_num_oracle_calls', ctx=Store())], value=Num(n=0))], decorator_list=[], returns=NameConstant(value=None)), FunctionDef(name='quantum_instance', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Get the quantum instance.\n\n        Returns:\n            The quantum instance used to run this algorithm.\n        ')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Name(id='QuantumInstance', ctx=Load())), ctx=Load())), FunctionDef(name='quantum_instance', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='quantum_instance', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='QuantumInstance', ctx=Load()), Name(id='Backend', ctx=Load())], ctx=Load())), ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Set quantum instance.\n\n        Args:\n            quantum_instance: The quantum instance used to run this algorithm.\n        ')), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='quantum_instance', ctx=Load()), Name(id='Backend', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='quantum_instance', ctx=Store())], value=Call(func=Name(id='QuantumInstance', ctx=Load()), args=[Name(id='quantum_instance', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Store())], value=Name(id='quantum_instance', ctx=Load()))], decorator_list=[Attribute(value=Name(id='quantum_instance', ctx=Load()), attr='setter', ctx=Load())], returns=NameConstant(value=None)), FunctionDef(name='_cos_estimate', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='estimation_problem', annotation=None), arg(arg='k', annotation=None), arg(arg='shots', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()), ops=[Is()], comparators=[NameConstant(value=None)]), body=[Raise(exc=Call(func=Name(id='AlgorithmError', ctx=Load()), args=[Str(s='Quantum instance must be set.')], keywords=[]), cause=None)], orelse=[]), If(test=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()), attr='is_statevector', ctx=Load()), body=[Assign(targets=[Name(id='circuit', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='construct_circuit', ctx=Load()), args=[Name(id='estimation_problem', ctx=Load()), Name(id='k', ctx=Load())], keywords=[keyword(arg='measurement', value=NameConstant(value=False))])), Assign(targets=[Name(id='statevector', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()), attr='execute', ctx=Load()), args=[Name(id='circuit', ctx=Load())], keywords=[]), attr='get_statevector', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='prob', ctx=Store())], value=Num(n=0)), For(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='amplitude', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='statevector', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='full_state', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Subscript(value=Call(func=Name(id='bin', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]), slice=Slice(lower=Num(n=2), upper=None, step=None), ctx=Load()), attr='zfill', ctx=Load()), args=[Attribute(value=Name(id='circuit', ctx=Load()), attr='num_qubits', ctx=Load())], keywords=[]), slice=Slice(lower=None, upper=None, step=UnaryOp(op=USub(), operand=Num(n=1))), ctx=Load())), Assign(targets=[Name(id='state', ctx=Store())], value=Call(func=Attribute(value=Str(s=''), attr='join', ctx=Load()), args=[ListComp(elt=Subscript(value=Name(id='full_state', ctx=Load()), slice=Index(value=Name(id='i', ctx=Load())), ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='objective_qubits', ctx=Load()), ifs=[], is_async=0)])], keywords=[])), If(test=Call(func=Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='is_good_state', ctx=Load()), args=[Subscript(value=Name(id='state', ctx=Load()), slice=Slice(lower=None, upper=None, step=UnaryOp(op=USub(), operand=Num(n=1))), ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='prob', ctx=Store())], value=BinOp(left=Name(id='prob', ctx=Load()), op=Add(), right=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='abs', ctx=Load()), args=[Name(id='amplitude', ctx=Load())], keywords=[]), op=Pow(), right=Num(n=2))))], orelse=[])], orelse=[]), Assign(targets=[Name(id='cos_estimate', ctx=Store())], value=BinOp(left=Num(n=1), op=Sub(), right=BinOp(left=Num(n=2), op=Mult(), right=Name(id='prob', ctx=Load()))))], orelse=[Assign(targets=[Name(id='circuit', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='construct_circuit', ctx=Load()), args=[Name(id='estimation_problem', ctx=Load()), Name(id='k', ctx=Load())], keywords=[keyword(arg='measurement', value=NameConstant(value=True))])), Assign(targets=[Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()), attr='run_config', ctx=Load()), attr='shots', ctx=Store())], value=Name(id='shots', ctx=Load())), Assign(targets=[Name(id='counts', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()), attr='execute', ctx=Load()), args=[Name(id='circuit', ctx=Load())], keywords=[]), attr='get_counts', ctx=Load()), args=[], keywords=[])), AugAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_num_oracle_calls', ctx=Store()), op=Add(), value=BinOp(left=BinOp(left=BinOp(left=Num(n=2), op=Mult(), right=Name(id='k', ctx=Load())), op=Add(), right=Num(n=1)), op=Mult(), right=Name(id='shots', ctx=Load()))), Assign(targets=[Name(id='good_counts', ctx=Store())], value=Num(n=0)), For(target=Tuple(elts=[Name(id='state', ctx=Store()), Name(id='count', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='counts', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[If(test=Call(func=Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='is_good_state', ctx=Load()), args=[Name(id='state', ctx=Load())], keywords=[]), body=[AugAssign(target=Name(id='good_counts', ctx=Store()), op=Add(), value=Name(id='count', ctx=Load()))], orelse=[])], orelse=[]), Assign(targets=[Name(id='cos_estimate', ctx=Store())], value=BinOp(left=Num(n=1), op=Sub(), right=BinOp(left=BinOp(left=Num(n=2), op=Mult(), right=Name(id='good_counts', ctx=Load())), op=Div(), right=Name(id='shots', ctx=Load()))))]), Return(value=Name(id='cos_estimate', ctx=Load()))], decorator_list=[], returns=None), FunctionDef(name='_chernoff', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='cos', annotation=None), arg(arg='shots', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Assign(targets=[Name(id='width', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sqrt', ctx=Load()), args=[BinOp(left=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='log', ctx=Load()), args=[BinOp(left=Num(n=2), op=Div(), right=Attribute(value=Name(id='self', ctx=Load()), attr='_delta', ctx=Load()))], keywords=[]), op=Mult(), right=Num(n=12)), op=Div(), right=Name(id='shots', ctx=Load()))], keywords=[])), Assign(targets=[Name(id='confint', ctx=Store())], value=List(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='maximum', ctx=Load()), args=[UnaryOp(op=USub(), operand=Num(n=1)), BinOp(left=Name(id='cos', ctx=Load()), op=Sub(), right=Name(id='width', ctx=Load()))], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='minimum', ctx=Load()), args=[Num(n=1), BinOp(left=Name(id='cos', ctx=Load()), op=Add(), right=Name(id='width', ctx=Load()))], keywords=[])], ctx=Load())), Return(value=Name(id='confint', ctx=Load()))], decorator_list=[], returns=None), FunctionDef(name='construct_circuit', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='estimation_problem', annotation=Name(id='EstimationProblem', ctx=Load())), arg(arg='k', annotation=Name(id='int', ctx=Load())), arg(arg='measurement', annotation=Name(id='bool', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[NameConstant(value=False)]), body=[Expr(value=Str(s='Construct the circuit :math:`Q^k X |0\\rangle>`.\n\n        The A operator is the unitary specifying the QAE problem and Q the associated Grover\n        operator.\n\n        Args:\n            estimation_problem: The estimation problem for which to construct the circuit.\n            k: The power of the Q operator.\n            measurement: Boolean flag to indicate if measurements should be included in the\n                circuits.\n\n        Returns:\n            The circuit :math:`Q^k X |0\\rangle`.\n        ')), Assign(targets=[Name(id='num_qubits', ctx=Store())], value=Call(func=Name(id='max', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='state_preparation', ctx=Load()), attr='num_qubits', ctx=Load()), Attribute(value=Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='grover_operator', ctx=Load()), attr='num_qubits', ctx=Load())], keywords=[])), Assign(targets=[Name(id='circuit', ctx=Store())], value=Call(func=Name(id='QuantumCircuit', ctx=Load()), args=[Name(id='num_qubits', ctx=Load())], keywords=[keyword(arg='name', value=Str(s='circuit'))])), If(test=Name(id='measurement', ctx=Load()), body=[Assign(targets=[Name(id='c', ctx=Store())], value=Call(func=Name(id='ClassicalRegister', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='objective_qubits', ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='circuit', ctx=Load()), attr='add_register', ctx=Load()), args=[Name(id='c', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='circuit', ctx=Load()), attr='compose', ctx=Load()), args=[Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='state_preparation', ctx=Load())], keywords=[keyword(arg='inplace', value=NameConstant(value=True))])), If(test=Compare(left=Name(id='k', ctx=Load()), ops=[NotEq()], comparators=[Num(n=0)]), body=[Expr(value=Call(func=Attribute(value=Name(id='circuit', ctx=Load()), attr='compose', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='grover_operator', ctx=Load()), attr='power', ctx=Load()), args=[Name(id='k', ctx=Load())], keywords=[])], keywords=[keyword(arg='inplace', value=NameConstant(value=True))]))], orelse=[]), If(test=Name(id='measurement', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='circuit', ctx=Load()), attr='barrier', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='circuit', ctx=Load()), attr='measure', ctx=Load()), args=[Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='objective_qubits', ctx=Load()), Subscript(value=Name(id='c', ctx=Load()), slice=Slice(lower=None, upper=None, step=None), ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='circuit', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='QuantumCircuit', ctx=Load()), Subscript(value=Name(id='Tuple', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='QuantumCircuit', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='int', ctx=Load())), ctx=Load())], ctx=Load())), ctx=Load())], ctx=Load())), ctx=Load())), FunctionDef(name='estimate', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='estimation_problem', annotation=Name(id='EstimationProblem', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_num_oracle_calls', ctx=Store())], value=Num(n=0)), Assign(targets=[Name(id='user_defined_shots', ctx=Store())], value=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='quantum_instance', ctx=Load()), attr='_run_config', ctx=Load()), attr='shots', ctx=Load())), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='_rescale', ctx=Load()), body=[Assign(targets=[Name(id='problem', ctx=Store())], value=Call(func=Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='rescale', ctx=Load()), args=[Num(n=0.25)], keywords=[]))], orelse=[Assign(targets=[Name(id='problem', ctx=Store())], value=Name(id='estimation_problem', ctx=Load()))]), If(test=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()), attr='is_statevector', ctx=Load()), body=[Assign(targets=[Name(id='cos', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_cos_estimate', ctx=Load()), args=[Name(id='problem', ctx=Load())], keywords=[keyword(arg='k', value=Num(n=0)), keyword(arg='shots', value=Num(n=1))])), Assign(targets=[Name(id='theta', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='arccos', ctx=Load()), args=[Name(id='cos', ctx=Load())], keywords=[]), op=Div(), right=Num(n=2))), Assign(targets=[Name(id='theta_ci', ctx=Store())], value=List(elts=[Name(id='theta', ctx=Load()), Name(id='theta', ctx=Load())], ctx=Load())), Assign(targets=[Name(id='theta_cis', ctx=Store())], value=List(elts=[Name(id='theta_ci', ctx=Load())], ctx=Load())), Assign(targets=[Name(id='num_steps', ctx=Store()), Name(id='num_first_stage_steps', ctx=Store())], value=Num(n=1))], orelse=[Assign(targets=[Name(id='theta_ci', ctx=Store())], value=List(elts=[Num(n=0), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='arcsin', ctx=Load()), args=[Num(n=0.25)], keywords=[])], ctx=Load())), Assign(targets=[Name(id='first_stage', ctx=Store())], value=NameConstant(value=True)), Assign(targets=[Name(id='j_0', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_maxiter', ctx=Load())), Assign(targets=[Name(id='theta_cis', ctx=Store())], value=List(elts=[Name(id='theta_ci', ctx=Load())], ctx=Load())), Assign(targets=[Name(id='num_first_stage_steps', ctx=Store())], value=Num(n=0)), Assign(targets=[Name(id='num_steps', ctx=Store())], value=Num(n=0)), FunctionDef(name='cos_estimate', args=arguments(args=[arg(arg='power', annotation=None), arg(arg='shots', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_cos_estimate', ctx=Load()), args=[Name(id='problem', ctx=Load()), Name(id='power', ctx=Load()), Name(id='shots', ctx=Load())], keywords=[]))], decorator_list=[], returns=None), For(target=Name(id='j', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Num(n=1), BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='_maxiter', ctx=Load()), op=Add(), right=Num(n=1))], keywords=[]), body=[AugAssign(target=Name(id='num_steps', ctx=Store()), op=Add(), value=Num(n=1)), If(test=Name(id='first_stage', ctx=Load()), body=[AugAssign(target=Name(id='num_first_stage_steps', ctx=Store()), op=Add(), value=Num(n=1)), Assign(targets=[Name(id='c', ctx=Store())], value=Call(func=Name(id='cos_estimate', ctx=Load()), args=[BinOp(left=Num(n=2), op=Pow(), right=BinOp(left=Name(id='j', ctx=Load()), op=Sub(), right=Num(n=1))), Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_shots', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())], keywords=[])), Assign(targets=[Name(id='chernoff_ci', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_chernoff', ctx=Load()), args=[Name(id='c', ctx=Load()), Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_shots', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())], keywords=[])), Assign(targets=[Name(id='theta_ci', ctx=Store())], value=ListComp(elt=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='arccos', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), op=Div(), right=BinOp(left=BinOp(left=Num(n=2), op=Pow(), right=BinOp(left=Name(id='j', ctx=Load()), op=Add(), right=Num(n=1))), op=Add(), right=Num(n=2))), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='chernoff_ci', ctx=Load()), slice=Slice(lower=None, upper=None, step=UnaryOp(op=USub(), operand=Num(n=1))), ctx=Load()), ifs=[], is_async=0)])), If(test=BoolOp(op=And(), values=[Compare(left=BinOp(left=BinOp(left=Num(n=2), op=Pow(), right=BinOp(left=Name(id='j', ctx=Load()), op=Add(), right=Num(n=1))), op=Mult(), right=Subscript(value=Name(id='theta_ci', ctx=Load()), slice=Index(value=Num(n=1)), ctx=Load())), ops=[GtE()], comparators=[BinOp(left=BinOp(left=Num(n=3), op=Mult(), right=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load())), op=Div(), right=Num(n=8))]), Compare(left=Name(id='j', ctx=Load()), ops=[Lt()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='_maxiter', ctx=Load())])]), body=[Assign(targets=[Name(id='j_0', ctx=Store())], value=Name(id='j', ctx=Load())), Assign(targets=[Name(id='v', ctx=Store())], value=BinOp(left=BinOp(left=Num(n=2), op=Pow(), right=Name(id='j', ctx=Load())), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sum', ctx=Load()), args=[Name(id='theta_ci', ctx=Load())], keywords=[]))), Assign(targets=[Name(id='first_stage', ctx=Store())], value=NameConstant(value=False))], orelse=[])], orelse=[Assign(targets=[Name(id='cos', ctx=Store())], value=Call(func=Name(id='cos_estimate', ctx=Load()), args=[BinOp(left=Num(n=2), op=Pow(), right=BinOp(left=Name(id='j', ctx=Load()), op=Sub(), right=Num(n=1))), Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_shots', ctx=Load()), slice=Index(value=Num(n=1)), ctx=Load())], keywords=[])), Assign(targets=[Name(id='cos_2', ctx=Store())], value=Call(func=Name(id='cos_estimate', ctx=Load()), args=[BinOp(left=BinOp(left=Num(n=2), op=Pow(), right=BinOp(left=Name(id='j', ctx=Load()), op=Sub(), right=Num(n=1))), op=Add(), right=BinOp(left=Num(n=2), op=Pow(), right=BinOp(left=Name(id='j_0', ctx=Load()), op=Sub(), right=Num(n=1)))), Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_shots', ctx=Load()), slice=Index(value=Num(n=1)), ctx=Load())], keywords=[])), Assign(targets=[Name(id='sin', ctx=Store())], value=BinOp(left=BinOp(left=BinOp(left=Name(id='cos', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='cos', ctx=Load()), args=[Name(id='v', ctx=Load())], keywords=[])), op=Sub(), right=Name(id='cos_2', ctx=Load())), op=Div(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[Name(id='v', ctx=Load())], keywords=[]))), Assign(targets=[Name(id='rho', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='arctan2', ctx=Load()), args=[Name(id='sin', ctx=Load()), Name(id='cos', ctx=Load())], keywords=[])), Assign(targets=[Name(id='n', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Num(n=2), op=Pow(), right=BinOp(left=Name(id='j', ctx=Load()), op=Add(), right=Num(n=1))), op=Add(), right=Num(n=2)), op=Mult(), right=Subscript(value=Name(id='theta_ci', ctx=Load()), slice=Index(value=Num(n=1)), ctx=Load())), op=Sub(), right=Name(id='rho', ctx=Load())), op=Add(), right=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Div(), right=Num(n=3))), op=Div(), right=BinOp(left=Num(n=2), op=Mult(), right=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load())))], keywords=[])), Assign(targets=[Name(id='theta_ci', ctx=Store())], value=ListComp(elt=BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Num(n=2), op=Mult(), right=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load())), op=Mult(), right=Name(id='n', ctx=Load())), op=Add(), right=Name(id='rho', ctx=Load())), op=Add(), right=BinOp(left=BinOp(left=Name(id='sign', ctx=Load()), op=Mult(), right=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load())), op=Div(), right=Num(n=3))), op=Div(), right=BinOp(left=BinOp(left=Num(n=2), op=Pow(), right=BinOp(left=Name(id='j', ctx=Load()), op=Add(), right=Num(n=1))), op=Add(), right=Num(n=2))), generators=[comprehension(target=Name(id='sign', ctx=Store()), iter=List(elts=[UnaryOp(op=USub(), operand=Num(n=1)), Num(n=1)], ctx=Load()), ifs=[], is_async=0)]))]), Expr(value=Call(func=Attribute(value=Name(id='theta_cis', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='theta_ci', ctx=Load())], keywords=[]))], orelse=[])]), Assign(targets=[Name(id='theta', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='mean', ctx=Load()), args=[Name(id='theta_ci', ctx=Load())], keywords=[])), Assign(targets=[Name(id='rescaling', ctx=Store())], value=IfExp(test=Attribute(value=Name(id='self', ctx=Load()), attr='_rescale', ctx=Load()), body=Num(n=4), orelse=Num(n=1))), Assign(targets=[Name(id='value', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='rescaling', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[Name(id='theta', ctx=Load())], keywords=[])), op=Pow(), right=Num(n=2))), Assign(targets=[Name(id='value_ci', ctx=Store())], value=ListComp(elt=BinOp(left=BinOp(left=Name(id='rescaling', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[])), op=Pow(), right=Num(n=2)), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='theta_ci', ctx=Load()), ifs=[], is_async=0)])), Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Name(id='FasterAmplitudeEstimationResult', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='num_oracle_queries', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_num_oracle_calls', ctx=Load())), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='num_steps', ctx=Store())], value=Name(id='num_steps', ctx=Load())), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='num_first_state_steps', ctx=Store())], value=Name(id='num_first_stage_steps', ctx=Load())), If(test=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()), attr='is_statevector', ctx=Load()), body=[Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='success_probability', ctx=Store())], value=Num(n=1))], orelse=[Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='success_probability', ctx=Store())], value=BinOp(left=Num(n=1), op=Sub(), right=BinOp(left=BinOp(left=BinOp(left=Num(n=2), op=Mult(), right=Attribute(value=Name(id='self', ctx=Load()), attr='_maxiter', ctx=Load())), op=Sub(), right=Name(id='j_0', ctx=Load())), op=Mult(), right=Attribute(value=Name(id='self', ctx=Load()), attr='_delta', ctx=Load()))))]), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='estimation', ctx=Store())], value=Name(id='value', ctx=Load())), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='estimation_processed', ctx=Store())], value=Call(func=Attribute(value=Name(id='problem', ctx=Load()), attr='post_processing', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='confidence_interval', ctx=Store())], value=Name(id='value_ci', ctx=Load())), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='confidence_interval_processed', ctx=Store())], value=Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='problem', ctx=Load()), attr='post_processing', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='value_ci', ctx=Load()), ifs=[], is_async=0)])], keywords=[])), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='theta_intervals', ctx=Store())], value=Name(id='theta_cis', ctx=Load())), Assign(targets=[Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='quantum_instance', ctx=Load()), attr='_run_config', ctx=Load()), attr='shots', ctx=Store())], value=Name(id='user_defined_shots', ctx=Load())), Return(value=Name(id='result', ctx=Load()))], decorator_list=[], returns=Str(s='FasterAmplitudeEstimationResult'))], decorator_list=[]), ClassDef(name='FasterAmplitudeEstimationResult', bases=[Name(id='AmplitudeEstimatorResult', ctx=Load())], keywords=[], body=[Expr(value=Str(s='The result object for the Faster Amplitude Estimation algorithm.')), FunctionDef(name='__init__', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_success_probability', ctx=Store())], value=NameConstant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_num_steps', ctx=Store())], value=NameConstant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_num_first_state_steps', ctx=Store())], value=NameConstant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_theta_intervals', ctx=Store())], value=NameConstant(value=None))], decorator_list=[], returns=NameConstant(value=None)), FunctionDef(name='success_probability', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Return the success probability of the algorithm.')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_success_probability', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='int', ctx=Load())), FunctionDef(name='success_probability', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='probability', annotation=Name(id='int', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Set the success probability of the algorithm.')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_success_probability', ctx=Store())], value=Name(id='probability', ctx=Load()))], decorator_list=[Attribute(value=Name(id='success_probability', ctx=Load()), attr='setter', ctx=Load())], returns=NameConstant(value=None)), FunctionDef(name='num_steps', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Return the total number of steps taken in the algorithm.')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_num_steps', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='int', ctx=Load())), FunctionDef(name='num_steps', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='num_steps', annotation=Name(id='int', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Set the total number of steps taken in the algorithm.')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_num_steps', ctx=Store())], value=Name(id='num_steps', ctx=Load()))], decorator_list=[Attribute(value=Name(id='num_steps', ctx=Load()), attr='setter', ctx=Load())], returns=NameConstant(value=None)), FunctionDef(name='num_first_state_steps', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Return the number of steps taken in the first step of algorithm.')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_num_first_state_steps', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='int', ctx=Load())), FunctionDef(name='num_first_state_steps', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='num_steps', annotation=Name(id='int', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Set the number of steps taken in the first step of algorithm.')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_num_first_state_steps', ctx=Store())], value=Name(id='num_steps', ctx=Load()))], decorator_list=[Attribute(value=Name(id='num_first_state_steps', ctx=Load()), attr='setter', ctx=Load())], returns=NameConstant(value=None)), FunctionDef(name='theta_intervals', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Return the confidence intervals for the angles in each iteration.')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_theta_intervals', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='float', ctx=Load())), ctx=Load())), ctx=Load())), FunctionDef(name='theta_intervals', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='value', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='float', ctx=Load())), ctx=Load())), ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Set the confidence intervals for the angles in each iteration.')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_theta_intervals', ctx=Store())], value=Name(id='value', ctx=Load()))], decorator_list=[Attribute(value=Name(id='theta_intervals', ctx=Load()), attr='setter', ctx=Load())], returns=NameConstant(value=None))], decorator_list=[])])
Expr(value=Str(s='Faster Amplitude Estimation.'))
ImportFrom(module='typing', names=[alias(name='Optional', asname=None), alias(name='Union', asname=None), alias(name='List', asname=None), alias(name='Tuple', asname=None)], level=0)
Import(names=[alias(name='numpy', asname='np')])
ImportFrom(module='qiskit.circuit', names=[alias(name='QuantumCircuit', asname=None), alias(name='ClassicalRegister', asname=None)], level=0)
ImportFrom(module='qiskit.providers', names=[alias(name='Backend', asname=None)], level=0)
ImportFrom(module='qiskit.utils', names=[alias(name='QuantumInstance', asname=None)], level=0)
ImportFrom(module='qiskit.algorithms.exceptions', names=[alias(name='AlgorithmError', asname=None)], level=0)
ImportFrom(module='amplitude_estimator', names=[alias(name='AmplitudeEstimator', asname=None), alias(name='AmplitudeEstimatorResult', asname=None)], level=1)
ImportFrom(module='estimation_problem', names=[alias(name='EstimationProblem', asname=None)], level=1)
ClassDef(name='FasterAmplitudeEstimation', bases=[Name(id='AmplitudeEstimator', ctx=Load())], keywords=[], body=[Expr(value=Str(s='The Faster Amplitude Estimation algorithm.\n\n    The Faster Amplitude Estimation (FAE) [1] algorithm is a variant of Quantum Amplitude\n    Estimation (QAE), where the Quantum Phase Estimation (QPE) by an iterative Grover search,\n    similar to [2].\n\n    Due to the iterative version of the QPE, this algorithm does not require any additional\n    qubits, as the originally proposed QAE [3] and thus the resulting circuits are less complex.\n\n    References:\n\n        [1]: K. Nakaji. Faster Amplitude Estimation, 2020;\n            `arXiv:2002.02417 <https://arxiv.org/pdf/2003.02417.pdf>`_\n        [2]: D. Grinko et al. Iterative Amplitude Estimation, 2019;\n            `arXiv:1912.05559 <http://arxiv.org/abs/1912.05559>`_\n        [3]: G. Brassard et al. Quantum Amplitude Amplification and Estimation, 2000;\n            `arXiv:quant-ph/0005055 <http://arxiv.org/abs/quant-ph/0005055>`_\n\n    ')), FunctionDef(name='__init__', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='delta', annotation=Name(id='float', ctx=Load())), arg(arg='maxiter', annotation=Name(id='int', ctx=Load())), arg(arg='rescale', annotation=Name(id='bool', ctx=Load())), arg(arg='quantum_instance', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='QuantumInstance', ctx=Load()), Name(id='Backend', ctx=Load())], ctx=Load())), ctx=Load())), ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[NameConstant(value=True), NameConstant(value=None)]), body=[Expr(value=Str(s='\n        Args:\n            delta: The probability that the true value is outside of the final confidence interval.\n            maxiter: The number of iterations, the maximal power of Q is `2 ** (maxiter - 1)`.\n            rescale: Whether to rescale the problem passed to `estimate`.\n            quantum_instance: The quantum instance or backend to run the circuits.\n\n        .. note::\n\n            This algorithm overwrites the number of shots set in the ``quantum_instance``\n            argument, but will reset them to the initial number after running.\n\n        ')), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='quantum_instance', ctx=Store())], value=Name(id='quantum_instance', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_shots', ctx=Store())], value=Tuple(elts=[Call(func=Name(id='int', ctx=Load()), args=[BinOp(left=Num(n=1944), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='log', ctx=Load()), args=[BinOp(left=Num(n=2), op=Div(), right=Name(id='delta', ctx=Load()))], keywords=[]))], keywords=[]), Call(func=Name(id='int', ctx=Load()), args=[BinOp(left=Num(n=972), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='log', ctx=Load()), args=[BinOp(left=Num(n=2), op=Div(), right=Name(id='delta', ctx=Load()))], keywords=[]))], keywords=[])], ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_rescale', ctx=Store())], value=Name(id='rescale', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_delta', ctx=Store())], value=Name(id='delta', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_maxiter', ctx=Store())], value=Name(id='maxiter', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_num_oracle_calls', ctx=Store())], value=Num(n=0))], decorator_list=[], returns=NameConstant(value=None)), FunctionDef(name='quantum_instance', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Get the quantum instance.\n\n        Returns:\n            The quantum instance used to run this algorithm.\n        ')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Name(id='QuantumInstance', ctx=Load())), ctx=Load())), FunctionDef(name='quantum_instance', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='quantum_instance', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='QuantumInstance', ctx=Load()), Name(id='Backend', ctx=Load())], ctx=Load())), ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Set quantum instance.\n\n        Args:\n            quantum_instance: The quantum instance used to run this algorithm.\n        ')), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='quantum_instance', ctx=Load()), Name(id='Backend', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='quantum_instance', ctx=Store())], value=Call(func=Name(id='QuantumInstance', ctx=Load()), args=[Name(id='quantum_instance', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Store())], value=Name(id='quantum_instance', ctx=Load()))], decorator_list=[Attribute(value=Name(id='quantum_instance', ctx=Load()), attr='setter', ctx=Load())], returns=NameConstant(value=None)), FunctionDef(name='_cos_estimate', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='estimation_problem', annotation=None), arg(arg='k', annotation=None), arg(arg='shots', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()), ops=[Is()], comparators=[NameConstant(value=None)]), body=[Raise(exc=Call(func=Name(id='AlgorithmError', ctx=Load()), args=[Str(s='Quantum instance must be set.')], keywords=[]), cause=None)], orelse=[]), If(test=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()), attr='is_statevector', ctx=Load()), body=[Assign(targets=[Name(id='circuit', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='construct_circuit', ctx=Load()), args=[Name(id='estimation_problem', ctx=Load()), Name(id='k', ctx=Load())], keywords=[keyword(arg='measurement', value=NameConstant(value=False))])), Assign(targets=[Name(id='statevector', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()), attr='execute', ctx=Load()), args=[Name(id='circuit', ctx=Load())], keywords=[]), attr='get_statevector', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='prob', ctx=Store())], value=Num(n=0)), For(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='amplitude', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='statevector', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='full_state', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Subscript(value=Call(func=Name(id='bin', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]), slice=Slice(lower=Num(n=2), upper=None, step=None), ctx=Load()), attr='zfill', ctx=Load()), args=[Attribute(value=Name(id='circuit', ctx=Load()), attr='num_qubits', ctx=Load())], keywords=[]), slice=Slice(lower=None, upper=None, step=UnaryOp(op=USub(), operand=Num(n=1))), ctx=Load())), Assign(targets=[Name(id='state', ctx=Store())], value=Call(func=Attribute(value=Str(s=''), attr='join', ctx=Load()), args=[ListComp(elt=Subscript(value=Name(id='full_state', ctx=Load()), slice=Index(value=Name(id='i', ctx=Load())), ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='objective_qubits', ctx=Load()), ifs=[], is_async=0)])], keywords=[])), If(test=Call(func=Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='is_good_state', ctx=Load()), args=[Subscript(value=Name(id='state', ctx=Load()), slice=Slice(lower=None, upper=None, step=UnaryOp(op=USub(), operand=Num(n=1))), ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='prob', ctx=Store())], value=BinOp(left=Name(id='prob', ctx=Load()), op=Add(), right=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='abs', ctx=Load()), args=[Name(id='amplitude', ctx=Load())], keywords=[]), op=Pow(), right=Num(n=2))))], orelse=[])], orelse=[]), Assign(targets=[Name(id='cos_estimate', ctx=Store())], value=BinOp(left=Num(n=1), op=Sub(), right=BinOp(left=Num(n=2), op=Mult(), right=Name(id='prob', ctx=Load()))))], orelse=[Assign(targets=[Name(id='circuit', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='construct_circuit', ctx=Load()), args=[Name(id='estimation_problem', ctx=Load()), Name(id='k', ctx=Load())], keywords=[keyword(arg='measurement', value=NameConstant(value=True))])), Assign(targets=[Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()), attr='run_config', ctx=Load()), attr='shots', ctx=Store())], value=Name(id='shots', ctx=Load())), Assign(targets=[Name(id='counts', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()), attr='execute', ctx=Load()), args=[Name(id='circuit', ctx=Load())], keywords=[]), attr='get_counts', ctx=Load()), args=[], keywords=[])), AugAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_num_oracle_calls', ctx=Store()), op=Add(), value=BinOp(left=BinOp(left=BinOp(left=Num(n=2), op=Mult(), right=Name(id='k', ctx=Load())), op=Add(), right=Num(n=1)), op=Mult(), right=Name(id='shots', ctx=Load()))), Assign(targets=[Name(id='good_counts', ctx=Store())], value=Num(n=0)), For(target=Tuple(elts=[Name(id='state', ctx=Store()), Name(id='count', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='counts', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[If(test=Call(func=Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='is_good_state', ctx=Load()), args=[Name(id='state', ctx=Load())], keywords=[]), body=[AugAssign(target=Name(id='good_counts', ctx=Store()), op=Add(), value=Name(id='count', ctx=Load()))], orelse=[])], orelse=[]), Assign(targets=[Name(id='cos_estimate', ctx=Store())], value=BinOp(left=Num(n=1), op=Sub(), right=BinOp(left=BinOp(left=Num(n=2), op=Mult(), right=Name(id='good_counts', ctx=Load())), op=Div(), right=Name(id='shots', ctx=Load()))))]), Return(value=Name(id='cos_estimate', ctx=Load()))], decorator_list=[], returns=None), FunctionDef(name='_chernoff', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='cos', annotation=None), arg(arg='shots', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Assign(targets=[Name(id='width', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sqrt', ctx=Load()), args=[BinOp(left=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='log', ctx=Load()), args=[BinOp(left=Num(n=2), op=Div(), right=Attribute(value=Name(id='self', ctx=Load()), attr='_delta', ctx=Load()))], keywords=[]), op=Mult(), right=Num(n=12)), op=Div(), right=Name(id='shots', ctx=Load()))], keywords=[])), Assign(targets=[Name(id='confint', ctx=Store())], value=List(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='maximum', ctx=Load()), args=[UnaryOp(op=USub(), operand=Num(n=1)), BinOp(left=Name(id='cos', ctx=Load()), op=Sub(), right=Name(id='width', ctx=Load()))], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='minimum', ctx=Load()), args=[Num(n=1), BinOp(left=Name(id='cos', ctx=Load()), op=Add(), right=Name(id='width', ctx=Load()))], keywords=[])], ctx=Load())), Return(value=Name(id='confint', ctx=Load()))], decorator_list=[], returns=None), FunctionDef(name='construct_circuit', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='estimation_problem', annotation=Name(id='EstimationProblem', ctx=Load())), arg(arg='k', annotation=Name(id='int', ctx=Load())), arg(arg='measurement', annotation=Name(id='bool', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[NameConstant(value=False)]), body=[Expr(value=Str(s='Construct the circuit :math:`Q^k X |0\\rangle>`.\n\n        The A operator is the unitary specifying the QAE problem and Q the associated Grover\n        operator.\n\n        Args:\n            estimation_problem: The estimation problem for which to construct the circuit.\n            k: The power of the Q operator.\n            measurement: Boolean flag to indicate if measurements should be included in the\n                circuits.\n\n        Returns:\n            The circuit :math:`Q^k X |0\\rangle`.\n        ')), Assign(targets=[Name(id='num_qubits', ctx=Store())], value=Call(func=Name(id='max', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='state_preparation', ctx=Load()), attr='num_qubits', ctx=Load()), Attribute(value=Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='grover_operator', ctx=Load()), attr='num_qubits', ctx=Load())], keywords=[])), Assign(targets=[Name(id='circuit', ctx=Store())], value=Call(func=Name(id='QuantumCircuit', ctx=Load()), args=[Name(id='num_qubits', ctx=Load())], keywords=[keyword(arg='name', value=Str(s='circuit'))])), If(test=Name(id='measurement', ctx=Load()), body=[Assign(targets=[Name(id='c', ctx=Store())], value=Call(func=Name(id='ClassicalRegister', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='objective_qubits', ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='circuit', ctx=Load()), attr='add_register', ctx=Load()), args=[Name(id='c', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='circuit', ctx=Load()), attr='compose', ctx=Load()), args=[Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='state_preparation', ctx=Load())], keywords=[keyword(arg='inplace', value=NameConstant(value=True))])), If(test=Compare(left=Name(id='k', ctx=Load()), ops=[NotEq()], comparators=[Num(n=0)]), body=[Expr(value=Call(func=Attribute(value=Name(id='circuit', ctx=Load()), attr='compose', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='grover_operator', ctx=Load()), attr='power', ctx=Load()), args=[Name(id='k', ctx=Load())], keywords=[])], keywords=[keyword(arg='inplace', value=NameConstant(value=True))]))], orelse=[]), If(test=Name(id='measurement', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='circuit', ctx=Load()), attr='barrier', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='circuit', ctx=Load()), attr='measure', ctx=Load()), args=[Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='objective_qubits', ctx=Load()), Subscript(value=Name(id='c', ctx=Load()), slice=Slice(lower=None, upper=None, step=None), ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='circuit', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='QuantumCircuit', ctx=Load()), Subscript(value=Name(id='Tuple', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='QuantumCircuit', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='int', ctx=Load())), ctx=Load())], ctx=Load())), ctx=Load())], ctx=Load())), ctx=Load())), FunctionDef(name='estimate', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='estimation_problem', annotation=Name(id='EstimationProblem', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_num_oracle_calls', ctx=Store())], value=Num(n=0)), Assign(targets=[Name(id='user_defined_shots', ctx=Store())], value=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='quantum_instance', ctx=Load()), attr='_run_config', ctx=Load()), attr='shots', ctx=Load())), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='_rescale', ctx=Load()), body=[Assign(targets=[Name(id='problem', ctx=Store())], value=Call(func=Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='rescale', ctx=Load()), args=[Num(n=0.25)], keywords=[]))], orelse=[Assign(targets=[Name(id='problem', ctx=Store())], value=Name(id='estimation_problem', ctx=Load()))]), If(test=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()), attr='is_statevector', ctx=Load()), body=[Assign(targets=[Name(id='cos', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_cos_estimate', ctx=Load()), args=[Name(id='problem', ctx=Load())], keywords=[keyword(arg='k', value=Num(n=0)), keyword(arg='shots', value=Num(n=1))])), Assign(targets=[Name(id='theta', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='arccos', ctx=Load()), args=[Name(id='cos', ctx=Load())], keywords=[]), op=Div(), right=Num(n=2))), Assign(targets=[Name(id='theta_ci', ctx=Store())], value=List(elts=[Name(id='theta', ctx=Load()), Name(id='theta', ctx=Load())], ctx=Load())), Assign(targets=[Name(id='theta_cis', ctx=Store())], value=List(elts=[Name(id='theta_ci', ctx=Load())], ctx=Load())), Assign(targets=[Name(id='num_steps', ctx=Store()), Name(id='num_first_stage_steps', ctx=Store())], value=Num(n=1))], orelse=[Assign(targets=[Name(id='theta_ci', ctx=Store())], value=List(elts=[Num(n=0), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='arcsin', ctx=Load()), args=[Num(n=0.25)], keywords=[])], ctx=Load())), Assign(targets=[Name(id='first_stage', ctx=Store())], value=NameConstant(value=True)), Assign(targets=[Name(id='j_0', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_maxiter', ctx=Load())), Assign(targets=[Name(id='theta_cis', ctx=Store())], value=List(elts=[Name(id='theta_ci', ctx=Load())], ctx=Load())), Assign(targets=[Name(id='num_first_stage_steps', ctx=Store())], value=Num(n=0)), Assign(targets=[Name(id='num_steps', ctx=Store())], value=Num(n=0)), FunctionDef(name='cos_estimate', args=arguments(args=[arg(arg='power', annotation=None), arg(arg='shots', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_cos_estimate', ctx=Load()), args=[Name(id='problem', ctx=Load()), Name(id='power', ctx=Load()), Name(id='shots', ctx=Load())], keywords=[]))], decorator_list=[], returns=None), For(target=Name(id='j', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Num(n=1), BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='_maxiter', ctx=Load()), op=Add(), right=Num(n=1))], keywords=[]), body=[AugAssign(target=Name(id='num_steps', ctx=Store()), op=Add(), value=Num(n=1)), If(test=Name(id='first_stage', ctx=Load()), body=[AugAssign(target=Name(id='num_first_stage_steps', ctx=Store()), op=Add(), value=Num(n=1)), Assign(targets=[Name(id='c', ctx=Store())], value=Call(func=Name(id='cos_estimate', ctx=Load()), args=[BinOp(left=Num(n=2), op=Pow(), right=BinOp(left=Name(id='j', ctx=Load()), op=Sub(), right=Num(n=1))), Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_shots', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())], keywords=[])), Assign(targets=[Name(id='chernoff_ci', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_chernoff', ctx=Load()), args=[Name(id='c', ctx=Load()), Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_shots', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())], keywords=[])), Assign(targets=[Name(id='theta_ci', ctx=Store())], value=ListComp(elt=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='arccos', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), op=Div(), right=BinOp(left=BinOp(left=Num(n=2), op=Pow(), right=BinOp(left=Name(id='j', ctx=Load()), op=Add(), right=Num(n=1))), op=Add(), right=Num(n=2))), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='chernoff_ci', ctx=Load()), slice=Slice(lower=None, upper=None, step=UnaryOp(op=USub(), operand=Num(n=1))), ctx=Load()), ifs=[], is_async=0)])), If(test=BoolOp(op=And(), values=[Compare(left=BinOp(left=BinOp(left=Num(n=2), op=Pow(), right=BinOp(left=Name(id='j', ctx=Load()), op=Add(), right=Num(n=1))), op=Mult(), right=Subscript(value=Name(id='theta_ci', ctx=Load()), slice=Index(value=Num(n=1)), ctx=Load())), ops=[GtE()], comparators=[BinOp(left=BinOp(left=Num(n=3), op=Mult(), right=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load())), op=Div(), right=Num(n=8))]), Compare(left=Name(id='j', ctx=Load()), ops=[Lt()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='_maxiter', ctx=Load())])]), body=[Assign(targets=[Name(id='j_0', ctx=Store())], value=Name(id='j', ctx=Load())), Assign(targets=[Name(id='v', ctx=Store())], value=BinOp(left=BinOp(left=Num(n=2), op=Pow(), right=Name(id='j', ctx=Load())), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sum', ctx=Load()), args=[Name(id='theta_ci', ctx=Load())], keywords=[]))), Assign(targets=[Name(id='first_stage', ctx=Store())], value=NameConstant(value=False))], orelse=[])], orelse=[Assign(targets=[Name(id='cos', ctx=Store())], value=Call(func=Name(id='cos_estimate', ctx=Load()), args=[BinOp(left=Num(n=2), op=Pow(), right=BinOp(left=Name(id='j', ctx=Load()), op=Sub(), right=Num(n=1))), Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_shots', ctx=Load()), slice=Index(value=Num(n=1)), ctx=Load())], keywords=[])), Assign(targets=[Name(id='cos_2', ctx=Store())], value=Call(func=Name(id='cos_estimate', ctx=Load()), args=[BinOp(left=BinOp(left=Num(n=2), op=Pow(), right=BinOp(left=Name(id='j', ctx=Load()), op=Sub(), right=Num(n=1))), op=Add(), right=BinOp(left=Num(n=2), op=Pow(), right=BinOp(left=Name(id='j_0', ctx=Load()), op=Sub(), right=Num(n=1)))), Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_shots', ctx=Load()), slice=Index(value=Num(n=1)), ctx=Load())], keywords=[])), Assign(targets=[Name(id='sin', ctx=Store())], value=BinOp(left=BinOp(left=BinOp(left=Name(id='cos', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='cos', ctx=Load()), args=[Name(id='v', ctx=Load())], keywords=[])), op=Sub(), right=Name(id='cos_2', ctx=Load())), op=Div(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[Name(id='v', ctx=Load())], keywords=[]))), Assign(targets=[Name(id='rho', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='arctan2', ctx=Load()), args=[Name(id='sin', ctx=Load()), Name(id='cos', ctx=Load())], keywords=[])), Assign(targets=[Name(id='n', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Num(n=2), op=Pow(), right=BinOp(left=Name(id='j', ctx=Load()), op=Add(), right=Num(n=1))), op=Add(), right=Num(n=2)), op=Mult(), right=Subscript(value=Name(id='theta_ci', ctx=Load()), slice=Index(value=Num(n=1)), ctx=Load())), op=Sub(), right=Name(id='rho', ctx=Load())), op=Add(), right=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Div(), right=Num(n=3))), op=Div(), right=BinOp(left=Num(n=2), op=Mult(), right=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load())))], keywords=[])), Assign(targets=[Name(id='theta_ci', ctx=Store())], value=ListComp(elt=BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Num(n=2), op=Mult(), right=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load())), op=Mult(), right=Name(id='n', ctx=Load())), op=Add(), right=Name(id='rho', ctx=Load())), op=Add(), right=BinOp(left=BinOp(left=Name(id='sign', ctx=Load()), op=Mult(), right=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load())), op=Div(), right=Num(n=3))), op=Div(), right=BinOp(left=BinOp(left=Num(n=2), op=Pow(), right=BinOp(left=Name(id='j', ctx=Load()), op=Add(), right=Num(n=1))), op=Add(), right=Num(n=2))), generators=[comprehension(target=Name(id='sign', ctx=Store()), iter=List(elts=[UnaryOp(op=USub(), operand=Num(n=1)), Num(n=1)], ctx=Load()), ifs=[], is_async=0)]))]), Expr(value=Call(func=Attribute(value=Name(id='theta_cis', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='theta_ci', ctx=Load())], keywords=[]))], orelse=[])]), Assign(targets=[Name(id='theta', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='mean', ctx=Load()), args=[Name(id='theta_ci', ctx=Load())], keywords=[])), Assign(targets=[Name(id='rescaling', ctx=Store())], value=IfExp(test=Attribute(value=Name(id='self', ctx=Load()), attr='_rescale', ctx=Load()), body=Num(n=4), orelse=Num(n=1))), Assign(targets=[Name(id='value', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='rescaling', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[Name(id='theta', ctx=Load())], keywords=[])), op=Pow(), right=Num(n=2))), Assign(targets=[Name(id='value_ci', ctx=Store())], value=ListComp(elt=BinOp(left=BinOp(left=Name(id='rescaling', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[])), op=Pow(), right=Num(n=2)), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='theta_ci', ctx=Load()), ifs=[], is_async=0)])), Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Name(id='FasterAmplitudeEstimationResult', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='num_oracle_queries', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_num_oracle_calls', ctx=Load())), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='num_steps', ctx=Store())], value=Name(id='num_steps', ctx=Load())), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='num_first_state_steps', ctx=Store())], value=Name(id='num_first_stage_steps', ctx=Load())), If(test=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()), attr='is_statevector', ctx=Load()), body=[Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='success_probability', ctx=Store())], value=Num(n=1))], orelse=[Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='success_probability', ctx=Store())], value=BinOp(left=Num(n=1), op=Sub(), right=BinOp(left=BinOp(left=BinOp(left=Num(n=2), op=Mult(), right=Attribute(value=Name(id='self', ctx=Load()), attr='_maxiter', ctx=Load())), op=Sub(), right=Name(id='j_0', ctx=Load())), op=Mult(), right=Attribute(value=Name(id='self', ctx=Load()), attr='_delta', ctx=Load()))))]), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='estimation', ctx=Store())], value=Name(id='value', ctx=Load())), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='estimation_processed', ctx=Store())], value=Call(func=Attribute(value=Name(id='problem', ctx=Load()), attr='post_processing', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='confidence_interval', ctx=Store())], value=Name(id='value_ci', ctx=Load())), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='confidence_interval_processed', ctx=Store())], value=Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='problem', ctx=Load()), attr='post_processing', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='value_ci', ctx=Load()), ifs=[], is_async=0)])], keywords=[])), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='theta_intervals', ctx=Store())], value=Name(id='theta_cis', ctx=Load())), Assign(targets=[Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='quantum_instance', ctx=Load()), attr='_run_config', ctx=Load()), attr='shots', ctx=Store())], value=Name(id='user_defined_shots', ctx=Load())), Return(value=Name(id='result', ctx=Load()))], decorator_list=[], returns=Str(s='FasterAmplitudeEstimationResult'))], decorator_list=[])
ClassDef(name='FasterAmplitudeEstimationResult', bases=[Name(id='AmplitudeEstimatorResult', ctx=Load())], keywords=[], body=[Expr(value=Str(s='The result object for the Faster Amplitude Estimation algorithm.')), FunctionDef(name='__init__', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_success_probability', ctx=Store())], value=NameConstant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_num_steps', ctx=Store())], value=NameConstant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_num_first_state_steps', ctx=Store())], value=NameConstant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_theta_intervals', ctx=Store())], value=NameConstant(value=None))], decorator_list=[], returns=NameConstant(value=None)), FunctionDef(name='success_probability', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Return the success probability of the algorithm.')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_success_probability', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='int', ctx=Load())), FunctionDef(name='success_probability', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='probability', annotation=Name(id='int', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Set the success probability of the algorithm.')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_success_probability', ctx=Store())], value=Name(id='probability', ctx=Load()))], decorator_list=[Attribute(value=Name(id='success_probability', ctx=Load()), attr='setter', ctx=Load())], returns=NameConstant(value=None)), FunctionDef(name='num_steps', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Return the total number of steps taken in the algorithm.')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_num_steps', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='int', ctx=Load())), FunctionDef(name='num_steps', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='num_steps', annotation=Name(id='int', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Set the total number of steps taken in the algorithm.')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_num_steps', ctx=Store())], value=Name(id='num_steps', ctx=Load()))], decorator_list=[Attribute(value=Name(id='num_steps', ctx=Load()), attr='setter', ctx=Load())], returns=NameConstant(value=None)), FunctionDef(name='num_first_state_steps', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Return the number of steps taken in the first step of algorithm.')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_num_first_state_steps', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='int', ctx=Load())), FunctionDef(name='num_first_state_steps', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='num_steps', annotation=Name(id='int', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Set the number of steps taken in the first step of algorithm.')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_num_first_state_steps', ctx=Store())], value=Name(id='num_steps', ctx=Load()))], decorator_list=[Attribute(value=Name(id='num_first_state_steps', ctx=Load()), attr='setter', ctx=Load())], returns=NameConstant(value=None)), FunctionDef(name='theta_intervals', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Return the confidence intervals for the angles in each iteration.')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_theta_intervals', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='float', ctx=Load())), ctx=Load())), ctx=Load())), FunctionDef(name='theta_intervals', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='value', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='float', ctx=Load())), ctx=Load())), ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Set the confidence intervals for the angles in each iteration.')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_theta_intervals', ctx=Store())], value=Name(id='value', ctx=Load()))], decorator_list=[Attribute(value=Name(id='theta_intervals', ctx=Load()), attr='setter', ctx=Load())], returns=NameConstant(value=None))], decorator_list=[])
Str(s='Faster Amplitude Estimation.')
alias(name='Optional', asname=None)
alias(name='Union', asname=None)
alias(name='List', asname=None)
alias(name='Tuple', asname=None)
alias(name='numpy', asname='np')
alias(name='QuantumCircuit', asname=None)
alias(name='ClassicalRegister', asname=None)
alias(name='Backend', asname=None)
alias(name='QuantumInstance', asname=None)
alias(name='AlgorithmError', asname=None)
alias(name='AmplitudeEstimator', asname=None)
alias(name='AmplitudeEstimatorResult', asname=None)
alias(name='EstimationProblem', asname=None)
Name(id='AmplitudeEstimator', ctx=Load())
Expr(value=Str(s='The Faster Amplitude Estimation algorithm.\n\n    The Faster Amplitude Estimation (FAE) [1] algorithm is a variant of Quantum Amplitude\n    Estimation (QAE), where the Quantum Phase Estimation (QPE) by an iterative Grover search,\n    similar to [2].\n\n    Due to the iterative version of the QPE, this algorithm does not require any additional\n    qubits, as the originally proposed QAE [3] and thus the resulting circuits are less complex.\n\n    References:\n\n        [1]: K. Nakaji. Faster Amplitude Estimation, 2020;\n            `arXiv:2002.02417 <https://arxiv.org/pdf/2003.02417.pdf>`_\n        [2]: D. Grinko et al. Iterative Amplitude Estimation, 2019;\n            `arXiv:1912.05559 <http://arxiv.org/abs/1912.05559>`_\n        [3]: G. Brassard et al. Quantum Amplitude Amplification and Estimation, 2000;\n            `arXiv:quant-ph/0005055 <http://arxiv.org/abs/quant-ph/0005055>`_\n\n    '))
FunctionDef(name='__init__', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='delta', annotation=Name(id='float', ctx=Load())), arg(arg='maxiter', annotation=Name(id='int', ctx=Load())), arg(arg='rescale', annotation=Name(id='bool', ctx=Load())), arg(arg='quantum_instance', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='QuantumInstance', ctx=Load()), Name(id='Backend', ctx=Load())], ctx=Load())), ctx=Load())), ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[NameConstant(value=True), NameConstant(value=None)]), body=[Expr(value=Str(s='\n        Args:\n            delta: The probability that the true value is outside of the final confidence interval.\n            maxiter: The number of iterations, the maximal power of Q is `2 ** (maxiter - 1)`.\n            rescale: Whether to rescale the problem passed to `estimate`.\n            quantum_instance: The quantum instance or backend to run the circuits.\n\n        .. note::\n\n            This algorithm overwrites the number of shots set in the ``quantum_instance``\n            argument, but will reset them to the initial number after running.\n\n        ')), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='quantum_instance', ctx=Store())], value=Name(id='quantum_instance', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_shots', ctx=Store())], value=Tuple(elts=[Call(func=Name(id='int', ctx=Load()), args=[BinOp(left=Num(n=1944), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='log', ctx=Load()), args=[BinOp(left=Num(n=2), op=Div(), right=Name(id='delta', ctx=Load()))], keywords=[]))], keywords=[]), Call(func=Name(id='int', ctx=Load()), args=[BinOp(left=Num(n=972), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='log', ctx=Load()), args=[BinOp(left=Num(n=2), op=Div(), right=Name(id='delta', ctx=Load()))], keywords=[]))], keywords=[])], ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_rescale', ctx=Store())], value=Name(id='rescale', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_delta', ctx=Store())], value=Name(id='delta', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_maxiter', ctx=Store())], value=Name(id='maxiter', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_num_oracle_calls', ctx=Store())], value=Num(n=0))], decorator_list=[], returns=NameConstant(value=None))
FunctionDef(name='quantum_instance', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Get the quantum instance.\n\n        Returns:\n            The quantum instance used to run this algorithm.\n        ')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Name(id='QuantumInstance', ctx=Load())), ctx=Load()))
FunctionDef(name='quantum_instance', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='quantum_instance', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='QuantumInstance', ctx=Load()), Name(id='Backend', ctx=Load())], ctx=Load())), ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Set quantum instance.\n\n        Args:\n            quantum_instance: The quantum instance used to run this algorithm.\n        ')), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='quantum_instance', ctx=Load()), Name(id='Backend', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='quantum_instance', ctx=Store())], value=Call(func=Name(id='QuantumInstance', ctx=Load()), args=[Name(id='quantum_instance', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Store())], value=Name(id='quantum_instance', ctx=Load()))], decorator_list=[Attribute(value=Name(id='quantum_instance', ctx=Load()), attr='setter', ctx=Load())], returns=NameConstant(value=None))
FunctionDef(name='_cos_estimate', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='estimation_problem', annotation=None), arg(arg='k', annotation=None), arg(arg='shots', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()), ops=[Is()], comparators=[NameConstant(value=None)]), body=[Raise(exc=Call(func=Name(id='AlgorithmError', ctx=Load()), args=[Str(s='Quantum instance must be set.')], keywords=[]), cause=None)], orelse=[]), If(test=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()), attr='is_statevector', ctx=Load()), body=[Assign(targets=[Name(id='circuit', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='construct_circuit', ctx=Load()), args=[Name(id='estimation_problem', ctx=Load()), Name(id='k', ctx=Load())], keywords=[keyword(arg='measurement', value=NameConstant(value=False))])), Assign(targets=[Name(id='statevector', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()), attr='execute', ctx=Load()), args=[Name(id='circuit', ctx=Load())], keywords=[]), attr='get_statevector', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='prob', ctx=Store())], value=Num(n=0)), For(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='amplitude', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='statevector', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='full_state', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Subscript(value=Call(func=Name(id='bin', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]), slice=Slice(lower=Num(n=2), upper=None, step=None), ctx=Load()), attr='zfill', ctx=Load()), args=[Attribute(value=Name(id='circuit', ctx=Load()), attr='num_qubits', ctx=Load())], keywords=[]), slice=Slice(lower=None, upper=None, step=UnaryOp(op=USub(), operand=Num(n=1))), ctx=Load())), Assign(targets=[Name(id='state', ctx=Store())], value=Call(func=Attribute(value=Str(s=''), attr='join', ctx=Load()), args=[ListComp(elt=Subscript(value=Name(id='full_state', ctx=Load()), slice=Index(value=Name(id='i', ctx=Load())), ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='objective_qubits', ctx=Load()), ifs=[], is_async=0)])], keywords=[])), If(test=Call(func=Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='is_good_state', ctx=Load()), args=[Subscript(value=Name(id='state', ctx=Load()), slice=Slice(lower=None, upper=None, step=UnaryOp(op=USub(), operand=Num(n=1))), ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='prob', ctx=Store())], value=BinOp(left=Name(id='prob', ctx=Load()), op=Add(), right=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='abs', ctx=Load()), args=[Name(id='amplitude', ctx=Load())], keywords=[]), op=Pow(), right=Num(n=2))))], orelse=[])], orelse=[]), Assign(targets=[Name(id='cos_estimate', ctx=Store())], value=BinOp(left=Num(n=1), op=Sub(), right=BinOp(left=Num(n=2), op=Mult(), right=Name(id='prob', ctx=Load()))))], orelse=[Assign(targets=[Name(id='circuit', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='construct_circuit', ctx=Load()), args=[Name(id='estimation_problem', ctx=Load()), Name(id='k', ctx=Load())], keywords=[keyword(arg='measurement', value=NameConstant(value=True))])), Assign(targets=[Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()), attr='run_config', ctx=Load()), attr='shots', ctx=Store())], value=Name(id='shots', ctx=Load())), Assign(targets=[Name(id='counts', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()), attr='execute', ctx=Load()), args=[Name(id='circuit', ctx=Load())], keywords=[]), attr='get_counts', ctx=Load()), args=[], keywords=[])), AugAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_num_oracle_calls', ctx=Store()), op=Add(), value=BinOp(left=BinOp(left=BinOp(left=Num(n=2), op=Mult(), right=Name(id='k', ctx=Load())), op=Add(), right=Num(n=1)), op=Mult(), right=Name(id='shots', ctx=Load()))), Assign(targets=[Name(id='good_counts', ctx=Store())], value=Num(n=0)), For(target=Tuple(elts=[Name(id='state', ctx=Store()), Name(id='count', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='counts', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[If(test=Call(func=Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='is_good_state', ctx=Load()), args=[Name(id='state', ctx=Load())], keywords=[]), body=[AugAssign(target=Name(id='good_counts', ctx=Store()), op=Add(), value=Name(id='count', ctx=Load()))], orelse=[])], orelse=[]), Assign(targets=[Name(id='cos_estimate', ctx=Store())], value=BinOp(left=Num(n=1), op=Sub(), right=BinOp(left=BinOp(left=Num(n=2), op=Mult(), right=Name(id='good_counts', ctx=Load())), op=Div(), right=Name(id='shots', ctx=Load()))))]), Return(value=Name(id='cos_estimate', ctx=Load()))], decorator_list=[], returns=None)
FunctionDef(name='_chernoff', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='cos', annotation=None), arg(arg='shots', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Assign(targets=[Name(id='width', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sqrt', ctx=Load()), args=[BinOp(left=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='log', ctx=Load()), args=[BinOp(left=Num(n=2), op=Div(), right=Attribute(value=Name(id='self', ctx=Load()), attr='_delta', ctx=Load()))], keywords=[]), op=Mult(), right=Num(n=12)), op=Div(), right=Name(id='shots', ctx=Load()))], keywords=[])), Assign(targets=[Name(id='confint', ctx=Store())], value=List(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='maximum', ctx=Load()), args=[UnaryOp(op=USub(), operand=Num(n=1)), BinOp(left=Name(id='cos', ctx=Load()), op=Sub(), right=Name(id='width', ctx=Load()))], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='minimum', ctx=Load()), args=[Num(n=1), BinOp(left=Name(id='cos', ctx=Load()), op=Add(), right=Name(id='width', ctx=Load()))], keywords=[])], ctx=Load())), Return(value=Name(id='confint', ctx=Load()))], decorator_list=[], returns=None)
FunctionDef(name='construct_circuit', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='estimation_problem', annotation=Name(id='EstimationProblem', ctx=Load())), arg(arg='k', annotation=Name(id='int', ctx=Load())), arg(arg='measurement', annotation=Name(id='bool', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[NameConstant(value=False)]), body=[Expr(value=Str(s='Construct the circuit :math:`Q^k X |0\\rangle>`.\n\n        The A operator is the unitary specifying the QAE problem and Q the associated Grover\n        operator.\n\n        Args:\n            estimation_problem: The estimation problem for which to construct the circuit.\n            k: The power of the Q operator.\n            measurement: Boolean flag to indicate if measurements should be included in the\n                circuits.\n\n        Returns:\n            The circuit :math:`Q^k X |0\\rangle`.\n        ')), Assign(targets=[Name(id='num_qubits', ctx=Store())], value=Call(func=Name(id='max', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='state_preparation', ctx=Load()), attr='num_qubits', ctx=Load()), Attribute(value=Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='grover_operator', ctx=Load()), attr='num_qubits', ctx=Load())], keywords=[])), Assign(targets=[Name(id='circuit', ctx=Store())], value=Call(func=Name(id='QuantumCircuit', ctx=Load()), args=[Name(id='num_qubits', ctx=Load())], keywords=[keyword(arg='name', value=Str(s='circuit'))])), If(test=Name(id='measurement', ctx=Load()), body=[Assign(targets=[Name(id='c', ctx=Store())], value=Call(func=Name(id='ClassicalRegister', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='objective_qubits', ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='circuit', ctx=Load()), attr='add_register', ctx=Load()), args=[Name(id='c', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='circuit', ctx=Load()), attr='compose', ctx=Load()), args=[Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='state_preparation', ctx=Load())], keywords=[keyword(arg='inplace', value=NameConstant(value=True))])), If(test=Compare(left=Name(id='k', ctx=Load()), ops=[NotEq()], comparators=[Num(n=0)]), body=[Expr(value=Call(func=Attribute(value=Name(id='circuit', ctx=Load()), attr='compose', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='grover_operator', ctx=Load()), attr='power', ctx=Load()), args=[Name(id='k', ctx=Load())], keywords=[])], keywords=[keyword(arg='inplace', value=NameConstant(value=True))]))], orelse=[]), If(test=Name(id='measurement', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='circuit', ctx=Load()), attr='barrier', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='circuit', ctx=Load()), attr='measure', ctx=Load()), args=[Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='objective_qubits', ctx=Load()), Subscript(value=Name(id='c', ctx=Load()), slice=Slice(lower=None, upper=None, step=None), ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='circuit', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='QuantumCircuit', ctx=Load()), Subscript(value=Name(id='Tuple', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='QuantumCircuit', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='int', ctx=Load())), ctx=Load())], ctx=Load())), ctx=Load())], ctx=Load())), ctx=Load()))
FunctionDef(name='estimate', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='estimation_problem', annotation=Name(id='EstimationProblem', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_num_oracle_calls', ctx=Store())], value=Num(n=0)), Assign(targets=[Name(id='user_defined_shots', ctx=Store())], value=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='quantum_instance', ctx=Load()), attr='_run_config', ctx=Load()), attr='shots', ctx=Load())), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='_rescale', ctx=Load()), body=[Assign(targets=[Name(id='problem', ctx=Store())], value=Call(func=Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='rescale', ctx=Load()), args=[Num(n=0.25)], keywords=[]))], orelse=[Assign(targets=[Name(id='problem', ctx=Store())], value=Name(id='estimation_problem', ctx=Load()))]), If(test=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()), attr='is_statevector', ctx=Load()), body=[Assign(targets=[Name(id='cos', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_cos_estimate', ctx=Load()), args=[Name(id='problem', ctx=Load())], keywords=[keyword(arg='k', value=Num(n=0)), keyword(arg='shots', value=Num(n=1))])), Assign(targets=[Name(id='theta', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='arccos', ctx=Load()), args=[Name(id='cos', ctx=Load())], keywords=[]), op=Div(), right=Num(n=2))), Assign(targets=[Name(id='theta_ci', ctx=Store())], value=List(elts=[Name(id='theta', ctx=Load()), Name(id='theta', ctx=Load())], ctx=Load())), Assign(targets=[Name(id='theta_cis', ctx=Store())], value=List(elts=[Name(id='theta_ci', ctx=Load())], ctx=Load())), Assign(targets=[Name(id='num_steps', ctx=Store()), Name(id='num_first_stage_steps', ctx=Store())], value=Num(n=1))], orelse=[Assign(targets=[Name(id='theta_ci', ctx=Store())], value=List(elts=[Num(n=0), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='arcsin', ctx=Load()), args=[Num(n=0.25)], keywords=[])], ctx=Load())), Assign(targets=[Name(id='first_stage', ctx=Store())], value=NameConstant(value=True)), Assign(targets=[Name(id='j_0', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_maxiter', ctx=Load())), Assign(targets=[Name(id='theta_cis', ctx=Store())], value=List(elts=[Name(id='theta_ci', ctx=Load())], ctx=Load())), Assign(targets=[Name(id='num_first_stage_steps', ctx=Store())], value=Num(n=0)), Assign(targets=[Name(id='num_steps', ctx=Store())], value=Num(n=0)), FunctionDef(name='cos_estimate', args=arguments(args=[arg(arg='power', annotation=None), arg(arg='shots', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_cos_estimate', ctx=Load()), args=[Name(id='problem', ctx=Load()), Name(id='power', ctx=Load()), Name(id='shots', ctx=Load())], keywords=[]))], decorator_list=[], returns=None), For(target=Name(id='j', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Num(n=1), BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='_maxiter', ctx=Load()), op=Add(), right=Num(n=1))], keywords=[]), body=[AugAssign(target=Name(id='num_steps', ctx=Store()), op=Add(), value=Num(n=1)), If(test=Name(id='first_stage', ctx=Load()), body=[AugAssign(target=Name(id='num_first_stage_steps', ctx=Store()), op=Add(), value=Num(n=1)), Assign(targets=[Name(id='c', ctx=Store())], value=Call(func=Name(id='cos_estimate', ctx=Load()), args=[BinOp(left=Num(n=2), op=Pow(), right=BinOp(left=Name(id='j', ctx=Load()), op=Sub(), right=Num(n=1))), Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_shots', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())], keywords=[])), Assign(targets=[Name(id='chernoff_ci', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_chernoff', ctx=Load()), args=[Name(id='c', ctx=Load()), Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_shots', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())], keywords=[])), Assign(targets=[Name(id='theta_ci', ctx=Store())], value=ListComp(elt=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='arccos', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), op=Div(), right=BinOp(left=BinOp(left=Num(n=2), op=Pow(), right=BinOp(left=Name(id='j', ctx=Load()), op=Add(), right=Num(n=1))), op=Add(), right=Num(n=2))), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='chernoff_ci', ctx=Load()), slice=Slice(lower=None, upper=None, step=UnaryOp(op=USub(), operand=Num(n=1))), ctx=Load()), ifs=[], is_async=0)])), If(test=BoolOp(op=And(), values=[Compare(left=BinOp(left=BinOp(left=Num(n=2), op=Pow(), right=BinOp(left=Name(id='j', ctx=Load()), op=Add(), right=Num(n=1))), op=Mult(), right=Subscript(value=Name(id='theta_ci', ctx=Load()), slice=Index(value=Num(n=1)), ctx=Load())), ops=[GtE()], comparators=[BinOp(left=BinOp(left=Num(n=3), op=Mult(), right=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load())), op=Div(), right=Num(n=8))]), Compare(left=Name(id='j', ctx=Load()), ops=[Lt()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='_maxiter', ctx=Load())])]), body=[Assign(targets=[Name(id='j_0', ctx=Store())], value=Name(id='j', ctx=Load())), Assign(targets=[Name(id='v', ctx=Store())], value=BinOp(left=BinOp(left=Num(n=2), op=Pow(), right=Name(id='j', ctx=Load())), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sum', ctx=Load()), args=[Name(id='theta_ci', ctx=Load())], keywords=[]))), Assign(targets=[Name(id='first_stage', ctx=Store())], value=NameConstant(value=False))], orelse=[])], orelse=[Assign(targets=[Name(id='cos', ctx=Store())], value=Call(func=Name(id='cos_estimate', ctx=Load()), args=[BinOp(left=Num(n=2), op=Pow(), right=BinOp(left=Name(id='j', ctx=Load()), op=Sub(), right=Num(n=1))), Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_shots', ctx=Load()), slice=Index(value=Num(n=1)), ctx=Load())], keywords=[])), Assign(targets=[Name(id='cos_2', ctx=Store())], value=Call(func=Name(id='cos_estimate', ctx=Load()), args=[BinOp(left=BinOp(left=Num(n=2), op=Pow(), right=BinOp(left=Name(id='j', ctx=Load()), op=Sub(), right=Num(n=1))), op=Add(), right=BinOp(left=Num(n=2), op=Pow(), right=BinOp(left=Name(id='j_0', ctx=Load()), op=Sub(), right=Num(n=1)))), Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_shots', ctx=Load()), slice=Index(value=Num(n=1)), ctx=Load())], keywords=[])), Assign(targets=[Name(id='sin', ctx=Store())], value=BinOp(left=BinOp(left=BinOp(left=Name(id='cos', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='cos', ctx=Load()), args=[Name(id='v', ctx=Load())], keywords=[])), op=Sub(), right=Name(id='cos_2', ctx=Load())), op=Div(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[Name(id='v', ctx=Load())], keywords=[]))), Assign(targets=[Name(id='rho', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='arctan2', ctx=Load()), args=[Name(id='sin', ctx=Load()), Name(id='cos', ctx=Load())], keywords=[])), Assign(targets=[Name(id='n', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Num(n=2), op=Pow(), right=BinOp(left=Name(id='j', ctx=Load()), op=Add(), right=Num(n=1))), op=Add(), right=Num(n=2)), op=Mult(), right=Subscript(value=Name(id='theta_ci', ctx=Load()), slice=Index(value=Num(n=1)), ctx=Load())), op=Sub(), right=Name(id='rho', ctx=Load())), op=Add(), right=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Div(), right=Num(n=3))), op=Div(), right=BinOp(left=Num(n=2), op=Mult(), right=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load())))], keywords=[])), Assign(targets=[Name(id='theta_ci', ctx=Store())], value=ListComp(elt=BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Num(n=2), op=Mult(), right=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load())), op=Mult(), right=Name(id='n', ctx=Load())), op=Add(), right=Name(id='rho', ctx=Load())), op=Add(), right=BinOp(left=BinOp(left=Name(id='sign', ctx=Load()), op=Mult(), right=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load())), op=Div(), right=Num(n=3))), op=Div(), right=BinOp(left=BinOp(left=Num(n=2), op=Pow(), right=BinOp(left=Name(id='j', ctx=Load()), op=Add(), right=Num(n=1))), op=Add(), right=Num(n=2))), generators=[comprehension(target=Name(id='sign', ctx=Store()), iter=List(elts=[UnaryOp(op=USub(), operand=Num(n=1)), Num(n=1)], ctx=Load()), ifs=[], is_async=0)]))]), Expr(value=Call(func=Attribute(value=Name(id='theta_cis', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='theta_ci', ctx=Load())], keywords=[]))], orelse=[])]), Assign(targets=[Name(id='theta', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='mean', ctx=Load()), args=[Name(id='theta_ci', ctx=Load())], keywords=[])), Assign(targets=[Name(id='rescaling', ctx=Store())], value=IfExp(test=Attribute(value=Name(id='self', ctx=Load()), attr='_rescale', ctx=Load()), body=Num(n=4), orelse=Num(n=1))), Assign(targets=[Name(id='value', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='rescaling', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[Name(id='theta', ctx=Load())], keywords=[])), op=Pow(), right=Num(n=2))), Assign(targets=[Name(id='value_ci', ctx=Store())], value=ListComp(elt=BinOp(left=BinOp(left=Name(id='rescaling', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[])), op=Pow(), right=Num(n=2)), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='theta_ci', ctx=Load()), ifs=[], is_async=0)])), Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Name(id='FasterAmplitudeEstimationResult', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='num_oracle_queries', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_num_oracle_calls', ctx=Load())), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='num_steps', ctx=Store())], value=Name(id='num_steps', ctx=Load())), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='num_first_state_steps', ctx=Store())], value=Name(id='num_first_stage_steps', ctx=Load())), If(test=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()), attr='is_statevector', ctx=Load()), body=[Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='success_probability', ctx=Store())], value=Num(n=1))], orelse=[Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='success_probability', ctx=Store())], value=BinOp(left=Num(n=1), op=Sub(), right=BinOp(left=BinOp(left=BinOp(left=Num(n=2), op=Mult(), right=Attribute(value=Name(id='self', ctx=Load()), attr='_maxiter', ctx=Load())), op=Sub(), right=Name(id='j_0', ctx=Load())), op=Mult(), right=Attribute(value=Name(id='self', ctx=Load()), attr='_delta', ctx=Load()))))]), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='estimation', ctx=Store())], value=Name(id='value', ctx=Load())), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='estimation_processed', ctx=Store())], value=Call(func=Attribute(value=Name(id='problem', ctx=Load()), attr='post_processing', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='confidence_interval', ctx=Store())], value=Name(id='value_ci', ctx=Load())), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='confidence_interval_processed', ctx=Store())], value=Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='problem', ctx=Load()), attr='post_processing', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='value_ci', ctx=Load()), ifs=[], is_async=0)])], keywords=[])), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='theta_intervals', ctx=Store())], value=Name(id='theta_cis', ctx=Load())), Assign(targets=[Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='quantum_instance', ctx=Load()), attr='_run_config', ctx=Load()), attr='shots', ctx=Store())], value=Name(id='user_defined_shots', ctx=Load())), Return(value=Name(id='result', ctx=Load()))], decorator_list=[], returns=Str(s='FasterAmplitudeEstimationResult'))
Name(id='AmplitudeEstimatorResult', ctx=Load())
Expr(value=Str(s='The result object for the Faster Amplitude Estimation algorithm.'))
FunctionDef(name='__init__', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_success_probability', ctx=Store())], value=NameConstant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_num_steps', ctx=Store())], value=NameConstant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_num_first_state_steps', ctx=Store())], value=NameConstant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_theta_intervals', ctx=Store())], value=NameConstant(value=None))], decorator_list=[], returns=NameConstant(value=None))
FunctionDef(name='success_probability', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Return the success probability of the algorithm.')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_success_probability', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='int', ctx=Load()))
FunctionDef(name='success_probability', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='probability', annotation=Name(id='int', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Set the success probability of the algorithm.')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_success_probability', ctx=Store())], value=Name(id='probability', ctx=Load()))], decorator_list=[Attribute(value=Name(id='success_probability', ctx=Load()), attr='setter', ctx=Load())], returns=NameConstant(value=None))
FunctionDef(name='num_steps', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Return the total number of steps taken in the algorithm.')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_num_steps', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='int', ctx=Load()))
FunctionDef(name='num_steps', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='num_steps', annotation=Name(id='int', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Set the total number of steps taken in the algorithm.')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_num_steps', ctx=Store())], value=Name(id='num_steps', ctx=Load()))], decorator_list=[Attribute(value=Name(id='num_steps', ctx=Load()), attr='setter', ctx=Load())], returns=NameConstant(value=None))
FunctionDef(name='num_first_state_steps', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Return the number of steps taken in the first step of algorithm.')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_num_first_state_steps', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='int', ctx=Load()))
FunctionDef(name='num_first_state_steps', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='num_steps', annotation=Name(id='int', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Set the number of steps taken in the first step of algorithm.')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_num_first_state_steps', ctx=Store())], value=Name(id='num_steps', ctx=Load()))], decorator_list=[Attribute(value=Name(id='num_first_state_steps', ctx=Load()), attr='setter', ctx=Load())], returns=NameConstant(value=None))
FunctionDef(name='theta_intervals', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Return the confidence intervals for the angles in each iteration.')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_theta_intervals', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='float', ctx=Load())), ctx=Load())), ctx=Load()))
FunctionDef(name='theta_intervals', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='value', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='float', ctx=Load())), ctx=Load())), ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Set the confidence intervals for the angles in each iteration.')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_theta_intervals', ctx=Store())], value=Name(id='value', ctx=Load()))], decorator_list=[Attribute(value=Name(id='theta_intervals', ctx=Load()), attr='setter', ctx=Load())], returns=NameConstant(value=None))
Load()
Str(s='The Faster Amplitude Estimation algorithm.\n\n    The Faster Amplitude Estimation (FAE) [1] algorithm is a variant of Quantum Amplitude\n    Estimation (QAE), where the Quantum Phase Estimation (QPE) by an iterative Grover search,\n    similar to [2].\n\n    Due to the iterative version of the QPE, this algorithm does not require any additional\n    qubits, as the originally proposed QAE [3] and thus the resulting circuits are less complex.\n\n    References:\n\n        [1]: K. Nakaji. Faster Amplitude Estimation, 2020;\n            `arXiv:2002.02417 <https://arxiv.org/pdf/2003.02417.pdf>`_\n        [2]: D. Grinko et al. Iterative Amplitude Estimation, 2019;\n            `arXiv:1912.05559 <http://arxiv.org/abs/1912.05559>`_\n        [3]: G. Brassard et al. Quantum Amplitude Amplification and Estimation, 2000;\n            `arXiv:quant-ph/0005055 <http://arxiv.org/abs/quant-ph/0005055>`_\n\n    ')
arguments(args=[arg(arg='self', annotation=None), arg(arg='delta', annotation=Name(id='float', ctx=Load())), arg(arg='maxiter', annotation=Name(id='int', ctx=Load())), arg(arg='rescale', annotation=Name(id='bool', ctx=Load())), arg(arg='quantum_instance', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='QuantumInstance', ctx=Load()), Name(id='Backend', ctx=Load())], ctx=Load())), ctx=Load())), ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[NameConstant(value=True), NameConstant(value=None)])
Expr(value=Str(s='\n        Args:\n            delta: The probability that the true value is outside of the final confidence interval.\n            maxiter: The number of iterations, the maximal power of Q is `2 ** (maxiter - 1)`.\n            rescale: Whether to rescale the problem passed to `estimate`.\n            quantum_instance: The quantum instance or backend to run the circuits.\n\n        .. note::\n\n            This algorithm overwrites the number of shots set in the ``quantum_instance``\n            argument, but will reset them to the initial number after running.\n\n        '))
Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[]))
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='quantum_instance', ctx=Store())], value=Name(id='quantum_instance', ctx=Load()))
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_shots', ctx=Store())], value=Tuple(elts=[Call(func=Name(id='int', ctx=Load()), args=[BinOp(left=Num(n=1944), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='log', ctx=Load()), args=[BinOp(left=Num(n=2), op=Div(), right=Name(id='delta', ctx=Load()))], keywords=[]))], keywords=[]), Call(func=Name(id='int', ctx=Load()), args=[BinOp(left=Num(n=972), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='log', ctx=Load()), args=[BinOp(left=Num(n=2), op=Div(), right=Name(id='delta', ctx=Load()))], keywords=[]))], keywords=[])], ctx=Load()))
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_rescale', ctx=Store())], value=Name(id='rescale', ctx=Load()))
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_delta', ctx=Store())], value=Name(id='delta', ctx=Load()))
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_maxiter', ctx=Store())], value=Name(id='maxiter', ctx=Load()))
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_num_oracle_calls', ctx=Store())], value=Num(n=0))
NameConstant(value=None)
arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Expr(value=Str(s='Get the quantum instance.\n\n        Returns:\n            The quantum instance used to run this algorithm.\n        '))
Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()))
Name(id='property', ctx=Load())
Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Name(id='QuantumInstance', ctx=Load())), ctx=Load())
arguments(args=[arg(arg='self', annotation=None), arg(arg='quantum_instance', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='QuantumInstance', ctx=Load()), Name(id='Backend', ctx=Load())], ctx=Load())), ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Expr(value=Str(s='Set quantum instance.\n\n        Args:\n            quantum_instance: The quantum instance used to run this algorithm.\n        '))
If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='quantum_instance', ctx=Load()), Name(id='Backend', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='quantum_instance', ctx=Store())], value=Call(func=Name(id='QuantumInstance', ctx=Load()), args=[Name(id='quantum_instance', ctx=Load())], keywords=[]))], orelse=[])
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Store())], value=Name(id='quantum_instance', ctx=Load()))
Attribute(value=Name(id='quantum_instance', ctx=Load()), attr='setter', ctx=Load())
NameConstant(value=None)
arguments(args=[arg(arg='self', annotation=None), arg(arg='estimation_problem', annotation=None), arg(arg='k', annotation=None), arg(arg='shots', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()), ops=[Is()], comparators=[NameConstant(value=None)]), body=[Raise(exc=Call(func=Name(id='AlgorithmError', ctx=Load()), args=[Str(s='Quantum instance must be set.')], keywords=[]), cause=None)], orelse=[])
If(test=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()), attr='is_statevector', ctx=Load()), body=[Assign(targets=[Name(id='circuit', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='construct_circuit', ctx=Load()), args=[Name(id='estimation_problem', ctx=Load()), Name(id='k', ctx=Load())], keywords=[keyword(arg='measurement', value=NameConstant(value=False))])), Assign(targets=[Name(id='statevector', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()), attr='execute', ctx=Load()), args=[Name(id='circuit', ctx=Load())], keywords=[]), attr='get_statevector', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='prob', ctx=Store())], value=Num(n=0)), For(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='amplitude', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='statevector', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='full_state', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Subscript(value=Call(func=Name(id='bin', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]), slice=Slice(lower=Num(n=2), upper=None, step=None), ctx=Load()), attr='zfill', ctx=Load()), args=[Attribute(value=Name(id='circuit', ctx=Load()), attr='num_qubits', ctx=Load())], keywords=[]), slice=Slice(lower=None, upper=None, step=UnaryOp(op=USub(), operand=Num(n=1))), ctx=Load())), Assign(targets=[Name(id='state', ctx=Store())], value=Call(func=Attribute(value=Str(s=''), attr='join', ctx=Load()), args=[ListComp(elt=Subscript(value=Name(id='full_state', ctx=Load()), slice=Index(value=Name(id='i', ctx=Load())), ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='objective_qubits', ctx=Load()), ifs=[], is_async=0)])], keywords=[])), If(test=Call(func=Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='is_good_state', ctx=Load()), args=[Subscript(value=Name(id='state', ctx=Load()), slice=Slice(lower=None, upper=None, step=UnaryOp(op=USub(), operand=Num(n=1))), ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='prob', ctx=Store())], value=BinOp(left=Name(id='prob', ctx=Load()), op=Add(), right=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='abs', ctx=Load()), args=[Name(id='amplitude', ctx=Load())], keywords=[]), op=Pow(), right=Num(n=2))))], orelse=[])], orelse=[]), Assign(targets=[Name(id='cos_estimate', ctx=Store())], value=BinOp(left=Num(n=1), op=Sub(), right=BinOp(left=Num(n=2), op=Mult(), right=Name(id='prob', ctx=Load()))))], orelse=[Assign(targets=[Name(id='circuit', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='construct_circuit', ctx=Load()), args=[Name(id='estimation_problem', ctx=Load()), Name(id='k', ctx=Load())], keywords=[keyword(arg='measurement', value=NameConstant(value=True))])), Assign(targets=[Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()), attr='run_config', ctx=Load()), attr='shots', ctx=Store())], value=Name(id='shots', ctx=Load())), Assign(targets=[Name(id='counts', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()), attr='execute', ctx=Load()), args=[Name(id='circuit', ctx=Load())], keywords=[]), attr='get_counts', ctx=Load()), args=[], keywords=[])), AugAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_num_oracle_calls', ctx=Store()), op=Add(), value=BinOp(left=BinOp(left=BinOp(left=Num(n=2), op=Mult(), right=Name(id='k', ctx=Load())), op=Add(), right=Num(n=1)), op=Mult(), right=Name(id='shots', ctx=Load()))), Assign(targets=[Name(id='good_counts', ctx=Store())], value=Num(n=0)), For(target=Tuple(elts=[Name(id='state', ctx=Store()), Name(id='count', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='counts', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[If(test=Call(func=Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='is_good_state', ctx=Load()), args=[Name(id='state', ctx=Load())], keywords=[]), body=[AugAssign(target=Name(id='good_counts', ctx=Store()), op=Add(), value=Name(id='count', ctx=Load()))], orelse=[])], orelse=[]), Assign(targets=[Name(id='cos_estimate', ctx=Store())], value=BinOp(left=Num(n=1), op=Sub(), right=BinOp(left=BinOp(left=Num(n=2), op=Mult(), right=Name(id='good_counts', ctx=Load())), op=Div(), right=Name(id='shots', ctx=Load()))))])
Return(value=Name(id='cos_estimate', ctx=Load()))
arguments(args=[arg(arg='self', annotation=None), arg(arg='cos', annotation=None), arg(arg='shots', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Assign(targets=[Name(id='width', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sqrt', ctx=Load()), args=[BinOp(left=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='log', ctx=Load()), args=[BinOp(left=Num(n=2), op=Div(), right=Attribute(value=Name(id='self', ctx=Load()), attr='_delta', ctx=Load()))], keywords=[]), op=Mult(), right=Num(n=12)), op=Div(), right=Name(id='shots', ctx=Load()))], keywords=[]))
Assign(targets=[Name(id='confint', ctx=Store())], value=List(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='maximum', ctx=Load()), args=[UnaryOp(op=USub(), operand=Num(n=1)), BinOp(left=Name(id='cos', ctx=Load()), op=Sub(), right=Name(id='width', ctx=Load()))], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='minimum', ctx=Load()), args=[Num(n=1), BinOp(left=Name(id='cos', ctx=Load()), op=Add(), right=Name(id='width', ctx=Load()))], keywords=[])], ctx=Load()))
Return(value=Name(id='confint', ctx=Load()))
arguments(args=[arg(arg='self', annotation=None), arg(arg='estimation_problem', annotation=Name(id='EstimationProblem', ctx=Load())), arg(arg='k', annotation=Name(id='int', ctx=Load())), arg(arg='measurement', annotation=Name(id='bool', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[NameConstant(value=False)])
Expr(value=Str(s='Construct the circuit :math:`Q^k X |0\\rangle>`.\n\n        The A operator is the unitary specifying the QAE problem and Q the associated Grover\n        operator.\n\n        Args:\n            estimation_problem: The estimation problem for which to construct the circuit.\n            k: The power of the Q operator.\n            measurement: Boolean flag to indicate if measurements should be included in the\n                circuits.\n\n        Returns:\n            The circuit :math:`Q^k X |0\\rangle`.\n        '))
Assign(targets=[Name(id='num_qubits', ctx=Store())], value=Call(func=Name(id='max', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='state_preparation', ctx=Load()), attr='num_qubits', ctx=Load()), Attribute(value=Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='grover_operator', ctx=Load()), attr='num_qubits', ctx=Load())], keywords=[]))
Assign(targets=[Name(id='circuit', ctx=Store())], value=Call(func=Name(id='QuantumCircuit', ctx=Load()), args=[Name(id='num_qubits', ctx=Load())], keywords=[keyword(arg='name', value=Str(s='circuit'))]))
If(test=Name(id='measurement', ctx=Load()), body=[Assign(targets=[Name(id='c', ctx=Store())], value=Call(func=Name(id='ClassicalRegister', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='objective_qubits', ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='circuit', ctx=Load()), attr='add_register', ctx=Load()), args=[Name(id='c', ctx=Load())], keywords=[]))], orelse=[])
Expr(value=Call(func=Attribute(value=Name(id='circuit', ctx=Load()), attr='compose', ctx=Load()), args=[Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='state_preparation', ctx=Load())], keywords=[keyword(arg='inplace', value=NameConstant(value=True))]))
If(test=Compare(left=Name(id='k', ctx=Load()), ops=[NotEq()], comparators=[Num(n=0)]), body=[Expr(value=Call(func=Attribute(value=Name(id='circuit', ctx=Load()), attr='compose', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='grover_operator', ctx=Load()), attr='power', ctx=Load()), args=[Name(id='k', ctx=Load())], keywords=[])], keywords=[keyword(arg='inplace', value=NameConstant(value=True))]))], orelse=[])
If(test=Name(id='measurement', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='circuit', ctx=Load()), attr='barrier', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='circuit', ctx=Load()), attr='measure', ctx=Load()), args=[Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='objective_qubits', ctx=Load()), Subscript(value=Name(id='c', ctx=Load()), slice=Slice(lower=None, upper=None, step=None), ctx=Load())], keywords=[]))], orelse=[])
Return(value=Name(id='circuit', ctx=Load()))
Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='QuantumCircuit', ctx=Load()), Subscript(value=Name(id='Tuple', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='QuantumCircuit', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='int', ctx=Load())), ctx=Load())], ctx=Load())), ctx=Load())], ctx=Load())), ctx=Load())
arguments(args=[arg(arg='self', annotation=None), arg(arg='estimation_problem', annotation=Name(id='EstimationProblem', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_num_oracle_calls', ctx=Store())], value=Num(n=0))
Assign(targets=[Name(id='user_defined_shots', ctx=Store())], value=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='quantum_instance', ctx=Load()), attr='_run_config', ctx=Load()), attr='shots', ctx=Load()))
If(test=Attribute(value=Name(id='self', ctx=Load()), attr='_rescale', ctx=Load()), body=[Assign(targets=[Name(id='problem', ctx=Store())], value=Call(func=Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='rescale', ctx=Load()), args=[Num(n=0.25)], keywords=[]))], orelse=[Assign(targets=[Name(id='problem', ctx=Store())], value=Name(id='estimation_problem', ctx=Load()))])
If(test=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()), attr='is_statevector', ctx=Load()), body=[Assign(targets=[Name(id='cos', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_cos_estimate', ctx=Load()), args=[Name(id='problem', ctx=Load())], keywords=[keyword(arg='k', value=Num(n=0)), keyword(arg='shots', value=Num(n=1))])), Assign(targets=[Name(id='theta', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='arccos', ctx=Load()), args=[Name(id='cos', ctx=Load())], keywords=[]), op=Div(), right=Num(n=2))), Assign(targets=[Name(id='theta_ci', ctx=Store())], value=List(elts=[Name(id='theta', ctx=Load()), Name(id='theta', ctx=Load())], ctx=Load())), Assign(targets=[Name(id='theta_cis', ctx=Store())], value=List(elts=[Name(id='theta_ci', ctx=Load())], ctx=Load())), Assign(targets=[Name(id='num_steps', ctx=Store()), Name(id='num_first_stage_steps', ctx=Store())], value=Num(n=1))], orelse=[Assign(targets=[Name(id='theta_ci', ctx=Store())], value=List(elts=[Num(n=0), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='arcsin', ctx=Load()), args=[Num(n=0.25)], keywords=[])], ctx=Load())), Assign(targets=[Name(id='first_stage', ctx=Store())], value=NameConstant(value=True)), Assign(targets=[Name(id='j_0', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_maxiter', ctx=Load())), Assign(targets=[Name(id='theta_cis', ctx=Store())], value=List(elts=[Name(id='theta_ci', ctx=Load())], ctx=Load())), Assign(targets=[Name(id='num_first_stage_steps', ctx=Store())], value=Num(n=0)), Assign(targets=[Name(id='num_steps', ctx=Store())], value=Num(n=0)), FunctionDef(name='cos_estimate', args=arguments(args=[arg(arg='power', annotation=None), arg(arg='shots', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_cos_estimate', ctx=Load()), args=[Name(id='problem', ctx=Load()), Name(id='power', ctx=Load()), Name(id='shots', ctx=Load())], keywords=[]))], decorator_list=[], returns=None), For(target=Name(id='j', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Num(n=1), BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='_maxiter', ctx=Load()), op=Add(), right=Num(n=1))], keywords=[]), body=[AugAssign(target=Name(id='num_steps', ctx=Store()), op=Add(), value=Num(n=1)), If(test=Name(id='first_stage', ctx=Load()), body=[AugAssign(target=Name(id='num_first_stage_steps', ctx=Store()), op=Add(), value=Num(n=1)), Assign(targets=[Name(id='c', ctx=Store())], value=Call(func=Name(id='cos_estimate', ctx=Load()), args=[BinOp(left=Num(n=2), op=Pow(), right=BinOp(left=Name(id='j', ctx=Load()), op=Sub(), right=Num(n=1))), Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_shots', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())], keywords=[])), Assign(targets=[Name(id='chernoff_ci', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_chernoff', ctx=Load()), args=[Name(id='c', ctx=Load()), Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_shots', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())], keywords=[])), Assign(targets=[Name(id='theta_ci', ctx=Store())], value=ListComp(elt=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='arccos', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), op=Div(), right=BinOp(left=BinOp(left=Num(n=2), op=Pow(), right=BinOp(left=Name(id='j', ctx=Load()), op=Add(), right=Num(n=1))), op=Add(), right=Num(n=2))), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='chernoff_ci', ctx=Load()), slice=Slice(lower=None, upper=None, step=UnaryOp(op=USub(), operand=Num(n=1))), ctx=Load()), ifs=[], is_async=0)])), If(test=BoolOp(op=And(), values=[Compare(left=BinOp(left=BinOp(left=Num(n=2), op=Pow(), right=BinOp(left=Name(id='j', ctx=Load()), op=Add(), right=Num(n=1))), op=Mult(), right=Subscript(value=Name(id='theta_ci', ctx=Load()), slice=Index(value=Num(n=1)), ctx=Load())), ops=[GtE()], comparators=[BinOp(left=BinOp(left=Num(n=3), op=Mult(), right=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load())), op=Div(), right=Num(n=8))]), Compare(left=Name(id='j', ctx=Load()), ops=[Lt()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='_maxiter', ctx=Load())])]), body=[Assign(targets=[Name(id='j_0', ctx=Store())], value=Name(id='j', ctx=Load())), Assign(targets=[Name(id='v', ctx=Store())], value=BinOp(left=BinOp(left=Num(n=2), op=Pow(), right=Name(id='j', ctx=Load())), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sum', ctx=Load()), args=[Name(id='theta_ci', ctx=Load())], keywords=[]))), Assign(targets=[Name(id='first_stage', ctx=Store())], value=NameConstant(value=False))], orelse=[])], orelse=[Assign(targets=[Name(id='cos', ctx=Store())], value=Call(func=Name(id='cos_estimate', ctx=Load()), args=[BinOp(left=Num(n=2), op=Pow(), right=BinOp(left=Name(id='j', ctx=Load()), op=Sub(), right=Num(n=1))), Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_shots', ctx=Load()), slice=Index(value=Num(n=1)), ctx=Load())], keywords=[])), Assign(targets=[Name(id='cos_2', ctx=Store())], value=Call(func=Name(id='cos_estimate', ctx=Load()), args=[BinOp(left=BinOp(left=Num(n=2), op=Pow(), right=BinOp(left=Name(id='j', ctx=Load()), op=Sub(), right=Num(n=1))), op=Add(), right=BinOp(left=Num(n=2), op=Pow(), right=BinOp(left=Name(id='j_0', ctx=Load()), op=Sub(), right=Num(n=1)))), Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_shots', ctx=Load()), slice=Index(value=Num(n=1)), ctx=Load())], keywords=[])), Assign(targets=[Name(id='sin', ctx=Store())], value=BinOp(left=BinOp(left=BinOp(left=Name(id='cos', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='cos', ctx=Load()), args=[Name(id='v', ctx=Load())], keywords=[])), op=Sub(), right=Name(id='cos_2', ctx=Load())), op=Div(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[Name(id='v', ctx=Load())], keywords=[]))), Assign(targets=[Name(id='rho', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='arctan2', ctx=Load()), args=[Name(id='sin', ctx=Load()), Name(id='cos', ctx=Load())], keywords=[])), Assign(targets=[Name(id='n', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Num(n=2), op=Pow(), right=BinOp(left=Name(id='j', ctx=Load()), op=Add(), right=Num(n=1))), op=Add(), right=Num(n=2)), op=Mult(), right=Subscript(value=Name(id='theta_ci', ctx=Load()), slice=Index(value=Num(n=1)), ctx=Load())), op=Sub(), right=Name(id='rho', ctx=Load())), op=Add(), right=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Div(), right=Num(n=3))), op=Div(), right=BinOp(left=Num(n=2), op=Mult(), right=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load())))], keywords=[])), Assign(targets=[Name(id='theta_ci', ctx=Store())], value=ListComp(elt=BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Num(n=2), op=Mult(), right=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load())), op=Mult(), right=Name(id='n', ctx=Load())), op=Add(), right=Name(id='rho', ctx=Load())), op=Add(), right=BinOp(left=BinOp(left=Name(id='sign', ctx=Load()), op=Mult(), right=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load())), op=Div(), right=Num(n=3))), op=Div(), right=BinOp(left=BinOp(left=Num(n=2), op=Pow(), right=BinOp(left=Name(id='j', ctx=Load()), op=Add(), right=Num(n=1))), op=Add(), right=Num(n=2))), generators=[comprehension(target=Name(id='sign', ctx=Store()), iter=List(elts=[UnaryOp(op=USub(), operand=Num(n=1)), Num(n=1)], ctx=Load()), ifs=[], is_async=0)]))]), Expr(value=Call(func=Attribute(value=Name(id='theta_cis', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='theta_ci', ctx=Load())], keywords=[]))], orelse=[])])
Assign(targets=[Name(id='theta', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='mean', ctx=Load()), args=[Name(id='theta_ci', ctx=Load())], keywords=[]))
Assign(targets=[Name(id='rescaling', ctx=Store())], value=IfExp(test=Attribute(value=Name(id='self', ctx=Load()), attr='_rescale', ctx=Load()), body=Num(n=4), orelse=Num(n=1)))
Assign(targets=[Name(id='value', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='rescaling', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[Name(id='theta', ctx=Load())], keywords=[])), op=Pow(), right=Num(n=2)))
Assign(targets=[Name(id='value_ci', ctx=Store())], value=ListComp(elt=BinOp(left=BinOp(left=Name(id='rescaling', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[])), op=Pow(), right=Num(n=2)), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='theta_ci', ctx=Load()), ifs=[], is_async=0)]))
Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Name(id='FasterAmplitudeEstimationResult', ctx=Load()), args=[], keywords=[]))
Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='num_oracle_queries', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_num_oracle_calls', ctx=Load()))
Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='num_steps', ctx=Store())], value=Name(id='num_steps', ctx=Load()))
Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='num_first_state_steps', ctx=Store())], value=Name(id='num_first_stage_steps', ctx=Load()))
If(test=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()), attr='is_statevector', ctx=Load()), body=[Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='success_probability', ctx=Store())], value=Num(n=1))], orelse=[Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='success_probability', ctx=Store())], value=BinOp(left=Num(n=1), op=Sub(), right=BinOp(left=BinOp(left=BinOp(left=Num(n=2), op=Mult(), right=Attribute(value=Name(id='self', ctx=Load()), attr='_maxiter', ctx=Load())), op=Sub(), right=Name(id='j_0', ctx=Load())), op=Mult(), right=Attribute(value=Name(id='self', ctx=Load()), attr='_delta', ctx=Load()))))])
Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='estimation', ctx=Store())], value=Name(id='value', ctx=Load()))
Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='estimation_processed', ctx=Store())], value=Call(func=Attribute(value=Name(id='problem', ctx=Load()), attr='post_processing', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[]))
Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='confidence_interval', ctx=Store())], value=Name(id='value_ci', ctx=Load()))
Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='confidence_interval_processed', ctx=Store())], value=Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='problem', ctx=Load()), attr='post_processing', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='value_ci', ctx=Load()), ifs=[], is_async=0)])], keywords=[]))
Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='theta_intervals', ctx=Store())], value=Name(id='theta_cis', ctx=Load()))
Assign(targets=[Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='quantum_instance', ctx=Load()), attr='_run_config', ctx=Load()), attr='shots', ctx=Store())], value=Name(id='user_defined_shots', ctx=Load()))
Return(value=Name(id='result', ctx=Load()))
Str(s='FasterAmplitudeEstimationResult')
Load()
Str(s='The result object for the Faster Amplitude Estimation algorithm.')
arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[]))
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_success_probability', ctx=Store())], value=NameConstant(value=None))
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_num_steps', ctx=Store())], value=NameConstant(value=None))
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_num_first_state_steps', ctx=Store())], value=NameConstant(value=None))
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_theta_intervals', ctx=Store())], value=NameConstant(value=None))
NameConstant(value=None)
arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Expr(value=Str(s='Return the success probability of the algorithm.'))
Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_success_probability', ctx=Load()))
Name(id='property', ctx=Load())
Name(id='int', ctx=Load())
arguments(args=[arg(arg='self', annotation=None), arg(arg='probability', annotation=Name(id='int', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Expr(value=Str(s='Set the success probability of the algorithm.'))
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_success_probability', ctx=Store())], value=Name(id='probability', ctx=Load()))
Attribute(value=Name(id='success_probability', ctx=Load()), attr='setter', ctx=Load())
NameConstant(value=None)
arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Expr(value=Str(s='Return the total number of steps taken in the algorithm.'))
Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_num_steps', ctx=Load()))
Name(id='property', ctx=Load())
Name(id='int', ctx=Load())
arguments(args=[arg(arg='self', annotation=None), arg(arg='num_steps', annotation=Name(id='int', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Expr(value=Str(s='Set the total number of steps taken in the algorithm.'))
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_num_steps', ctx=Store())], value=Name(id='num_steps', ctx=Load()))
Attribute(value=Name(id='num_steps', ctx=Load()), attr='setter', ctx=Load())
NameConstant(value=None)
arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Expr(value=Str(s='Return the number of steps taken in the first step of algorithm.'))
Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_num_first_state_steps', ctx=Load()))
Name(id='property', ctx=Load())
Name(id='int', ctx=Load())
arguments(args=[arg(arg='self', annotation=None), arg(arg='num_steps', annotation=Name(id='int', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Expr(value=Str(s='Set the number of steps taken in the first step of algorithm.'))
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_num_first_state_steps', ctx=Store())], value=Name(id='num_steps', ctx=Load()))
Attribute(value=Name(id='num_first_state_steps', ctx=Load()), attr='setter', ctx=Load())
NameConstant(value=None)
arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Expr(value=Str(s='Return the confidence intervals for the angles in each iteration.'))
Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_theta_intervals', ctx=Load()))
Name(id='property', ctx=Load())
Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='float', ctx=Load())), ctx=Load())), ctx=Load())
arguments(args=[arg(arg='self', annotation=None), arg(arg='value', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='float', ctx=Load())), ctx=Load())), ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Expr(value=Str(s='Set the confidence intervals for the angles in each iteration.'))
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_theta_intervals', ctx=Store())], value=Name(id='value', ctx=Load()))
Attribute(value=Name(id='theta_intervals', ctx=Load()), attr='setter', ctx=Load())
NameConstant(value=None)
arg(arg='self', annotation=None)
arg(arg='delta', annotation=Name(id='float', ctx=Load()))
arg(arg='maxiter', annotation=Name(id='int', ctx=Load()))
arg(arg='rescale', annotation=Name(id='bool', ctx=Load()))
arg(arg='quantum_instance', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='QuantumInstance', ctx=Load()), Name(id='Backend', ctx=Load())], ctx=Load())), ctx=Load())), ctx=Load()))
NameConstant(value=True)
NameConstant(value=None)
Str(s='\n        Args:\n            delta: The probability that the true value is outside of the final confidence interval.\n            maxiter: The number of iterations, the maximal power of Q is `2 ** (maxiter - 1)`.\n            rescale: Whether to rescale the problem passed to `estimate`.\n            quantum_instance: The quantum instance or backend to run the circuits.\n\n        .. note::\n\n            This algorithm overwrites the number of shots set in the ``quantum_instance``\n            argument, but will reset them to the initial number after running.\n\n        ')
Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[])
Attribute(value=Name(id='self', ctx=Load()), attr='quantum_instance', ctx=Store())
Name(id='quantum_instance', ctx=Load())
Attribute(value=Name(id='self', ctx=Load()), attr='_shots', ctx=Store())
Tuple(elts=[Call(func=Name(id='int', ctx=Load()), args=[BinOp(left=Num(n=1944), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='log', ctx=Load()), args=[BinOp(left=Num(n=2), op=Div(), right=Name(id='delta', ctx=Load()))], keywords=[]))], keywords=[]), Call(func=Name(id='int', ctx=Load()), args=[BinOp(left=Num(n=972), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='log', ctx=Load()), args=[BinOp(left=Num(n=2), op=Div(), right=Name(id='delta', ctx=Load()))], keywords=[]))], keywords=[])], ctx=Load())
Attribute(value=Name(id='self', ctx=Load()), attr='_rescale', ctx=Store())
Name(id='rescale', ctx=Load())
Attribute(value=Name(id='self', ctx=Load()), attr='_delta', ctx=Store())
Name(id='delta', ctx=Load())
Attribute(value=Name(id='self', ctx=Load()), attr='_maxiter', ctx=Store())
Name(id='maxiter', ctx=Load())
Attribute(value=Name(id='self', ctx=Load()), attr='_num_oracle_calls', ctx=Store())
Num(n=0)
arg(arg='self', annotation=None)
Str(s='Get the quantum instance.\n\n        Returns:\n            The quantum instance used to run this algorithm.\n        ')
Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load())
Load()
Name(id='Optional', ctx=Load())
Index(value=Name(id='QuantumInstance', ctx=Load()))
Load()
arg(arg='self', annotation=None)
arg(arg='quantum_instance', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='QuantumInstance', ctx=Load()), Name(id='Backend', ctx=Load())], ctx=Load())), ctx=Load()))
Str(s='Set quantum instance.\n\n        Args:\n            quantum_instance: The quantum instance used to run this algorithm.\n        ')
Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='quantum_instance', ctx=Load()), Name(id='Backend', ctx=Load())], keywords=[])
Assign(targets=[Name(id='quantum_instance', ctx=Store())], value=Call(func=Name(id='QuantumInstance', ctx=Load()), args=[Name(id='quantum_instance', ctx=Load())], keywords=[]))
Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Store())
Name(id='quantum_instance', ctx=Load())
Name(id='quantum_instance', ctx=Load())
Load()
arg(arg='self', annotation=None)
arg(arg='estimation_problem', annotation=None)
arg(arg='k', annotation=None)
arg(arg='shots', annotation=None)
Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()), ops=[Is()], comparators=[NameConstant(value=None)])
Raise(exc=Call(func=Name(id='AlgorithmError', ctx=Load()), args=[Str(s='Quantum instance must be set.')], keywords=[]), cause=None)
Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()), attr='is_statevector', ctx=Load())
Assign(targets=[Name(id='circuit', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='construct_circuit', ctx=Load()), args=[Name(id='estimation_problem', ctx=Load()), Name(id='k', ctx=Load())], keywords=[keyword(arg='measurement', value=NameConstant(value=False))]))
Assign(targets=[Name(id='statevector', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()), attr='execute', ctx=Load()), args=[Name(id='circuit', ctx=Load())], keywords=[]), attr='get_statevector', ctx=Load()), args=[], keywords=[]))
Assign(targets=[Name(id='prob', ctx=Store())], value=Num(n=0))
For(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='amplitude', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='statevector', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='full_state', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Subscript(value=Call(func=Name(id='bin', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]), slice=Slice(lower=Num(n=2), upper=None, step=None), ctx=Load()), attr='zfill', ctx=Load()), args=[Attribute(value=Name(id='circuit', ctx=Load()), attr='num_qubits', ctx=Load())], keywords=[]), slice=Slice(lower=None, upper=None, step=UnaryOp(op=USub(), operand=Num(n=1))), ctx=Load())), Assign(targets=[Name(id='state', ctx=Store())], value=Call(func=Attribute(value=Str(s=''), attr='join', ctx=Load()), args=[ListComp(elt=Subscript(value=Name(id='full_state', ctx=Load()), slice=Index(value=Name(id='i', ctx=Load())), ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='objective_qubits', ctx=Load()), ifs=[], is_async=0)])], keywords=[])), If(test=Call(func=Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='is_good_state', ctx=Load()), args=[Subscript(value=Name(id='state', ctx=Load()), slice=Slice(lower=None, upper=None, step=UnaryOp(op=USub(), operand=Num(n=1))), ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='prob', ctx=Store())], value=BinOp(left=Name(id='prob', ctx=Load()), op=Add(), right=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='abs', ctx=Load()), args=[Name(id='amplitude', ctx=Load())], keywords=[]), op=Pow(), right=Num(n=2))))], orelse=[])], orelse=[])
Assign(targets=[Name(id='cos_estimate', ctx=Store())], value=BinOp(left=Num(n=1), op=Sub(), right=BinOp(left=Num(n=2), op=Mult(), right=Name(id='prob', ctx=Load()))))
Assign(targets=[Name(id='circuit', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='construct_circuit', ctx=Load()), args=[Name(id='estimation_problem', ctx=Load()), Name(id='k', ctx=Load())], keywords=[keyword(arg='measurement', value=NameConstant(value=True))]))
Assign(targets=[Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()), attr='run_config', ctx=Load()), attr='shots', ctx=Store())], value=Name(id='shots', ctx=Load()))
Assign(targets=[Name(id='counts', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()), attr='execute', ctx=Load()), args=[Name(id='circuit', ctx=Load())], keywords=[]), attr='get_counts', ctx=Load()), args=[], keywords=[]))
AugAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_num_oracle_calls', ctx=Store()), op=Add(), value=BinOp(left=BinOp(left=BinOp(left=Num(n=2), op=Mult(), right=Name(id='k', ctx=Load())), op=Add(), right=Num(n=1)), op=Mult(), right=Name(id='shots', ctx=Load())))
Assign(targets=[Name(id='good_counts', ctx=Store())], value=Num(n=0))
For(target=Tuple(elts=[Name(id='state', ctx=Store()), Name(id='count', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='counts', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[If(test=Call(func=Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='is_good_state', ctx=Load()), args=[Name(id='state', ctx=Load())], keywords=[]), body=[AugAssign(target=Name(id='good_counts', ctx=Store()), op=Add(), value=Name(id='count', ctx=Load()))], orelse=[])], orelse=[])
Assign(targets=[Name(id='cos_estimate', ctx=Store())], value=BinOp(left=Num(n=1), op=Sub(), right=BinOp(left=BinOp(left=Num(n=2), op=Mult(), right=Name(id='good_counts', ctx=Load())), op=Div(), right=Name(id='shots', ctx=Load()))))
Name(id='cos_estimate', ctx=Load())
arg(arg='self', annotation=None)
arg(arg='cos', annotation=None)
arg(arg='shots', annotation=None)
Name(id='width', ctx=Store())
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sqrt', ctx=Load()), args=[BinOp(left=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='log', ctx=Load()), args=[BinOp(left=Num(n=2), op=Div(), right=Attribute(value=Name(id='self', ctx=Load()), attr='_delta', ctx=Load()))], keywords=[]), op=Mult(), right=Num(n=12)), op=Div(), right=Name(id='shots', ctx=Load()))], keywords=[])
Name(id='confint', ctx=Store())
List(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='maximum', ctx=Load()), args=[UnaryOp(op=USub(), operand=Num(n=1)), BinOp(left=Name(id='cos', ctx=Load()), op=Sub(), right=Name(id='width', ctx=Load()))], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='minimum', ctx=Load()), args=[Num(n=1), BinOp(left=Name(id='cos', ctx=Load()), op=Add(), right=Name(id='width', ctx=Load()))], keywords=[])], ctx=Load())
Name(id='confint', ctx=Load())
arg(arg='self', annotation=None)
arg(arg='estimation_problem', annotation=Name(id='EstimationProblem', ctx=Load()))
arg(arg='k', annotation=Name(id='int', ctx=Load()))
arg(arg='measurement', annotation=Name(id='bool', ctx=Load()))
NameConstant(value=False)
Str(s='Construct the circuit :math:`Q^k X |0\\rangle>`.\n\n        The A operator is the unitary specifying the QAE problem and Q the associated Grover\n        operator.\n\n        Args:\n            estimation_problem: The estimation problem for which to construct the circuit.\n            k: The power of the Q operator.\n            measurement: Boolean flag to indicate if measurements should be included in the\n                circuits.\n\n        Returns:\n            The circuit :math:`Q^k X |0\\rangle`.\n        ')
Name(id='num_qubits', ctx=Store())
Call(func=Name(id='max', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='state_preparation', ctx=Load()), attr='num_qubits', ctx=Load()), Attribute(value=Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='grover_operator', ctx=Load()), attr='num_qubits', ctx=Load())], keywords=[])
Name(id='circuit', ctx=Store())
Call(func=Name(id='QuantumCircuit', ctx=Load()), args=[Name(id='num_qubits', ctx=Load())], keywords=[keyword(arg='name', value=Str(s='circuit'))])
Name(id='measurement', ctx=Load())
Assign(targets=[Name(id='c', ctx=Store())], value=Call(func=Name(id='ClassicalRegister', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='objective_qubits', ctx=Load())], keywords=[])], keywords=[]))
Expr(value=Call(func=Attribute(value=Name(id='circuit', ctx=Load()), attr='add_register', ctx=Load()), args=[Name(id='c', ctx=Load())], keywords=[]))
Call(func=Attribute(value=Name(id='circuit', ctx=Load()), attr='compose', ctx=Load()), args=[Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='state_preparation', ctx=Load())], keywords=[keyword(arg='inplace', value=NameConstant(value=True))])
Compare(left=Name(id='k', ctx=Load()), ops=[NotEq()], comparators=[Num(n=0)])
Expr(value=Call(func=Attribute(value=Name(id='circuit', ctx=Load()), attr='compose', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='grover_operator', ctx=Load()), attr='power', ctx=Load()), args=[Name(id='k', ctx=Load())], keywords=[])], keywords=[keyword(arg='inplace', value=NameConstant(value=True))]))
Name(id='measurement', ctx=Load())
Expr(value=Call(func=Attribute(value=Name(id='circuit', ctx=Load()), attr='barrier', ctx=Load()), args=[], keywords=[]))
Expr(value=Call(func=Attribute(value=Name(id='circuit', ctx=Load()), attr='measure', ctx=Load()), args=[Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='objective_qubits', ctx=Load()), Subscript(value=Name(id='c', ctx=Load()), slice=Slice(lower=None, upper=None, step=None), ctx=Load())], keywords=[]))
Name(id='circuit', ctx=Load())
Name(id='Union', ctx=Load())
Index(value=Tuple(elts=[Name(id='QuantumCircuit', ctx=Load()), Subscript(value=Name(id='Tuple', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='QuantumCircuit', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='int', ctx=Load())), ctx=Load())], ctx=Load())), ctx=Load())], ctx=Load()))
Load()
arg(arg='self', annotation=None)
arg(arg='estimation_problem', annotation=Name(id='EstimationProblem', ctx=Load()))
Attribute(value=Name(id='self', ctx=Load()), attr='_num_oracle_calls', ctx=Store())
Num(n=0)
Name(id='user_defined_shots', ctx=Store())
Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='quantum_instance', ctx=Load()), attr='_run_config', ctx=Load()), attr='shots', ctx=Load())
Attribute(value=Name(id='self', ctx=Load()), attr='_rescale', ctx=Load())
Assign(targets=[Name(id='problem', ctx=Store())], value=Call(func=Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='rescale', ctx=Load()), args=[Num(n=0.25)], keywords=[]))
Assign(targets=[Name(id='problem', ctx=Store())], value=Name(id='estimation_problem', ctx=Load()))
Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()), attr='is_statevector', ctx=Load())
Assign(targets=[Name(id='cos', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_cos_estimate', ctx=Load()), args=[Name(id='problem', ctx=Load())], keywords=[keyword(arg='k', value=Num(n=0)), keyword(arg='shots', value=Num(n=1))]))
Assign(targets=[Name(id='theta', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='arccos', ctx=Load()), args=[Name(id='cos', ctx=Load())], keywords=[]), op=Div(), right=Num(n=2)))
Assign(targets=[Name(id='theta_ci', ctx=Store())], value=List(elts=[Name(id='theta', ctx=Load()), Name(id='theta', ctx=Load())], ctx=Load()))
Assign(targets=[Name(id='theta_cis', ctx=Store())], value=List(elts=[Name(id='theta_ci', ctx=Load())], ctx=Load()))
Assign(targets=[Name(id='num_steps', ctx=Store()), Name(id='num_first_stage_steps', ctx=Store())], value=Num(n=1))
Assign(targets=[Name(id='theta_ci', ctx=Store())], value=List(elts=[Num(n=0), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='arcsin', ctx=Load()), args=[Num(n=0.25)], keywords=[])], ctx=Load()))
Assign(targets=[Name(id='first_stage', ctx=Store())], value=NameConstant(value=True))
Assign(targets=[Name(id='j_0', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_maxiter', ctx=Load()))
Assign(targets=[Name(id='theta_cis', ctx=Store())], value=List(elts=[Name(id='theta_ci', ctx=Load())], ctx=Load()))
Assign(targets=[Name(id='num_first_stage_steps', ctx=Store())], value=Num(n=0))
Assign(targets=[Name(id='num_steps', ctx=Store())], value=Num(n=0))
FunctionDef(name='cos_estimate', args=arguments(args=[arg(arg='power', annotation=None), arg(arg='shots', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_cos_estimate', ctx=Load()), args=[Name(id='problem', ctx=Load()), Name(id='power', ctx=Load()), Name(id='shots', ctx=Load())], keywords=[]))], decorator_list=[], returns=None)
For(target=Name(id='j', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Num(n=1), BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='_maxiter', ctx=Load()), op=Add(), right=Num(n=1))], keywords=[]), body=[AugAssign(target=Name(id='num_steps', ctx=Store()), op=Add(), value=Num(n=1)), If(test=Name(id='first_stage', ctx=Load()), body=[AugAssign(target=Name(id='num_first_stage_steps', ctx=Store()), op=Add(), value=Num(n=1)), Assign(targets=[Name(id='c', ctx=Store())], value=Call(func=Name(id='cos_estimate', ctx=Load()), args=[BinOp(left=Num(n=2), op=Pow(), right=BinOp(left=Name(id='j', ctx=Load()), op=Sub(), right=Num(n=1))), Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_shots', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())], keywords=[])), Assign(targets=[Name(id='chernoff_ci', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_chernoff', ctx=Load()), args=[Name(id='c', ctx=Load()), Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_shots', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())], keywords=[])), Assign(targets=[Name(id='theta_ci', ctx=Store())], value=ListComp(elt=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='arccos', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), op=Div(), right=BinOp(left=BinOp(left=Num(n=2), op=Pow(), right=BinOp(left=Name(id='j', ctx=Load()), op=Add(), right=Num(n=1))), op=Add(), right=Num(n=2))), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='chernoff_ci', ctx=Load()), slice=Slice(lower=None, upper=None, step=UnaryOp(op=USub(), operand=Num(n=1))), ctx=Load()), ifs=[], is_async=0)])), If(test=BoolOp(op=And(), values=[Compare(left=BinOp(left=BinOp(left=Num(n=2), op=Pow(), right=BinOp(left=Name(id='j', ctx=Load()), op=Add(), right=Num(n=1))), op=Mult(), right=Subscript(value=Name(id='theta_ci', ctx=Load()), slice=Index(value=Num(n=1)), ctx=Load())), ops=[GtE()], comparators=[BinOp(left=BinOp(left=Num(n=3), op=Mult(), right=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load())), op=Div(), right=Num(n=8))]), Compare(left=Name(id='j', ctx=Load()), ops=[Lt()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='_maxiter', ctx=Load())])]), body=[Assign(targets=[Name(id='j_0', ctx=Store())], value=Name(id='j', ctx=Load())), Assign(targets=[Name(id='v', ctx=Store())], value=BinOp(left=BinOp(left=Num(n=2), op=Pow(), right=Name(id='j', ctx=Load())), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sum', ctx=Load()), args=[Name(id='theta_ci', ctx=Load())], keywords=[]))), Assign(targets=[Name(id='first_stage', ctx=Store())], value=NameConstant(value=False))], orelse=[])], orelse=[Assign(targets=[Name(id='cos', ctx=Store())], value=Call(func=Name(id='cos_estimate', ctx=Load()), args=[BinOp(left=Num(n=2), op=Pow(), right=BinOp(left=Name(id='j', ctx=Load()), op=Sub(), right=Num(n=1))), Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_shots', ctx=Load()), slice=Index(value=Num(n=1)), ctx=Load())], keywords=[])), Assign(targets=[Name(id='cos_2', ctx=Store())], value=Call(func=Name(id='cos_estimate', ctx=Load()), args=[BinOp(left=BinOp(left=Num(n=2), op=Pow(), right=BinOp(left=Name(id='j', ctx=Load()), op=Sub(), right=Num(n=1))), op=Add(), right=BinOp(left=Num(n=2), op=Pow(), right=BinOp(left=Name(id='j_0', ctx=Load()), op=Sub(), right=Num(n=1)))), Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_shots', ctx=Load()), slice=Index(value=Num(n=1)), ctx=Load())], keywords=[])), Assign(targets=[Name(id='sin', ctx=Store())], value=BinOp(left=BinOp(left=BinOp(left=Name(id='cos', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='cos', ctx=Load()), args=[Name(id='v', ctx=Load())], keywords=[])), op=Sub(), right=Name(id='cos_2', ctx=Load())), op=Div(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[Name(id='v', ctx=Load())], keywords=[]))), Assign(targets=[Name(id='rho', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='arctan2', ctx=Load()), args=[Name(id='sin', ctx=Load()), Name(id='cos', ctx=Load())], keywords=[])), Assign(targets=[Name(id='n', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Num(n=2), op=Pow(), right=BinOp(left=Name(id='j', ctx=Load()), op=Add(), right=Num(n=1))), op=Add(), right=Num(n=2)), op=Mult(), right=Subscript(value=Name(id='theta_ci', ctx=Load()), slice=Index(value=Num(n=1)), ctx=Load())), op=Sub(), right=Name(id='rho', ctx=Load())), op=Add(), right=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Div(), right=Num(n=3))), op=Div(), right=BinOp(left=Num(n=2), op=Mult(), right=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load())))], keywords=[])), Assign(targets=[Name(id='theta_ci', ctx=Store())], value=ListComp(elt=BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Num(n=2), op=Mult(), right=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load())), op=Mult(), right=Name(id='n', ctx=Load())), op=Add(), right=Name(id='rho', ctx=Load())), op=Add(), right=BinOp(left=BinOp(left=Name(id='sign', ctx=Load()), op=Mult(), right=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load())), op=Div(), right=Num(n=3))), op=Div(), right=BinOp(left=BinOp(left=Num(n=2), op=Pow(), right=BinOp(left=Name(id='j', ctx=Load()), op=Add(), right=Num(n=1))), op=Add(), right=Num(n=2))), generators=[comprehension(target=Name(id='sign', ctx=Store()), iter=List(elts=[UnaryOp(op=USub(), operand=Num(n=1)), Num(n=1)], ctx=Load()), ifs=[], is_async=0)]))]), Expr(value=Call(func=Attribute(value=Name(id='theta_cis', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='theta_ci', ctx=Load())], keywords=[]))], orelse=[])
Name(id='theta', ctx=Store())
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='mean', ctx=Load()), args=[Name(id='theta_ci', ctx=Load())], keywords=[])
Name(id='rescaling', ctx=Store())
IfExp(test=Attribute(value=Name(id='self', ctx=Load()), attr='_rescale', ctx=Load()), body=Num(n=4), orelse=Num(n=1))
Name(id='value', ctx=Store())
BinOp(left=BinOp(left=Name(id='rescaling', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[Name(id='theta', ctx=Load())], keywords=[])), op=Pow(), right=Num(n=2))
Name(id='value_ci', ctx=Store())
ListComp(elt=BinOp(left=BinOp(left=Name(id='rescaling', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[])), op=Pow(), right=Num(n=2)), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='theta_ci', ctx=Load()), ifs=[], is_async=0)])
Name(id='result', ctx=Store())
Call(func=Name(id='FasterAmplitudeEstimationResult', ctx=Load()), args=[], keywords=[])
Attribute(value=Name(id='result', ctx=Load()), attr='num_oracle_queries', ctx=Store())
Attribute(value=Name(id='self', ctx=Load()), attr='_num_oracle_calls', ctx=Load())
Attribute(value=Name(id='result', ctx=Load()), attr='num_steps', ctx=Store())
Name(id='num_steps', ctx=Load())
Attribute(value=Name(id='result', ctx=Load()), attr='num_first_state_steps', ctx=Store())
Name(id='num_first_stage_steps', ctx=Load())
Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()), attr='is_statevector', ctx=Load())
Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='success_probability', ctx=Store())], value=Num(n=1))
Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='success_probability', ctx=Store())], value=BinOp(left=Num(n=1), op=Sub(), right=BinOp(left=BinOp(left=BinOp(left=Num(n=2), op=Mult(), right=Attribute(value=Name(id='self', ctx=Load()), attr='_maxiter', ctx=Load())), op=Sub(), right=Name(id='j_0', ctx=Load())), op=Mult(), right=Attribute(value=Name(id='self', ctx=Load()), attr='_delta', ctx=Load()))))
Attribute(value=Name(id='result', ctx=Load()), attr='estimation', ctx=Store())
Name(id='value', ctx=Load())
Attribute(value=Name(id='result', ctx=Load()), attr='estimation_processed', ctx=Store())
Call(func=Attribute(value=Name(id='problem', ctx=Load()), attr='post_processing', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[])
Attribute(value=Name(id='result', ctx=Load()), attr='confidence_interval', ctx=Store())
Name(id='value_ci', ctx=Load())
Attribute(value=Name(id='result', ctx=Load()), attr='confidence_interval_processed', ctx=Store())
Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='problem', ctx=Load()), attr='post_processing', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='value_ci', ctx=Load()), ifs=[], is_async=0)])], keywords=[])
Attribute(value=Name(id='result', ctx=Load()), attr='theta_intervals', ctx=Store())
Name(id='theta_cis', ctx=Load())
Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='quantum_instance', ctx=Load()), attr='_run_config', ctx=Load()), attr='shots', ctx=Store())
Name(id='user_defined_shots', ctx=Load())
Name(id='result', ctx=Load())
arg(arg='self', annotation=None)
Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[])
Attribute(value=Name(id='self', ctx=Load()), attr='_success_probability', ctx=Store())
NameConstant(value=None)
Attribute(value=Name(id='self', ctx=Load()), attr='_num_steps', ctx=Store())
NameConstant(value=None)
Attribute(value=Name(id='self', ctx=Load()), attr='_num_first_state_steps', ctx=Store())
NameConstant(value=None)
Attribute(value=Name(id='self', ctx=Load()), attr='_theta_intervals', ctx=Store())
NameConstant(value=None)
arg(arg='self', annotation=None)
Str(s='Return the success probability of the algorithm.')
Attribute(value=Name(id='self', ctx=Load()), attr='_success_probability', ctx=Load())
Load()
Load()
arg(arg='self', annotation=None)
arg(arg='probability', annotation=Name(id='int', ctx=Load()))
Str(s='Set the success probability of the algorithm.')
Attribute(value=Name(id='self', ctx=Load()), attr='_success_probability', ctx=Store())
Name(id='probability', ctx=Load())
Name(id='success_probability', ctx=Load())
Load()
arg(arg='self', annotation=None)
Str(s='Return the total number of steps taken in the algorithm.')
Attribute(value=Name(id='self', ctx=Load()), attr='_num_steps', ctx=Load())
Load()
Load()
arg(arg='self', annotation=None)
arg(arg='num_steps', annotation=Name(id='int', ctx=Load()))
Str(s='Set the total number of steps taken in the algorithm.')
Attribute(value=Name(id='self', ctx=Load()), attr='_num_steps', ctx=Store())
Name(id='num_steps', ctx=Load())
Name(id='num_steps', ctx=Load())
Load()
arg(arg='self', annotation=None)
Str(s='Return the number of steps taken in the first step of algorithm.')
Attribute(value=Name(id='self', ctx=Load()), attr='_num_first_state_steps', ctx=Load())
Load()
Load()
arg(arg='self', annotation=None)
arg(arg='num_steps', annotation=Name(id='int', ctx=Load()))
Str(s='Set the number of steps taken in the first step of algorithm.')
Attribute(value=Name(id='self', ctx=Load()), attr='_num_first_state_steps', ctx=Store())
Name(id='num_steps', ctx=Load())
Name(id='num_first_state_steps', ctx=Load())
Load()
arg(arg='self', annotation=None)
Str(s='Return the confidence intervals for the angles in each iteration.')
Attribute(value=Name(id='self', ctx=Load()), attr='_theta_intervals', ctx=Load())
Load()
Name(id='List', ctx=Load())
Index(value=Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='float', ctx=Load())), ctx=Load()))
Load()
arg(arg='self', annotation=None)
arg(arg='value', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='float', ctx=Load())), ctx=Load())), ctx=Load()))
Str(s='Set the confidence intervals for the angles in each iteration.')
Attribute(value=Name(id='self', ctx=Load()), attr='_theta_intervals', ctx=Store())
Name(id='value', ctx=Load())
Name(id='theta_intervals', ctx=Load())
Load()
Name(id='float', ctx=Load())
Name(id='int', ctx=Load())
Name(id='bool', ctx=Load())
Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='QuantumInstance', ctx=Load()), Name(id='Backend', ctx=Load())], ctx=Load())), ctx=Load())), ctx=Load())
Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load())
Name(id='self', ctx=Load())
Store()
Load()
Name(id='self', ctx=Load())
Store()
Call(func=Name(id='int', ctx=Load()), args=[BinOp(left=Num(n=1944), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='log', ctx=Load()), args=[BinOp(left=Num(n=2), op=Div(), right=Name(id='delta', ctx=Load()))], keywords=[]))], keywords=[])
Call(func=Name(id='int', ctx=Load()), args=[BinOp(left=Num(n=972), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='log', ctx=Load()), args=[BinOp(left=Num(n=2), op=Div(), right=Name(id='delta', ctx=Load()))], keywords=[]))], keywords=[])
Load()
Name(id='self', ctx=Load())
Store()
Load()
Name(id='self', ctx=Load())
Store()
Load()
Name(id='self', ctx=Load())
Store()
Load()
Name(id='self', ctx=Load())
Store()
Name(id='self', ctx=Load())
Load()
Load()
Name(id='QuantumInstance', ctx=Load())
Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='QuantumInstance', ctx=Load()), Name(id='Backend', ctx=Load())], ctx=Load())), ctx=Load())
Name(id='isinstance', ctx=Load())
Name(id='quantum_instance', ctx=Load())
Name(id='Backend', ctx=Load())
Name(id='quantum_instance', ctx=Store())
Call(func=Name(id='QuantumInstance', ctx=Load()), args=[Name(id='quantum_instance', ctx=Load())], keywords=[])
Name(id='self', ctx=Load())
Store()
Load()
Load()
Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load())
Is()
NameConstant(value=None)
Call(func=Name(id='AlgorithmError', ctx=Load()), args=[Str(s='Quantum instance must be set.')], keywords=[])
Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load())
Load()
Name(id='circuit', ctx=Store())
Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='construct_circuit', ctx=Load()), args=[Name(id='estimation_problem', ctx=Load()), Name(id='k', ctx=Load())], keywords=[keyword(arg='measurement', value=NameConstant(value=False))])
Name(id='statevector', ctx=Store())
Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()), attr='execute', ctx=Load()), args=[Name(id='circuit', ctx=Load())], keywords=[]), attr='get_statevector', ctx=Load()), args=[], keywords=[])
Name(id='prob', ctx=Store())
Num(n=0)
Tuple(elts=[Name(id='i', ctx=Store()), Name(id='amplitude', ctx=Store())], ctx=Store())
Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='statevector', ctx=Load())], keywords=[])
Assign(targets=[Name(id='full_state', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Subscript(value=Call(func=Name(id='bin', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]), slice=Slice(lower=Num(n=2), upper=None, step=None), ctx=Load()), attr='zfill', ctx=Load()), args=[Attribute(value=Name(id='circuit', ctx=Load()), attr='num_qubits', ctx=Load())], keywords=[]), slice=Slice(lower=None, upper=None, step=UnaryOp(op=USub(), operand=Num(n=1))), ctx=Load()))
Assign(targets=[Name(id='state', ctx=Store())], value=Call(func=Attribute(value=Str(s=''), attr='join', ctx=Load()), args=[ListComp(elt=Subscript(value=Name(id='full_state', ctx=Load()), slice=Index(value=Name(id='i', ctx=Load())), ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='objective_qubits', ctx=Load()), ifs=[], is_async=0)])], keywords=[]))
If(test=Call(func=Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='is_good_state', ctx=Load()), args=[Subscript(value=Name(id='state', ctx=Load()), slice=Slice(lower=None, upper=None, step=UnaryOp(op=USub(), operand=Num(n=1))), ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='prob', ctx=Store())], value=BinOp(left=Name(id='prob', ctx=Load()), op=Add(), right=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='abs', ctx=Load()), args=[Name(id='amplitude', ctx=Load())], keywords=[]), op=Pow(), right=Num(n=2))))], orelse=[])
Name(id='cos_estimate', ctx=Store())
BinOp(left=Num(n=1), op=Sub(), right=BinOp(left=Num(n=2), op=Mult(), right=Name(id='prob', ctx=Load())))
Name(id='circuit', ctx=Store())
Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='construct_circuit', ctx=Load()), args=[Name(id='estimation_problem', ctx=Load()), Name(id='k', ctx=Load())], keywords=[keyword(arg='measurement', value=NameConstant(value=True))])
Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()), attr='run_config', ctx=Load()), attr='shots', ctx=Store())
Name(id='shots', ctx=Load())
Name(id='counts', ctx=Store())
Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()), attr='execute', ctx=Load()), args=[Name(id='circuit', ctx=Load())], keywords=[]), attr='get_counts', ctx=Load()), args=[], keywords=[])
Attribute(value=Name(id='self', ctx=Load()), attr='_num_oracle_calls', ctx=Store())
Add()
BinOp(left=BinOp(left=BinOp(left=Num(n=2), op=Mult(), right=Name(id='k', ctx=Load())), op=Add(), right=Num(n=1)), op=Mult(), right=Name(id='shots', ctx=Load()))
Name(id='good_counts', ctx=Store())
Num(n=0)
Tuple(elts=[Name(id='state', ctx=Store()), Name(id='count', ctx=Store())], ctx=Store())
Call(func=Attribute(value=Name(id='counts', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])
If(test=Call(func=Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='is_good_state', ctx=Load()), args=[Name(id='state', ctx=Load())], keywords=[]), body=[AugAssign(target=Name(id='good_counts', ctx=Store()), op=Add(), value=Name(id='count', ctx=Load()))], orelse=[])
Name(id='cos_estimate', ctx=Store())
BinOp(left=Num(n=1), op=Sub(), right=BinOp(left=BinOp(left=Num(n=2), op=Mult(), right=Name(id='good_counts', ctx=Load())), op=Div(), right=Name(id='shots', ctx=Load())))
Load()
Store()
Attribute(value=Name(id='np', ctx=Load()), attr='sqrt', ctx=Load())
BinOp(left=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='log', ctx=Load()), args=[BinOp(left=Num(n=2), op=Div(), right=Attribute(value=Name(id='self', ctx=Load()), attr='_delta', ctx=Load()))], keywords=[]), op=Mult(), right=Num(n=12)), op=Div(), right=Name(id='shots', ctx=Load()))
Store()
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='maximum', ctx=Load()), args=[UnaryOp(op=USub(), operand=Num(n=1)), BinOp(left=Name(id='cos', ctx=Load()), op=Sub(), right=Name(id='width', ctx=Load()))], keywords=[])
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='minimum', ctx=Load()), args=[Num(n=1), BinOp(left=Name(id='cos', ctx=Load()), op=Add(), right=Name(id='width', ctx=Load()))], keywords=[])
Load()
Load()
Name(id='EstimationProblem', ctx=Load())
Name(id='int', ctx=Load())
Name(id='bool', ctx=Load())
Store()
Name(id='max', ctx=Load())
Attribute(value=Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='state_preparation', ctx=Load()), attr='num_qubits', ctx=Load())
Attribute(value=Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='grover_operator', ctx=Load()), attr='num_qubits', ctx=Load())
Store()
Name(id='QuantumCircuit', ctx=Load())
Name(id='num_qubits', ctx=Load())
keyword(arg='name', value=Str(s='circuit'))
Load()
Name(id='c', ctx=Store())
Call(func=Name(id='ClassicalRegister', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='objective_qubits', ctx=Load())], keywords=[])], keywords=[])
Call(func=Attribute(value=Name(id='circuit', ctx=Load()), attr='add_register', ctx=Load()), args=[Name(id='c', ctx=Load())], keywords=[])
Attribute(value=Name(id='circuit', ctx=Load()), attr='compose', ctx=Load())
Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='state_preparation', ctx=Load())
keyword(arg='inplace', value=NameConstant(value=True))
Name(id='k', ctx=Load())
NotEq()
Num(n=0)
Call(func=Attribute(value=Name(id='circuit', ctx=Load()), attr='compose', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='grover_operator', ctx=Load()), attr='power', ctx=Load()), args=[Name(id='k', ctx=Load())], keywords=[])], keywords=[keyword(arg='inplace', value=NameConstant(value=True))])
Load()
Call(func=Attribute(value=Name(id='circuit', ctx=Load()), attr='barrier', ctx=Load()), args=[], keywords=[])
Call(func=Attribute(value=Name(id='circuit', ctx=Load()), attr='measure', ctx=Load()), args=[Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='objective_qubits', ctx=Load()), Subscript(value=Name(id='c', ctx=Load()), slice=Slice(lower=None, upper=None, step=None), ctx=Load())], keywords=[])
Load()
Load()
Tuple(elts=[Name(id='QuantumCircuit', ctx=Load()), Subscript(value=Name(id='Tuple', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='QuantumCircuit', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='int', ctx=Load())), ctx=Load())], ctx=Load())), ctx=Load())], ctx=Load())
Name(id='EstimationProblem', ctx=Load())
Name(id='self', ctx=Load())
Store()
Store()
Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='quantum_instance', ctx=Load()), attr='_run_config', ctx=Load())
Load()
Name(id='self', ctx=Load())
Load()
Name(id='problem', ctx=Store())
Call(func=Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='rescale', ctx=Load()), args=[Num(n=0.25)], keywords=[])
Name(id='problem', ctx=Store())
Name(id='estimation_problem', ctx=Load())
Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load())
Load()
Name(id='cos', ctx=Store())
Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_cos_estimate', ctx=Load()), args=[Name(id='problem', ctx=Load())], keywords=[keyword(arg='k', value=Num(n=0)), keyword(arg='shots', value=Num(n=1))])
Name(id='theta', ctx=Store())
BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='arccos', ctx=Load()), args=[Name(id='cos', ctx=Load())], keywords=[]), op=Div(), right=Num(n=2))
Name(id='theta_ci', ctx=Store())
List(elts=[Name(id='theta', ctx=Load()), Name(id='theta', ctx=Load())], ctx=Load())
Name(id='theta_cis', ctx=Store())
List(elts=[Name(id='theta_ci', ctx=Load())], ctx=Load())
Name(id='num_steps', ctx=Store())
Name(id='num_first_stage_steps', ctx=Store())
Num(n=1)
Name(id='theta_ci', ctx=Store())
List(elts=[Num(n=0), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='arcsin', ctx=Load()), args=[Num(n=0.25)], keywords=[])], ctx=Load())
Name(id='first_stage', ctx=Store())
NameConstant(value=True)
Name(id='j_0', ctx=Store())
Attribute(value=Name(id='self', ctx=Load()), attr='_maxiter', ctx=Load())
Name(id='theta_cis', ctx=Store())
List(elts=[Name(id='theta_ci', ctx=Load())], ctx=Load())
Name(id='num_first_stage_steps', ctx=Store())
Num(n=0)
Name(id='num_steps', ctx=Store())
Num(n=0)
arguments(args=[arg(arg='power', annotation=None), arg(arg='shots', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_cos_estimate', ctx=Load()), args=[Name(id='problem', ctx=Load()), Name(id='power', ctx=Load()), Name(id='shots', ctx=Load())], keywords=[]))
Name(id='j', ctx=Store())
Call(func=Name(id='range', ctx=Load()), args=[Num(n=1), BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='_maxiter', ctx=Load()), op=Add(), right=Num(n=1))], keywords=[])
AugAssign(target=Name(id='num_steps', ctx=Store()), op=Add(), value=Num(n=1))
If(test=Name(id='first_stage', ctx=Load()), body=[AugAssign(target=Name(id='num_first_stage_steps', ctx=Store()), op=Add(), value=Num(n=1)), Assign(targets=[Name(id='c', ctx=Store())], value=Call(func=Name(id='cos_estimate', ctx=Load()), args=[BinOp(left=Num(n=2), op=Pow(), right=BinOp(left=Name(id='j', ctx=Load()), op=Sub(), right=Num(n=1))), Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_shots', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())], keywords=[])), Assign(targets=[Name(id='chernoff_ci', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_chernoff', ctx=Load()), args=[Name(id='c', ctx=Load()), Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_shots', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())], keywords=[])), Assign(targets=[Name(id='theta_ci', ctx=Store())], value=ListComp(elt=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='arccos', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), op=Div(), right=BinOp(left=BinOp(left=Num(n=2), op=Pow(), right=BinOp(left=Name(id='j', ctx=Load()), op=Add(), right=Num(n=1))), op=Add(), right=Num(n=2))), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='chernoff_ci', ctx=Load()), slice=Slice(lower=None, upper=None, step=UnaryOp(op=USub(), operand=Num(n=1))), ctx=Load()), ifs=[], is_async=0)])), If(test=BoolOp(op=And(), values=[Compare(left=BinOp(left=BinOp(left=Num(n=2), op=Pow(), right=BinOp(left=Name(id='j', ctx=Load()), op=Add(), right=Num(n=1))), op=Mult(), right=Subscript(value=Name(id='theta_ci', ctx=Load()), slice=Index(value=Num(n=1)), ctx=Load())), ops=[GtE()], comparators=[BinOp(left=BinOp(left=Num(n=3), op=Mult(), right=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load())), op=Div(), right=Num(n=8))]), Compare(left=Name(id='j', ctx=Load()), ops=[Lt()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='_maxiter', ctx=Load())])]), body=[Assign(targets=[Name(id='j_0', ctx=Store())], value=Name(id='j', ctx=Load())), Assign(targets=[Name(id='v', ctx=Store())], value=BinOp(left=BinOp(left=Num(n=2), op=Pow(), right=Name(id='j', ctx=Load())), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sum', ctx=Load()), args=[Name(id='theta_ci', ctx=Load())], keywords=[]))), Assign(targets=[Name(id='first_stage', ctx=Store())], value=NameConstant(value=False))], orelse=[])], orelse=[Assign(targets=[Name(id='cos', ctx=Store())], value=Call(func=Name(id='cos_estimate', ctx=Load()), args=[BinOp(left=Num(n=2), op=Pow(), right=BinOp(left=Name(id='j', ctx=Load()), op=Sub(), right=Num(n=1))), Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_shots', ctx=Load()), slice=Index(value=Num(n=1)), ctx=Load())], keywords=[])), Assign(targets=[Name(id='cos_2', ctx=Store())], value=Call(func=Name(id='cos_estimate', ctx=Load()), args=[BinOp(left=BinOp(left=Num(n=2), op=Pow(), right=BinOp(left=Name(id='j', ctx=Load()), op=Sub(), right=Num(n=1))), op=Add(), right=BinOp(left=Num(n=2), op=Pow(), right=BinOp(left=Name(id='j_0', ctx=Load()), op=Sub(), right=Num(n=1)))), Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_shots', ctx=Load()), slice=Index(value=Num(n=1)), ctx=Load())], keywords=[])), Assign(targets=[Name(id='sin', ctx=Store())], value=BinOp(left=BinOp(left=BinOp(left=Name(id='cos', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='cos', ctx=Load()), args=[Name(id='v', ctx=Load())], keywords=[])), op=Sub(), right=Name(id='cos_2', ctx=Load())), op=Div(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[Name(id='v', ctx=Load())], keywords=[]))), Assign(targets=[Name(id='rho', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='arctan2', ctx=Load()), args=[Name(id='sin', ctx=Load()), Name(id='cos', ctx=Load())], keywords=[])), Assign(targets=[Name(id='n', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Num(n=2), op=Pow(), right=BinOp(left=Name(id='j', ctx=Load()), op=Add(), right=Num(n=1))), op=Add(), right=Num(n=2)), op=Mult(), right=Subscript(value=Name(id='theta_ci', ctx=Load()), slice=Index(value=Num(n=1)), ctx=Load())), op=Sub(), right=Name(id='rho', ctx=Load())), op=Add(), right=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Div(), right=Num(n=3))), op=Div(), right=BinOp(left=Num(n=2), op=Mult(), right=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load())))], keywords=[])), Assign(targets=[Name(id='theta_ci', ctx=Store())], value=ListComp(elt=BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Num(n=2), op=Mult(), right=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load())), op=Mult(), right=Name(id='n', ctx=Load())), op=Add(), right=Name(id='rho', ctx=Load())), op=Add(), right=BinOp(left=BinOp(left=Name(id='sign', ctx=Load()), op=Mult(), right=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load())), op=Div(), right=Num(n=3))), op=Div(), right=BinOp(left=BinOp(left=Num(n=2), op=Pow(), right=BinOp(left=Name(id='j', ctx=Load()), op=Add(), right=Num(n=1))), op=Add(), right=Num(n=2))), generators=[comprehension(target=Name(id='sign', ctx=Store()), iter=List(elts=[UnaryOp(op=USub(), operand=Num(n=1)), Num(n=1)], ctx=Load()), ifs=[], is_async=0)]))])
Expr(value=Call(func=Attribute(value=Name(id='theta_cis', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='theta_ci', ctx=Load())], keywords=[]))
Store()
Attribute(value=Name(id='np', ctx=Load()), attr='mean', ctx=Load())
Name(id='theta_ci', ctx=Load())
Store()
Attribute(value=Name(id='self', ctx=Load()), attr='_rescale', ctx=Load())
Num(n=4)
Num(n=1)
Store()
BinOp(left=Name(id='rescaling', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[Name(id='theta', ctx=Load())], keywords=[]))
Pow()
Num(n=2)
Store()
BinOp(left=BinOp(left=Name(id='rescaling', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[])), op=Pow(), right=Num(n=2))
comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='theta_ci', ctx=Load()), ifs=[], is_async=0)
Store()
Name(id='FasterAmplitudeEstimationResult', ctx=Load())
Name(id='result', ctx=Load())
Store()
Name(id='self', ctx=Load())
Load()
Name(id='result', ctx=Load())
Store()
Load()
Name(id='result', ctx=Load())
Store()
Load()
Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load())
Load()
Attribute(value=Name(id='result', ctx=Load()), attr='success_probability', ctx=Store())
Num(n=1)
Attribute(value=Name(id='result', ctx=Load()), attr='success_probability', ctx=Store())
BinOp(left=Num(n=1), op=Sub(), right=BinOp(left=BinOp(left=BinOp(left=Num(n=2), op=Mult(), right=Attribute(value=Name(id='self', ctx=Load()), attr='_maxiter', ctx=Load())), op=Sub(), right=Name(id='j_0', ctx=Load())), op=Mult(), right=Attribute(value=Name(id='self', ctx=Load()), attr='_delta', ctx=Load())))
Name(id='result', ctx=Load())
Store()
Load()
Name(id='result', ctx=Load())
Store()
Attribute(value=Name(id='problem', ctx=Load()), attr='post_processing', ctx=Load())
Name(id='value', ctx=Load())
Name(id='result', ctx=Load())
Store()
Load()
Name(id='result', ctx=Load())
Store()
Name(id='tuple', ctx=Load())
GeneratorExp(elt=Call(func=Attribute(value=Name(id='problem', ctx=Load()), attr='post_processing', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='value_ci', ctx=Load()), ifs=[], is_async=0)])
Name(id='result', ctx=Load())
Store()
Load()
Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='quantum_instance', ctx=Load()), attr='_run_config', ctx=Load())
Store()
Load()
Load()
Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load())
Name(id='self', ctx=Load())
Store()
Name(id='self', ctx=Load())
Store()
Name(id='self', ctx=Load())
Store()
Name(id='self', ctx=Load())
Store()
Name(id='self', ctx=Load())
Load()
Name(id='int', ctx=Load())
Name(id='self', ctx=Load())
Store()
Load()
Load()
Name(id='self', ctx=Load())
Load()
Name(id='int', ctx=Load())
Name(id='self', ctx=Load())
Store()
Load()
Load()
Name(id='self', ctx=Load())
Load()
Name(id='int', ctx=Load())
Name(id='self', ctx=Load())
Store()
Load()
Load()
Name(id='self', ctx=Load())
Load()
Load()
Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='float', ctx=Load())), ctx=Load())
Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='float', ctx=Load())), ctx=Load())), ctx=Load())
Name(id='self', ctx=Load())
Store()
Load()
Load()
Load()
Load()
Load()
Name(id='Optional', ctx=Load())
Index(value=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='QuantumInstance', ctx=Load()), Name(id='Backend', ctx=Load())], ctx=Load())), ctx=Load()))
Load()
Call(func=Name(id='super', ctx=Load()), args=[], keywords=[])
Load()
Load()
Load()
Name(id='int', ctx=Load())
BinOp(left=Num(n=1944), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='log', ctx=Load()), args=[BinOp(left=Num(n=2), op=Div(), right=Name(id='delta', ctx=Load()))], keywords=[]))
Name(id='int', ctx=Load())
BinOp(left=Num(n=972), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='log', ctx=Load()), args=[BinOp(left=Num(n=2), op=Div(), right=Name(id='delta', ctx=Load()))], keywords=[]))
Load()
Load()
Load()
Load()
Load()
Load()
Name(id='Union', ctx=Load())
Index(value=Tuple(elts=[Name(id='QuantumInstance', ctx=Load()), Name(id='Backend', ctx=Load())], ctx=Load()))
Load()
Load()
Load()
Load()
Store()
Name(id='QuantumInstance', ctx=Load())
Name(id='quantum_instance', ctx=Load())
Load()
Name(id='self', ctx=Load())
Load()
Name(id='AlgorithmError', ctx=Load())
Str(s='Quantum instance must be set.')
Name(id='self', ctx=Load())
Load()
Store()
Attribute(value=Name(id='self', ctx=Load()), attr='construct_circuit', ctx=Load())
Name(id='estimation_problem', ctx=Load())
Name(id='k', ctx=Load())
keyword(arg='measurement', value=NameConstant(value=False))
Store()
Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()), attr='execute', ctx=Load()), args=[Name(id='circuit', ctx=Load())], keywords=[]), attr='get_statevector', ctx=Load())
Store()
Name(id='i', ctx=Store())
Name(id='amplitude', ctx=Store())
Store()
Name(id='enumerate', ctx=Load())
Name(id='statevector', ctx=Load())
Name(id='full_state', ctx=Store())
Subscript(value=Call(func=Attribute(value=Subscript(value=Call(func=Name(id='bin', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]), slice=Slice(lower=Num(n=2), upper=None, step=None), ctx=Load()), attr='zfill', ctx=Load()), args=[Attribute(value=Name(id='circuit', ctx=Load()), attr='num_qubits', ctx=Load())], keywords=[]), slice=Slice(lower=None, upper=None, step=UnaryOp(op=USub(), operand=Num(n=1))), ctx=Load())
Name(id='state', ctx=Store())
Call(func=Attribute(value=Str(s=''), attr='join', ctx=Load()), args=[ListComp(elt=Subscript(value=Name(id='full_state', ctx=Load()), slice=Index(value=Name(id='i', ctx=Load())), ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='objective_qubits', ctx=Load()), ifs=[], is_async=0)])], keywords=[])
Call(func=Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='is_good_state', ctx=Load()), args=[Subscript(value=Name(id='state', ctx=Load()), slice=Slice(lower=None, upper=None, step=UnaryOp(op=USub(), operand=Num(n=1))), ctx=Load())], keywords=[])
Assign(targets=[Name(id='prob', ctx=Store())], value=BinOp(left=Name(id='prob', ctx=Load()), op=Add(), right=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='abs', ctx=Load()), args=[Name(id='amplitude', ctx=Load())], keywords=[]), op=Pow(), right=Num(n=2))))
Store()
Num(n=1)
Sub()
BinOp(left=Num(n=2), op=Mult(), right=Name(id='prob', ctx=Load()))
Store()
Attribute(value=Name(id='self', ctx=Load()), attr='construct_circuit', ctx=Load())
Name(id='estimation_problem', ctx=Load())
Name(id='k', ctx=Load())
keyword(arg='measurement', value=NameConstant(value=True))
Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()), attr='run_config', ctx=Load())
Store()
Load()
Store()
Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()), attr='execute', ctx=Load()), args=[Name(id='circuit', ctx=Load())], keywords=[]), attr='get_counts', ctx=Load())
Name(id='self', ctx=Load())
Store()
BinOp(left=BinOp(left=Num(n=2), op=Mult(), right=Name(id='k', ctx=Load())), op=Add(), right=Num(n=1))
Mult()
Name(id='shots', ctx=Load())
Store()
Name(id='state', ctx=Store())
Name(id='count', ctx=Store())
Store()
Attribute(value=Name(id='counts', ctx=Load()), attr='items', ctx=Load())
Call(func=Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='is_good_state', ctx=Load()), args=[Name(id='state', ctx=Load())], keywords=[])
AugAssign(target=Name(id='good_counts', ctx=Store()), op=Add(), value=Name(id='count', ctx=Load()))
Store()
Num(n=1)
Sub()
BinOp(left=BinOp(left=Num(n=2), op=Mult(), right=Name(id='good_counts', ctx=Load())), op=Div(), right=Name(id='shots', ctx=Load()))
Name(id='np', ctx=Load())
Load()
BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='log', ctx=Load()), args=[BinOp(left=Num(n=2), op=Div(), right=Attribute(value=Name(id='self', ctx=Load()), attr='_delta', ctx=Load()))], keywords=[]), op=Mult(), right=Num(n=12))
Div()
Name(id='shots', ctx=Load())
Attribute(value=Name(id='np', ctx=Load()), attr='maximum', ctx=Load())
UnaryOp(op=USub(), operand=Num(n=1))
BinOp(left=Name(id='cos', ctx=Load()), op=Sub(), right=Name(id='width', ctx=Load()))
Attribute(value=Name(id='np', ctx=Load()), attr='minimum', ctx=Load())
Num(n=1)
BinOp(left=Name(id='cos', ctx=Load()), op=Add(), right=Name(id='width', ctx=Load()))
Load()
Load()
Load()
Load()
Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='state_preparation', ctx=Load())
Load()
Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='grover_operator', ctx=Load())
Load()
Load()
Load()
Str(s='circuit')
Store()
Name(id='ClassicalRegister', ctx=Load())
Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='objective_qubits', ctx=Load())], keywords=[])
Attribute(value=Name(id='circuit', ctx=Load()), attr='add_register', ctx=Load())
Name(id='c', ctx=Load())
Name(id='circuit', ctx=Load())
Load()
Name(id='estimation_problem', ctx=Load())
Load()
NameConstant(value=True)
Load()
Attribute(value=Name(id='circuit', ctx=Load()), attr='compose', ctx=Load())
Call(func=Attribute(value=Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='grover_operator', ctx=Load()), attr='power', ctx=Load()), args=[Name(id='k', ctx=Load())], keywords=[])
keyword(arg='inplace', value=NameConstant(value=True))
Attribute(value=Name(id='circuit', ctx=Load()), attr='barrier', ctx=Load())
Attribute(value=Name(id='circuit', ctx=Load()), attr='measure', ctx=Load())
Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='objective_qubits', ctx=Load())
Subscript(value=Name(id='c', ctx=Load()), slice=Slice(lower=None, upper=None, step=None), ctx=Load())
Name(id='QuantumCircuit', ctx=Load())
Subscript(value=Name(id='Tuple', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='QuantumCircuit', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='int', ctx=Load())), ctx=Load())], ctx=Load())), ctx=Load())
Load()
Load()
Load()
Attribute(value=Name(id='self', ctx=Load()), attr='quantum_instance', ctx=Load())
Load()
Load()
Store()
Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='rescale', ctx=Load())
Num(n=0.25)
Store()
Load()
Name(id='self', ctx=Load())
Load()
Store()
Attribute(value=Name(id='self', ctx=Load()), attr='_cos_estimate', ctx=Load())
Name(id='problem', ctx=Load())
keyword(arg='k', value=Num(n=0))
keyword(arg='shots', value=Num(n=1))
Store()
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='arccos', ctx=Load()), args=[Name(id='cos', ctx=Load())], keywords=[])
Div()
Num(n=2)
Store()
Name(id='theta', ctx=Load())
Name(id='theta', ctx=Load())
Load()
Store()
Name(id='theta_ci', ctx=Load())
Load()
Store()
Store()
Store()
Num(n=0)
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='arcsin', ctx=Load()), args=[Num(n=0.25)], keywords=[])
Load()
Store()
Store()
Name(id='self', ctx=Load())
Load()
Store()
Name(id='theta_ci', ctx=Load())
Load()
Store()
Store()
arg(arg='power', annotation=None)
arg(arg='shots', annotation=None)
Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_cos_estimate', ctx=Load()), args=[Name(id='problem', ctx=Load()), Name(id='power', ctx=Load()), Name(id='shots', ctx=Load())], keywords=[])
Store()
Name(id='range', ctx=Load())
Num(n=1)
BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='_maxiter', ctx=Load()), op=Add(), right=Num(n=1))
Name(id='num_steps', ctx=Store())
Add()
Num(n=1)
Name(id='first_stage', ctx=Load())
AugAssign(target=Name(id='num_first_stage_steps', ctx=Store()), op=Add(), value=Num(n=1))
Assign(targets=[Name(id='c', ctx=Store())], value=Call(func=Name(id='cos_estimate', ctx=Load()), args=[BinOp(left=Num(n=2), op=Pow(), right=BinOp(left=Name(id='j', ctx=Load()), op=Sub(), right=Num(n=1))), Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_shots', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())], keywords=[]))
Assign(targets=[Name(id='chernoff_ci', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_chernoff', ctx=Load()), args=[Name(id='c', ctx=Load()), Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_shots', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())], keywords=[]))
Assign(targets=[Name(id='theta_ci', ctx=Store())], value=ListComp(elt=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='arccos', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), op=Div(), right=BinOp(left=BinOp(left=Num(n=2), op=Pow(), right=BinOp(left=Name(id='j', ctx=Load()), op=Add(), right=Num(n=1))), op=Add(), right=Num(n=2))), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='chernoff_ci', ctx=Load()), slice=Slice(lower=None, upper=None, step=UnaryOp(op=USub(), operand=Num(n=1))), ctx=Load()), ifs=[], is_async=0)]))
If(test=BoolOp(op=And(), values=[Compare(left=BinOp(left=BinOp(left=Num(n=2), op=Pow(), right=BinOp(left=Name(id='j', ctx=Load()), op=Add(), right=Num(n=1))), op=Mult(), right=Subscript(value=Name(id='theta_ci', ctx=Load()), slice=Index(value=Num(n=1)), ctx=Load())), ops=[GtE()], comparators=[BinOp(left=BinOp(left=Num(n=3), op=Mult(), right=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load())), op=Div(), right=Num(n=8))]), Compare(left=Name(id='j', ctx=Load()), ops=[Lt()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='_maxiter', ctx=Load())])]), body=[Assign(targets=[Name(id='j_0', ctx=Store())], value=Name(id='j', ctx=Load())), Assign(targets=[Name(id='v', ctx=Store())], value=BinOp(left=BinOp(left=Num(n=2), op=Pow(), right=Name(id='j', ctx=Load())), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sum', ctx=Load()), args=[Name(id='theta_ci', ctx=Load())], keywords=[]))), Assign(targets=[Name(id='first_stage', ctx=Store())], value=NameConstant(value=False))], orelse=[])
Assign(targets=[Name(id='cos', ctx=Store())], value=Call(func=Name(id='cos_estimate', ctx=Load()), args=[BinOp(left=Num(n=2), op=Pow(), right=BinOp(left=Name(id='j', ctx=Load()), op=Sub(), right=Num(n=1))), Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_shots', ctx=Load()), slice=Index(value=Num(n=1)), ctx=Load())], keywords=[]))
Assign(targets=[Name(id='cos_2', ctx=Store())], value=Call(func=Name(id='cos_estimate', ctx=Load()), args=[BinOp(left=BinOp(left=Num(n=2), op=Pow(), right=BinOp(left=Name(id='j', ctx=Load()), op=Sub(), right=Num(n=1))), op=Add(), right=BinOp(left=Num(n=2), op=Pow(), right=BinOp(left=Name(id='j_0', ctx=Load()), op=Sub(), right=Num(n=1)))), Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_shots', ctx=Load()), slice=Index(value=Num(n=1)), ctx=Load())], keywords=[]))
Assign(targets=[Name(id='sin', ctx=Store())], value=BinOp(left=BinOp(left=BinOp(left=Name(id='cos', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='cos', ctx=Load()), args=[Name(id='v', ctx=Load())], keywords=[])), op=Sub(), right=Name(id='cos_2', ctx=Load())), op=Div(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[Name(id='v', ctx=Load())], keywords=[])))
Assign(targets=[Name(id='rho', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='arctan2', ctx=Load()), args=[Name(id='sin', ctx=Load()), Name(id='cos', ctx=Load())], keywords=[]))
Assign(targets=[Name(id='n', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Num(n=2), op=Pow(), right=BinOp(left=Name(id='j', ctx=Load()), op=Add(), right=Num(n=1))), op=Add(), right=Num(n=2)), op=Mult(), right=Subscript(value=Name(id='theta_ci', ctx=Load()), slice=Index(value=Num(n=1)), ctx=Load())), op=Sub(), right=Name(id='rho', ctx=Load())), op=Add(), right=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Div(), right=Num(n=3))), op=Div(), right=BinOp(left=Num(n=2), op=Mult(), right=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load())))], keywords=[]))
Assign(targets=[Name(id='theta_ci', ctx=Store())], value=ListComp(elt=BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Num(n=2), op=Mult(), right=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load())), op=Mult(), right=Name(id='n', ctx=Load())), op=Add(), right=Name(id='rho', ctx=Load())), op=Add(), right=BinOp(left=BinOp(left=Name(id='sign', ctx=Load()), op=Mult(), right=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load())), op=Div(), right=Num(n=3))), op=Div(), right=BinOp(left=BinOp(left=Num(n=2), op=Pow(), right=BinOp(left=Name(id='j', ctx=Load()), op=Add(), right=Num(n=1))), op=Add(), right=Num(n=2))), generators=[comprehension(target=Name(id='sign', ctx=Store()), iter=List(elts=[UnaryOp(op=USub(), operand=Num(n=1)), Num(n=1)], ctx=Load()), ifs=[], is_async=0)]))
Call(func=Attribute(value=Name(id='theta_cis', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='theta_ci', ctx=Load())], keywords=[])
Name(id='np', ctx=Load())
Load()
Load()
Name(id='self', ctx=Load())
Load()
Name(id='rescaling', ctx=Load())
Mult()
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[Name(id='theta', ctx=Load())], keywords=[])
BinOp(left=Name(id='rescaling', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]))
Pow()
Num(n=2)
Name(id='x', ctx=Store())
Name(id='theta_ci', ctx=Load())
Load()
Load()
Load()
Load()
Load()
Name(id='self', ctx=Load())
Load()
Name(id='result', ctx=Load())
Store()
Name(id='result', ctx=Load())
Store()
Num(n=1)
Sub()
BinOp(left=BinOp(left=BinOp(left=Num(n=2), op=Mult(), right=Attribute(value=Name(id='self', ctx=Load()), attr='_maxiter', ctx=Load())), op=Sub(), right=Name(id='j_0', ctx=Load())), op=Mult(), right=Attribute(value=Name(id='self', ctx=Load()), attr='_delta', ctx=Load()))
Load()
Load()
Name(id='problem', ctx=Load())
Load()
Load()
Load()
Load()
Load()
Call(func=Attribute(value=Name(id='problem', ctx=Load()), attr='post_processing', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[])
comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='value_ci', ctx=Load()), ifs=[], is_async=0)
Load()
Attribute(value=Name(id='self', ctx=Load()), attr='quantum_instance', ctx=Load())
Load()
Call(func=Name(id='super', ctx=Load()), args=[], keywords=[])
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Name(id='List', ctx=Load())
Index(value=Name(id='float', ctx=Load()))
Load()
Name(id='List', ctx=Load())
Index(value=Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='float', ctx=Load())), ctx=Load()))
Load()
Load()
Load()
Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='QuantumInstance', ctx=Load()), Name(id='Backend', ctx=Load())], ctx=Load())), ctx=Load())
Name(id='super', ctx=Load())
Load()
Num(n=1944)
Mult()
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='log', ctx=Load()), args=[BinOp(left=Num(n=2), op=Div(), right=Name(id='delta', ctx=Load()))], keywords=[])
Load()
Num(n=972)
Mult()
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='log', ctx=Load()), args=[BinOp(left=Num(n=2), op=Div(), right=Name(id='delta', ctx=Load()))], keywords=[])
Load()
Tuple(elts=[Name(id='QuantumInstance', ctx=Load()), Name(id='Backend', ctx=Load())], ctx=Load())
Load()
Load()
Load()
Load()
Load()
Name(id='self', ctx=Load())
Load()
Load()
Load()
NameConstant(value=False)
Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()), attr='execute', ctx=Load()), args=[Name(id='circuit', ctx=Load())], keywords=[])
  Found a method call call at line 102
Load()
Store()
Store()
Load()
Load()
Store()
Call(func=Attribute(value=Subscript(value=Call(func=Name(id='bin', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]), slice=Slice(lower=Num(n=2), upper=None, step=None), ctx=Load()), attr='zfill', ctx=Load()), args=[Attribute(value=Name(id='circuit', ctx=Load()), attr='num_qubits', ctx=Load())], keywords=[])
Slice(lower=None, upper=None, step=UnaryOp(op=USub(), operand=Num(n=1)))
Load()
Store()
Attribute(value=Str(s=''), attr='join', ctx=Load())
ListComp(elt=Subscript(value=Name(id='full_state', ctx=Load()), slice=Index(value=Name(id='i', ctx=Load())), ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='objective_qubits', ctx=Load()), ifs=[], is_async=0)])
Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='is_good_state', ctx=Load())
Subscript(value=Name(id='state', ctx=Load()), slice=Slice(lower=None, upper=None, step=UnaryOp(op=USub(), operand=Num(n=1))), ctx=Load())
Name(id='prob', ctx=Store())
BinOp(left=Name(id='prob', ctx=Load()), op=Add(), right=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='abs', ctx=Load()), args=[Name(id='amplitude', ctx=Load())], keywords=[]), op=Pow(), right=Num(n=2)))
Num(n=2)
Mult()
Name(id='prob', ctx=Load())
Name(id='self', ctx=Load())
Load()
Load()
Load()
NameConstant(value=True)
Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load())
Load()
Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()), attr='execute', ctx=Load()), args=[Name(id='circuit', ctx=Load())], keywords=[])
  Found a method call call at line 120
Load()
Load()
BinOp(left=Num(n=2), op=Mult(), right=Name(id='k', ctx=Load()))
Add()
Num(n=1)
Load()
Store()
Store()
Name(id='counts', ctx=Load())
Load()
Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='is_good_state', ctx=Load())
Name(id='state', ctx=Load())
Name(id='good_counts', ctx=Store())
Add()
Name(id='count', ctx=Load())
BinOp(left=Num(n=2), op=Mult(), right=Name(id='good_counts', ctx=Load()))
Div()
Name(id='shots', ctx=Load())
Load()
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='log', ctx=Load()), args=[BinOp(left=Num(n=2), op=Div(), right=Attribute(value=Name(id='self', ctx=Load()), attr='_delta', ctx=Load()))], keywords=[])
Mult()
Num(n=12)
Load()
Name(id='np', ctx=Load())
Load()
USub()
Num(n=1)
Name(id='cos', ctx=Load())
Sub()
Name(id='width', ctx=Load())
Name(id='np', ctx=Load())
Load()
Name(id='cos', ctx=Load())
Add()
Name(id='width', ctx=Load())
Name(id='estimation_problem', ctx=Load())
Load()
Name(id='estimation_problem', ctx=Load())
Load()
Load()
Name(id='len', ctx=Load())
Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='objective_qubits', ctx=Load())
Name(id='circuit', ctx=Load())
Load()
Load()
Load()
Load()
Name(id='circuit', ctx=Load())
Load()
Attribute(value=Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='grover_operator', ctx=Load()), attr='power', ctx=Load())
Name(id='k', ctx=Load())
NameConstant(value=True)
Name(id='circuit', ctx=Load())
Load()
Name(id='circuit', ctx=Load())
Load()
Name(id='estimation_problem', ctx=Load())
Load()
Name(id='c', ctx=Load())
Slice(lower=None, upper=None, step=None)
Load()
Load()
Name(id='Tuple', ctx=Load())
Index(value=Tuple(elts=[Name(id='QuantumCircuit', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='int', ctx=Load())), ctx=Load())], ctx=Load()))
Load()
Name(id='self', ctx=Load())
Load()
Name(id='estimation_problem', ctx=Load())
Load()
Load()
Name(id='self', ctx=Load())
Load()
Load()
Num(n=0)
Num(n=1)
Attribute(value=Name(id='np', ctx=Load()), attr='arccos', ctx=Load())
Name(id='cos', ctx=Load())
Load()
Load()
Load()
Attribute(value=Name(id='np', ctx=Load()), attr='arcsin', ctx=Load())
Num(n=0.25)
Load()
Load()
Attribute(value=Name(id='self', ctx=Load()), attr='_cos_estimate', ctx=Load())
Name(id='problem', ctx=Load())
Name(id='power', ctx=Load())
Name(id='shots', ctx=Load())
Load()
Attribute(value=Name(id='self', ctx=Load()), attr='_maxiter', ctx=Load())
Add()
Num(n=1)
Store()
Load()
Name(id='num_first_stage_steps', ctx=Store())
Add()
Num(n=1)
Name(id='c', ctx=Store())
Call(func=Name(id='cos_estimate', ctx=Load()), args=[BinOp(left=Num(n=2), op=Pow(), right=BinOp(left=Name(id='j', ctx=Load()), op=Sub(), right=Num(n=1))), Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_shots', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())], keywords=[])
Name(id='chernoff_ci', ctx=Store())
Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_chernoff', ctx=Load()), args=[Name(id='c', ctx=Load()), Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_shots', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())], keywords=[])
Name(id='theta_ci', ctx=Store())
ListComp(elt=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='arccos', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), op=Div(), right=BinOp(left=BinOp(left=Num(n=2), op=Pow(), right=BinOp(left=Name(id='j', ctx=Load()), op=Add(), right=Num(n=1))), op=Add(), right=Num(n=2))), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='chernoff_ci', ctx=Load()), slice=Slice(lower=None, upper=None, step=UnaryOp(op=USub(), operand=Num(n=1))), ctx=Load()), ifs=[], is_async=0)])
BoolOp(op=And(), values=[Compare(left=BinOp(left=BinOp(left=Num(n=2), op=Pow(), right=BinOp(left=Name(id='j', ctx=Load()), op=Add(), right=Num(n=1))), op=Mult(), right=Subscript(value=Name(id='theta_ci', ctx=Load()), slice=Index(value=Num(n=1)), ctx=Load())), ops=[GtE()], comparators=[BinOp(left=BinOp(left=Num(n=3), op=Mult(), right=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load())), op=Div(), right=Num(n=8))]), Compare(left=Name(id='j', ctx=Load()), ops=[Lt()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='_maxiter', ctx=Load())])])
Assign(targets=[Name(id='j_0', ctx=Store())], value=Name(id='j', ctx=Load()))
Assign(targets=[Name(id='v', ctx=Store())], value=BinOp(left=BinOp(left=Num(n=2), op=Pow(), right=Name(id='j', ctx=Load())), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sum', ctx=Load()), args=[Name(id='theta_ci', ctx=Load())], keywords=[])))
Assign(targets=[Name(id='first_stage', ctx=Store())], value=NameConstant(value=False))
Name(id='cos', ctx=Store())
Call(func=Name(id='cos_estimate', ctx=Load()), args=[BinOp(left=Num(n=2), op=Pow(), right=BinOp(left=Name(id='j', ctx=Load()), op=Sub(), right=Num(n=1))), Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_shots', ctx=Load()), slice=Index(value=Num(n=1)), ctx=Load())], keywords=[])
Name(id='cos_2', ctx=Store())
Call(func=Name(id='cos_estimate', ctx=Load()), args=[BinOp(left=BinOp(left=Num(n=2), op=Pow(), right=BinOp(left=Name(id='j', ctx=Load()), op=Sub(), right=Num(n=1))), op=Add(), right=BinOp(left=Num(n=2), op=Pow(), right=BinOp(left=Name(id='j_0', ctx=Load()), op=Sub(), right=Num(n=1)))), Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_shots', ctx=Load()), slice=Index(value=Num(n=1)), ctx=Load())], keywords=[])
Name(id='sin', ctx=Store())
BinOp(left=BinOp(left=BinOp(left=Name(id='cos', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='cos', ctx=Load()), args=[Name(id='v', ctx=Load())], keywords=[])), op=Sub(), right=Name(id='cos_2', ctx=Load())), op=Div(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[Name(id='v', ctx=Load())], keywords=[]))
Name(id='rho', ctx=Store())
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='arctan2', ctx=Load()), args=[Name(id='sin', ctx=Load()), Name(id='cos', ctx=Load())], keywords=[])
Name(id='n', ctx=Store())
Call(func=Name(id='int', ctx=Load()), args=[BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Num(n=2), op=Pow(), right=BinOp(left=Name(id='j', ctx=Load()), op=Add(), right=Num(n=1))), op=Add(), right=Num(n=2)), op=Mult(), right=Subscript(value=Name(id='theta_ci', ctx=Load()), slice=Index(value=Num(n=1)), ctx=Load())), op=Sub(), right=Name(id='rho', ctx=Load())), op=Add(), right=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Div(), right=Num(n=3))), op=Div(), right=BinOp(left=Num(n=2), op=Mult(), right=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load())))], keywords=[])
Name(id='theta_ci', ctx=Store())
ListComp(elt=BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Num(n=2), op=Mult(), right=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load())), op=Mult(), right=Name(id='n', ctx=Load())), op=Add(), right=Name(id='rho', ctx=Load())), op=Add(), right=BinOp(left=BinOp(left=Name(id='sign', ctx=Load()), op=Mult(), right=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load())), op=Div(), right=Num(n=3))), op=Div(), right=BinOp(left=BinOp(left=Num(n=2), op=Pow(), right=BinOp(left=Name(id='j', ctx=Load()), op=Add(), right=Num(n=1))), op=Add(), right=Num(n=2))), generators=[comprehension(target=Name(id='sign', ctx=Store()), iter=List(elts=[UnaryOp(op=USub(), operand=Num(n=1)), Num(n=1)], ctx=Load()), ifs=[], is_async=0)])
Attribute(value=Name(id='theta_cis', ctx=Load()), attr='append', ctx=Load())
Name(id='theta_ci', ctx=Load())
Load()
Load()
Load()
Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load())
Name(id='theta', ctx=Load())
Name(id='rescaling', ctx=Load())
Mult()
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[])
Store()
Load()
Load()
Load()
Load()
BinOp(left=BinOp(left=Num(n=2), op=Mult(), right=Attribute(value=Name(id='self', ctx=Load()), attr='_maxiter', ctx=Load())), op=Sub(), right=Name(id='j_0', ctx=Load()))
Mult()
Attribute(value=Name(id='self', ctx=Load()), attr='_delta', ctx=Load())
Load()
Attribute(value=Name(id='problem', ctx=Load()), attr='post_processing', ctx=Load())
Name(id='x', ctx=Load())
Name(id='x', ctx=Store())
Name(id='value_ci', ctx=Load())
Name(id='self', ctx=Load())
Load()
Name(id='super', ctx=Load())
Load()
Name(id='float', ctx=Load())
Load()
Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='float', ctx=Load())), ctx=Load())
Name(id='Union', ctx=Load())
Index(value=Tuple(elts=[Name(id='QuantumInstance', ctx=Load()), Name(id='Backend', ctx=Load())], ctx=Load()))
Load()
Load()
Attribute(value=Name(id='np', ctx=Load()), attr='log', ctx=Load())
BinOp(left=Num(n=2), op=Div(), right=Name(id='delta', ctx=Load()))
Attribute(value=Name(id='np', ctx=Load()), attr='log', ctx=Load())
BinOp(left=Num(n=2), op=Div(), right=Name(id='delta', ctx=Load()))
Name(id='QuantumInstance', ctx=Load())
Name(id='Backend', ctx=Load())
Load()
Load()
Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()), attr='execute', ctx=Load())
Name(id='circuit', ctx=Load())
Attribute(value=Subscript(value=Call(func=Name(id='bin', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]), slice=Slice(lower=Num(n=2), upper=None, step=None), ctx=Load()), attr='zfill', ctx=Load())
Attribute(value=Name(id='circuit', ctx=Load()), attr='num_qubits', ctx=Load())
UnaryOp(op=USub(), operand=Num(n=1))
Str(s='')
Load()
Subscript(value=Name(id='full_state', ctx=Load()), slice=Index(value=Name(id='i', ctx=Load())), ctx=Load())
comprehension(target=Name(id='i', ctx=Store()), iter=Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='objective_qubits', ctx=Load()), ifs=[], is_async=0)
Name(id='estimation_problem', ctx=Load())
Load()
Name(id='state', ctx=Load())
Slice(lower=None, upper=None, step=UnaryOp(op=USub(), operand=Num(n=1)))
Load()
Store()
Name(id='prob', ctx=Load())
Add()
BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='abs', ctx=Load()), args=[Name(id='amplitude', ctx=Load())], keywords=[]), op=Pow(), right=Num(n=2))
Load()
Load()
Name(id='self', ctx=Load())
Load()
Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()), attr='execute', ctx=Load())
Name(id='circuit', ctx=Load())
Num(n=2)
Mult()
Name(id='k', ctx=Load())
Load()
Name(id='estimation_problem', ctx=Load())
Load()
Load()
Store()
Load()
Num(n=2)
Mult()
Name(id='good_counts', ctx=Load())
Load()
Attribute(value=Name(id='np', ctx=Load()), attr='log', ctx=Load())
BinOp(left=Num(n=2), op=Div(), right=Attribute(value=Name(id='self', ctx=Load()), attr='_delta', ctx=Load()))
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Name(id='estimation_problem', ctx=Load())
Load()
Load()
Load()
Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='grover_operator', ctx=Load())
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Tuple(elts=[Name(id='QuantumCircuit', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='int', ctx=Load())), ctx=Load())], ctx=Load())
Load()
Load()
Load()
Name(id='np', ctx=Load())
Load()
Load()
Name(id='np', ctx=Load())
Load()
Name(id='self', ctx=Load())
Load()
Load()
Load()
Load()
Name(id='self', ctx=Load())
Load()
Store()
Store()
Name(id='cos_estimate', ctx=Load())
BinOp(left=Num(n=2), op=Pow(), right=BinOp(left=Name(id='j', ctx=Load()), op=Sub(), right=Num(n=1)))
Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_shots', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())
Store()
Attribute(value=Name(id='self', ctx=Load()), attr='_chernoff', ctx=Load())
Name(id='c', ctx=Load())
Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_shots', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())
Store()
BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='arccos', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), op=Div(), right=BinOp(left=BinOp(left=Num(n=2), op=Pow(), right=BinOp(left=Name(id='j', ctx=Load()), op=Add(), right=Num(n=1))), op=Add(), right=Num(n=2)))
comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='chernoff_ci', ctx=Load()), slice=Slice(lower=None, upper=None, step=UnaryOp(op=USub(), operand=Num(n=1))), ctx=Load()), ifs=[], is_async=0)
And()
Compare(left=BinOp(left=BinOp(left=Num(n=2), op=Pow(), right=BinOp(left=Name(id='j', ctx=Load()), op=Add(), right=Num(n=1))), op=Mult(), right=Subscript(value=Name(id='theta_ci', ctx=Load()), slice=Index(value=Num(n=1)), ctx=Load())), ops=[GtE()], comparators=[BinOp(left=BinOp(left=Num(n=3), op=Mult(), right=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load())), op=Div(), right=Num(n=8))])
Compare(left=Name(id='j', ctx=Load()), ops=[Lt()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='_maxiter', ctx=Load())])
Name(id='j_0', ctx=Store())
Name(id='j', ctx=Load())
Name(id='v', ctx=Store())
BinOp(left=BinOp(left=Num(n=2), op=Pow(), right=Name(id='j', ctx=Load())), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sum', ctx=Load()), args=[Name(id='theta_ci', ctx=Load())], keywords=[]))
Name(id='first_stage', ctx=Store())
NameConstant(value=False)
Store()
Name(id='cos_estimate', ctx=Load())
BinOp(left=Num(n=2), op=Pow(), right=BinOp(left=Name(id='j', ctx=Load()), op=Sub(), right=Num(n=1)))
Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_shots', ctx=Load()), slice=Index(value=Num(n=1)), ctx=Load())
Store()
Name(id='cos_estimate', ctx=Load())
BinOp(left=BinOp(left=Num(n=2), op=Pow(), right=BinOp(left=Name(id='j', ctx=Load()), op=Sub(), right=Num(n=1))), op=Add(), right=BinOp(left=Num(n=2), op=Pow(), right=BinOp(left=Name(id='j_0', ctx=Load()), op=Sub(), right=Num(n=1))))
Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_shots', ctx=Load()), slice=Index(value=Num(n=1)), ctx=Load())
Store()
BinOp(left=BinOp(left=Name(id='cos', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='cos', ctx=Load()), args=[Name(id='v', ctx=Load())], keywords=[])), op=Sub(), right=Name(id='cos_2', ctx=Load()))
Div()
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[Name(id='v', ctx=Load())], keywords=[])
Store()
Attribute(value=Name(id='np', ctx=Load()), attr='arctan2', ctx=Load())
Name(id='sin', ctx=Load())
Name(id='cos', ctx=Load())
Store()
Name(id='int', ctx=Load())
BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Num(n=2), op=Pow(), right=BinOp(left=Name(id='j', ctx=Load()), op=Add(), right=Num(n=1))), op=Add(), right=Num(n=2)), op=Mult(), right=Subscript(value=Name(id='theta_ci', ctx=Load()), slice=Index(value=Num(n=1)), ctx=Load())), op=Sub(), right=Name(id='rho', ctx=Load())), op=Add(), right=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Div(), right=Num(n=3))), op=Div(), right=BinOp(left=Num(n=2), op=Mult(), right=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load())))
Store()
BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Num(n=2), op=Mult(), right=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load())), op=Mult(), right=Name(id='n', ctx=Load())), op=Add(), right=Name(id='rho', ctx=Load())), op=Add(), right=BinOp(left=BinOp(left=Name(id='sign', ctx=Load()), op=Mult(), right=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load())), op=Div(), right=Num(n=3))), op=Div(), right=BinOp(left=BinOp(left=Num(n=2), op=Pow(), right=BinOp(left=Name(id='j', ctx=Load()), op=Add(), right=Num(n=1))), op=Add(), right=Num(n=2)))
comprehension(target=Name(id='sign', ctx=Store()), iter=List(elts=[UnaryOp(op=USub(), operand=Num(n=1)), Num(n=1)], ctx=Load()), ifs=[], is_async=0)
Name(id='theta_cis', ctx=Load())
Load()
Load()
Name(id='np', ctx=Load())
Load()
Load()
Load()
Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load())
Name(id='x', ctx=Load())
BinOp(left=Num(n=2), op=Mult(), right=Attribute(value=Name(id='self', ctx=Load()), attr='_maxiter', ctx=Load()))
Sub()
Name(id='j_0', ctx=Load())
Name(id='self', ctx=Load())
Load()
Name(id='problem', ctx=Load())
Load()
Load()
Store()
Load()
Load()
Load()
Load()
Name(id='List', ctx=Load())
Index(value=Name(id='float', ctx=Load()))
Load()
Load()
Tuple(elts=[Name(id='QuantumInstance', ctx=Load()), Name(id='Backend', ctx=Load())], ctx=Load())
Name(id='np', ctx=Load())
Load()
Num(n=2)
Div()
Name(id='delta', ctx=Load())
Name(id='np', ctx=Load())
Load()
Num(n=2)
Div()
Name(id='delta', ctx=Load())
Load()
Load()
Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load())
Load()
Load()
Subscript(value=Call(func=Name(id='bin', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]), slice=Slice(lower=Num(n=2), upper=None, step=None), ctx=Load())
Load()
Name(id='circuit', ctx=Load())
Load()
USub()
Num(n=1)
Name(id='full_state', ctx=Load())
Index(value=Name(id='i', ctx=Load()))
Load()
Name(id='i', ctx=Store())
Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='objective_qubits', ctx=Load())
Load()
Load()
UnaryOp(op=USub(), operand=Num(n=1))
Load()
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='abs', ctx=Load()), args=[Name(id='amplitude', ctx=Load())], keywords=[])
Pow()
Num(n=2)
Load()
Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load())
Load()
Load()
Load()
Load()
Load()
Name(id='np', ctx=Load())
Load()
Num(n=2)
Div()
Attribute(value=Name(id='self', ctx=Load()), attr='_delta', ctx=Load())
Load()
Name(id='estimation_problem', ctx=Load())
Load()
Name(id='QuantumCircuit', ctx=Load())
Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='int', ctx=Load())), ctx=Load())
Load()
Load()
Load()
Load()
Load()
Load()
Num(n=2)
Pow()
BinOp(left=Name(id='j', ctx=Load()), op=Sub(), right=Num(n=1))
Attribute(value=Name(id='self', ctx=Load()), attr='_shots', ctx=Load())
Index(value=Num(n=0))
Load()
Name(id='self', ctx=Load())
Load()
Load()
Attribute(value=Name(id='self', ctx=Load()), attr='_shots', ctx=Load())
Index(value=Num(n=0))
Load()
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='arccos', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[])
Div()
BinOp(left=BinOp(left=Num(n=2), op=Pow(), right=BinOp(left=Name(id='j', ctx=Load()), op=Add(), right=Num(n=1))), op=Add(), right=Num(n=2))
Name(id='x', ctx=Store())
Subscript(value=Name(id='chernoff_ci', ctx=Load()), slice=Slice(lower=None, upper=None, step=UnaryOp(op=USub(), operand=Num(n=1))), ctx=Load())
BinOp(left=BinOp(left=Num(n=2), op=Pow(), right=BinOp(left=Name(id='j', ctx=Load()), op=Add(), right=Num(n=1))), op=Mult(), right=Subscript(value=Name(id='theta_ci', ctx=Load()), slice=Index(value=Num(n=1)), ctx=Load()))
GtE()
BinOp(left=BinOp(left=Num(n=3), op=Mult(), right=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load())), op=Div(), right=Num(n=8))
Name(id='j', ctx=Load())
Lt()
Attribute(value=Name(id='self', ctx=Load()), attr='_maxiter', ctx=Load())
Store()
Load()
Store()
BinOp(left=Num(n=2), op=Pow(), right=Name(id='j', ctx=Load()))
Mult()
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sum', ctx=Load()), args=[Name(id='theta_ci', ctx=Load())], keywords=[])
Store()
Load()
Num(n=2)
Pow()
BinOp(left=Name(id='j', ctx=Load()), op=Sub(), right=Num(n=1))
Attribute(value=Name(id='self', ctx=Load()), attr='_shots', ctx=Load())
Index(value=Num(n=1))
Load()
Load()
BinOp(left=Num(n=2), op=Pow(), right=BinOp(left=Name(id='j', ctx=Load()), op=Sub(), right=Num(n=1)))
Add()
BinOp(left=Num(n=2), op=Pow(), right=BinOp(left=Name(id='j_0', ctx=Load()), op=Sub(), right=Num(n=1)))
Attribute(value=Name(id='self', ctx=Load()), attr='_shots', ctx=Load())
Index(value=Num(n=1))
Load()
BinOp(left=Name(id='cos', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='cos', ctx=Load()), args=[Name(id='v', ctx=Load())], keywords=[]))
Sub()
Name(id='cos_2', ctx=Load())
Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load())
Name(id='v', ctx=Load())
Name(id='np', ctx=Load())
Load()
Load()
Load()
Load()
BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Num(n=2), op=Pow(), right=BinOp(left=Name(id='j', ctx=Load()), op=Add(), right=Num(n=1))), op=Add(), right=Num(n=2)), op=Mult(), right=Subscript(value=Name(id='theta_ci', ctx=Load()), slice=Index(value=Num(n=1)), ctx=Load())), op=Sub(), right=Name(id='rho', ctx=Load())), op=Add(), right=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Div(), right=Num(n=3)))
Div()
BinOp(left=Num(n=2), op=Mult(), right=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()))
BinOp(left=BinOp(left=BinOp(left=BinOp(left=Num(n=2), op=Mult(), right=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load())), op=Mult(), right=Name(id='n', ctx=Load())), op=Add(), right=Name(id='rho', ctx=Load())), op=Add(), right=BinOp(left=BinOp(left=Name(id='sign', ctx=Load()), op=Mult(), right=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load())), op=Div(), right=Num(n=3)))
Div()
BinOp(left=BinOp(left=Num(n=2), op=Pow(), right=BinOp(left=Name(id='j', ctx=Load()), op=Add(), right=Num(n=1))), op=Add(), right=Num(n=2))
Name(id='sign', ctx=Store())
List(elts=[UnaryOp(op=USub(), operand=Num(n=1)), Num(n=1)], ctx=Load())
Load()
Load()
Name(id='np', ctx=Load())
Load()
Load()
Num(n=2)
Mult()
Attribute(value=Name(id='self', ctx=Load()), attr='_maxiter', ctx=Load())
Load()
Load()
Load()
Load()
Name(id='float', ctx=Load())
Name(id='QuantumInstance', ctx=Load())
Name(id='Backend', ctx=Load())
Load()
Load()
Load()
Load()
Load()
Name(id='self', ctx=Load())
Load()
Call(func=Name(id='bin', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[])
Slice(lower=Num(n=2), upper=None, step=None)
Load()
Load()
Load()
Name(id='i', ctx=Load())
Store()
Name(id='estimation_problem', ctx=Load())
Load()
USub()
Num(n=1)
Attribute(value=Name(id='np', ctx=Load()), attr='abs', ctx=Load())
Name(id='amplitude', ctx=Load())
Name(id='self', ctx=Load())
Load()
Load()
Name(id='self', ctx=Load())
Load()
Load()
Load()
Name(id='List', ctx=Load())
Index(value=Name(id='int', ctx=Load()))
Load()
Name(id='j', ctx=Load())
Sub()
Num(n=1)
Name(id='self', ctx=Load())
Load()
Num(n=0)
Load()
Name(id='self', ctx=Load())
Load()
Num(n=0)
Attribute(value=Name(id='np', ctx=Load()), attr='arccos', ctx=Load())
Name(id='x', ctx=Load())
BinOp(left=Num(n=2), op=Pow(), right=BinOp(left=Name(id='j', ctx=Load()), op=Add(), right=Num(n=1)))
Add()
Num(n=2)
Store()
Name(id='chernoff_ci', ctx=Load())
Slice(lower=None, upper=None, step=UnaryOp(op=USub(), operand=Num(n=1)))
Load()
BinOp(left=Num(n=2), op=Pow(), right=BinOp(left=Name(id='j', ctx=Load()), op=Add(), right=Num(n=1)))
Mult()
Subscript(value=Name(id='theta_ci', ctx=Load()), slice=Index(value=Num(n=1)), ctx=Load())
BinOp(left=Num(n=3), op=Mult(), right=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()))
Div()
Num(n=8)
Load()
Name(id='self', ctx=Load())
Load()
Num(n=2)
Pow()
Name(id='j', ctx=Load())
Attribute(value=Name(id='np', ctx=Load()), attr='sum', ctx=Load())
Name(id='theta_ci', ctx=Load())
Name(id='j', ctx=Load())
Sub()
Num(n=1)
Name(id='self', ctx=Load())
Load()
Num(n=1)
Num(n=2)
Pow()
BinOp(left=Name(id='j', ctx=Load()), op=Sub(), right=Num(n=1))
Num(n=2)
Pow()
BinOp(left=Name(id='j_0', ctx=Load()), op=Sub(), right=Num(n=1))
Name(id='self', ctx=Load())
Load()
Num(n=1)
Name(id='cos', ctx=Load())
Mult()
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='cos', ctx=Load()), args=[Name(id='v', ctx=Load())], keywords=[])
Load()
Name(id='np', ctx=Load())
Load()
Load()
Load()
BinOp(left=BinOp(left=BinOp(left=BinOp(left=Num(n=2), op=Pow(), right=BinOp(left=Name(id='j', ctx=Load()), op=Add(), right=Num(n=1))), op=Add(), right=Num(n=2)), op=Mult(), right=Subscript(value=Name(id='theta_ci', ctx=Load()), slice=Index(value=Num(n=1)), ctx=Load())), op=Sub(), right=Name(id='rho', ctx=Load()))
Add()
BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Div(), right=Num(n=3))
Num(n=2)
Mult()
Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load())
BinOp(left=BinOp(left=BinOp(left=Num(n=2), op=Mult(), right=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load())), op=Mult(), right=Name(id='n', ctx=Load())), op=Add(), right=Name(id='rho', ctx=Load()))
Add()
BinOp(left=BinOp(left=Name(id='sign', ctx=Load()), op=Mult(), right=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load())), op=Div(), right=Num(n=3))
BinOp(left=Num(n=2), op=Pow(), right=BinOp(left=Name(id='j', ctx=Load()), op=Add(), right=Num(n=1)))
Add()
Num(n=2)
Store()
UnaryOp(op=USub(), operand=Num(n=1))
Num(n=1)
Load()
Load()
Name(id='self', ctx=Load())
Load()
Load()
Load()
Load()
Load()
Name(id='bin', ctx=Load())
Name(id='i', ctx=Load())
Num(n=2)
Load()
Load()
Name(id='np', ctx=Load())
Load()
Load()
Load()
Load()
Load()
Name(id='int', ctx=Load())
Load()
Load()
Load()
Name(id='np', ctx=Load())
Load()
Load()
Num(n=2)
Pow()
BinOp(left=Name(id='j', ctx=Load()), op=Add(), right=Num(n=1))
Load()
UnaryOp(op=USub(), operand=Num(n=1))
Num(n=2)
Pow()
BinOp(left=Name(id='j', ctx=Load()), op=Add(), right=Num(n=1))
Name(id='theta_ci', ctx=Load())
Index(value=Num(n=1))
Load()
Num(n=3)
Mult()
Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load())
Load()
Load()
Name(id='np', ctx=Load())
Load()
Load()
Load()
Load()
Name(id='j', ctx=Load())
Sub()
Num(n=1)
Name(id='j_0', ctx=Load())
Sub()
Num(n=1)
Load()
Load()
Attribute(value=Name(id='np', ctx=Load()), attr='cos', ctx=Load())
Name(id='v', ctx=Load())
Load()
BinOp(left=BinOp(left=BinOp(left=Num(n=2), op=Pow(), right=BinOp(left=Name(id='j', ctx=Load()), op=Add(), right=Num(n=1))), op=Add(), right=Num(n=2)), op=Mult(), right=Subscript(value=Name(id='theta_ci', ctx=Load()), slice=Index(value=Num(n=1)), ctx=Load()))
Sub()
Name(id='rho', ctx=Load())
Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load())
Div()
Num(n=3)
Name(id='np', ctx=Load())
Load()
BinOp(left=BinOp(left=Num(n=2), op=Mult(), right=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load())), op=Mult(), right=Name(id='n', ctx=Load()))
Add()
Name(id='rho', ctx=Load())
BinOp(left=Name(id='sign', ctx=Load()), op=Mult(), right=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()))
Div()
Num(n=3)
Num(n=2)
Pow()
BinOp(left=Name(id='j', ctx=Load()), op=Add(), right=Num(n=1))
USub()
Num(n=1)
Load()
Load()
Load()
Load()
Load()
Load()
Name(id='j', ctx=Load())
Add()
Num(n=1)
USub()
Num(n=1)
Name(id='j', ctx=Load())
Add()
Num(n=1)
Load()
Num(n=1)
Name(id='np', ctx=Load())
Load()
Load()
Load()
Load()
Name(id='np', ctx=Load())
Load()
Load()
BinOp(left=BinOp(left=Num(n=2), op=Pow(), right=BinOp(left=Name(id='j', ctx=Load()), op=Add(), right=Num(n=1))), op=Add(), right=Num(n=2))
Mult()
Subscript(value=Name(id='theta_ci', ctx=Load()), slice=Index(value=Num(n=1)), ctx=Load())
Load()
Name(id='np', ctx=Load())
Load()
Load()
BinOp(left=Num(n=2), op=Mult(), right=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()))
Mult()
Name(id='n', ctx=Load())
Load()
Name(id='sign', ctx=Load())
Mult()
Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load())
Name(id='j', ctx=Load())
Add()
Num(n=1)
Load()
Load()
Load()
Load()
BinOp(left=Num(n=2), op=Pow(), right=BinOp(left=Name(id='j', ctx=Load()), op=Add(), right=Num(n=1)))
Add()
Num(n=2)
Name(id='theta_ci', ctx=Load())
Index(value=Num(n=1))
Load()
Load()
Num(n=2)
Mult()
Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load())
Load()
Load()
Name(id='np', ctx=Load())
Load()
Load()
Num(n=2)
Pow()
BinOp(left=Name(id='j', ctx=Load()), op=Add(), right=Num(n=1))
Load()
Num(n=1)
Name(id='np', ctx=Load())
Load()
Load()
Name(id='j', ctx=Load())
Add()
Num(n=1)
Load()
Load()
Module(body=[Expr(value=Str(s='Faster Amplitude Estimation.')), ImportFrom(module='typing', names=[alias(name='Optional', asname=None), alias(name='Union', asname=None), alias(name='List', asname=None), alias(name='Tuple', asname=None)], level=0), Import(names=[alias(name='numpy', asname='np')]), ImportFrom(module='qiskit.circuit', names=[alias(name='QuantumCircuit', asname=None), alias(name='ClassicalRegister', asname=None)], level=0), ImportFrom(module='qiskit.providers', names=[alias(name='Backend', asname=None)], level=0), ImportFrom(module='qiskit.utils', names=[alias(name='QuantumInstance', asname=None)], level=0), ImportFrom(module='qiskit.algorithms.exceptions', names=[alias(name='AlgorithmError', asname=None)], level=0), ImportFrom(module='amplitude_estimator', names=[alias(name='AmplitudeEstimator', asname=None), alias(name='AmplitudeEstimatorResult', asname=None)], level=1), ImportFrom(module='estimation_problem', names=[alias(name='EstimationProblem', asname=None)], level=1), ClassDef(name='FasterAmplitudeEstimation', bases=[Name(id='AmplitudeEstimator', ctx=Load())], keywords=[], body=[Expr(value=Str(s='The Faster Amplitude Estimation algorithm.\n\n    The Faster Amplitude Estimation (FAE) [1] algorithm is a variant of Quantum Amplitude\n    Estimation (QAE), where the Quantum Phase Estimation (QPE) by an iterative Grover search,\n    similar to [2].\n\n    Due to the iterative version of the QPE, this algorithm does not require any additional\n    qubits, as the originally proposed QAE [3] and thus the resulting circuits are less complex.\n\n    References:\n\n        [1]: K. Nakaji. Faster Amplitude Estimation, 2020;\n            `arXiv:2002.02417 <https://arxiv.org/pdf/2003.02417.pdf>`_\n        [2]: D. Grinko et al. Iterative Amplitude Estimation, 2019;\n            `arXiv:1912.05559 <http://arxiv.org/abs/1912.05559>`_\n        [3]: G. Brassard et al. Quantum Amplitude Amplification and Estimation, 2000;\n            `arXiv:quant-ph/0005055 <http://arxiv.org/abs/quant-ph/0005055>`_\n\n    ')), FunctionDef(name='__init__', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='delta', annotation=Name(id='float', ctx=Load())), arg(arg='maxiter', annotation=Name(id='int', ctx=Load())), arg(arg='rescale', annotation=Name(id='bool', ctx=Load())), arg(arg='quantum_instance', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='QuantumInstance', ctx=Load()), Name(id='Backend', ctx=Load())], ctx=Load())), ctx=Load())), ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[NameConstant(value=True), NameConstant(value=None)]), body=[Expr(value=Str(s='\n        Args:\n            delta: The probability that the true value is outside of the final confidence interval.\n            maxiter: The number of iterations, the maximal power of Q is `2 ** (maxiter - 1)`.\n            rescale: Whether to rescale the problem passed to `estimate`.\n            quantum_instance: The quantum instance or backend to run the circuits.\n\n        .. note::\n\n            This algorithm overwrites the number of shots set in the ``quantum_instance``\n            argument, but will reset them to the initial number after running.\n\n        ')), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='quantum_instance', ctx=Store())], value=Name(id='quantum_instance', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_shots', ctx=Store())], value=Tuple(elts=[Call(func=Name(id='int', ctx=Load()), args=[BinOp(left=Num(n=1944), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='log', ctx=Load()), args=[BinOp(left=Num(n=2), op=Div(), right=Name(id='delta', ctx=Load()))], keywords=[]))], keywords=[]), Call(func=Name(id='int', ctx=Load()), args=[BinOp(left=Num(n=972), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='log', ctx=Load()), args=[BinOp(left=Num(n=2), op=Div(), right=Name(id='delta', ctx=Load()))], keywords=[]))], keywords=[])], ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_rescale', ctx=Store())], value=Name(id='rescale', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_delta', ctx=Store())], value=Name(id='delta', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_maxiter', ctx=Store())], value=Name(id='maxiter', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_num_oracle_calls', ctx=Store())], value=Num(n=0))], decorator_list=[], returns=NameConstant(value=None)), FunctionDef(name='quantum_instance', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Get the quantum instance.\n\n        Returns:\n            The quantum instance used to run this algorithm.\n        ')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Name(id='QuantumInstance', ctx=Load())), ctx=Load())), FunctionDef(name='quantum_instance', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='quantum_instance', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='QuantumInstance', ctx=Load()), Name(id='Backend', ctx=Load())], ctx=Load())), ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Set quantum instance.\n\n        Args:\n            quantum_instance: The quantum instance used to run this algorithm.\n        ')), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='quantum_instance', ctx=Load()), Name(id='Backend', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='quantum_instance', ctx=Store())], value=Call(func=Name(id='QuantumInstance', ctx=Load()), args=[Name(id='quantum_instance', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Store())], value=Name(id='quantum_instance', ctx=Load()))], decorator_list=[Attribute(value=Name(id='quantum_instance', ctx=Load()), attr='setter', ctx=Load())], returns=NameConstant(value=None)), FunctionDef(name='_cos_estimate', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='estimation_problem', annotation=None), arg(arg='k', annotation=None), arg(arg='shots', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()), ops=[Is()], comparators=[NameConstant(value=None)]), body=[Raise(exc=Call(func=Name(id='AlgorithmError', ctx=Load()), args=[Str(s='Quantum instance must be set.')], keywords=[]), cause=None)], orelse=[]), If(test=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()), attr='is_statevector', ctx=Load()), body=[Assign(targets=[Name(id='circuit', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='construct_circuit', ctx=Load()), args=[Name(id='estimation_problem', ctx=Load()), Name(id='k', ctx=Load())], keywords=[keyword(arg='measurement', value=NameConstant(value=False))])), Assign(targets=[Name(id='statevector', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()), attr='execute', ctx=Load()), args=[Name(id='circuit', ctx=Load())], keywords=[]), attr='get_statevector', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='prob', ctx=Store())], value=Num(n=0)), For(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='amplitude', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='statevector', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='full_state', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Subscript(value=Call(func=Name(id='bin', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]), slice=Slice(lower=Num(n=2), upper=None, step=None), ctx=Load()), attr='zfill', ctx=Load()), args=[Attribute(value=Name(id='circuit', ctx=Load()), attr='num_qubits', ctx=Load())], keywords=[]), slice=Slice(lower=None, upper=None, step=UnaryOp(op=USub(), operand=Num(n=1))), ctx=Load())), Assign(targets=[Name(id='state', ctx=Store())], value=Call(func=Attribute(value=Str(s=''), attr='join', ctx=Load()), args=[ListComp(elt=Subscript(value=Name(id='full_state', ctx=Load()), slice=Index(value=Name(id='i', ctx=Load())), ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='objective_qubits', ctx=Load()), ifs=[], is_async=0)])], keywords=[])), If(test=Call(func=Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='is_good_state', ctx=Load()), args=[Subscript(value=Name(id='state', ctx=Load()), slice=Slice(lower=None, upper=None, step=UnaryOp(op=USub(), operand=Num(n=1))), ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='prob', ctx=Store())], value=BinOp(left=Name(id='prob', ctx=Load()), op=Add(), right=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='abs', ctx=Load()), args=[Name(id='amplitude', ctx=Load())], keywords=[]), op=Pow(), right=Num(n=2))))], orelse=[])], orelse=[]), Assign(targets=[Name(id='cos_estimate', ctx=Store())], value=BinOp(left=Num(n=1), op=Sub(), right=BinOp(left=Num(n=2), op=Mult(), right=Name(id='prob', ctx=Load()))))], orelse=[Assign(targets=[Name(id='circuit', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='construct_circuit', ctx=Load()), args=[Name(id='estimation_problem', ctx=Load()), Name(id='k', ctx=Load())], keywords=[keyword(arg='measurement', value=NameConstant(value=True))])), Assign(targets=[Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()), attr='run_config', ctx=Load()), attr='shots', ctx=Store())], value=Name(id='shots', ctx=Load())), Assign(targets=[Name(id='counts', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()), attr='execute', ctx=Load()), args=[Name(id='circuit', ctx=Load())], keywords=[]), attr='get_counts', ctx=Load()), args=[], keywords=[])), AugAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_num_oracle_calls', ctx=Store()), op=Add(), value=BinOp(left=BinOp(left=BinOp(left=Num(n=2), op=Mult(), right=Name(id='k', ctx=Load())), op=Add(), right=Num(n=1)), op=Mult(), right=Name(id='shots', ctx=Load()))), Assign(targets=[Name(id='good_counts', ctx=Store())], value=Num(n=0)), For(target=Tuple(elts=[Name(id='state', ctx=Store()), Name(id='count', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='counts', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[If(test=Call(func=Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='is_good_state', ctx=Load()), args=[Name(id='state', ctx=Load())], keywords=[]), body=[AugAssign(target=Name(id='good_counts', ctx=Store()), op=Add(), value=Name(id='count', ctx=Load()))], orelse=[])], orelse=[]), Assign(targets=[Name(id='cos_estimate', ctx=Store())], value=BinOp(left=Num(n=1), op=Sub(), right=BinOp(left=BinOp(left=Num(n=2), op=Mult(), right=Name(id='good_counts', ctx=Load())), op=Div(), right=Name(id='shots', ctx=Load()))))]), Return(value=Name(id='cos_estimate', ctx=Load()))], decorator_list=[], returns=None), FunctionDef(name='_chernoff', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='cos', annotation=None), arg(arg='shots', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Assign(targets=[Name(id='width', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sqrt', ctx=Load()), args=[BinOp(left=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='log', ctx=Load()), args=[BinOp(left=Num(n=2), op=Div(), right=Attribute(value=Name(id='self', ctx=Load()), attr='_delta', ctx=Load()))], keywords=[]), op=Mult(), right=Num(n=12)), op=Div(), right=Name(id='shots', ctx=Load()))], keywords=[])), Assign(targets=[Name(id='confint', ctx=Store())], value=List(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='maximum', ctx=Load()), args=[UnaryOp(op=USub(), operand=Num(n=1)), BinOp(left=Name(id='cos', ctx=Load()), op=Sub(), right=Name(id='width', ctx=Load()))], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='minimum', ctx=Load()), args=[Num(n=1), BinOp(left=Name(id='cos', ctx=Load()), op=Add(), right=Name(id='width', ctx=Load()))], keywords=[])], ctx=Load())), Return(value=Name(id='confint', ctx=Load()))], decorator_list=[], returns=None), FunctionDef(name='construct_circuit', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='estimation_problem', annotation=Name(id='EstimationProblem', ctx=Load())), arg(arg='k', annotation=Name(id='int', ctx=Load())), arg(arg='measurement', annotation=Name(id='bool', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[NameConstant(value=False)]), body=[Expr(value=Str(s='Construct the circuit :math:`Q^k X |0\\rangle>`.\n\n        The A operator is the unitary specifying the QAE problem and Q the associated Grover\n        operator.\n\n        Args:\n            estimation_problem: The estimation problem for which to construct the circuit.\n            k: The power of the Q operator.\n            measurement: Boolean flag to indicate if measurements should be included in the\n                circuits.\n\n        Returns:\n            The circuit :math:`Q^k X |0\\rangle`.\n        ')), Assign(targets=[Name(id='num_qubits', ctx=Store())], value=Call(func=Name(id='max', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='state_preparation', ctx=Load()), attr='num_qubits', ctx=Load()), Attribute(value=Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='grover_operator', ctx=Load()), attr='num_qubits', ctx=Load())], keywords=[])), Assign(targets=[Name(id='circuit', ctx=Store())], value=Call(func=Name(id='QuantumCircuit', ctx=Load()), args=[Name(id='num_qubits', ctx=Load())], keywords=[keyword(arg='name', value=Str(s='circuit'))])), If(test=Name(id='measurement', ctx=Load()), body=[Assign(targets=[Name(id='c', ctx=Store())], value=Call(func=Name(id='ClassicalRegister', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='objective_qubits', ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='circuit', ctx=Load()), attr='add_register', ctx=Load()), args=[Name(id='c', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='circuit', ctx=Load()), attr='compose', ctx=Load()), args=[Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='state_preparation', ctx=Load())], keywords=[keyword(arg='inplace', value=NameConstant(value=True))])), If(test=Compare(left=Name(id='k', ctx=Load()), ops=[NotEq()], comparators=[Num(n=0)]), body=[Expr(value=Call(func=Attribute(value=Name(id='circuit', ctx=Load()), attr='compose', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='grover_operator', ctx=Load()), attr='power', ctx=Load()), args=[Name(id='k', ctx=Load())], keywords=[])], keywords=[keyword(arg='inplace', value=NameConstant(value=True))]))], orelse=[]), If(test=Name(id='measurement', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='circuit', ctx=Load()), attr='barrier', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='circuit', ctx=Load()), attr='measure', ctx=Load()), args=[Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='objective_qubits', ctx=Load()), Subscript(value=Name(id='c', ctx=Load()), slice=Slice(lower=None, upper=None, step=None), ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='circuit', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='QuantumCircuit', ctx=Load()), Subscript(value=Name(id='Tuple', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='QuantumCircuit', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='int', ctx=Load())), ctx=Load())], ctx=Load())), ctx=Load())], ctx=Load())), ctx=Load())), FunctionDef(name='estimate', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='estimation_problem', annotation=Name(id='EstimationProblem', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_num_oracle_calls', ctx=Store())], value=Num(n=0)), Assign(targets=[Name(id='user_defined_shots', ctx=Store())], value=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='quantum_instance', ctx=Load()), attr='_run_config', ctx=Load()), attr='shots', ctx=Load())), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='_rescale', ctx=Load()), body=[Assign(targets=[Name(id='problem', ctx=Store())], value=Call(func=Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='rescale', ctx=Load()), args=[Num(n=0.25)], keywords=[]))], orelse=[Assign(targets=[Name(id='problem', ctx=Store())], value=Name(id='estimation_problem', ctx=Load()))]), If(test=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()), attr='is_statevector', ctx=Load()), body=[Assign(targets=[Name(id='cos', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_cos_estimate', ctx=Load()), args=[Name(id='problem', ctx=Load())], keywords=[keyword(arg='k', value=Num(n=0)), keyword(arg='shots', value=Num(n=1))])), Assign(targets=[Name(id='theta', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='arccos', ctx=Load()), args=[Name(id='cos', ctx=Load())], keywords=[]), op=Div(), right=Num(n=2))), Assign(targets=[Name(id='theta_ci', ctx=Store())], value=List(elts=[Name(id='theta', ctx=Load()), Name(id='theta', ctx=Load())], ctx=Load())), Assign(targets=[Name(id='theta_cis', ctx=Store())], value=List(elts=[Name(id='theta_ci', ctx=Load())], ctx=Load())), Assign(targets=[Name(id='num_steps', ctx=Store()), Name(id='num_first_stage_steps', ctx=Store())], value=Num(n=1))], orelse=[Assign(targets=[Name(id='theta_ci', ctx=Store())], value=List(elts=[Num(n=0), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='arcsin', ctx=Load()), args=[Num(n=0.25)], keywords=[])], ctx=Load())), Assign(targets=[Name(id='first_stage', ctx=Store())], value=NameConstant(value=True)), Assign(targets=[Name(id='j_0', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_maxiter', ctx=Load())), Assign(targets=[Name(id='theta_cis', ctx=Store())], value=List(elts=[Name(id='theta_ci', ctx=Load())], ctx=Load())), Assign(targets=[Name(id='num_first_stage_steps', ctx=Store())], value=Num(n=0)), Assign(targets=[Name(id='num_steps', ctx=Store())], value=Num(n=0)), FunctionDef(name='cos_estimate', args=arguments(args=[arg(arg='power', annotation=None), arg(arg='shots', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_cos_estimate', ctx=Load()), args=[Name(id='problem', ctx=Load()), Name(id='power', ctx=Load()), Name(id='shots', ctx=Load())], keywords=[]))], decorator_list=[], returns=None), For(target=Name(id='j', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Num(n=1), BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='_maxiter', ctx=Load()), op=Add(), right=Num(n=1))], keywords=[]), body=[AugAssign(target=Name(id='num_steps', ctx=Store()), op=Add(), value=Num(n=1)), If(test=Name(id='first_stage', ctx=Load()), body=[AugAssign(target=Name(id='num_first_stage_steps', ctx=Store()), op=Add(), value=Num(n=1)), Assign(targets=[Name(id='c', ctx=Store())], value=Call(func=Name(id='cos_estimate', ctx=Load()), args=[BinOp(left=Num(n=2), op=Pow(), right=BinOp(left=Name(id='j', ctx=Load()), op=Sub(), right=Num(n=1))), Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_shots', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())], keywords=[])), Assign(targets=[Name(id='chernoff_ci', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_chernoff', ctx=Load()), args=[Name(id='c', ctx=Load()), Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_shots', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())], keywords=[])), Assign(targets=[Name(id='theta_ci', ctx=Store())], value=ListComp(elt=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='arccos', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), op=Div(), right=BinOp(left=BinOp(left=Num(n=2), op=Pow(), right=BinOp(left=Name(id='j', ctx=Load()), op=Add(), right=Num(n=1))), op=Add(), right=Num(n=2))), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='chernoff_ci', ctx=Load()), slice=Slice(lower=None, upper=None, step=UnaryOp(op=USub(), operand=Num(n=1))), ctx=Load()), ifs=[], is_async=0)])), If(test=BoolOp(op=And(), values=[Compare(left=BinOp(left=BinOp(left=Num(n=2), op=Pow(), right=BinOp(left=Name(id='j', ctx=Load()), op=Add(), right=Num(n=1))), op=Mult(), right=Subscript(value=Name(id='theta_ci', ctx=Load()), slice=Index(value=Num(n=1)), ctx=Load())), ops=[GtE()], comparators=[BinOp(left=BinOp(left=Num(n=3), op=Mult(), right=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load())), op=Div(), right=Num(n=8))]), Compare(left=Name(id='j', ctx=Load()), ops=[Lt()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='_maxiter', ctx=Load())])]), body=[Assign(targets=[Name(id='j_0', ctx=Store())], value=Name(id='j', ctx=Load())), Assign(targets=[Name(id='v', ctx=Store())], value=BinOp(left=BinOp(left=Num(n=2), op=Pow(), right=Name(id='j', ctx=Load())), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sum', ctx=Load()), args=[Name(id='theta_ci', ctx=Load())], keywords=[]))), Assign(targets=[Name(id='first_stage', ctx=Store())], value=NameConstant(value=False))], orelse=[])], orelse=[Assign(targets=[Name(id='cos', ctx=Store())], value=Call(func=Name(id='cos_estimate', ctx=Load()), args=[BinOp(left=Num(n=2), op=Pow(), right=BinOp(left=Name(id='j', ctx=Load()), op=Sub(), right=Num(n=1))), Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_shots', ctx=Load()), slice=Index(value=Num(n=1)), ctx=Load())], keywords=[])), Assign(targets=[Name(id='cos_2', ctx=Store())], value=Call(func=Name(id='cos_estimate', ctx=Load()), args=[BinOp(left=BinOp(left=Num(n=2), op=Pow(), right=BinOp(left=Name(id='j', ctx=Load()), op=Sub(), right=Num(n=1))), op=Add(), right=BinOp(left=Num(n=2), op=Pow(), right=BinOp(left=Name(id='j_0', ctx=Load()), op=Sub(), right=Num(n=1)))), Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_shots', ctx=Load()), slice=Index(value=Num(n=1)), ctx=Load())], keywords=[])), Assign(targets=[Name(id='sin', ctx=Store())], value=BinOp(left=BinOp(left=BinOp(left=Name(id='cos', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='cos', ctx=Load()), args=[Name(id='v', ctx=Load())], keywords=[])), op=Sub(), right=Name(id='cos_2', ctx=Load())), op=Div(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[Name(id='v', ctx=Load())], keywords=[]))), Assign(targets=[Name(id='rho', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='arctan2', ctx=Load()), args=[Name(id='sin', ctx=Load()), Name(id='cos', ctx=Load())], keywords=[])), Assign(targets=[Name(id='n', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Num(n=2), op=Pow(), right=BinOp(left=Name(id='j', ctx=Load()), op=Add(), right=Num(n=1))), op=Add(), right=Num(n=2)), op=Mult(), right=Subscript(value=Name(id='theta_ci', ctx=Load()), slice=Index(value=Num(n=1)), ctx=Load())), op=Sub(), right=Name(id='rho', ctx=Load())), op=Add(), right=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Div(), right=Num(n=3))), op=Div(), right=BinOp(left=Num(n=2), op=Mult(), right=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load())))], keywords=[])), Assign(targets=[Name(id='theta_ci', ctx=Store())], value=ListComp(elt=BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Num(n=2), op=Mult(), right=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load())), op=Mult(), right=Name(id='n', ctx=Load())), op=Add(), right=Name(id='rho', ctx=Load())), op=Add(), right=BinOp(left=BinOp(left=Name(id='sign', ctx=Load()), op=Mult(), right=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load())), op=Div(), right=Num(n=3))), op=Div(), right=BinOp(left=BinOp(left=Num(n=2), op=Pow(), right=BinOp(left=Name(id='j', ctx=Load()), op=Add(), right=Num(n=1))), op=Add(), right=Num(n=2))), generators=[comprehension(target=Name(id='sign', ctx=Store()), iter=List(elts=[UnaryOp(op=USub(), operand=Num(n=1)), Num(n=1)], ctx=Load()), ifs=[], is_async=0)]))]), Expr(value=Call(func=Attribute(value=Name(id='theta_cis', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='theta_ci', ctx=Load())], keywords=[]))], orelse=[])]), Assign(targets=[Name(id='theta', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='mean', ctx=Load()), args=[Name(id='theta_ci', ctx=Load())], keywords=[])), Assign(targets=[Name(id='rescaling', ctx=Store())], value=IfExp(test=Attribute(value=Name(id='self', ctx=Load()), attr='_rescale', ctx=Load()), body=Num(n=4), orelse=Num(n=1))), Assign(targets=[Name(id='value', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='rescaling', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[Name(id='theta', ctx=Load())], keywords=[])), op=Pow(), right=Num(n=2))), Assign(targets=[Name(id='value_ci', ctx=Store())], value=ListComp(elt=BinOp(left=BinOp(left=Name(id='rescaling', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[])), op=Pow(), right=Num(n=2)), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='theta_ci', ctx=Load()), ifs=[], is_async=0)])), Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Name(id='FasterAmplitudeEstimationResult', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='num_oracle_queries', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_num_oracle_calls', ctx=Load())), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='num_steps', ctx=Store())], value=Name(id='num_steps', ctx=Load())), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='num_first_state_steps', ctx=Store())], value=Name(id='num_first_stage_steps', ctx=Load())), If(test=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()), attr='is_statevector', ctx=Load()), body=[Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='success_probability', ctx=Store())], value=Num(n=1))], orelse=[Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='success_probability', ctx=Store())], value=BinOp(left=Num(n=1), op=Sub(), right=BinOp(left=BinOp(left=BinOp(left=Num(n=2), op=Mult(), right=Attribute(value=Name(id='self', ctx=Load()), attr='_maxiter', ctx=Load())), op=Sub(), right=Name(id='j_0', ctx=Load())), op=Mult(), right=Attribute(value=Name(id='self', ctx=Load()), attr='_delta', ctx=Load()))))]), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='estimation', ctx=Store())], value=Name(id='value', ctx=Load())), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='estimation_processed', ctx=Store())], value=Call(func=Attribute(value=Name(id='problem', ctx=Load()), attr='post_processing', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='confidence_interval', ctx=Store())], value=Name(id='value_ci', ctx=Load())), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='confidence_interval_processed', ctx=Store())], value=Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='problem', ctx=Load()), attr='post_processing', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='value_ci', ctx=Load()), ifs=[], is_async=0)])], keywords=[])), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='theta_intervals', ctx=Store())], value=Name(id='theta_cis', ctx=Load())), Assign(targets=[Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='quantum_instance', ctx=Load()), attr='_run_config', ctx=Load()), attr='shots', ctx=Store())], value=Name(id='user_defined_shots', ctx=Load())), Return(value=Name(id='result', ctx=Load()))], decorator_list=[], returns=Str(s='FasterAmplitudeEstimationResult'))], decorator_list=[]), ClassDef(name='FasterAmplitudeEstimationResult', bases=[Name(id='AmplitudeEstimatorResult', ctx=Load())], keywords=[], body=[Expr(value=Str(s='The result object for the Faster Amplitude Estimation algorithm.')), FunctionDef(name='__init__', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_success_probability', ctx=Store())], value=NameConstant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_num_steps', ctx=Store())], value=NameConstant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_num_first_state_steps', ctx=Store())], value=NameConstant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_theta_intervals', ctx=Store())], value=NameConstant(value=None))], decorator_list=[], returns=NameConstant(value=None)), FunctionDef(name='success_probability', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Return the success probability of the algorithm.')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_success_probability', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='int', ctx=Load())), FunctionDef(name='success_probability', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='probability', annotation=Name(id='int', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Set the success probability of the algorithm.')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_success_probability', ctx=Store())], value=Name(id='probability', ctx=Load()))], decorator_list=[Attribute(value=Name(id='success_probability', ctx=Load()), attr='setter', ctx=Load())], returns=NameConstant(value=None)), FunctionDef(name='num_steps', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Return the total number of steps taken in the algorithm.')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_num_steps', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='int', ctx=Load())), FunctionDef(name='num_steps', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='num_steps', annotation=Name(id='int', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Set the total number of steps taken in the algorithm.')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_num_steps', ctx=Store())], value=Name(id='num_steps', ctx=Load()))], decorator_list=[Attribute(value=Name(id='num_steps', ctx=Load()), attr='setter', ctx=Load())], returns=NameConstant(value=None)), FunctionDef(name='num_first_state_steps', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Return the number of steps taken in the first step of algorithm.')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_num_first_state_steps', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='int', ctx=Load())), FunctionDef(name='num_first_state_steps', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='num_steps', annotation=Name(id='int', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Set the number of steps taken in the first step of algorithm.')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_num_first_state_steps', ctx=Store())], value=Name(id='num_steps', ctx=Load()))], decorator_list=[Attribute(value=Name(id='num_first_state_steps', ctx=Load()), attr='setter', ctx=Load())], returns=NameConstant(value=None)), FunctionDef(name='theta_intervals', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Return the confidence intervals for the angles in each iteration.')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_theta_intervals', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='float', ctx=Load())), ctx=Load())), ctx=Load())), FunctionDef(name='theta_intervals', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='value', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='float', ctx=Load())), ctx=Load())), ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Set the confidence intervals for the angles in each iteration.')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_theta_intervals', ctx=Store())], value=Name(id='value', ctx=Load()))], decorator_list=[Attribute(value=Name(id='theta_intervals', ctx=Load()), attr='setter', ctx=Load())], returns=NameConstant(value=None))], decorator_list=[])])
Expr(value=Str(s='Faster Amplitude Estimation.'))
ImportFrom(module='typing', names=[alias(name='Optional', asname=None), alias(name='Union', asname=None), alias(name='List', asname=None), alias(name='Tuple', asname=None)], level=0)
Import(names=[alias(name='numpy', asname='np')])
ImportFrom(module='qiskit.circuit', names=[alias(name='QuantumCircuit', asname=None), alias(name='ClassicalRegister', asname=None)], level=0)
ImportFrom(module='qiskit.providers', names=[alias(name='Backend', asname=None)], level=0)
ImportFrom(module='qiskit.utils', names=[alias(name='QuantumInstance', asname=None)], level=0)
ImportFrom(module='qiskit.algorithms.exceptions', names=[alias(name='AlgorithmError', asname=None)], level=0)
ImportFrom(module='amplitude_estimator', names=[alias(name='AmplitudeEstimator', asname=None), alias(name='AmplitudeEstimatorResult', asname=None)], level=1)
ImportFrom(module='estimation_problem', names=[alias(name='EstimationProblem', asname=None)], level=1)
ClassDef(name='FasterAmplitudeEstimation', bases=[Name(id='AmplitudeEstimator', ctx=Load())], keywords=[], body=[Expr(value=Str(s='The Faster Amplitude Estimation algorithm.\n\n    The Faster Amplitude Estimation (FAE) [1] algorithm is a variant of Quantum Amplitude\n    Estimation (QAE), where the Quantum Phase Estimation (QPE) by an iterative Grover search,\n    similar to [2].\n\n    Due to the iterative version of the QPE, this algorithm does not require any additional\n    qubits, as the originally proposed QAE [3] and thus the resulting circuits are less complex.\n\n    References:\n\n        [1]: K. Nakaji. Faster Amplitude Estimation, 2020;\n            `arXiv:2002.02417 <https://arxiv.org/pdf/2003.02417.pdf>`_\n        [2]: D. Grinko et al. Iterative Amplitude Estimation, 2019;\n            `arXiv:1912.05559 <http://arxiv.org/abs/1912.05559>`_\n        [3]: G. Brassard et al. Quantum Amplitude Amplification and Estimation, 2000;\n            `arXiv:quant-ph/0005055 <http://arxiv.org/abs/quant-ph/0005055>`_\n\n    ')), FunctionDef(name='__init__', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='delta', annotation=Name(id='float', ctx=Load())), arg(arg='maxiter', annotation=Name(id='int', ctx=Load())), arg(arg='rescale', annotation=Name(id='bool', ctx=Load())), arg(arg='quantum_instance', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='QuantumInstance', ctx=Load()), Name(id='Backend', ctx=Load())], ctx=Load())), ctx=Load())), ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[NameConstant(value=True), NameConstant(value=None)]), body=[Expr(value=Str(s='\n        Args:\n            delta: The probability that the true value is outside of the final confidence interval.\n            maxiter: The number of iterations, the maximal power of Q is `2 ** (maxiter - 1)`.\n            rescale: Whether to rescale the problem passed to `estimate`.\n            quantum_instance: The quantum instance or backend to run the circuits.\n\n        .. note::\n\n            This algorithm overwrites the number of shots set in the ``quantum_instance``\n            argument, but will reset them to the initial number after running.\n\n        ')), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='quantum_instance', ctx=Store())], value=Name(id='quantum_instance', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_shots', ctx=Store())], value=Tuple(elts=[Call(func=Name(id='int', ctx=Load()), args=[BinOp(left=Num(n=1944), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='log', ctx=Load()), args=[BinOp(left=Num(n=2), op=Div(), right=Name(id='delta', ctx=Load()))], keywords=[]))], keywords=[]), Call(func=Name(id='int', ctx=Load()), args=[BinOp(left=Num(n=972), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='log', ctx=Load()), args=[BinOp(left=Num(n=2), op=Div(), right=Name(id='delta', ctx=Load()))], keywords=[]))], keywords=[])], ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_rescale', ctx=Store())], value=Name(id='rescale', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_delta', ctx=Store())], value=Name(id='delta', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_maxiter', ctx=Store())], value=Name(id='maxiter', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_num_oracle_calls', ctx=Store())], value=Num(n=0))], decorator_list=[], returns=NameConstant(value=None)), FunctionDef(name='quantum_instance', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Get the quantum instance.\n\n        Returns:\n            The quantum instance used to run this algorithm.\n        ')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Name(id='QuantumInstance', ctx=Load())), ctx=Load())), FunctionDef(name='quantum_instance', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='quantum_instance', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='QuantumInstance', ctx=Load()), Name(id='Backend', ctx=Load())], ctx=Load())), ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Set quantum instance.\n\n        Args:\n            quantum_instance: The quantum instance used to run this algorithm.\n        ')), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='quantum_instance', ctx=Load()), Name(id='Backend', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='quantum_instance', ctx=Store())], value=Call(func=Name(id='QuantumInstance', ctx=Load()), args=[Name(id='quantum_instance', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Store())], value=Name(id='quantum_instance', ctx=Load()))], decorator_list=[Attribute(value=Name(id='quantum_instance', ctx=Load()), attr='setter', ctx=Load())], returns=NameConstant(value=None)), FunctionDef(name='_cos_estimate', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='estimation_problem', annotation=None), arg(arg='k', annotation=None), arg(arg='shots', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()), ops=[Is()], comparators=[NameConstant(value=None)]), body=[Raise(exc=Call(func=Name(id='AlgorithmError', ctx=Load()), args=[Str(s='Quantum instance must be set.')], keywords=[]), cause=None)], orelse=[]), If(test=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()), attr='is_statevector', ctx=Load()), body=[Assign(targets=[Name(id='circuit', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='construct_circuit', ctx=Load()), args=[Name(id='estimation_problem', ctx=Load()), Name(id='k', ctx=Load())], keywords=[keyword(arg='measurement', value=NameConstant(value=False))])), Assign(targets=[Name(id='statevector', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()), attr='execute', ctx=Load()), args=[Name(id='circuit', ctx=Load())], keywords=[]), attr='get_statevector', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='prob', ctx=Store())], value=Num(n=0)), For(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='amplitude', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='statevector', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='full_state', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Subscript(value=Call(func=Name(id='bin', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]), slice=Slice(lower=Num(n=2), upper=None, step=None), ctx=Load()), attr='zfill', ctx=Load()), args=[Attribute(value=Name(id='circuit', ctx=Load()), attr='num_qubits', ctx=Load())], keywords=[]), slice=Slice(lower=None, upper=None, step=UnaryOp(op=USub(), operand=Num(n=1))), ctx=Load())), Assign(targets=[Name(id='state', ctx=Store())], value=Call(func=Attribute(value=Str(s=''), attr='join', ctx=Load()), args=[ListComp(elt=Subscript(value=Name(id='full_state', ctx=Load()), slice=Index(value=Name(id='i', ctx=Load())), ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='objective_qubits', ctx=Load()), ifs=[], is_async=0)])], keywords=[])), If(test=Call(func=Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='is_good_state', ctx=Load()), args=[Subscript(value=Name(id='state', ctx=Load()), slice=Slice(lower=None, upper=None, step=UnaryOp(op=USub(), operand=Num(n=1))), ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='prob', ctx=Store())], value=BinOp(left=Name(id='prob', ctx=Load()), op=Add(), right=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='abs', ctx=Load()), args=[Name(id='amplitude', ctx=Load())], keywords=[]), op=Pow(), right=Num(n=2))))], orelse=[])], orelse=[]), Assign(targets=[Name(id='cos_estimate', ctx=Store())], value=BinOp(left=Num(n=1), op=Sub(), right=BinOp(left=Num(n=2), op=Mult(), right=Name(id='prob', ctx=Load()))))], orelse=[Assign(targets=[Name(id='circuit', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='construct_circuit', ctx=Load()), args=[Name(id='estimation_problem', ctx=Load()), Name(id='k', ctx=Load())], keywords=[keyword(arg='measurement', value=NameConstant(value=True))])), Assign(targets=[Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()), attr='run_config', ctx=Load()), attr='shots', ctx=Store())], value=Name(id='shots', ctx=Load())), Assign(targets=[Name(id='counts', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()), attr='execute', ctx=Load()), args=[Name(id='circuit', ctx=Load())], keywords=[]), attr='get_counts', ctx=Load()), args=[], keywords=[])), AugAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_num_oracle_calls', ctx=Store()), op=Add(), value=BinOp(left=BinOp(left=BinOp(left=Num(n=2), op=Mult(), right=Name(id='k', ctx=Load())), op=Add(), right=Num(n=1)), op=Mult(), right=Name(id='shots', ctx=Load()))), Assign(targets=[Name(id='good_counts', ctx=Store())], value=Num(n=0)), For(target=Tuple(elts=[Name(id='state', ctx=Store()), Name(id='count', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='counts', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[If(test=Call(func=Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='is_good_state', ctx=Load()), args=[Name(id='state', ctx=Load())], keywords=[]), body=[AugAssign(target=Name(id='good_counts', ctx=Store()), op=Add(), value=Name(id='count', ctx=Load()))], orelse=[])], orelse=[]), Assign(targets=[Name(id='cos_estimate', ctx=Store())], value=BinOp(left=Num(n=1), op=Sub(), right=BinOp(left=BinOp(left=Num(n=2), op=Mult(), right=Name(id='good_counts', ctx=Load())), op=Div(), right=Name(id='shots', ctx=Load()))))]), Return(value=Name(id='cos_estimate', ctx=Load()))], decorator_list=[], returns=None), FunctionDef(name='_chernoff', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='cos', annotation=None), arg(arg='shots', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Assign(targets=[Name(id='width', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sqrt', ctx=Load()), args=[BinOp(left=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='log', ctx=Load()), args=[BinOp(left=Num(n=2), op=Div(), right=Attribute(value=Name(id='self', ctx=Load()), attr='_delta', ctx=Load()))], keywords=[]), op=Mult(), right=Num(n=12)), op=Div(), right=Name(id='shots', ctx=Load()))], keywords=[])), Assign(targets=[Name(id='confint', ctx=Store())], value=List(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='maximum', ctx=Load()), args=[UnaryOp(op=USub(), operand=Num(n=1)), BinOp(left=Name(id='cos', ctx=Load()), op=Sub(), right=Name(id='width', ctx=Load()))], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='minimum', ctx=Load()), args=[Num(n=1), BinOp(left=Name(id='cos', ctx=Load()), op=Add(), right=Name(id='width', ctx=Load()))], keywords=[])], ctx=Load())), Return(value=Name(id='confint', ctx=Load()))], decorator_list=[], returns=None), FunctionDef(name='construct_circuit', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='estimation_problem', annotation=Name(id='EstimationProblem', ctx=Load())), arg(arg='k', annotation=Name(id='int', ctx=Load())), arg(arg='measurement', annotation=Name(id='bool', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[NameConstant(value=False)]), body=[Expr(value=Str(s='Construct the circuit :math:`Q^k X |0\\rangle>`.\n\n        The A operator is the unitary specifying the QAE problem and Q the associated Grover\n        operator.\n\n        Args:\n            estimation_problem: The estimation problem for which to construct the circuit.\n            k: The power of the Q operator.\n            measurement: Boolean flag to indicate if measurements should be included in the\n                circuits.\n\n        Returns:\n            The circuit :math:`Q^k X |0\\rangle`.\n        ')), Assign(targets=[Name(id='num_qubits', ctx=Store())], value=Call(func=Name(id='max', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='state_preparation', ctx=Load()), attr='num_qubits', ctx=Load()), Attribute(value=Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='grover_operator', ctx=Load()), attr='num_qubits', ctx=Load())], keywords=[])), Assign(targets=[Name(id='circuit', ctx=Store())], value=Call(func=Name(id='QuantumCircuit', ctx=Load()), args=[Name(id='num_qubits', ctx=Load())], keywords=[keyword(arg='name', value=Str(s='circuit'))])), If(test=Name(id='measurement', ctx=Load()), body=[Assign(targets=[Name(id='c', ctx=Store())], value=Call(func=Name(id='ClassicalRegister', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='objective_qubits', ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='circuit', ctx=Load()), attr='add_register', ctx=Load()), args=[Name(id='c', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='circuit', ctx=Load()), attr='compose', ctx=Load()), args=[Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='state_preparation', ctx=Load())], keywords=[keyword(arg='inplace', value=NameConstant(value=True))])), If(test=Compare(left=Name(id='k', ctx=Load()), ops=[NotEq()], comparators=[Num(n=0)]), body=[Expr(value=Call(func=Attribute(value=Name(id='circuit', ctx=Load()), attr='compose', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='grover_operator', ctx=Load()), attr='power', ctx=Load()), args=[Name(id='k', ctx=Load())], keywords=[])], keywords=[keyword(arg='inplace', value=NameConstant(value=True))]))], orelse=[]), If(test=Name(id='measurement', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='circuit', ctx=Load()), attr='barrier', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='circuit', ctx=Load()), attr='measure', ctx=Load()), args=[Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='objective_qubits', ctx=Load()), Subscript(value=Name(id='c', ctx=Load()), slice=Slice(lower=None, upper=None, step=None), ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='circuit', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='QuantumCircuit', ctx=Load()), Subscript(value=Name(id='Tuple', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='QuantumCircuit', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='int', ctx=Load())), ctx=Load())], ctx=Load())), ctx=Load())], ctx=Load())), ctx=Load())), FunctionDef(name='estimate', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='estimation_problem', annotation=Name(id='EstimationProblem', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_num_oracle_calls', ctx=Store())], value=Num(n=0)), Assign(targets=[Name(id='user_defined_shots', ctx=Store())], value=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='quantum_instance', ctx=Load()), attr='_run_config', ctx=Load()), attr='shots', ctx=Load())), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='_rescale', ctx=Load()), body=[Assign(targets=[Name(id='problem', ctx=Store())], value=Call(func=Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='rescale', ctx=Load()), args=[Num(n=0.25)], keywords=[]))], orelse=[Assign(targets=[Name(id='problem', ctx=Store())], value=Name(id='estimation_problem', ctx=Load()))]), If(test=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()), attr='is_statevector', ctx=Load()), body=[Assign(targets=[Name(id='cos', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_cos_estimate', ctx=Load()), args=[Name(id='problem', ctx=Load())], keywords=[keyword(arg='k', value=Num(n=0)), keyword(arg='shots', value=Num(n=1))])), Assign(targets=[Name(id='theta', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='arccos', ctx=Load()), args=[Name(id='cos', ctx=Load())], keywords=[]), op=Div(), right=Num(n=2))), Assign(targets=[Name(id='theta_ci', ctx=Store())], value=List(elts=[Name(id='theta', ctx=Load()), Name(id='theta', ctx=Load())], ctx=Load())), Assign(targets=[Name(id='theta_cis', ctx=Store())], value=List(elts=[Name(id='theta_ci', ctx=Load())], ctx=Load())), Assign(targets=[Name(id='num_steps', ctx=Store()), Name(id='num_first_stage_steps', ctx=Store())], value=Num(n=1))], orelse=[Assign(targets=[Name(id='theta_ci', ctx=Store())], value=List(elts=[Num(n=0), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='arcsin', ctx=Load()), args=[Num(n=0.25)], keywords=[])], ctx=Load())), Assign(targets=[Name(id='first_stage', ctx=Store())], value=NameConstant(value=True)), Assign(targets=[Name(id='j_0', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_maxiter', ctx=Load())), Assign(targets=[Name(id='theta_cis', ctx=Store())], value=List(elts=[Name(id='theta_ci', ctx=Load())], ctx=Load())), Assign(targets=[Name(id='num_first_stage_steps', ctx=Store())], value=Num(n=0)), Assign(targets=[Name(id='num_steps', ctx=Store())], value=Num(n=0)), FunctionDef(name='cos_estimate', args=arguments(args=[arg(arg='power', annotation=None), arg(arg='shots', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_cos_estimate', ctx=Load()), args=[Name(id='problem', ctx=Load()), Name(id='power', ctx=Load()), Name(id='shots', ctx=Load())], keywords=[]))], decorator_list=[], returns=None), For(target=Name(id='j', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Num(n=1), BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='_maxiter', ctx=Load()), op=Add(), right=Num(n=1))], keywords=[]), body=[AugAssign(target=Name(id='num_steps', ctx=Store()), op=Add(), value=Num(n=1)), If(test=Name(id='first_stage', ctx=Load()), body=[AugAssign(target=Name(id='num_first_stage_steps', ctx=Store()), op=Add(), value=Num(n=1)), Assign(targets=[Name(id='c', ctx=Store())], value=Call(func=Name(id='cos_estimate', ctx=Load()), args=[BinOp(left=Num(n=2), op=Pow(), right=BinOp(left=Name(id='j', ctx=Load()), op=Sub(), right=Num(n=1))), Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_shots', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())], keywords=[])), Assign(targets=[Name(id='chernoff_ci', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_chernoff', ctx=Load()), args=[Name(id='c', ctx=Load()), Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_shots', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())], keywords=[])), Assign(targets=[Name(id='theta_ci', ctx=Store())], value=ListComp(elt=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='arccos', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), op=Div(), right=BinOp(left=BinOp(left=Num(n=2), op=Pow(), right=BinOp(left=Name(id='j', ctx=Load()), op=Add(), right=Num(n=1))), op=Add(), right=Num(n=2))), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='chernoff_ci', ctx=Load()), slice=Slice(lower=None, upper=None, step=UnaryOp(op=USub(), operand=Num(n=1))), ctx=Load()), ifs=[], is_async=0)])), If(test=BoolOp(op=And(), values=[Compare(left=BinOp(left=BinOp(left=Num(n=2), op=Pow(), right=BinOp(left=Name(id='j', ctx=Load()), op=Add(), right=Num(n=1))), op=Mult(), right=Subscript(value=Name(id='theta_ci', ctx=Load()), slice=Index(value=Num(n=1)), ctx=Load())), ops=[GtE()], comparators=[BinOp(left=BinOp(left=Num(n=3), op=Mult(), right=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load())), op=Div(), right=Num(n=8))]), Compare(left=Name(id='j', ctx=Load()), ops=[Lt()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='_maxiter', ctx=Load())])]), body=[Assign(targets=[Name(id='j_0', ctx=Store())], value=Name(id='j', ctx=Load())), Assign(targets=[Name(id='v', ctx=Store())], value=BinOp(left=BinOp(left=Num(n=2), op=Pow(), right=Name(id='j', ctx=Load())), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sum', ctx=Load()), args=[Name(id='theta_ci', ctx=Load())], keywords=[]))), Assign(targets=[Name(id='first_stage', ctx=Store())], value=NameConstant(value=False))], orelse=[])], orelse=[Assign(targets=[Name(id='cos', ctx=Store())], value=Call(func=Name(id='cos_estimate', ctx=Load()), args=[BinOp(left=Num(n=2), op=Pow(), right=BinOp(left=Name(id='j', ctx=Load()), op=Sub(), right=Num(n=1))), Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_shots', ctx=Load()), slice=Index(value=Num(n=1)), ctx=Load())], keywords=[])), Assign(targets=[Name(id='cos_2', ctx=Store())], value=Call(func=Name(id='cos_estimate', ctx=Load()), args=[BinOp(left=BinOp(left=Num(n=2), op=Pow(), right=BinOp(left=Name(id='j', ctx=Load()), op=Sub(), right=Num(n=1))), op=Add(), right=BinOp(left=Num(n=2), op=Pow(), right=BinOp(left=Name(id='j_0', ctx=Load()), op=Sub(), right=Num(n=1)))), Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_shots', ctx=Load()), slice=Index(value=Num(n=1)), ctx=Load())], keywords=[])), Assign(targets=[Name(id='sin', ctx=Store())], value=BinOp(left=BinOp(left=BinOp(left=Name(id='cos', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='cos', ctx=Load()), args=[Name(id='v', ctx=Load())], keywords=[])), op=Sub(), right=Name(id='cos_2', ctx=Load())), op=Div(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[Name(id='v', ctx=Load())], keywords=[]))), Assign(targets=[Name(id='rho', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='arctan2', ctx=Load()), args=[Name(id='sin', ctx=Load()), Name(id='cos', ctx=Load())], keywords=[])), Assign(targets=[Name(id='n', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Num(n=2), op=Pow(), right=BinOp(left=Name(id='j', ctx=Load()), op=Add(), right=Num(n=1))), op=Add(), right=Num(n=2)), op=Mult(), right=Subscript(value=Name(id='theta_ci', ctx=Load()), slice=Index(value=Num(n=1)), ctx=Load())), op=Sub(), right=Name(id='rho', ctx=Load())), op=Add(), right=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Div(), right=Num(n=3))), op=Div(), right=BinOp(left=Num(n=2), op=Mult(), right=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load())))], keywords=[])), Assign(targets=[Name(id='theta_ci', ctx=Store())], value=ListComp(elt=BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Num(n=2), op=Mult(), right=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load())), op=Mult(), right=Name(id='n', ctx=Load())), op=Add(), right=Name(id='rho', ctx=Load())), op=Add(), right=BinOp(left=BinOp(left=Name(id='sign', ctx=Load()), op=Mult(), right=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load())), op=Div(), right=Num(n=3))), op=Div(), right=BinOp(left=BinOp(left=Num(n=2), op=Pow(), right=BinOp(left=Name(id='j', ctx=Load()), op=Add(), right=Num(n=1))), op=Add(), right=Num(n=2))), generators=[comprehension(target=Name(id='sign', ctx=Store()), iter=List(elts=[UnaryOp(op=USub(), operand=Num(n=1)), Num(n=1)], ctx=Load()), ifs=[], is_async=0)]))]), Expr(value=Call(func=Attribute(value=Name(id='theta_cis', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='theta_ci', ctx=Load())], keywords=[]))], orelse=[])]), Assign(targets=[Name(id='theta', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='mean', ctx=Load()), args=[Name(id='theta_ci', ctx=Load())], keywords=[])), Assign(targets=[Name(id='rescaling', ctx=Store())], value=IfExp(test=Attribute(value=Name(id='self', ctx=Load()), attr='_rescale', ctx=Load()), body=Num(n=4), orelse=Num(n=1))), Assign(targets=[Name(id='value', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='rescaling', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[Name(id='theta', ctx=Load())], keywords=[])), op=Pow(), right=Num(n=2))), Assign(targets=[Name(id='value_ci', ctx=Store())], value=ListComp(elt=BinOp(left=BinOp(left=Name(id='rescaling', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[])), op=Pow(), right=Num(n=2)), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='theta_ci', ctx=Load()), ifs=[], is_async=0)])), Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Name(id='FasterAmplitudeEstimationResult', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='num_oracle_queries', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_num_oracle_calls', ctx=Load())), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='num_steps', ctx=Store())], value=Name(id='num_steps', ctx=Load())), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='num_first_state_steps', ctx=Store())], value=Name(id='num_first_stage_steps', ctx=Load())), If(test=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()), attr='is_statevector', ctx=Load()), body=[Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='success_probability', ctx=Store())], value=Num(n=1))], orelse=[Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='success_probability', ctx=Store())], value=BinOp(left=Num(n=1), op=Sub(), right=BinOp(left=BinOp(left=BinOp(left=Num(n=2), op=Mult(), right=Attribute(value=Name(id='self', ctx=Load()), attr='_maxiter', ctx=Load())), op=Sub(), right=Name(id='j_0', ctx=Load())), op=Mult(), right=Attribute(value=Name(id='self', ctx=Load()), attr='_delta', ctx=Load()))))]), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='estimation', ctx=Store())], value=Name(id='value', ctx=Load())), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='estimation_processed', ctx=Store())], value=Call(func=Attribute(value=Name(id='problem', ctx=Load()), attr='post_processing', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='confidence_interval', ctx=Store())], value=Name(id='value_ci', ctx=Load())), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='confidence_interval_processed', ctx=Store())], value=Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='problem', ctx=Load()), attr='post_processing', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='value_ci', ctx=Load()), ifs=[], is_async=0)])], keywords=[])), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='theta_intervals', ctx=Store())], value=Name(id='theta_cis', ctx=Load())), Assign(targets=[Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='quantum_instance', ctx=Load()), attr='_run_config', ctx=Load()), attr='shots', ctx=Store())], value=Name(id='user_defined_shots', ctx=Load())), Return(value=Name(id='result', ctx=Load()))], decorator_list=[], returns=Str(s='FasterAmplitudeEstimationResult'))], decorator_list=[])
ClassDef(name='FasterAmplitudeEstimationResult', bases=[Name(id='AmplitudeEstimatorResult', ctx=Load())], keywords=[], body=[Expr(value=Str(s='The result object for the Faster Amplitude Estimation algorithm.')), FunctionDef(name='__init__', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_success_probability', ctx=Store())], value=NameConstant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_num_steps', ctx=Store())], value=NameConstant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_num_first_state_steps', ctx=Store())], value=NameConstant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_theta_intervals', ctx=Store())], value=NameConstant(value=None))], decorator_list=[], returns=NameConstant(value=None)), FunctionDef(name='success_probability', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Return the success probability of the algorithm.')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_success_probability', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='int', ctx=Load())), FunctionDef(name='success_probability', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='probability', annotation=Name(id='int', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Set the success probability of the algorithm.')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_success_probability', ctx=Store())], value=Name(id='probability', ctx=Load()))], decorator_list=[Attribute(value=Name(id='success_probability', ctx=Load()), attr='setter', ctx=Load())], returns=NameConstant(value=None)), FunctionDef(name='num_steps', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Return the total number of steps taken in the algorithm.')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_num_steps', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='int', ctx=Load())), FunctionDef(name='num_steps', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='num_steps', annotation=Name(id='int', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Set the total number of steps taken in the algorithm.')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_num_steps', ctx=Store())], value=Name(id='num_steps', ctx=Load()))], decorator_list=[Attribute(value=Name(id='num_steps', ctx=Load()), attr='setter', ctx=Load())], returns=NameConstant(value=None)), FunctionDef(name='num_first_state_steps', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Return the number of steps taken in the first step of algorithm.')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_num_first_state_steps', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='int', ctx=Load())), FunctionDef(name='num_first_state_steps', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='num_steps', annotation=Name(id='int', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Set the number of steps taken in the first step of algorithm.')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_num_first_state_steps', ctx=Store())], value=Name(id='num_steps', ctx=Load()))], decorator_list=[Attribute(value=Name(id='num_first_state_steps', ctx=Load()), attr='setter', ctx=Load())], returns=NameConstant(value=None)), FunctionDef(name='theta_intervals', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Return the confidence intervals for the angles in each iteration.')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_theta_intervals', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='float', ctx=Load())), ctx=Load())), ctx=Load())), FunctionDef(name='theta_intervals', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='value', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='float', ctx=Load())), ctx=Load())), ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Set the confidence intervals for the angles in each iteration.')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_theta_intervals', ctx=Store())], value=Name(id='value', ctx=Load()))], decorator_list=[Attribute(value=Name(id='theta_intervals', ctx=Load()), attr='setter', ctx=Load())], returns=NameConstant(value=None))], decorator_list=[])
Str(s='Faster Amplitude Estimation.')
alias(name='Optional', asname=None)
alias(name='Union', asname=None)
alias(name='List', asname=None)
alias(name='Tuple', asname=None)
alias(name='numpy', asname='np')
alias(name='QuantumCircuit', asname=None)
alias(name='ClassicalRegister', asname=None)
alias(name='Backend', asname=None)
alias(name='QuantumInstance', asname=None)
alias(name='AlgorithmError', asname=None)
alias(name='AmplitudeEstimator', asname=None)
alias(name='AmplitudeEstimatorResult', asname=None)
alias(name='EstimationProblem', asname=None)
Name(id='AmplitudeEstimator', ctx=Load())
Expr(value=Str(s='The Faster Amplitude Estimation algorithm.\n\n    The Faster Amplitude Estimation (FAE) [1] algorithm is a variant of Quantum Amplitude\n    Estimation (QAE), where the Quantum Phase Estimation (QPE) by an iterative Grover search,\n    similar to [2].\n\n    Due to the iterative version of the QPE, this algorithm does not require any additional\n    qubits, as the originally proposed QAE [3] and thus the resulting circuits are less complex.\n\n    References:\n\n        [1]: K. Nakaji. Faster Amplitude Estimation, 2020;\n            `arXiv:2002.02417 <https://arxiv.org/pdf/2003.02417.pdf>`_\n        [2]: D. Grinko et al. Iterative Amplitude Estimation, 2019;\n            `arXiv:1912.05559 <http://arxiv.org/abs/1912.05559>`_\n        [3]: G. Brassard et al. Quantum Amplitude Amplification and Estimation, 2000;\n            `arXiv:quant-ph/0005055 <http://arxiv.org/abs/quant-ph/0005055>`_\n\n    '))
FunctionDef(name='__init__', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='delta', annotation=Name(id='float', ctx=Load())), arg(arg='maxiter', annotation=Name(id='int', ctx=Load())), arg(arg='rescale', annotation=Name(id='bool', ctx=Load())), arg(arg='quantum_instance', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='QuantumInstance', ctx=Load()), Name(id='Backend', ctx=Load())], ctx=Load())), ctx=Load())), ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[NameConstant(value=True), NameConstant(value=None)]), body=[Expr(value=Str(s='\n        Args:\n            delta: The probability that the true value is outside of the final confidence interval.\n            maxiter: The number of iterations, the maximal power of Q is `2 ** (maxiter - 1)`.\n            rescale: Whether to rescale the problem passed to `estimate`.\n            quantum_instance: The quantum instance or backend to run the circuits.\n\n        .. note::\n\n            This algorithm overwrites the number of shots set in the ``quantum_instance``\n            argument, but will reset them to the initial number after running.\n\n        ')), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='quantum_instance', ctx=Store())], value=Name(id='quantum_instance', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_shots', ctx=Store())], value=Tuple(elts=[Call(func=Name(id='int', ctx=Load()), args=[BinOp(left=Num(n=1944), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='log', ctx=Load()), args=[BinOp(left=Num(n=2), op=Div(), right=Name(id='delta', ctx=Load()))], keywords=[]))], keywords=[]), Call(func=Name(id='int', ctx=Load()), args=[BinOp(left=Num(n=972), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='log', ctx=Load()), args=[BinOp(left=Num(n=2), op=Div(), right=Name(id='delta', ctx=Load()))], keywords=[]))], keywords=[])], ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_rescale', ctx=Store())], value=Name(id='rescale', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_delta', ctx=Store())], value=Name(id='delta', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_maxiter', ctx=Store())], value=Name(id='maxiter', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_num_oracle_calls', ctx=Store())], value=Num(n=0))], decorator_list=[], returns=NameConstant(value=None))
FunctionDef(name='quantum_instance', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Get the quantum instance.\n\n        Returns:\n            The quantum instance used to run this algorithm.\n        ')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Name(id='QuantumInstance', ctx=Load())), ctx=Load()))
FunctionDef(name='quantum_instance', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='quantum_instance', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='QuantumInstance', ctx=Load()), Name(id='Backend', ctx=Load())], ctx=Load())), ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Set quantum instance.\n\n        Args:\n            quantum_instance: The quantum instance used to run this algorithm.\n        ')), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='quantum_instance', ctx=Load()), Name(id='Backend', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='quantum_instance', ctx=Store())], value=Call(func=Name(id='QuantumInstance', ctx=Load()), args=[Name(id='quantum_instance', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Store())], value=Name(id='quantum_instance', ctx=Load()))], decorator_list=[Attribute(value=Name(id='quantum_instance', ctx=Load()), attr='setter', ctx=Load())], returns=NameConstant(value=None))
FunctionDef(name='_cos_estimate', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='estimation_problem', annotation=None), arg(arg='k', annotation=None), arg(arg='shots', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()), ops=[Is()], comparators=[NameConstant(value=None)]), body=[Raise(exc=Call(func=Name(id='AlgorithmError', ctx=Load()), args=[Str(s='Quantum instance must be set.')], keywords=[]), cause=None)], orelse=[]), If(test=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()), attr='is_statevector', ctx=Load()), body=[Assign(targets=[Name(id='circuit', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='construct_circuit', ctx=Load()), args=[Name(id='estimation_problem', ctx=Load()), Name(id='k', ctx=Load())], keywords=[keyword(arg='measurement', value=NameConstant(value=False))])), Assign(targets=[Name(id='statevector', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()), attr='execute', ctx=Load()), args=[Name(id='circuit', ctx=Load())], keywords=[]), attr='get_statevector', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='prob', ctx=Store())], value=Num(n=0)), For(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='amplitude', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='statevector', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='full_state', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Subscript(value=Call(func=Name(id='bin', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]), slice=Slice(lower=Num(n=2), upper=None, step=None), ctx=Load()), attr='zfill', ctx=Load()), args=[Attribute(value=Name(id='circuit', ctx=Load()), attr='num_qubits', ctx=Load())], keywords=[]), slice=Slice(lower=None, upper=None, step=UnaryOp(op=USub(), operand=Num(n=1))), ctx=Load())), Assign(targets=[Name(id='state', ctx=Store())], value=Call(func=Attribute(value=Str(s=''), attr='join', ctx=Load()), args=[ListComp(elt=Subscript(value=Name(id='full_state', ctx=Load()), slice=Index(value=Name(id='i', ctx=Load())), ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='objective_qubits', ctx=Load()), ifs=[], is_async=0)])], keywords=[])), If(test=Call(func=Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='is_good_state', ctx=Load()), args=[Subscript(value=Name(id='state', ctx=Load()), slice=Slice(lower=None, upper=None, step=UnaryOp(op=USub(), operand=Num(n=1))), ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='prob', ctx=Store())], value=BinOp(left=Name(id='prob', ctx=Load()), op=Add(), right=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='abs', ctx=Load()), args=[Name(id='amplitude', ctx=Load())], keywords=[]), op=Pow(), right=Num(n=2))))], orelse=[])], orelse=[]), Assign(targets=[Name(id='cos_estimate', ctx=Store())], value=BinOp(left=Num(n=1), op=Sub(), right=BinOp(left=Num(n=2), op=Mult(), right=Name(id='prob', ctx=Load()))))], orelse=[Assign(targets=[Name(id='circuit', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='construct_circuit', ctx=Load()), args=[Name(id='estimation_problem', ctx=Load()), Name(id='k', ctx=Load())], keywords=[keyword(arg='measurement', value=NameConstant(value=True))])), Assign(targets=[Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()), attr='run_config', ctx=Load()), attr='shots', ctx=Store())], value=Name(id='shots', ctx=Load())), Assign(targets=[Name(id='counts', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()), attr='execute', ctx=Load()), args=[Name(id='circuit', ctx=Load())], keywords=[]), attr='get_counts', ctx=Load()), args=[], keywords=[])), AugAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_num_oracle_calls', ctx=Store()), op=Add(), value=BinOp(left=BinOp(left=BinOp(left=Num(n=2), op=Mult(), right=Name(id='k', ctx=Load())), op=Add(), right=Num(n=1)), op=Mult(), right=Name(id='shots', ctx=Load()))), Assign(targets=[Name(id='good_counts', ctx=Store())], value=Num(n=0)), For(target=Tuple(elts=[Name(id='state', ctx=Store()), Name(id='count', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='counts', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[If(test=Call(func=Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='is_good_state', ctx=Load()), args=[Name(id='state', ctx=Load())], keywords=[]), body=[AugAssign(target=Name(id='good_counts', ctx=Store()), op=Add(), value=Name(id='count', ctx=Load()))], orelse=[])], orelse=[]), Assign(targets=[Name(id='cos_estimate', ctx=Store())], value=BinOp(left=Num(n=1), op=Sub(), right=BinOp(left=BinOp(left=Num(n=2), op=Mult(), right=Name(id='good_counts', ctx=Load())), op=Div(), right=Name(id='shots', ctx=Load()))))]), Return(value=Name(id='cos_estimate', ctx=Load()))], decorator_list=[], returns=None)
FunctionDef(name='_chernoff', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='cos', annotation=None), arg(arg='shots', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Assign(targets=[Name(id='width', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sqrt', ctx=Load()), args=[BinOp(left=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='log', ctx=Load()), args=[BinOp(left=Num(n=2), op=Div(), right=Attribute(value=Name(id='self', ctx=Load()), attr='_delta', ctx=Load()))], keywords=[]), op=Mult(), right=Num(n=12)), op=Div(), right=Name(id='shots', ctx=Load()))], keywords=[])), Assign(targets=[Name(id='confint', ctx=Store())], value=List(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='maximum', ctx=Load()), args=[UnaryOp(op=USub(), operand=Num(n=1)), BinOp(left=Name(id='cos', ctx=Load()), op=Sub(), right=Name(id='width', ctx=Load()))], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='minimum', ctx=Load()), args=[Num(n=1), BinOp(left=Name(id='cos', ctx=Load()), op=Add(), right=Name(id='width', ctx=Load()))], keywords=[])], ctx=Load())), Return(value=Name(id='confint', ctx=Load()))], decorator_list=[], returns=None)
FunctionDef(name='construct_circuit', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='estimation_problem', annotation=Name(id='EstimationProblem', ctx=Load())), arg(arg='k', annotation=Name(id='int', ctx=Load())), arg(arg='measurement', annotation=Name(id='bool', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[NameConstant(value=False)]), body=[Expr(value=Str(s='Construct the circuit :math:`Q^k X |0\\rangle>`.\n\n        The A operator is the unitary specifying the QAE problem and Q the associated Grover\n        operator.\n\n        Args:\n            estimation_problem: The estimation problem for which to construct the circuit.\n            k: The power of the Q operator.\n            measurement: Boolean flag to indicate if measurements should be included in the\n                circuits.\n\n        Returns:\n            The circuit :math:`Q^k X |0\\rangle`.\n        ')), Assign(targets=[Name(id='num_qubits', ctx=Store())], value=Call(func=Name(id='max', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='state_preparation', ctx=Load()), attr='num_qubits', ctx=Load()), Attribute(value=Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='grover_operator', ctx=Load()), attr='num_qubits', ctx=Load())], keywords=[])), Assign(targets=[Name(id='circuit', ctx=Store())], value=Call(func=Name(id='QuantumCircuit', ctx=Load()), args=[Name(id='num_qubits', ctx=Load())], keywords=[keyword(arg='name', value=Str(s='circuit'))])), If(test=Name(id='measurement', ctx=Load()), body=[Assign(targets=[Name(id='c', ctx=Store())], value=Call(func=Name(id='ClassicalRegister', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='objective_qubits', ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='circuit', ctx=Load()), attr='add_register', ctx=Load()), args=[Name(id='c', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='circuit', ctx=Load()), attr='compose', ctx=Load()), args=[Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='state_preparation', ctx=Load())], keywords=[keyword(arg='inplace', value=NameConstant(value=True))])), If(test=Compare(left=Name(id='k', ctx=Load()), ops=[NotEq()], comparators=[Num(n=0)]), body=[Expr(value=Call(func=Attribute(value=Name(id='circuit', ctx=Load()), attr='compose', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='grover_operator', ctx=Load()), attr='power', ctx=Load()), args=[Name(id='k', ctx=Load())], keywords=[])], keywords=[keyword(arg='inplace', value=NameConstant(value=True))]))], orelse=[]), If(test=Name(id='measurement', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='circuit', ctx=Load()), attr='barrier', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='circuit', ctx=Load()), attr='measure', ctx=Load()), args=[Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='objective_qubits', ctx=Load()), Subscript(value=Name(id='c', ctx=Load()), slice=Slice(lower=None, upper=None, step=None), ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='circuit', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='QuantumCircuit', ctx=Load()), Subscript(value=Name(id='Tuple', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='QuantumCircuit', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='int', ctx=Load())), ctx=Load())], ctx=Load())), ctx=Load())], ctx=Load())), ctx=Load()))
FunctionDef(name='estimate', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='estimation_problem', annotation=Name(id='EstimationProblem', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_num_oracle_calls', ctx=Store())], value=Num(n=0)), Assign(targets=[Name(id='user_defined_shots', ctx=Store())], value=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='quantum_instance', ctx=Load()), attr='_run_config', ctx=Load()), attr='shots', ctx=Load())), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='_rescale', ctx=Load()), body=[Assign(targets=[Name(id='problem', ctx=Store())], value=Call(func=Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='rescale', ctx=Load()), args=[Num(n=0.25)], keywords=[]))], orelse=[Assign(targets=[Name(id='problem', ctx=Store())], value=Name(id='estimation_problem', ctx=Load()))]), If(test=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()), attr='is_statevector', ctx=Load()), body=[Assign(targets=[Name(id='cos', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_cos_estimate', ctx=Load()), args=[Name(id='problem', ctx=Load())], keywords=[keyword(arg='k', value=Num(n=0)), keyword(arg='shots', value=Num(n=1))])), Assign(targets=[Name(id='theta', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='arccos', ctx=Load()), args=[Name(id='cos', ctx=Load())], keywords=[]), op=Div(), right=Num(n=2))), Assign(targets=[Name(id='theta_ci', ctx=Store())], value=List(elts=[Name(id='theta', ctx=Load()), Name(id='theta', ctx=Load())], ctx=Load())), Assign(targets=[Name(id='theta_cis', ctx=Store())], value=List(elts=[Name(id='theta_ci', ctx=Load())], ctx=Load())), Assign(targets=[Name(id='num_steps', ctx=Store()), Name(id='num_first_stage_steps', ctx=Store())], value=Num(n=1))], orelse=[Assign(targets=[Name(id='theta_ci', ctx=Store())], value=List(elts=[Num(n=0), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='arcsin', ctx=Load()), args=[Num(n=0.25)], keywords=[])], ctx=Load())), Assign(targets=[Name(id='first_stage', ctx=Store())], value=NameConstant(value=True)), Assign(targets=[Name(id='j_0', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_maxiter', ctx=Load())), Assign(targets=[Name(id='theta_cis', ctx=Store())], value=List(elts=[Name(id='theta_ci', ctx=Load())], ctx=Load())), Assign(targets=[Name(id='num_first_stage_steps', ctx=Store())], value=Num(n=0)), Assign(targets=[Name(id='num_steps', ctx=Store())], value=Num(n=0)), FunctionDef(name='cos_estimate', args=arguments(args=[arg(arg='power', annotation=None), arg(arg='shots', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_cos_estimate', ctx=Load()), args=[Name(id='problem', ctx=Load()), Name(id='power', ctx=Load()), Name(id='shots', ctx=Load())], keywords=[]))], decorator_list=[], returns=None), For(target=Name(id='j', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Num(n=1), BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='_maxiter', ctx=Load()), op=Add(), right=Num(n=1))], keywords=[]), body=[AugAssign(target=Name(id='num_steps', ctx=Store()), op=Add(), value=Num(n=1)), If(test=Name(id='first_stage', ctx=Load()), body=[AugAssign(target=Name(id='num_first_stage_steps', ctx=Store()), op=Add(), value=Num(n=1)), Assign(targets=[Name(id='c', ctx=Store())], value=Call(func=Name(id='cos_estimate', ctx=Load()), args=[BinOp(left=Num(n=2), op=Pow(), right=BinOp(left=Name(id='j', ctx=Load()), op=Sub(), right=Num(n=1))), Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_shots', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())], keywords=[])), Assign(targets=[Name(id='chernoff_ci', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_chernoff', ctx=Load()), args=[Name(id='c', ctx=Load()), Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_shots', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())], keywords=[])), Assign(targets=[Name(id='theta_ci', ctx=Store())], value=ListComp(elt=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='arccos', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), op=Div(), right=BinOp(left=BinOp(left=Num(n=2), op=Pow(), right=BinOp(left=Name(id='j', ctx=Load()), op=Add(), right=Num(n=1))), op=Add(), right=Num(n=2))), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='chernoff_ci', ctx=Load()), slice=Slice(lower=None, upper=None, step=UnaryOp(op=USub(), operand=Num(n=1))), ctx=Load()), ifs=[], is_async=0)])), If(test=BoolOp(op=And(), values=[Compare(left=BinOp(left=BinOp(left=Num(n=2), op=Pow(), right=BinOp(left=Name(id='j', ctx=Load()), op=Add(), right=Num(n=1))), op=Mult(), right=Subscript(value=Name(id='theta_ci', ctx=Load()), slice=Index(value=Num(n=1)), ctx=Load())), ops=[GtE()], comparators=[BinOp(left=BinOp(left=Num(n=3), op=Mult(), right=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load())), op=Div(), right=Num(n=8))]), Compare(left=Name(id='j', ctx=Load()), ops=[Lt()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='_maxiter', ctx=Load())])]), body=[Assign(targets=[Name(id='j_0', ctx=Store())], value=Name(id='j', ctx=Load())), Assign(targets=[Name(id='v', ctx=Store())], value=BinOp(left=BinOp(left=Num(n=2), op=Pow(), right=Name(id='j', ctx=Load())), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sum', ctx=Load()), args=[Name(id='theta_ci', ctx=Load())], keywords=[]))), Assign(targets=[Name(id='first_stage', ctx=Store())], value=NameConstant(value=False))], orelse=[])], orelse=[Assign(targets=[Name(id='cos', ctx=Store())], value=Call(func=Name(id='cos_estimate', ctx=Load()), args=[BinOp(left=Num(n=2), op=Pow(), right=BinOp(left=Name(id='j', ctx=Load()), op=Sub(), right=Num(n=1))), Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_shots', ctx=Load()), slice=Index(value=Num(n=1)), ctx=Load())], keywords=[])), Assign(targets=[Name(id='cos_2', ctx=Store())], value=Call(func=Name(id='cos_estimate', ctx=Load()), args=[BinOp(left=BinOp(left=Num(n=2), op=Pow(), right=BinOp(left=Name(id='j', ctx=Load()), op=Sub(), right=Num(n=1))), op=Add(), right=BinOp(left=Num(n=2), op=Pow(), right=BinOp(left=Name(id='j_0', ctx=Load()), op=Sub(), right=Num(n=1)))), Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_shots', ctx=Load()), slice=Index(value=Num(n=1)), ctx=Load())], keywords=[])), Assign(targets=[Name(id='sin', ctx=Store())], value=BinOp(left=BinOp(left=BinOp(left=Name(id='cos', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='cos', ctx=Load()), args=[Name(id='v', ctx=Load())], keywords=[])), op=Sub(), right=Name(id='cos_2', ctx=Load())), op=Div(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[Name(id='v', ctx=Load())], keywords=[]))), Assign(targets=[Name(id='rho', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='arctan2', ctx=Load()), args=[Name(id='sin', ctx=Load()), Name(id='cos', ctx=Load())], keywords=[])), Assign(targets=[Name(id='n', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Num(n=2), op=Pow(), right=BinOp(left=Name(id='j', ctx=Load()), op=Add(), right=Num(n=1))), op=Add(), right=Num(n=2)), op=Mult(), right=Subscript(value=Name(id='theta_ci', ctx=Load()), slice=Index(value=Num(n=1)), ctx=Load())), op=Sub(), right=Name(id='rho', ctx=Load())), op=Add(), right=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Div(), right=Num(n=3))), op=Div(), right=BinOp(left=Num(n=2), op=Mult(), right=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load())))], keywords=[])), Assign(targets=[Name(id='theta_ci', ctx=Store())], value=ListComp(elt=BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Num(n=2), op=Mult(), right=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load())), op=Mult(), right=Name(id='n', ctx=Load())), op=Add(), right=Name(id='rho', ctx=Load())), op=Add(), right=BinOp(left=BinOp(left=Name(id='sign', ctx=Load()), op=Mult(), right=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load())), op=Div(), right=Num(n=3))), op=Div(), right=BinOp(left=BinOp(left=Num(n=2), op=Pow(), right=BinOp(left=Name(id='j', ctx=Load()), op=Add(), right=Num(n=1))), op=Add(), right=Num(n=2))), generators=[comprehension(target=Name(id='sign', ctx=Store()), iter=List(elts=[UnaryOp(op=USub(), operand=Num(n=1)), Num(n=1)], ctx=Load()), ifs=[], is_async=0)]))]), Expr(value=Call(func=Attribute(value=Name(id='theta_cis', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='theta_ci', ctx=Load())], keywords=[]))], orelse=[])]), Assign(targets=[Name(id='theta', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='mean', ctx=Load()), args=[Name(id='theta_ci', ctx=Load())], keywords=[])), Assign(targets=[Name(id='rescaling', ctx=Store())], value=IfExp(test=Attribute(value=Name(id='self', ctx=Load()), attr='_rescale', ctx=Load()), body=Num(n=4), orelse=Num(n=1))), Assign(targets=[Name(id='value', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='rescaling', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[Name(id='theta', ctx=Load())], keywords=[])), op=Pow(), right=Num(n=2))), Assign(targets=[Name(id='value_ci', ctx=Store())], value=ListComp(elt=BinOp(left=BinOp(left=Name(id='rescaling', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[])), op=Pow(), right=Num(n=2)), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='theta_ci', ctx=Load()), ifs=[], is_async=0)])), Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Name(id='FasterAmplitudeEstimationResult', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='num_oracle_queries', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_num_oracle_calls', ctx=Load())), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='num_steps', ctx=Store())], value=Name(id='num_steps', ctx=Load())), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='num_first_state_steps', ctx=Store())], value=Name(id='num_first_stage_steps', ctx=Load())), If(test=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()), attr='is_statevector', ctx=Load()), body=[Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='success_probability', ctx=Store())], value=Num(n=1))], orelse=[Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='success_probability', ctx=Store())], value=BinOp(left=Num(n=1), op=Sub(), right=BinOp(left=BinOp(left=BinOp(left=Num(n=2), op=Mult(), right=Attribute(value=Name(id='self', ctx=Load()), attr='_maxiter', ctx=Load())), op=Sub(), right=Name(id='j_0', ctx=Load())), op=Mult(), right=Attribute(value=Name(id='self', ctx=Load()), attr='_delta', ctx=Load()))))]), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='estimation', ctx=Store())], value=Name(id='value', ctx=Load())), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='estimation_processed', ctx=Store())], value=Call(func=Attribute(value=Name(id='problem', ctx=Load()), attr='post_processing', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='confidence_interval', ctx=Store())], value=Name(id='value_ci', ctx=Load())), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='confidence_interval_processed', ctx=Store())], value=Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='problem', ctx=Load()), attr='post_processing', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='value_ci', ctx=Load()), ifs=[], is_async=0)])], keywords=[])), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='theta_intervals', ctx=Store())], value=Name(id='theta_cis', ctx=Load())), Assign(targets=[Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='quantum_instance', ctx=Load()), attr='_run_config', ctx=Load()), attr='shots', ctx=Store())], value=Name(id='user_defined_shots', ctx=Load())), Return(value=Name(id='result', ctx=Load()))], decorator_list=[], returns=Str(s='FasterAmplitudeEstimationResult'))
Name(id='AmplitudeEstimatorResult', ctx=Load())
Expr(value=Str(s='The result object for the Faster Amplitude Estimation algorithm.'))
FunctionDef(name='__init__', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_success_probability', ctx=Store())], value=NameConstant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_num_steps', ctx=Store())], value=NameConstant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_num_first_state_steps', ctx=Store())], value=NameConstant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_theta_intervals', ctx=Store())], value=NameConstant(value=None))], decorator_list=[], returns=NameConstant(value=None))
FunctionDef(name='success_probability', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Return the success probability of the algorithm.')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_success_probability', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='int', ctx=Load()))
FunctionDef(name='success_probability', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='probability', annotation=Name(id='int', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Set the success probability of the algorithm.')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_success_probability', ctx=Store())], value=Name(id='probability', ctx=Load()))], decorator_list=[Attribute(value=Name(id='success_probability', ctx=Load()), attr='setter', ctx=Load())], returns=NameConstant(value=None))
FunctionDef(name='num_steps', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Return the total number of steps taken in the algorithm.')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_num_steps', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='int', ctx=Load()))
FunctionDef(name='num_steps', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='num_steps', annotation=Name(id='int', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Set the total number of steps taken in the algorithm.')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_num_steps', ctx=Store())], value=Name(id='num_steps', ctx=Load()))], decorator_list=[Attribute(value=Name(id='num_steps', ctx=Load()), attr='setter', ctx=Load())], returns=NameConstant(value=None))
FunctionDef(name='num_first_state_steps', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Return the number of steps taken in the first step of algorithm.')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_num_first_state_steps', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='int', ctx=Load()))
FunctionDef(name='num_first_state_steps', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='num_steps', annotation=Name(id='int', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Set the number of steps taken in the first step of algorithm.')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_num_first_state_steps', ctx=Store())], value=Name(id='num_steps', ctx=Load()))], decorator_list=[Attribute(value=Name(id='num_first_state_steps', ctx=Load()), attr='setter', ctx=Load())], returns=NameConstant(value=None))
FunctionDef(name='theta_intervals', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Return the confidence intervals for the angles in each iteration.')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_theta_intervals', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='float', ctx=Load())), ctx=Load())), ctx=Load()))
FunctionDef(name='theta_intervals', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='value', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='float', ctx=Load())), ctx=Load())), ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Set the confidence intervals for the angles in each iteration.')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_theta_intervals', ctx=Store())], value=Name(id='value', ctx=Load()))], decorator_list=[Attribute(value=Name(id='theta_intervals', ctx=Load()), attr='setter', ctx=Load())], returns=NameConstant(value=None))
Load()
Str(s='The Faster Amplitude Estimation algorithm.\n\n    The Faster Amplitude Estimation (FAE) [1] algorithm is a variant of Quantum Amplitude\n    Estimation (QAE), where the Quantum Phase Estimation (QPE) by an iterative Grover search,\n    similar to [2].\n\n    Due to the iterative version of the QPE, this algorithm does not require any additional\n    qubits, as the originally proposed QAE [3] and thus the resulting circuits are less complex.\n\n    References:\n\n        [1]: K. Nakaji. Faster Amplitude Estimation, 2020;\n            `arXiv:2002.02417 <https://arxiv.org/pdf/2003.02417.pdf>`_\n        [2]: D. Grinko et al. Iterative Amplitude Estimation, 2019;\n            `arXiv:1912.05559 <http://arxiv.org/abs/1912.05559>`_\n        [3]: G. Brassard et al. Quantum Amplitude Amplification and Estimation, 2000;\n            `arXiv:quant-ph/0005055 <http://arxiv.org/abs/quant-ph/0005055>`_\n\n    ')
arguments(args=[arg(arg='self', annotation=None), arg(arg='delta', annotation=Name(id='float', ctx=Load())), arg(arg='maxiter', annotation=Name(id='int', ctx=Load())), arg(arg='rescale', annotation=Name(id='bool', ctx=Load())), arg(arg='quantum_instance', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='QuantumInstance', ctx=Load()), Name(id='Backend', ctx=Load())], ctx=Load())), ctx=Load())), ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[NameConstant(value=True), NameConstant(value=None)])
Expr(value=Str(s='\n        Args:\n            delta: The probability that the true value is outside of the final confidence interval.\n            maxiter: The number of iterations, the maximal power of Q is `2 ** (maxiter - 1)`.\n            rescale: Whether to rescale the problem passed to `estimate`.\n            quantum_instance: The quantum instance or backend to run the circuits.\n\n        .. note::\n\n            This algorithm overwrites the number of shots set in the ``quantum_instance``\n            argument, but will reset them to the initial number after running.\n\n        '))
Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[]))
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='quantum_instance', ctx=Store())], value=Name(id='quantum_instance', ctx=Load()))
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_shots', ctx=Store())], value=Tuple(elts=[Call(func=Name(id='int', ctx=Load()), args=[BinOp(left=Num(n=1944), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='log', ctx=Load()), args=[BinOp(left=Num(n=2), op=Div(), right=Name(id='delta', ctx=Load()))], keywords=[]))], keywords=[]), Call(func=Name(id='int', ctx=Load()), args=[BinOp(left=Num(n=972), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='log', ctx=Load()), args=[BinOp(left=Num(n=2), op=Div(), right=Name(id='delta', ctx=Load()))], keywords=[]))], keywords=[])], ctx=Load()))
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_rescale', ctx=Store())], value=Name(id='rescale', ctx=Load()))
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_delta', ctx=Store())], value=Name(id='delta', ctx=Load()))
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_maxiter', ctx=Store())], value=Name(id='maxiter', ctx=Load()))
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_num_oracle_calls', ctx=Store())], value=Num(n=0))
NameConstant(value=None)
arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Expr(value=Str(s='Get the quantum instance.\n\n        Returns:\n            The quantum instance used to run this algorithm.\n        '))
Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()))
Name(id='property', ctx=Load())
Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Name(id='QuantumInstance', ctx=Load())), ctx=Load())
arguments(args=[arg(arg='self', annotation=None), arg(arg='quantum_instance', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='QuantumInstance', ctx=Load()), Name(id='Backend', ctx=Load())], ctx=Load())), ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Expr(value=Str(s='Set quantum instance.\n\n        Args:\n            quantum_instance: The quantum instance used to run this algorithm.\n        '))
If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='quantum_instance', ctx=Load()), Name(id='Backend', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='quantum_instance', ctx=Store())], value=Call(func=Name(id='QuantumInstance', ctx=Load()), args=[Name(id='quantum_instance', ctx=Load())], keywords=[]))], orelse=[])
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Store())], value=Name(id='quantum_instance', ctx=Load()))
Attribute(value=Name(id='quantum_instance', ctx=Load()), attr='setter', ctx=Load())
NameConstant(value=None)
arguments(args=[arg(arg='self', annotation=None), arg(arg='estimation_problem', annotation=None), arg(arg='k', annotation=None), arg(arg='shots', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()), ops=[Is()], comparators=[NameConstant(value=None)]), body=[Raise(exc=Call(func=Name(id='AlgorithmError', ctx=Load()), args=[Str(s='Quantum instance must be set.')], keywords=[]), cause=None)], orelse=[])
If(test=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()), attr='is_statevector', ctx=Load()), body=[Assign(targets=[Name(id='circuit', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='construct_circuit', ctx=Load()), args=[Name(id='estimation_problem', ctx=Load()), Name(id='k', ctx=Load())], keywords=[keyword(arg='measurement', value=NameConstant(value=False))])), Assign(targets=[Name(id='statevector', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()), attr='execute', ctx=Load()), args=[Name(id='circuit', ctx=Load())], keywords=[]), attr='get_statevector', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='prob', ctx=Store())], value=Num(n=0)), For(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='amplitude', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='statevector', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='full_state', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Subscript(value=Call(func=Name(id='bin', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]), slice=Slice(lower=Num(n=2), upper=None, step=None), ctx=Load()), attr='zfill', ctx=Load()), args=[Attribute(value=Name(id='circuit', ctx=Load()), attr='num_qubits', ctx=Load())], keywords=[]), slice=Slice(lower=None, upper=None, step=UnaryOp(op=USub(), operand=Num(n=1))), ctx=Load())), Assign(targets=[Name(id='state', ctx=Store())], value=Call(func=Attribute(value=Str(s=''), attr='join', ctx=Load()), args=[ListComp(elt=Subscript(value=Name(id='full_state', ctx=Load()), slice=Index(value=Name(id='i', ctx=Load())), ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='objective_qubits', ctx=Load()), ifs=[], is_async=0)])], keywords=[])), If(test=Call(func=Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='is_good_state', ctx=Load()), args=[Subscript(value=Name(id='state', ctx=Load()), slice=Slice(lower=None, upper=None, step=UnaryOp(op=USub(), operand=Num(n=1))), ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='prob', ctx=Store())], value=BinOp(left=Name(id='prob', ctx=Load()), op=Add(), right=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='abs', ctx=Load()), args=[Name(id='amplitude', ctx=Load())], keywords=[]), op=Pow(), right=Num(n=2))))], orelse=[])], orelse=[]), Assign(targets=[Name(id='cos_estimate', ctx=Store())], value=BinOp(left=Num(n=1), op=Sub(), right=BinOp(left=Num(n=2), op=Mult(), right=Name(id='prob', ctx=Load()))))], orelse=[Assign(targets=[Name(id='circuit', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='construct_circuit', ctx=Load()), args=[Name(id='estimation_problem', ctx=Load()), Name(id='k', ctx=Load())], keywords=[keyword(arg='measurement', value=NameConstant(value=True))])), Assign(targets=[Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()), attr='run_config', ctx=Load()), attr='shots', ctx=Store())], value=Name(id='shots', ctx=Load())), Assign(targets=[Name(id='counts', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()), attr='execute', ctx=Load()), args=[Name(id='circuit', ctx=Load())], keywords=[]), attr='get_counts', ctx=Load()), args=[], keywords=[])), AugAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_num_oracle_calls', ctx=Store()), op=Add(), value=BinOp(left=BinOp(left=BinOp(left=Num(n=2), op=Mult(), right=Name(id='k', ctx=Load())), op=Add(), right=Num(n=1)), op=Mult(), right=Name(id='shots', ctx=Load()))), Assign(targets=[Name(id='good_counts', ctx=Store())], value=Num(n=0)), For(target=Tuple(elts=[Name(id='state', ctx=Store()), Name(id='count', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='counts', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[If(test=Call(func=Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='is_good_state', ctx=Load()), args=[Name(id='state', ctx=Load())], keywords=[]), body=[AugAssign(target=Name(id='good_counts', ctx=Store()), op=Add(), value=Name(id='count', ctx=Load()))], orelse=[])], orelse=[]), Assign(targets=[Name(id='cos_estimate', ctx=Store())], value=BinOp(left=Num(n=1), op=Sub(), right=BinOp(left=BinOp(left=Num(n=2), op=Mult(), right=Name(id='good_counts', ctx=Load())), op=Div(), right=Name(id='shots', ctx=Load()))))])
Return(value=Name(id='cos_estimate', ctx=Load()))
arguments(args=[arg(arg='self', annotation=None), arg(arg='cos', annotation=None), arg(arg='shots', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Assign(targets=[Name(id='width', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sqrt', ctx=Load()), args=[BinOp(left=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='log', ctx=Load()), args=[BinOp(left=Num(n=2), op=Div(), right=Attribute(value=Name(id='self', ctx=Load()), attr='_delta', ctx=Load()))], keywords=[]), op=Mult(), right=Num(n=12)), op=Div(), right=Name(id='shots', ctx=Load()))], keywords=[]))
Assign(targets=[Name(id='confint', ctx=Store())], value=List(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='maximum', ctx=Load()), args=[UnaryOp(op=USub(), operand=Num(n=1)), BinOp(left=Name(id='cos', ctx=Load()), op=Sub(), right=Name(id='width', ctx=Load()))], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='minimum', ctx=Load()), args=[Num(n=1), BinOp(left=Name(id='cos', ctx=Load()), op=Add(), right=Name(id='width', ctx=Load()))], keywords=[])], ctx=Load()))
Return(value=Name(id='confint', ctx=Load()))
arguments(args=[arg(arg='self', annotation=None), arg(arg='estimation_problem', annotation=Name(id='EstimationProblem', ctx=Load())), arg(arg='k', annotation=Name(id='int', ctx=Load())), arg(arg='measurement', annotation=Name(id='bool', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[NameConstant(value=False)])
Expr(value=Str(s='Construct the circuit :math:`Q^k X |0\\rangle>`.\n\n        The A operator is the unitary specifying the QAE problem and Q the associated Grover\n        operator.\n\n        Args:\n            estimation_problem: The estimation problem for which to construct the circuit.\n            k: The power of the Q operator.\n            measurement: Boolean flag to indicate if measurements should be included in the\n                circuits.\n\n        Returns:\n            The circuit :math:`Q^k X |0\\rangle`.\n        '))
Assign(targets=[Name(id='num_qubits', ctx=Store())], value=Call(func=Name(id='max', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='state_preparation', ctx=Load()), attr='num_qubits', ctx=Load()), Attribute(value=Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='grover_operator', ctx=Load()), attr='num_qubits', ctx=Load())], keywords=[]))
Assign(targets=[Name(id='circuit', ctx=Store())], value=Call(func=Name(id='QuantumCircuit', ctx=Load()), args=[Name(id='num_qubits', ctx=Load())], keywords=[keyword(arg='name', value=Str(s='circuit'))]))
If(test=Name(id='measurement', ctx=Load()), body=[Assign(targets=[Name(id='c', ctx=Store())], value=Call(func=Name(id='ClassicalRegister', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='objective_qubits', ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='circuit', ctx=Load()), attr='add_register', ctx=Load()), args=[Name(id='c', ctx=Load())], keywords=[]))], orelse=[])
Expr(value=Call(func=Attribute(value=Name(id='circuit', ctx=Load()), attr='compose', ctx=Load()), args=[Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='state_preparation', ctx=Load())], keywords=[keyword(arg='inplace', value=NameConstant(value=True))]))
If(test=Compare(left=Name(id='k', ctx=Load()), ops=[NotEq()], comparators=[Num(n=0)]), body=[Expr(value=Call(func=Attribute(value=Name(id='circuit', ctx=Load()), attr='compose', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='grover_operator', ctx=Load()), attr='power', ctx=Load()), args=[Name(id='k', ctx=Load())], keywords=[])], keywords=[keyword(arg='inplace', value=NameConstant(value=True))]))], orelse=[])
If(test=Name(id='measurement', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='circuit', ctx=Load()), attr='barrier', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='circuit', ctx=Load()), attr='measure', ctx=Load()), args=[Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='objective_qubits', ctx=Load()), Subscript(value=Name(id='c', ctx=Load()), slice=Slice(lower=None, upper=None, step=None), ctx=Load())], keywords=[]))], orelse=[])
Return(value=Name(id='circuit', ctx=Load()))
Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='QuantumCircuit', ctx=Load()), Subscript(value=Name(id='Tuple', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='QuantumCircuit', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='int', ctx=Load())), ctx=Load())], ctx=Load())), ctx=Load())], ctx=Load())), ctx=Load())
arguments(args=[arg(arg='self', annotation=None), arg(arg='estimation_problem', annotation=Name(id='EstimationProblem', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_num_oracle_calls', ctx=Store())], value=Num(n=0))
Assign(targets=[Name(id='user_defined_shots', ctx=Store())], value=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='quantum_instance', ctx=Load()), attr='_run_config', ctx=Load()), attr='shots', ctx=Load()))
If(test=Attribute(value=Name(id='self', ctx=Load()), attr='_rescale', ctx=Load()), body=[Assign(targets=[Name(id='problem', ctx=Store())], value=Call(func=Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='rescale', ctx=Load()), args=[Num(n=0.25)], keywords=[]))], orelse=[Assign(targets=[Name(id='problem', ctx=Store())], value=Name(id='estimation_problem', ctx=Load()))])
If(test=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()), attr='is_statevector', ctx=Load()), body=[Assign(targets=[Name(id='cos', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_cos_estimate', ctx=Load()), args=[Name(id='problem', ctx=Load())], keywords=[keyword(arg='k', value=Num(n=0)), keyword(arg='shots', value=Num(n=1))])), Assign(targets=[Name(id='theta', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='arccos', ctx=Load()), args=[Name(id='cos', ctx=Load())], keywords=[]), op=Div(), right=Num(n=2))), Assign(targets=[Name(id='theta_ci', ctx=Store())], value=List(elts=[Name(id='theta', ctx=Load()), Name(id='theta', ctx=Load())], ctx=Load())), Assign(targets=[Name(id='theta_cis', ctx=Store())], value=List(elts=[Name(id='theta_ci', ctx=Load())], ctx=Load())), Assign(targets=[Name(id='num_steps', ctx=Store()), Name(id='num_first_stage_steps', ctx=Store())], value=Num(n=1))], orelse=[Assign(targets=[Name(id='theta_ci', ctx=Store())], value=List(elts=[Num(n=0), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='arcsin', ctx=Load()), args=[Num(n=0.25)], keywords=[])], ctx=Load())), Assign(targets=[Name(id='first_stage', ctx=Store())], value=NameConstant(value=True)), Assign(targets=[Name(id='j_0', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_maxiter', ctx=Load())), Assign(targets=[Name(id='theta_cis', ctx=Store())], value=List(elts=[Name(id='theta_ci', ctx=Load())], ctx=Load())), Assign(targets=[Name(id='num_first_stage_steps', ctx=Store())], value=Num(n=0)), Assign(targets=[Name(id='num_steps', ctx=Store())], value=Num(n=0)), FunctionDef(name='cos_estimate', args=arguments(args=[arg(arg='power', annotation=None), arg(arg='shots', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_cos_estimate', ctx=Load()), args=[Name(id='problem', ctx=Load()), Name(id='power', ctx=Load()), Name(id='shots', ctx=Load())], keywords=[]))], decorator_list=[], returns=None), For(target=Name(id='j', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Num(n=1), BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='_maxiter', ctx=Load()), op=Add(), right=Num(n=1))], keywords=[]), body=[AugAssign(target=Name(id='num_steps', ctx=Store()), op=Add(), value=Num(n=1)), If(test=Name(id='first_stage', ctx=Load()), body=[AugAssign(target=Name(id='num_first_stage_steps', ctx=Store()), op=Add(), value=Num(n=1)), Assign(targets=[Name(id='c', ctx=Store())], value=Call(func=Name(id='cos_estimate', ctx=Load()), args=[BinOp(left=Num(n=2), op=Pow(), right=BinOp(left=Name(id='j', ctx=Load()), op=Sub(), right=Num(n=1))), Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_shots', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())], keywords=[])), Assign(targets=[Name(id='chernoff_ci', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_chernoff', ctx=Load()), args=[Name(id='c', ctx=Load()), Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_shots', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())], keywords=[])), Assign(targets=[Name(id='theta_ci', ctx=Store())], value=ListComp(elt=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='arccos', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), op=Div(), right=BinOp(left=BinOp(left=Num(n=2), op=Pow(), right=BinOp(left=Name(id='j', ctx=Load()), op=Add(), right=Num(n=1))), op=Add(), right=Num(n=2))), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='chernoff_ci', ctx=Load()), slice=Slice(lower=None, upper=None, step=UnaryOp(op=USub(), operand=Num(n=1))), ctx=Load()), ifs=[], is_async=0)])), If(test=BoolOp(op=And(), values=[Compare(left=BinOp(left=BinOp(left=Num(n=2), op=Pow(), right=BinOp(left=Name(id='j', ctx=Load()), op=Add(), right=Num(n=1))), op=Mult(), right=Subscript(value=Name(id='theta_ci', ctx=Load()), slice=Index(value=Num(n=1)), ctx=Load())), ops=[GtE()], comparators=[BinOp(left=BinOp(left=Num(n=3), op=Mult(), right=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load())), op=Div(), right=Num(n=8))]), Compare(left=Name(id='j', ctx=Load()), ops=[Lt()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='_maxiter', ctx=Load())])]), body=[Assign(targets=[Name(id='j_0', ctx=Store())], value=Name(id='j', ctx=Load())), Assign(targets=[Name(id='v', ctx=Store())], value=BinOp(left=BinOp(left=Num(n=2), op=Pow(), right=Name(id='j', ctx=Load())), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sum', ctx=Load()), args=[Name(id='theta_ci', ctx=Load())], keywords=[]))), Assign(targets=[Name(id='first_stage', ctx=Store())], value=NameConstant(value=False))], orelse=[])], orelse=[Assign(targets=[Name(id='cos', ctx=Store())], value=Call(func=Name(id='cos_estimate', ctx=Load()), args=[BinOp(left=Num(n=2), op=Pow(), right=BinOp(left=Name(id='j', ctx=Load()), op=Sub(), right=Num(n=1))), Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_shots', ctx=Load()), slice=Index(value=Num(n=1)), ctx=Load())], keywords=[])), Assign(targets=[Name(id='cos_2', ctx=Store())], value=Call(func=Name(id='cos_estimate', ctx=Load()), args=[BinOp(left=BinOp(left=Num(n=2), op=Pow(), right=BinOp(left=Name(id='j', ctx=Load()), op=Sub(), right=Num(n=1))), op=Add(), right=BinOp(left=Num(n=2), op=Pow(), right=BinOp(left=Name(id='j_0', ctx=Load()), op=Sub(), right=Num(n=1)))), Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_shots', ctx=Load()), slice=Index(value=Num(n=1)), ctx=Load())], keywords=[])), Assign(targets=[Name(id='sin', ctx=Store())], value=BinOp(left=BinOp(left=BinOp(left=Name(id='cos', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='cos', ctx=Load()), args=[Name(id='v', ctx=Load())], keywords=[])), op=Sub(), right=Name(id='cos_2', ctx=Load())), op=Div(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[Name(id='v', ctx=Load())], keywords=[]))), Assign(targets=[Name(id='rho', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='arctan2', ctx=Load()), args=[Name(id='sin', ctx=Load()), Name(id='cos', ctx=Load())], keywords=[])), Assign(targets=[Name(id='n', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Num(n=2), op=Pow(), right=BinOp(left=Name(id='j', ctx=Load()), op=Add(), right=Num(n=1))), op=Add(), right=Num(n=2)), op=Mult(), right=Subscript(value=Name(id='theta_ci', ctx=Load()), slice=Index(value=Num(n=1)), ctx=Load())), op=Sub(), right=Name(id='rho', ctx=Load())), op=Add(), right=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Div(), right=Num(n=3))), op=Div(), right=BinOp(left=Num(n=2), op=Mult(), right=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load())))], keywords=[])), Assign(targets=[Name(id='theta_ci', ctx=Store())], value=ListComp(elt=BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Num(n=2), op=Mult(), right=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load())), op=Mult(), right=Name(id='n', ctx=Load())), op=Add(), right=Name(id='rho', ctx=Load())), op=Add(), right=BinOp(left=BinOp(left=Name(id='sign', ctx=Load()), op=Mult(), right=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load())), op=Div(), right=Num(n=3))), op=Div(), right=BinOp(left=BinOp(left=Num(n=2), op=Pow(), right=BinOp(left=Name(id='j', ctx=Load()), op=Add(), right=Num(n=1))), op=Add(), right=Num(n=2))), generators=[comprehension(target=Name(id='sign', ctx=Store()), iter=List(elts=[UnaryOp(op=USub(), operand=Num(n=1)), Num(n=1)], ctx=Load()), ifs=[], is_async=0)]))]), Expr(value=Call(func=Attribute(value=Name(id='theta_cis', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='theta_ci', ctx=Load())], keywords=[]))], orelse=[])])
Assign(targets=[Name(id='theta', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='mean', ctx=Load()), args=[Name(id='theta_ci', ctx=Load())], keywords=[]))
Assign(targets=[Name(id='rescaling', ctx=Store())], value=IfExp(test=Attribute(value=Name(id='self', ctx=Load()), attr='_rescale', ctx=Load()), body=Num(n=4), orelse=Num(n=1)))
Assign(targets=[Name(id='value', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='rescaling', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[Name(id='theta', ctx=Load())], keywords=[])), op=Pow(), right=Num(n=2)))
Assign(targets=[Name(id='value_ci', ctx=Store())], value=ListComp(elt=BinOp(left=BinOp(left=Name(id='rescaling', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[])), op=Pow(), right=Num(n=2)), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='theta_ci', ctx=Load()), ifs=[], is_async=0)]))
Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Name(id='FasterAmplitudeEstimationResult', ctx=Load()), args=[], keywords=[]))
Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='num_oracle_queries', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_num_oracle_calls', ctx=Load()))
Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='num_steps', ctx=Store())], value=Name(id='num_steps', ctx=Load()))
Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='num_first_state_steps', ctx=Store())], value=Name(id='num_first_stage_steps', ctx=Load()))
If(test=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()), attr='is_statevector', ctx=Load()), body=[Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='success_probability', ctx=Store())], value=Num(n=1))], orelse=[Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='success_probability', ctx=Store())], value=BinOp(left=Num(n=1), op=Sub(), right=BinOp(left=BinOp(left=BinOp(left=Num(n=2), op=Mult(), right=Attribute(value=Name(id='self', ctx=Load()), attr='_maxiter', ctx=Load())), op=Sub(), right=Name(id='j_0', ctx=Load())), op=Mult(), right=Attribute(value=Name(id='self', ctx=Load()), attr='_delta', ctx=Load()))))])
Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='estimation', ctx=Store())], value=Name(id='value', ctx=Load()))
Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='estimation_processed', ctx=Store())], value=Call(func=Attribute(value=Name(id='problem', ctx=Load()), attr='post_processing', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[]))
Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='confidence_interval', ctx=Store())], value=Name(id='value_ci', ctx=Load()))
Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='confidence_interval_processed', ctx=Store())], value=Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='problem', ctx=Load()), attr='post_processing', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='value_ci', ctx=Load()), ifs=[], is_async=0)])], keywords=[]))
Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='theta_intervals', ctx=Store())], value=Name(id='theta_cis', ctx=Load()))
Assign(targets=[Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='quantum_instance', ctx=Load()), attr='_run_config', ctx=Load()), attr='shots', ctx=Store())], value=Name(id='user_defined_shots', ctx=Load()))
Return(value=Name(id='result', ctx=Load()))
Str(s='FasterAmplitudeEstimationResult')
Load()
Str(s='The result object for the Faster Amplitude Estimation algorithm.')
arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[]))
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_success_probability', ctx=Store())], value=NameConstant(value=None))
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_num_steps', ctx=Store())], value=NameConstant(value=None))
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_num_first_state_steps', ctx=Store())], value=NameConstant(value=None))
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_theta_intervals', ctx=Store())], value=NameConstant(value=None))
NameConstant(value=None)
arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Expr(value=Str(s='Return the success probability of the algorithm.'))
Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_success_probability', ctx=Load()))
Name(id='property', ctx=Load())
Name(id='int', ctx=Load())
arguments(args=[arg(arg='self', annotation=None), arg(arg='probability', annotation=Name(id='int', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Expr(value=Str(s='Set the success probability of the algorithm.'))
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_success_probability', ctx=Store())], value=Name(id='probability', ctx=Load()))
Attribute(value=Name(id='success_probability', ctx=Load()), attr='setter', ctx=Load())
NameConstant(value=None)
arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Expr(value=Str(s='Return the total number of steps taken in the algorithm.'))
Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_num_steps', ctx=Load()))
Name(id='property', ctx=Load())
Name(id='int', ctx=Load())
arguments(args=[arg(arg='self', annotation=None), arg(arg='num_steps', annotation=Name(id='int', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Expr(value=Str(s='Set the total number of steps taken in the algorithm.'))
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_num_steps', ctx=Store())], value=Name(id='num_steps', ctx=Load()))
Attribute(value=Name(id='num_steps', ctx=Load()), attr='setter', ctx=Load())
NameConstant(value=None)
arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Expr(value=Str(s='Return the number of steps taken in the first step of algorithm.'))
Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_num_first_state_steps', ctx=Load()))
Name(id='property', ctx=Load())
Name(id='int', ctx=Load())
arguments(args=[arg(arg='self', annotation=None), arg(arg='num_steps', annotation=Name(id='int', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Expr(value=Str(s='Set the number of steps taken in the first step of algorithm.'))
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_num_first_state_steps', ctx=Store())], value=Name(id='num_steps', ctx=Load()))
Attribute(value=Name(id='num_first_state_steps', ctx=Load()), attr='setter', ctx=Load())
NameConstant(value=None)
arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Expr(value=Str(s='Return the confidence intervals for the angles in each iteration.'))
Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_theta_intervals', ctx=Load()))
Name(id='property', ctx=Load())
Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='float', ctx=Load())), ctx=Load())), ctx=Load())
arguments(args=[arg(arg='self', annotation=None), arg(arg='value', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='float', ctx=Load())), ctx=Load())), ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Expr(value=Str(s='Set the confidence intervals for the angles in each iteration.'))
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_theta_intervals', ctx=Store())], value=Name(id='value', ctx=Load()))
Attribute(value=Name(id='theta_intervals', ctx=Load()), attr='setter', ctx=Load())
NameConstant(value=None)
arg(arg='self', annotation=None)
arg(arg='delta', annotation=Name(id='float', ctx=Load()))
arg(arg='maxiter', annotation=Name(id='int', ctx=Load()))
arg(arg='rescale', annotation=Name(id='bool', ctx=Load()))
arg(arg='quantum_instance', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='QuantumInstance', ctx=Load()), Name(id='Backend', ctx=Load())], ctx=Load())), ctx=Load())), ctx=Load()))
NameConstant(value=True)
NameConstant(value=None)
Str(s='\n        Args:\n            delta: The probability that the true value is outside of the final confidence interval.\n            maxiter: The number of iterations, the maximal power of Q is `2 ** (maxiter - 1)`.\n            rescale: Whether to rescale the problem passed to `estimate`.\n            quantum_instance: The quantum instance or backend to run the circuits.\n\n        .. note::\n\n            This algorithm overwrites the number of shots set in the ``quantum_instance``\n            argument, but will reset them to the initial number after running.\n\n        ')
Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[])
Attribute(value=Name(id='self', ctx=Load()), attr='quantum_instance', ctx=Store())
Name(id='quantum_instance', ctx=Load())
Attribute(value=Name(id='self', ctx=Load()), attr='_shots', ctx=Store())
Tuple(elts=[Call(func=Name(id='int', ctx=Load()), args=[BinOp(left=Num(n=1944), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='log', ctx=Load()), args=[BinOp(left=Num(n=2), op=Div(), right=Name(id='delta', ctx=Load()))], keywords=[]))], keywords=[]), Call(func=Name(id='int', ctx=Load()), args=[BinOp(left=Num(n=972), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='log', ctx=Load()), args=[BinOp(left=Num(n=2), op=Div(), right=Name(id='delta', ctx=Load()))], keywords=[]))], keywords=[])], ctx=Load())
Attribute(value=Name(id='self', ctx=Load()), attr='_rescale', ctx=Store())
Name(id='rescale', ctx=Load())
Attribute(value=Name(id='self', ctx=Load()), attr='_delta', ctx=Store())
Name(id='delta', ctx=Load())
Attribute(value=Name(id='self', ctx=Load()), attr='_maxiter', ctx=Store())
Name(id='maxiter', ctx=Load())
Attribute(value=Name(id='self', ctx=Load()), attr='_num_oracle_calls', ctx=Store())
Num(n=0)
arg(arg='self', annotation=None)
Str(s='Get the quantum instance.\n\n        Returns:\n            The quantum instance used to run this algorithm.\n        ')
Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load())
Load()
Name(id='Optional', ctx=Load())
Index(value=Name(id='QuantumInstance', ctx=Load()))
Load()
arg(arg='self', annotation=None)
arg(arg='quantum_instance', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='QuantumInstance', ctx=Load()), Name(id='Backend', ctx=Load())], ctx=Load())), ctx=Load()))
Str(s='Set quantum instance.\n\n        Args:\n            quantum_instance: The quantum instance used to run this algorithm.\n        ')
Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='quantum_instance', ctx=Load()), Name(id='Backend', ctx=Load())], keywords=[])
Assign(targets=[Name(id='quantum_instance', ctx=Store())], value=Call(func=Name(id='QuantumInstance', ctx=Load()), args=[Name(id='quantum_instance', ctx=Load())], keywords=[]))
Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Store())
Name(id='quantum_instance', ctx=Load())
Name(id='quantum_instance', ctx=Load())
Load()
arg(arg='self', annotation=None)
arg(arg='estimation_problem', annotation=None)
arg(arg='k', annotation=None)
arg(arg='shots', annotation=None)
Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()), ops=[Is()], comparators=[NameConstant(value=None)])
Raise(exc=Call(func=Name(id='AlgorithmError', ctx=Load()), args=[Str(s='Quantum instance must be set.')], keywords=[]), cause=None)
Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()), attr='is_statevector', ctx=Load())
Assign(targets=[Name(id='circuit', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='construct_circuit', ctx=Load()), args=[Name(id='estimation_problem', ctx=Load()), Name(id='k', ctx=Load())], keywords=[keyword(arg='measurement', value=NameConstant(value=False))]))
Assign(targets=[Name(id='statevector', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()), attr='execute', ctx=Load()), args=[Name(id='circuit', ctx=Load())], keywords=[]), attr='get_statevector', ctx=Load()), args=[], keywords=[]))
Assign(targets=[Name(id='prob', ctx=Store())], value=Num(n=0))
For(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='amplitude', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='statevector', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='full_state', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Subscript(value=Call(func=Name(id='bin', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]), slice=Slice(lower=Num(n=2), upper=None, step=None), ctx=Load()), attr='zfill', ctx=Load()), args=[Attribute(value=Name(id='circuit', ctx=Load()), attr='num_qubits', ctx=Load())], keywords=[]), slice=Slice(lower=None, upper=None, step=UnaryOp(op=USub(), operand=Num(n=1))), ctx=Load())), Assign(targets=[Name(id='state', ctx=Store())], value=Call(func=Attribute(value=Str(s=''), attr='join', ctx=Load()), args=[ListComp(elt=Subscript(value=Name(id='full_state', ctx=Load()), slice=Index(value=Name(id='i', ctx=Load())), ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='objective_qubits', ctx=Load()), ifs=[], is_async=0)])], keywords=[])), If(test=Call(func=Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='is_good_state', ctx=Load()), args=[Subscript(value=Name(id='state', ctx=Load()), slice=Slice(lower=None, upper=None, step=UnaryOp(op=USub(), operand=Num(n=1))), ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='prob', ctx=Store())], value=BinOp(left=Name(id='prob', ctx=Load()), op=Add(), right=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='abs', ctx=Load()), args=[Name(id='amplitude', ctx=Load())], keywords=[]), op=Pow(), right=Num(n=2))))], orelse=[])], orelse=[])
Assign(targets=[Name(id='cos_estimate', ctx=Store())], value=BinOp(left=Num(n=1), op=Sub(), right=BinOp(left=Num(n=2), op=Mult(), right=Name(id='prob', ctx=Load()))))
Assign(targets=[Name(id='circuit', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='construct_circuit', ctx=Load()), args=[Name(id='estimation_problem', ctx=Load()), Name(id='k', ctx=Load())], keywords=[keyword(arg='measurement', value=NameConstant(value=True))]))
Assign(targets=[Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()), attr='run_config', ctx=Load()), attr='shots', ctx=Store())], value=Name(id='shots', ctx=Load()))
Assign(targets=[Name(id='counts', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()), attr='execute', ctx=Load()), args=[Name(id='circuit', ctx=Load())], keywords=[]), attr='get_counts', ctx=Load()), args=[], keywords=[]))
AugAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_num_oracle_calls', ctx=Store()), op=Add(), value=BinOp(left=BinOp(left=BinOp(left=Num(n=2), op=Mult(), right=Name(id='k', ctx=Load())), op=Add(), right=Num(n=1)), op=Mult(), right=Name(id='shots', ctx=Load())))
Assign(targets=[Name(id='good_counts', ctx=Store())], value=Num(n=0))
For(target=Tuple(elts=[Name(id='state', ctx=Store()), Name(id='count', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='counts', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[If(test=Call(func=Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='is_good_state', ctx=Load()), args=[Name(id='state', ctx=Load())], keywords=[]), body=[AugAssign(target=Name(id='good_counts', ctx=Store()), op=Add(), value=Name(id='count', ctx=Load()))], orelse=[])], orelse=[])
Assign(targets=[Name(id='cos_estimate', ctx=Store())], value=BinOp(left=Num(n=1), op=Sub(), right=BinOp(left=BinOp(left=Num(n=2), op=Mult(), right=Name(id='good_counts', ctx=Load())), op=Div(), right=Name(id='shots', ctx=Load()))))
Name(id='cos_estimate', ctx=Load())
arg(arg='self', annotation=None)
arg(arg='cos', annotation=None)
arg(arg='shots', annotation=None)
Name(id='width', ctx=Store())
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sqrt', ctx=Load()), args=[BinOp(left=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='log', ctx=Load()), args=[BinOp(left=Num(n=2), op=Div(), right=Attribute(value=Name(id='self', ctx=Load()), attr='_delta', ctx=Load()))], keywords=[]), op=Mult(), right=Num(n=12)), op=Div(), right=Name(id='shots', ctx=Load()))], keywords=[])
Name(id='confint', ctx=Store())
List(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='maximum', ctx=Load()), args=[UnaryOp(op=USub(), operand=Num(n=1)), BinOp(left=Name(id='cos', ctx=Load()), op=Sub(), right=Name(id='width', ctx=Load()))], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='minimum', ctx=Load()), args=[Num(n=1), BinOp(left=Name(id='cos', ctx=Load()), op=Add(), right=Name(id='width', ctx=Load()))], keywords=[])], ctx=Load())
Name(id='confint', ctx=Load())
arg(arg='self', annotation=None)
arg(arg='estimation_problem', annotation=Name(id='EstimationProblem', ctx=Load()))
arg(arg='k', annotation=Name(id='int', ctx=Load()))
arg(arg='measurement', annotation=Name(id='bool', ctx=Load()))
NameConstant(value=False)
Str(s='Construct the circuit :math:`Q^k X |0\\rangle>`.\n\n        The A operator is the unitary specifying the QAE problem and Q the associated Grover\n        operator.\n\n        Args:\n            estimation_problem: The estimation problem for which to construct the circuit.\n            k: The power of the Q operator.\n            measurement: Boolean flag to indicate if measurements should be included in the\n                circuits.\n\n        Returns:\n            The circuit :math:`Q^k X |0\\rangle`.\n        ')
Name(id='num_qubits', ctx=Store())
Call(func=Name(id='max', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='state_preparation', ctx=Load()), attr='num_qubits', ctx=Load()), Attribute(value=Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='grover_operator', ctx=Load()), attr='num_qubits', ctx=Load())], keywords=[])
Name(id='circuit', ctx=Store())
Call(func=Name(id='QuantumCircuit', ctx=Load()), args=[Name(id='num_qubits', ctx=Load())], keywords=[keyword(arg='name', value=Str(s='circuit'))])
Name(id='measurement', ctx=Load())
Assign(targets=[Name(id='c', ctx=Store())], value=Call(func=Name(id='ClassicalRegister', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='objective_qubits', ctx=Load())], keywords=[])], keywords=[]))
Expr(value=Call(func=Attribute(value=Name(id='circuit', ctx=Load()), attr='add_register', ctx=Load()), args=[Name(id='c', ctx=Load())], keywords=[]))
Call(func=Attribute(value=Name(id='circuit', ctx=Load()), attr='compose', ctx=Load()), args=[Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='state_preparation', ctx=Load())], keywords=[keyword(arg='inplace', value=NameConstant(value=True))])
Compare(left=Name(id='k', ctx=Load()), ops=[NotEq()], comparators=[Num(n=0)])
Expr(value=Call(func=Attribute(value=Name(id='circuit', ctx=Load()), attr='compose', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='grover_operator', ctx=Load()), attr='power', ctx=Load()), args=[Name(id='k', ctx=Load())], keywords=[])], keywords=[keyword(arg='inplace', value=NameConstant(value=True))]))
Name(id='measurement', ctx=Load())
Expr(value=Call(func=Attribute(value=Name(id='circuit', ctx=Load()), attr='barrier', ctx=Load()), args=[], keywords=[]))
Expr(value=Call(func=Attribute(value=Name(id='circuit', ctx=Load()), attr='measure', ctx=Load()), args=[Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='objective_qubits', ctx=Load()), Subscript(value=Name(id='c', ctx=Load()), slice=Slice(lower=None, upper=None, step=None), ctx=Load())], keywords=[]))
Name(id='circuit', ctx=Load())
Name(id='Union', ctx=Load())
Index(value=Tuple(elts=[Name(id='QuantumCircuit', ctx=Load()), Subscript(value=Name(id='Tuple', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='QuantumCircuit', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='int', ctx=Load())), ctx=Load())], ctx=Load())), ctx=Load())], ctx=Load()))
Load()
arg(arg='self', annotation=None)
arg(arg='estimation_problem', annotation=Name(id='EstimationProblem', ctx=Load()))
Attribute(value=Name(id='self', ctx=Load()), attr='_num_oracle_calls', ctx=Store())
Num(n=0)
Name(id='user_defined_shots', ctx=Store())
Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='quantum_instance', ctx=Load()), attr='_run_config', ctx=Load()), attr='shots', ctx=Load())
Attribute(value=Name(id='self', ctx=Load()), attr='_rescale', ctx=Load())
Assign(targets=[Name(id='problem', ctx=Store())], value=Call(func=Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='rescale', ctx=Load()), args=[Num(n=0.25)], keywords=[]))
Assign(targets=[Name(id='problem', ctx=Store())], value=Name(id='estimation_problem', ctx=Load()))
Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()), attr='is_statevector', ctx=Load())
Assign(targets=[Name(id='cos', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_cos_estimate', ctx=Load()), args=[Name(id='problem', ctx=Load())], keywords=[keyword(arg='k', value=Num(n=0)), keyword(arg='shots', value=Num(n=1))]))
Assign(targets=[Name(id='theta', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='arccos', ctx=Load()), args=[Name(id='cos', ctx=Load())], keywords=[]), op=Div(), right=Num(n=2)))
Assign(targets=[Name(id='theta_ci', ctx=Store())], value=List(elts=[Name(id='theta', ctx=Load()), Name(id='theta', ctx=Load())], ctx=Load()))
Assign(targets=[Name(id='theta_cis', ctx=Store())], value=List(elts=[Name(id='theta_ci', ctx=Load())], ctx=Load()))
Assign(targets=[Name(id='num_steps', ctx=Store()), Name(id='num_first_stage_steps', ctx=Store())], value=Num(n=1))
Assign(targets=[Name(id='theta_ci', ctx=Store())], value=List(elts=[Num(n=0), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='arcsin', ctx=Load()), args=[Num(n=0.25)], keywords=[])], ctx=Load()))
Assign(targets=[Name(id='first_stage', ctx=Store())], value=NameConstant(value=True))
Assign(targets=[Name(id='j_0', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_maxiter', ctx=Load()))
Assign(targets=[Name(id='theta_cis', ctx=Store())], value=List(elts=[Name(id='theta_ci', ctx=Load())], ctx=Load()))
Assign(targets=[Name(id='num_first_stage_steps', ctx=Store())], value=Num(n=0))
Assign(targets=[Name(id='num_steps', ctx=Store())], value=Num(n=0))
FunctionDef(name='cos_estimate', args=arguments(args=[arg(arg='power', annotation=None), arg(arg='shots', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_cos_estimate', ctx=Load()), args=[Name(id='problem', ctx=Load()), Name(id='power', ctx=Load()), Name(id='shots', ctx=Load())], keywords=[]))], decorator_list=[], returns=None)
For(target=Name(id='j', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Num(n=1), BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='_maxiter', ctx=Load()), op=Add(), right=Num(n=1))], keywords=[]), body=[AugAssign(target=Name(id='num_steps', ctx=Store()), op=Add(), value=Num(n=1)), If(test=Name(id='first_stage', ctx=Load()), body=[AugAssign(target=Name(id='num_first_stage_steps', ctx=Store()), op=Add(), value=Num(n=1)), Assign(targets=[Name(id='c', ctx=Store())], value=Call(func=Name(id='cos_estimate', ctx=Load()), args=[BinOp(left=Num(n=2), op=Pow(), right=BinOp(left=Name(id='j', ctx=Load()), op=Sub(), right=Num(n=1))), Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_shots', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())], keywords=[])), Assign(targets=[Name(id='chernoff_ci', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_chernoff', ctx=Load()), args=[Name(id='c', ctx=Load()), Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_shots', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())], keywords=[])), Assign(targets=[Name(id='theta_ci', ctx=Store())], value=ListComp(elt=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='arccos', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), op=Div(), right=BinOp(left=BinOp(left=Num(n=2), op=Pow(), right=BinOp(left=Name(id='j', ctx=Load()), op=Add(), right=Num(n=1))), op=Add(), right=Num(n=2))), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='chernoff_ci', ctx=Load()), slice=Slice(lower=None, upper=None, step=UnaryOp(op=USub(), operand=Num(n=1))), ctx=Load()), ifs=[], is_async=0)])), If(test=BoolOp(op=And(), values=[Compare(left=BinOp(left=BinOp(left=Num(n=2), op=Pow(), right=BinOp(left=Name(id='j', ctx=Load()), op=Add(), right=Num(n=1))), op=Mult(), right=Subscript(value=Name(id='theta_ci', ctx=Load()), slice=Index(value=Num(n=1)), ctx=Load())), ops=[GtE()], comparators=[BinOp(left=BinOp(left=Num(n=3), op=Mult(), right=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load())), op=Div(), right=Num(n=8))]), Compare(left=Name(id='j', ctx=Load()), ops=[Lt()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='_maxiter', ctx=Load())])]), body=[Assign(targets=[Name(id='j_0', ctx=Store())], value=Name(id='j', ctx=Load())), Assign(targets=[Name(id='v', ctx=Store())], value=BinOp(left=BinOp(left=Num(n=2), op=Pow(), right=Name(id='j', ctx=Load())), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sum', ctx=Load()), args=[Name(id='theta_ci', ctx=Load())], keywords=[]))), Assign(targets=[Name(id='first_stage', ctx=Store())], value=NameConstant(value=False))], orelse=[])], orelse=[Assign(targets=[Name(id='cos', ctx=Store())], value=Call(func=Name(id='cos_estimate', ctx=Load()), args=[BinOp(left=Num(n=2), op=Pow(), right=BinOp(left=Name(id='j', ctx=Load()), op=Sub(), right=Num(n=1))), Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_shots', ctx=Load()), slice=Index(value=Num(n=1)), ctx=Load())], keywords=[])), Assign(targets=[Name(id='cos_2', ctx=Store())], value=Call(func=Name(id='cos_estimate', ctx=Load()), args=[BinOp(left=BinOp(left=Num(n=2), op=Pow(), right=BinOp(left=Name(id='j', ctx=Load()), op=Sub(), right=Num(n=1))), op=Add(), right=BinOp(left=Num(n=2), op=Pow(), right=BinOp(left=Name(id='j_0', ctx=Load()), op=Sub(), right=Num(n=1)))), Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_shots', ctx=Load()), slice=Index(value=Num(n=1)), ctx=Load())], keywords=[])), Assign(targets=[Name(id='sin', ctx=Store())], value=BinOp(left=BinOp(left=BinOp(left=Name(id='cos', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='cos', ctx=Load()), args=[Name(id='v', ctx=Load())], keywords=[])), op=Sub(), right=Name(id='cos_2', ctx=Load())), op=Div(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[Name(id='v', ctx=Load())], keywords=[]))), Assign(targets=[Name(id='rho', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='arctan2', ctx=Load()), args=[Name(id='sin', ctx=Load()), Name(id='cos', ctx=Load())], keywords=[])), Assign(targets=[Name(id='n', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Num(n=2), op=Pow(), right=BinOp(left=Name(id='j', ctx=Load()), op=Add(), right=Num(n=1))), op=Add(), right=Num(n=2)), op=Mult(), right=Subscript(value=Name(id='theta_ci', ctx=Load()), slice=Index(value=Num(n=1)), ctx=Load())), op=Sub(), right=Name(id='rho', ctx=Load())), op=Add(), right=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Div(), right=Num(n=3))), op=Div(), right=BinOp(left=Num(n=2), op=Mult(), right=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load())))], keywords=[])), Assign(targets=[Name(id='theta_ci', ctx=Store())], value=ListComp(elt=BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Num(n=2), op=Mult(), right=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load())), op=Mult(), right=Name(id='n', ctx=Load())), op=Add(), right=Name(id='rho', ctx=Load())), op=Add(), right=BinOp(left=BinOp(left=Name(id='sign', ctx=Load()), op=Mult(), right=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load())), op=Div(), right=Num(n=3))), op=Div(), right=BinOp(left=BinOp(left=Num(n=2), op=Pow(), right=BinOp(left=Name(id='j', ctx=Load()), op=Add(), right=Num(n=1))), op=Add(), right=Num(n=2))), generators=[comprehension(target=Name(id='sign', ctx=Store()), iter=List(elts=[UnaryOp(op=USub(), operand=Num(n=1)), Num(n=1)], ctx=Load()), ifs=[], is_async=0)]))]), Expr(value=Call(func=Attribute(value=Name(id='theta_cis', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='theta_ci', ctx=Load())], keywords=[]))], orelse=[])
Name(id='theta', ctx=Store())
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='mean', ctx=Load()), args=[Name(id='theta_ci', ctx=Load())], keywords=[])
Name(id='rescaling', ctx=Store())
IfExp(test=Attribute(value=Name(id='self', ctx=Load()), attr='_rescale', ctx=Load()), body=Num(n=4), orelse=Num(n=1))
Name(id='value', ctx=Store())
BinOp(left=BinOp(left=Name(id='rescaling', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[Name(id='theta', ctx=Load())], keywords=[])), op=Pow(), right=Num(n=2))
Name(id='value_ci', ctx=Store())
ListComp(elt=BinOp(left=BinOp(left=Name(id='rescaling', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[])), op=Pow(), right=Num(n=2)), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='theta_ci', ctx=Load()), ifs=[], is_async=0)])
Name(id='result', ctx=Store())
Call(func=Name(id='FasterAmplitudeEstimationResult', ctx=Load()), args=[], keywords=[])
Attribute(value=Name(id='result', ctx=Load()), attr='num_oracle_queries', ctx=Store())
Attribute(value=Name(id='self', ctx=Load()), attr='_num_oracle_calls', ctx=Load())
Attribute(value=Name(id='result', ctx=Load()), attr='num_steps', ctx=Store())
Name(id='num_steps', ctx=Load())
Attribute(value=Name(id='result', ctx=Load()), attr='num_first_state_steps', ctx=Store())
Name(id='num_first_stage_steps', ctx=Load())
Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()), attr='is_statevector', ctx=Load())
Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='success_probability', ctx=Store())], value=Num(n=1))
Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='success_probability', ctx=Store())], value=BinOp(left=Num(n=1), op=Sub(), right=BinOp(left=BinOp(left=BinOp(left=Num(n=2), op=Mult(), right=Attribute(value=Name(id='self', ctx=Load()), attr='_maxiter', ctx=Load())), op=Sub(), right=Name(id='j_0', ctx=Load())), op=Mult(), right=Attribute(value=Name(id='self', ctx=Load()), attr='_delta', ctx=Load()))))
Attribute(value=Name(id='result', ctx=Load()), attr='estimation', ctx=Store())
Name(id='value', ctx=Load())
Attribute(value=Name(id='result', ctx=Load()), attr='estimation_processed', ctx=Store())
Call(func=Attribute(value=Name(id='problem', ctx=Load()), attr='post_processing', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[])
Attribute(value=Name(id='result', ctx=Load()), attr='confidence_interval', ctx=Store())
Name(id='value_ci', ctx=Load())
Attribute(value=Name(id='result', ctx=Load()), attr='confidence_interval_processed', ctx=Store())
Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='problem', ctx=Load()), attr='post_processing', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='value_ci', ctx=Load()), ifs=[], is_async=0)])], keywords=[])
Attribute(value=Name(id='result', ctx=Load()), attr='theta_intervals', ctx=Store())
Name(id='theta_cis', ctx=Load())
Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='quantum_instance', ctx=Load()), attr='_run_config', ctx=Load()), attr='shots', ctx=Store())
Name(id='user_defined_shots', ctx=Load())
Name(id='result', ctx=Load())
arg(arg='self', annotation=None)
Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[])
Attribute(value=Name(id='self', ctx=Load()), attr='_success_probability', ctx=Store())
NameConstant(value=None)
Attribute(value=Name(id='self', ctx=Load()), attr='_num_steps', ctx=Store())
NameConstant(value=None)
Attribute(value=Name(id='self', ctx=Load()), attr='_num_first_state_steps', ctx=Store())
NameConstant(value=None)
Attribute(value=Name(id='self', ctx=Load()), attr='_theta_intervals', ctx=Store())
NameConstant(value=None)
arg(arg='self', annotation=None)
Str(s='Return the success probability of the algorithm.')
Attribute(value=Name(id='self', ctx=Load()), attr='_success_probability', ctx=Load())
Load()
Load()
arg(arg='self', annotation=None)
arg(arg='probability', annotation=Name(id='int', ctx=Load()))
Str(s='Set the success probability of the algorithm.')
Attribute(value=Name(id='self', ctx=Load()), attr='_success_probability', ctx=Store())
Name(id='probability', ctx=Load())
Name(id='success_probability', ctx=Load())
Load()
arg(arg='self', annotation=None)
Str(s='Return the total number of steps taken in the algorithm.')
Attribute(value=Name(id='self', ctx=Load()), attr='_num_steps', ctx=Load())
Load()
Load()
arg(arg='self', annotation=None)
arg(arg='num_steps', annotation=Name(id='int', ctx=Load()))
Str(s='Set the total number of steps taken in the algorithm.')
Attribute(value=Name(id='self', ctx=Load()), attr='_num_steps', ctx=Store())
Name(id='num_steps', ctx=Load())
Name(id='num_steps', ctx=Load())
Load()
arg(arg='self', annotation=None)
Str(s='Return the number of steps taken in the first step of algorithm.')
Attribute(value=Name(id='self', ctx=Load()), attr='_num_first_state_steps', ctx=Load())
Load()
Load()
arg(arg='self', annotation=None)
arg(arg='num_steps', annotation=Name(id='int', ctx=Load()))
Str(s='Set the number of steps taken in the first step of algorithm.')
Attribute(value=Name(id='self', ctx=Load()), attr='_num_first_state_steps', ctx=Store())
Name(id='num_steps', ctx=Load())
Name(id='num_first_state_steps', ctx=Load())
Load()
arg(arg='self', annotation=None)
Str(s='Return the confidence intervals for the angles in each iteration.')
Attribute(value=Name(id='self', ctx=Load()), attr='_theta_intervals', ctx=Load())
Load()
Name(id='List', ctx=Load())
Index(value=Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='float', ctx=Load())), ctx=Load()))
Load()
arg(arg='self', annotation=None)
arg(arg='value', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='float', ctx=Load())), ctx=Load())), ctx=Load()))
Str(s='Set the confidence intervals for the angles in each iteration.')
Attribute(value=Name(id='self', ctx=Load()), attr='_theta_intervals', ctx=Store())
Name(id='value', ctx=Load())
Name(id='theta_intervals', ctx=Load())
Load()
Name(id='float', ctx=Load())
Name(id='int', ctx=Load())
Name(id='bool', ctx=Load())
Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='QuantumInstance', ctx=Load()), Name(id='Backend', ctx=Load())], ctx=Load())), ctx=Load())), ctx=Load())
Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load())
Name(id='self', ctx=Load())
Store()
Load()
Name(id='self', ctx=Load())
Store()
Call(func=Name(id='int', ctx=Load()), args=[BinOp(left=Num(n=1944), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='log', ctx=Load()), args=[BinOp(left=Num(n=2), op=Div(), right=Name(id='delta', ctx=Load()))], keywords=[]))], keywords=[])
Call(func=Name(id='int', ctx=Load()), args=[BinOp(left=Num(n=972), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='log', ctx=Load()), args=[BinOp(left=Num(n=2), op=Div(), right=Name(id='delta', ctx=Load()))], keywords=[]))], keywords=[])
Load()
Name(id='self', ctx=Load())
Store()
Load()
Name(id='self', ctx=Load())
Store()
Load()
Name(id='self', ctx=Load())
Store()
Load()
Name(id='self', ctx=Load())
Store()
Name(id='self', ctx=Load())
Load()
Load()
Name(id='QuantumInstance', ctx=Load())
Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='QuantumInstance', ctx=Load()), Name(id='Backend', ctx=Load())], ctx=Load())), ctx=Load())
Name(id='isinstance', ctx=Load())
Name(id='quantum_instance', ctx=Load())
Name(id='Backend', ctx=Load())
Name(id='quantum_instance', ctx=Store())
Call(func=Name(id='QuantumInstance', ctx=Load()), args=[Name(id='quantum_instance', ctx=Load())], keywords=[])
Name(id='self', ctx=Load())
Store()
Load()
Load()
Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load())
Is()
NameConstant(value=None)
Call(func=Name(id='AlgorithmError', ctx=Load()), args=[Str(s='Quantum instance must be set.')], keywords=[])
Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load())
Load()
Name(id='circuit', ctx=Store())
Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='construct_circuit', ctx=Load()), args=[Name(id='estimation_problem', ctx=Load()), Name(id='k', ctx=Load())], keywords=[keyword(arg='measurement', value=NameConstant(value=False))])
Name(id='statevector', ctx=Store())
Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()), attr='execute', ctx=Load()), args=[Name(id='circuit', ctx=Load())], keywords=[]), attr='get_statevector', ctx=Load()), args=[], keywords=[])
Name(id='prob', ctx=Store())
Num(n=0)
Tuple(elts=[Name(id='i', ctx=Store()), Name(id='amplitude', ctx=Store())], ctx=Store())
Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='statevector', ctx=Load())], keywords=[])
Assign(targets=[Name(id='full_state', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Subscript(value=Call(func=Name(id='bin', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]), slice=Slice(lower=Num(n=2), upper=None, step=None), ctx=Load()), attr='zfill', ctx=Load()), args=[Attribute(value=Name(id='circuit', ctx=Load()), attr='num_qubits', ctx=Load())], keywords=[]), slice=Slice(lower=None, upper=None, step=UnaryOp(op=USub(), operand=Num(n=1))), ctx=Load()))
Assign(targets=[Name(id='state', ctx=Store())], value=Call(func=Attribute(value=Str(s=''), attr='join', ctx=Load()), args=[ListComp(elt=Subscript(value=Name(id='full_state', ctx=Load()), slice=Index(value=Name(id='i', ctx=Load())), ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='objective_qubits', ctx=Load()), ifs=[], is_async=0)])], keywords=[]))
If(test=Call(func=Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='is_good_state', ctx=Load()), args=[Subscript(value=Name(id='state', ctx=Load()), slice=Slice(lower=None, upper=None, step=UnaryOp(op=USub(), operand=Num(n=1))), ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='prob', ctx=Store())], value=BinOp(left=Name(id='prob', ctx=Load()), op=Add(), right=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='abs', ctx=Load()), args=[Name(id='amplitude', ctx=Load())], keywords=[]), op=Pow(), right=Num(n=2))))], orelse=[])
Name(id='cos_estimate', ctx=Store())
BinOp(left=Num(n=1), op=Sub(), right=BinOp(left=Num(n=2), op=Mult(), right=Name(id='prob', ctx=Load())))
Name(id='circuit', ctx=Store())
Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='construct_circuit', ctx=Load()), args=[Name(id='estimation_problem', ctx=Load()), Name(id='k', ctx=Load())], keywords=[keyword(arg='measurement', value=NameConstant(value=True))])
Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()), attr='run_config', ctx=Load()), attr='shots', ctx=Store())
Name(id='shots', ctx=Load())
Name(id='counts', ctx=Store())
Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()), attr='execute', ctx=Load()), args=[Name(id='circuit', ctx=Load())], keywords=[]), attr='get_counts', ctx=Load()), args=[], keywords=[])
Attribute(value=Name(id='self', ctx=Load()), attr='_num_oracle_calls', ctx=Store())
Add()
BinOp(left=BinOp(left=BinOp(left=Num(n=2), op=Mult(), right=Name(id='k', ctx=Load())), op=Add(), right=Num(n=1)), op=Mult(), right=Name(id='shots', ctx=Load()))
Name(id='good_counts', ctx=Store())
Num(n=0)
Tuple(elts=[Name(id='state', ctx=Store()), Name(id='count', ctx=Store())], ctx=Store())
Call(func=Attribute(value=Name(id='counts', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])
If(test=Call(func=Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='is_good_state', ctx=Load()), args=[Name(id='state', ctx=Load())], keywords=[]), body=[AugAssign(target=Name(id='good_counts', ctx=Store()), op=Add(), value=Name(id='count', ctx=Load()))], orelse=[])
Name(id='cos_estimate', ctx=Store())
BinOp(left=Num(n=1), op=Sub(), right=BinOp(left=BinOp(left=Num(n=2), op=Mult(), right=Name(id='good_counts', ctx=Load())), op=Div(), right=Name(id='shots', ctx=Load())))
Load()
Store()
Attribute(value=Name(id='np', ctx=Load()), attr='sqrt', ctx=Load())
BinOp(left=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='log', ctx=Load()), args=[BinOp(left=Num(n=2), op=Div(), right=Attribute(value=Name(id='self', ctx=Load()), attr='_delta', ctx=Load()))], keywords=[]), op=Mult(), right=Num(n=12)), op=Div(), right=Name(id='shots', ctx=Load()))
Store()
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='maximum', ctx=Load()), args=[UnaryOp(op=USub(), operand=Num(n=1)), BinOp(left=Name(id='cos', ctx=Load()), op=Sub(), right=Name(id='width', ctx=Load()))], keywords=[])
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='minimum', ctx=Load()), args=[Num(n=1), BinOp(left=Name(id='cos', ctx=Load()), op=Add(), right=Name(id='width', ctx=Load()))], keywords=[])
Load()
Load()
Name(id='EstimationProblem', ctx=Load())
Name(id='int', ctx=Load())
Name(id='bool', ctx=Load())
Store()
Name(id='max', ctx=Load())
Attribute(value=Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='state_preparation', ctx=Load()), attr='num_qubits', ctx=Load())
Attribute(value=Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='grover_operator', ctx=Load()), attr='num_qubits', ctx=Load())
Store()
Name(id='QuantumCircuit', ctx=Load())
Name(id='num_qubits', ctx=Load())
keyword(arg='name', value=Str(s='circuit'))
Load()
Name(id='c', ctx=Store())
Call(func=Name(id='ClassicalRegister', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='objective_qubits', ctx=Load())], keywords=[])], keywords=[])
Call(func=Attribute(value=Name(id='circuit', ctx=Load()), attr='add_register', ctx=Load()), args=[Name(id='c', ctx=Load())], keywords=[])
Attribute(value=Name(id='circuit', ctx=Load()), attr='compose', ctx=Load())
Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='state_preparation', ctx=Load())
keyword(arg='inplace', value=NameConstant(value=True))
Name(id='k', ctx=Load())
NotEq()
Num(n=0)
Call(func=Attribute(value=Name(id='circuit', ctx=Load()), attr='compose', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='grover_operator', ctx=Load()), attr='power', ctx=Load()), args=[Name(id='k', ctx=Load())], keywords=[])], keywords=[keyword(arg='inplace', value=NameConstant(value=True))])
Load()
Call(func=Attribute(value=Name(id='circuit', ctx=Load()), attr='barrier', ctx=Load()), args=[], keywords=[])
Call(func=Attribute(value=Name(id='circuit', ctx=Load()), attr='measure', ctx=Load()), args=[Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='objective_qubits', ctx=Load()), Subscript(value=Name(id='c', ctx=Load()), slice=Slice(lower=None, upper=None, step=None), ctx=Load())], keywords=[])
Load()
Load()
Tuple(elts=[Name(id='QuantumCircuit', ctx=Load()), Subscript(value=Name(id='Tuple', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='QuantumCircuit', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='int', ctx=Load())), ctx=Load())], ctx=Load())), ctx=Load())], ctx=Load())
Name(id='EstimationProblem', ctx=Load())
Name(id='self', ctx=Load())
Store()
Store()
Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='quantum_instance', ctx=Load()), attr='_run_config', ctx=Load())
Load()
Name(id='self', ctx=Load())
Load()
Name(id='problem', ctx=Store())
Call(func=Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='rescale', ctx=Load()), args=[Num(n=0.25)], keywords=[])
Name(id='problem', ctx=Store())
Name(id='estimation_problem', ctx=Load())
Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load())
Load()
Name(id='cos', ctx=Store())
Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_cos_estimate', ctx=Load()), args=[Name(id='problem', ctx=Load())], keywords=[keyword(arg='k', value=Num(n=0)), keyword(arg='shots', value=Num(n=1))])
Name(id='theta', ctx=Store())
BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='arccos', ctx=Load()), args=[Name(id='cos', ctx=Load())], keywords=[]), op=Div(), right=Num(n=2))
Name(id='theta_ci', ctx=Store())
List(elts=[Name(id='theta', ctx=Load()), Name(id='theta', ctx=Load())], ctx=Load())
Name(id='theta_cis', ctx=Store())
List(elts=[Name(id='theta_ci', ctx=Load())], ctx=Load())
Name(id='num_steps', ctx=Store())
Name(id='num_first_stage_steps', ctx=Store())
Num(n=1)
Name(id='theta_ci', ctx=Store())
List(elts=[Num(n=0), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='arcsin', ctx=Load()), args=[Num(n=0.25)], keywords=[])], ctx=Load())
Name(id='first_stage', ctx=Store())
NameConstant(value=True)
Name(id='j_0', ctx=Store())
Attribute(value=Name(id='self', ctx=Load()), attr='_maxiter', ctx=Load())
Name(id='theta_cis', ctx=Store())
List(elts=[Name(id='theta_ci', ctx=Load())], ctx=Load())
Name(id='num_first_stage_steps', ctx=Store())
Num(n=0)
Name(id='num_steps', ctx=Store())
Num(n=0)
arguments(args=[arg(arg='power', annotation=None), arg(arg='shots', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_cos_estimate', ctx=Load()), args=[Name(id='problem', ctx=Load()), Name(id='power', ctx=Load()), Name(id='shots', ctx=Load())], keywords=[]))
Name(id='j', ctx=Store())
Call(func=Name(id='range', ctx=Load()), args=[Num(n=1), BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='_maxiter', ctx=Load()), op=Add(), right=Num(n=1))], keywords=[])
AugAssign(target=Name(id='num_steps', ctx=Store()), op=Add(), value=Num(n=1))
If(test=Name(id='first_stage', ctx=Load()), body=[AugAssign(target=Name(id='num_first_stage_steps', ctx=Store()), op=Add(), value=Num(n=1)), Assign(targets=[Name(id='c', ctx=Store())], value=Call(func=Name(id='cos_estimate', ctx=Load()), args=[BinOp(left=Num(n=2), op=Pow(), right=BinOp(left=Name(id='j', ctx=Load()), op=Sub(), right=Num(n=1))), Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_shots', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())], keywords=[])), Assign(targets=[Name(id='chernoff_ci', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_chernoff', ctx=Load()), args=[Name(id='c', ctx=Load()), Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_shots', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())], keywords=[])), Assign(targets=[Name(id='theta_ci', ctx=Store())], value=ListComp(elt=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='arccos', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), op=Div(), right=BinOp(left=BinOp(left=Num(n=2), op=Pow(), right=BinOp(left=Name(id='j', ctx=Load()), op=Add(), right=Num(n=1))), op=Add(), right=Num(n=2))), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='chernoff_ci', ctx=Load()), slice=Slice(lower=None, upper=None, step=UnaryOp(op=USub(), operand=Num(n=1))), ctx=Load()), ifs=[], is_async=0)])), If(test=BoolOp(op=And(), values=[Compare(left=BinOp(left=BinOp(left=Num(n=2), op=Pow(), right=BinOp(left=Name(id='j', ctx=Load()), op=Add(), right=Num(n=1))), op=Mult(), right=Subscript(value=Name(id='theta_ci', ctx=Load()), slice=Index(value=Num(n=1)), ctx=Load())), ops=[GtE()], comparators=[BinOp(left=BinOp(left=Num(n=3), op=Mult(), right=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load())), op=Div(), right=Num(n=8))]), Compare(left=Name(id='j', ctx=Load()), ops=[Lt()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='_maxiter', ctx=Load())])]), body=[Assign(targets=[Name(id='j_0', ctx=Store())], value=Name(id='j', ctx=Load())), Assign(targets=[Name(id='v', ctx=Store())], value=BinOp(left=BinOp(left=Num(n=2), op=Pow(), right=Name(id='j', ctx=Load())), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sum', ctx=Load()), args=[Name(id='theta_ci', ctx=Load())], keywords=[]))), Assign(targets=[Name(id='first_stage', ctx=Store())], value=NameConstant(value=False))], orelse=[])], orelse=[Assign(targets=[Name(id='cos', ctx=Store())], value=Call(func=Name(id='cos_estimate', ctx=Load()), args=[BinOp(left=Num(n=2), op=Pow(), right=BinOp(left=Name(id='j', ctx=Load()), op=Sub(), right=Num(n=1))), Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_shots', ctx=Load()), slice=Index(value=Num(n=1)), ctx=Load())], keywords=[])), Assign(targets=[Name(id='cos_2', ctx=Store())], value=Call(func=Name(id='cos_estimate', ctx=Load()), args=[BinOp(left=BinOp(left=Num(n=2), op=Pow(), right=BinOp(left=Name(id='j', ctx=Load()), op=Sub(), right=Num(n=1))), op=Add(), right=BinOp(left=Num(n=2), op=Pow(), right=BinOp(left=Name(id='j_0', ctx=Load()), op=Sub(), right=Num(n=1)))), Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_shots', ctx=Load()), slice=Index(value=Num(n=1)), ctx=Load())], keywords=[])), Assign(targets=[Name(id='sin', ctx=Store())], value=BinOp(left=BinOp(left=BinOp(left=Name(id='cos', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='cos', ctx=Load()), args=[Name(id='v', ctx=Load())], keywords=[])), op=Sub(), right=Name(id='cos_2', ctx=Load())), op=Div(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[Name(id='v', ctx=Load())], keywords=[]))), Assign(targets=[Name(id='rho', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='arctan2', ctx=Load()), args=[Name(id='sin', ctx=Load()), Name(id='cos', ctx=Load())], keywords=[])), Assign(targets=[Name(id='n', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Num(n=2), op=Pow(), right=BinOp(left=Name(id='j', ctx=Load()), op=Add(), right=Num(n=1))), op=Add(), right=Num(n=2)), op=Mult(), right=Subscript(value=Name(id='theta_ci', ctx=Load()), slice=Index(value=Num(n=1)), ctx=Load())), op=Sub(), right=Name(id='rho', ctx=Load())), op=Add(), right=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Div(), right=Num(n=3))), op=Div(), right=BinOp(left=Num(n=2), op=Mult(), right=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load())))], keywords=[])), Assign(targets=[Name(id='theta_ci', ctx=Store())], value=ListComp(elt=BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Num(n=2), op=Mult(), right=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load())), op=Mult(), right=Name(id='n', ctx=Load())), op=Add(), right=Name(id='rho', ctx=Load())), op=Add(), right=BinOp(left=BinOp(left=Name(id='sign', ctx=Load()), op=Mult(), right=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load())), op=Div(), right=Num(n=3))), op=Div(), right=BinOp(left=BinOp(left=Num(n=2), op=Pow(), right=BinOp(left=Name(id='j', ctx=Load()), op=Add(), right=Num(n=1))), op=Add(), right=Num(n=2))), generators=[comprehension(target=Name(id='sign', ctx=Store()), iter=List(elts=[UnaryOp(op=USub(), operand=Num(n=1)), Num(n=1)], ctx=Load()), ifs=[], is_async=0)]))])
Expr(value=Call(func=Attribute(value=Name(id='theta_cis', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='theta_ci', ctx=Load())], keywords=[]))
Store()
Attribute(value=Name(id='np', ctx=Load()), attr='mean', ctx=Load())
Name(id='theta_ci', ctx=Load())
Store()
Attribute(value=Name(id='self', ctx=Load()), attr='_rescale', ctx=Load())
Num(n=4)
Num(n=1)
Store()
BinOp(left=Name(id='rescaling', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[Name(id='theta', ctx=Load())], keywords=[]))
Pow()
Num(n=2)
Store()
BinOp(left=BinOp(left=Name(id='rescaling', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[])), op=Pow(), right=Num(n=2))
comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='theta_ci', ctx=Load()), ifs=[], is_async=0)
Store()
Name(id='FasterAmplitudeEstimationResult', ctx=Load())
Name(id='result', ctx=Load())
Store()
Name(id='self', ctx=Load())
Load()
Name(id='result', ctx=Load())
Store()
Load()
Name(id='result', ctx=Load())
Store()
Load()
Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load())
Load()
Attribute(value=Name(id='result', ctx=Load()), attr='success_probability', ctx=Store())
Num(n=1)
Attribute(value=Name(id='result', ctx=Load()), attr='success_probability', ctx=Store())
BinOp(left=Num(n=1), op=Sub(), right=BinOp(left=BinOp(left=BinOp(left=Num(n=2), op=Mult(), right=Attribute(value=Name(id='self', ctx=Load()), attr='_maxiter', ctx=Load())), op=Sub(), right=Name(id='j_0', ctx=Load())), op=Mult(), right=Attribute(value=Name(id='self', ctx=Load()), attr='_delta', ctx=Load())))
Name(id='result', ctx=Load())
Store()
Load()
Name(id='result', ctx=Load())
Store()
Attribute(value=Name(id='problem', ctx=Load()), attr='post_processing', ctx=Load())
Name(id='value', ctx=Load())
Name(id='result', ctx=Load())
Store()
Load()
Name(id='result', ctx=Load())
Store()
Name(id='tuple', ctx=Load())
GeneratorExp(elt=Call(func=Attribute(value=Name(id='problem', ctx=Load()), attr='post_processing', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='value_ci', ctx=Load()), ifs=[], is_async=0)])
Name(id='result', ctx=Load())
Store()
Load()
Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='quantum_instance', ctx=Load()), attr='_run_config', ctx=Load())
Store()
Load()
Load()
Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load())
Name(id='self', ctx=Load())
Store()
Name(id='self', ctx=Load())
Store()
Name(id='self', ctx=Load())
Store()
Name(id='self', ctx=Load())
Store()
Name(id='self', ctx=Load())
Load()
Name(id='int', ctx=Load())
Name(id='self', ctx=Load())
Store()
Load()
Load()
Name(id='self', ctx=Load())
Load()
Name(id='int', ctx=Load())
Name(id='self', ctx=Load())
Store()
Load()
Load()
Name(id='self', ctx=Load())
Load()
Name(id='int', ctx=Load())
Name(id='self', ctx=Load())
Store()
Load()
Load()
Name(id='self', ctx=Load())
Load()
Load()
Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='float', ctx=Load())), ctx=Load())
Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='float', ctx=Load())), ctx=Load())), ctx=Load())
Name(id='self', ctx=Load())
Store()
Load()
Load()
Load()
Load()
Load()
Name(id='Optional', ctx=Load())
Index(value=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='QuantumInstance', ctx=Load()), Name(id='Backend', ctx=Load())], ctx=Load())), ctx=Load()))
Load()
Call(func=Name(id='super', ctx=Load()), args=[], keywords=[])
Load()
Load()
Load()
Name(id='int', ctx=Load())
BinOp(left=Num(n=1944), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='log', ctx=Load()), args=[BinOp(left=Num(n=2), op=Div(), right=Name(id='delta', ctx=Load()))], keywords=[]))
Name(id='int', ctx=Load())
BinOp(left=Num(n=972), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='log', ctx=Load()), args=[BinOp(left=Num(n=2), op=Div(), right=Name(id='delta', ctx=Load()))], keywords=[]))
Load()
Load()
Load()
Load()
Load()
Load()
Name(id='Union', ctx=Load())
Index(value=Tuple(elts=[Name(id='QuantumInstance', ctx=Load()), Name(id='Backend', ctx=Load())], ctx=Load()))
Load()
Load()
Load()
Load()
Store()
Name(id='QuantumInstance', ctx=Load())
Name(id='quantum_instance', ctx=Load())
Load()
Name(id='self', ctx=Load())
Load()
Name(id='AlgorithmError', ctx=Load())
Str(s='Quantum instance must be set.')
Name(id='self', ctx=Load())
Load()
Store()
Attribute(value=Name(id='self', ctx=Load()), attr='construct_circuit', ctx=Load())
Name(id='estimation_problem', ctx=Load())
Name(id='k', ctx=Load())
keyword(arg='measurement', value=NameConstant(value=False))
Store()
Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()), attr='execute', ctx=Load()), args=[Name(id='circuit', ctx=Load())], keywords=[]), attr='get_statevector', ctx=Load())
Store()
Name(id='i', ctx=Store())
Name(id='amplitude', ctx=Store())
Store()
Name(id='enumerate', ctx=Load())
Name(id='statevector', ctx=Load())
Name(id='full_state', ctx=Store())
Subscript(value=Call(func=Attribute(value=Subscript(value=Call(func=Name(id='bin', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]), slice=Slice(lower=Num(n=2), upper=None, step=None), ctx=Load()), attr='zfill', ctx=Load()), args=[Attribute(value=Name(id='circuit', ctx=Load()), attr='num_qubits', ctx=Load())], keywords=[]), slice=Slice(lower=None, upper=None, step=UnaryOp(op=USub(), operand=Num(n=1))), ctx=Load())
Name(id='state', ctx=Store())
Call(func=Attribute(value=Str(s=''), attr='join', ctx=Load()), args=[ListComp(elt=Subscript(value=Name(id='full_state', ctx=Load()), slice=Index(value=Name(id='i', ctx=Load())), ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='objective_qubits', ctx=Load()), ifs=[], is_async=0)])], keywords=[])
Call(func=Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='is_good_state', ctx=Load()), args=[Subscript(value=Name(id='state', ctx=Load()), slice=Slice(lower=None, upper=None, step=UnaryOp(op=USub(), operand=Num(n=1))), ctx=Load())], keywords=[])
Assign(targets=[Name(id='prob', ctx=Store())], value=BinOp(left=Name(id='prob', ctx=Load()), op=Add(), right=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='abs', ctx=Load()), args=[Name(id='amplitude', ctx=Load())], keywords=[]), op=Pow(), right=Num(n=2))))
Store()
Num(n=1)
Sub()
BinOp(left=Num(n=2), op=Mult(), right=Name(id='prob', ctx=Load()))
Store()
Attribute(value=Name(id='self', ctx=Load()), attr='construct_circuit', ctx=Load())
Name(id='estimation_problem', ctx=Load())
Name(id='k', ctx=Load())
keyword(arg='measurement', value=NameConstant(value=True))
Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()), attr='run_config', ctx=Load())
Store()
Load()
Store()
Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()), attr='execute', ctx=Load()), args=[Name(id='circuit', ctx=Load())], keywords=[]), attr='get_counts', ctx=Load())
Name(id='self', ctx=Load())
Store()
BinOp(left=BinOp(left=Num(n=2), op=Mult(), right=Name(id='k', ctx=Load())), op=Add(), right=Num(n=1))
Mult()
Name(id='shots', ctx=Load())
Store()
Name(id='state', ctx=Store())
Name(id='count', ctx=Store())
Store()
Attribute(value=Name(id='counts', ctx=Load()), attr='items', ctx=Load())
Call(func=Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='is_good_state', ctx=Load()), args=[Name(id='state', ctx=Load())], keywords=[])
AugAssign(target=Name(id='good_counts', ctx=Store()), op=Add(), value=Name(id='count', ctx=Load()))
Store()
Num(n=1)
Sub()
BinOp(left=BinOp(left=Num(n=2), op=Mult(), right=Name(id='good_counts', ctx=Load())), op=Div(), right=Name(id='shots', ctx=Load()))
Name(id='np', ctx=Load())
Load()
BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='log', ctx=Load()), args=[BinOp(left=Num(n=2), op=Div(), right=Attribute(value=Name(id='self', ctx=Load()), attr='_delta', ctx=Load()))], keywords=[]), op=Mult(), right=Num(n=12))
Div()
Name(id='shots', ctx=Load())
Attribute(value=Name(id='np', ctx=Load()), attr='maximum', ctx=Load())
UnaryOp(op=USub(), operand=Num(n=1))
BinOp(left=Name(id='cos', ctx=Load()), op=Sub(), right=Name(id='width', ctx=Load()))
Attribute(value=Name(id='np', ctx=Load()), attr='minimum', ctx=Load())
Num(n=1)
BinOp(left=Name(id='cos', ctx=Load()), op=Add(), right=Name(id='width', ctx=Load()))
Load()
Load()
Load()
Load()
Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='state_preparation', ctx=Load())
Load()
Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='grover_operator', ctx=Load())
Load()
Load()
Load()
Str(s='circuit')
Store()
Name(id='ClassicalRegister', ctx=Load())
Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='objective_qubits', ctx=Load())], keywords=[])
Attribute(value=Name(id='circuit', ctx=Load()), attr='add_register', ctx=Load())
Name(id='c', ctx=Load())
Name(id='circuit', ctx=Load())
Load()
Name(id='estimation_problem', ctx=Load())
Load()
NameConstant(value=True)
Load()
Attribute(value=Name(id='circuit', ctx=Load()), attr='compose', ctx=Load())
Call(func=Attribute(value=Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='grover_operator', ctx=Load()), attr='power', ctx=Load()), args=[Name(id='k', ctx=Load())], keywords=[])
keyword(arg='inplace', value=NameConstant(value=True))
Attribute(value=Name(id='circuit', ctx=Load()), attr='barrier', ctx=Load())
Attribute(value=Name(id='circuit', ctx=Load()), attr='measure', ctx=Load())
Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='objective_qubits', ctx=Load())
Subscript(value=Name(id='c', ctx=Load()), slice=Slice(lower=None, upper=None, step=None), ctx=Load())
Name(id='QuantumCircuit', ctx=Load())
Subscript(value=Name(id='Tuple', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='QuantumCircuit', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='int', ctx=Load())), ctx=Load())], ctx=Load())), ctx=Load())
Load()
Load()
Load()
Attribute(value=Name(id='self', ctx=Load()), attr='quantum_instance', ctx=Load())
Load()
Load()
Store()
Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='rescale', ctx=Load())
Num(n=0.25)
Store()
Load()
Name(id='self', ctx=Load())
Load()
Store()
Attribute(value=Name(id='self', ctx=Load()), attr='_cos_estimate', ctx=Load())
Name(id='problem', ctx=Load())
keyword(arg='k', value=Num(n=0))
keyword(arg='shots', value=Num(n=1))
Store()
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='arccos', ctx=Load()), args=[Name(id='cos', ctx=Load())], keywords=[])
Div()
Num(n=2)
Store()
Name(id='theta', ctx=Load())
Name(id='theta', ctx=Load())
Load()
Store()
Name(id='theta_ci', ctx=Load())
Load()
Store()
Store()
Store()
Num(n=0)
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='arcsin', ctx=Load()), args=[Num(n=0.25)], keywords=[])
Load()
Store()
Store()
Name(id='self', ctx=Load())
Load()
Store()
Name(id='theta_ci', ctx=Load())
Load()
Store()
Store()
arg(arg='power', annotation=None)
arg(arg='shots', annotation=None)
Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_cos_estimate', ctx=Load()), args=[Name(id='problem', ctx=Load()), Name(id='power', ctx=Load()), Name(id='shots', ctx=Load())], keywords=[])
Store()
Name(id='range', ctx=Load())
Num(n=1)
BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='_maxiter', ctx=Load()), op=Add(), right=Num(n=1))
Name(id='num_steps', ctx=Store())
Add()
Num(n=1)
Name(id='first_stage', ctx=Load())
AugAssign(target=Name(id='num_first_stage_steps', ctx=Store()), op=Add(), value=Num(n=1))
Assign(targets=[Name(id='c', ctx=Store())], value=Call(func=Name(id='cos_estimate', ctx=Load()), args=[BinOp(left=Num(n=2), op=Pow(), right=BinOp(left=Name(id='j', ctx=Load()), op=Sub(), right=Num(n=1))), Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_shots', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())], keywords=[]))
Assign(targets=[Name(id='chernoff_ci', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_chernoff', ctx=Load()), args=[Name(id='c', ctx=Load()), Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_shots', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())], keywords=[]))
Assign(targets=[Name(id='theta_ci', ctx=Store())], value=ListComp(elt=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='arccos', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), op=Div(), right=BinOp(left=BinOp(left=Num(n=2), op=Pow(), right=BinOp(left=Name(id='j', ctx=Load()), op=Add(), right=Num(n=1))), op=Add(), right=Num(n=2))), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='chernoff_ci', ctx=Load()), slice=Slice(lower=None, upper=None, step=UnaryOp(op=USub(), operand=Num(n=1))), ctx=Load()), ifs=[], is_async=0)]))
If(test=BoolOp(op=And(), values=[Compare(left=BinOp(left=BinOp(left=Num(n=2), op=Pow(), right=BinOp(left=Name(id='j', ctx=Load()), op=Add(), right=Num(n=1))), op=Mult(), right=Subscript(value=Name(id='theta_ci', ctx=Load()), slice=Index(value=Num(n=1)), ctx=Load())), ops=[GtE()], comparators=[BinOp(left=BinOp(left=Num(n=3), op=Mult(), right=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load())), op=Div(), right=Num(n=8))]), Compare(left=Name(id='j', ctx=Load()), ops=[Lt()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='_maxiter', ctx=Load())])]), body=[Assign(targets=[Name(id='j_0', ctx=Store())], value=Name(id='j', ctx=Load())), Assign(targets=[Name(id='v', ctx=Store())], value=BinOp(left=BinOp(left=Num(n=2), op=Pow(), right=Name(id='j', ctx=Load())), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sum', ctx=Load()), args=[Name(id='theta_ci', ctx=Load())], keywords=[]))), Assign(targets=[Name(id='first_stage', ctx=Store())], value=NameConstant(value=False))], orelse=[])
Assign(targets=[Name(id='cos', ctx=Store())], value=Call(func=Name(id='cos_estimate', ctx=Load()), args=[BinOp(left=Num(n=2), op=Pow(), right=BinOp(left=Name(id='j', ctx=Load()), op=Sub(), right=Num(n=1))), Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_shots', ctx=Load()), slice=Index(value=Num(n=1)), ctx=Load())], keywords=[]))
Assign(targets=[Name(id='cos_2', ctx=Store())], value=Call(func=Name(id='cos_estimate', ctx=Load()), args=[BinOp(left=BinOp(left=Num(n=2), op=Pow(), right=BinOp(left=Name(id='j', ctx=Load()), op=Sub(), right=Num(n=1))), op=Add(), right=BinOp(left=Num(n=2), op=Pow(), right=BinOp(left=Name(id='j_0', ctx=Load()), op=Sub(), right=Num(n=1)))), Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_shots', ctx=Load()), slice=Index(value=Num(n=1)), ctx=Load())], keywords=[]))
Assign(targets=[Name(id='sin', ctx=Store())], value=BinOp(left=BinOp(left=BinOp(left=Name(id='cos', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='cos', ctx=Load()), args=[Name(id='v', ctx=Load())], keywords=[])), op=Sub(), right=Name(id='cos_2', ctx=Load())), op=Div(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[Name(id='v', ctx=Load())], keywords=[])))
Assign(targets=[Name(id='rho', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='arctan2', ctx=Load()), args=[Name(id='sin', ctx=Load()), Name(id='cos', ctx=Load())], keywords=[]))
Assign(targets=[Name(id='n', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Num(n=2), op=Pow(), right=BinOp(left=Name(id='j', ctx=Load()), op=Add(), right=Num(n=1))), op=Add(), right=Num(n=2)), op=Mult(), right=Subscript(value=Name(id='theta_ci', ctx=Load()), slice=Index(value=Num(n=1)), ctx=Load())), op=Sub(), right=Name(id='rho', ctx=Load())), op=Add(), right=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Div(), right=Num(n=3))), op=Div(), right=BinOp(left=Num(n=2), op=Mult(), right=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load())))], keywords=[]))
Assign(targets=[Name(id='theta_ci', ctx=Store())], value=ListComp(elt=BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Num(n=2), op=Mult(), right=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load())), op=Mult(), right=Name(id='n', ctx=Load())), op=Add(), right=Name(id='rho', ctx=Load())), op=Add(), right=BinOp(left=BinOp(left=Name(id='sign', ctx=Load()), op=Mult(), right=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load())), op=Div(), right=Num(n=3))), op=Div(), right=BinOp(left=BinOp(left=Num(n=2), op=Pow(), right=BinOp(left=Name(id='j', ctx=Load()), op=Add(), right=Num(n=1))), op=Add(), right=Num(n=2))), generators=[comprehension(target=Name(id='sign', ctx=Store()), iter=List(elts=[UnaryOp(op=USub(), operand=Num(n=1)), Num(n=1)], ctx=Load()), ifs=[], is_async=0)]))
Call(func=Attribute(value=Name(id='theta_cis', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='theta_ci', ctx=Load())], keywords=[])
Name(id='np', ctx=Load())
Load()
Load()
Name(id='self', ctx=Load())
Load()
Name(id='rescaling', ctx=Load())
Mult()
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[Name(id='theta', ctx=Load())], keywords=[])
BinOp(left=Name(id='rescaling', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]))
Pow()
Num(n=2)
Name(id='x', ctx=Store())
Name(id='theta_ci', ctx=Load())
Load()
Load()
Load()
Load()
Load()
Name(id='self', ctx=Load())
Load()
Name(id='result', ctx=Load())
Store()
Name(id='result', ctx=Load())
Store()
Num(n=1)
Sub()
BinOp(left=BinOp(left=BinOp(left=Num(n=2), op=Mult(), right=Attribute(value=Name(id='self', ctx=Load()), attr='_maxiter', ctx=Load())), op=Sub(), right=Name(id='j_0', ctx=Load())), op=Mult(), right=Attribute(value=Name(id='self', ctx=Load()), attr='_delta', ctx=Load()))
Load()
Load()
Name(id='problem', ctx=Load())
Load()
Load()
Load()
Load()
Load()
Call(func=Attribute(value=Name(id='problem', ctx=Load()), attr='post_processing', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[])
comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='value_ci', ctx=Load()), ifs=[], is_async=0)
Load()
Attribute(value=Name(id='self', ctx=Load()), attr='quantum_instance', ctx=Load())
Load()
Call(func=Name(id='super', ctx=Load()), args=[], keywords=[])
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Name(id='List', ctx=Load())
Index(value=Name(id='float', ctx=Load()))
Load()
Name(id='List', ctx=Load())
Index(value=Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='float', ctx=Load())), ctx=Load()))
Load()
Load()
Load()
Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='QuantumInstance', ctx=Load()), Name(id='Backend', ctx=Load())], ctx=Load())), ctx=Load())
Name(id='super', ctx=Load())
Load()
Num(n=1944)
Mult()
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='log', ctx=Load()), args=[BinOp(left=Num(n=2), op=Div(), right=Name(id='delta', ctx=Load()))], keywords=[])
Load()
Num(n=972)
Mult()
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='log', ctx=Load()), args=[BinOp(left=Num(n=2), op=Div(), right=Name(id='delta', ctx=Load()))], keywords=[])
Load()
Tuple(elts=[Name(id='QuantumInstance', ctx=Load()), Name(id='Backend', ctx=Load())], ctx=Load())
Load()
Load()
Load()
Load()
Load()
Name(id='self', ctx=Load())
Load()
Load()
Load()
NameConstant(value=False)
Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()), attr='execute', ctx=Load()), args=[Name(id='circuit', ctx=Load())], keywords=[])
Load()
Store()
Store()
Load()
Load()
Store()
Call(func=Attribute(value=Subscript(value=Call(func=Name(id='bin', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]), slice=Slice(lower=Num(n=2), upper=None, step=None), ctx=Load()), attr='zfill', ctx=Load()), args=[Attribute(value=Name(id='circuit', ctx=Load()), attr='num_qubits', ctx=Load())], keywords=[])
Slice(lower=None, upper=None, step=UnaryOp(op=USub(), operand=Num(n=1)))
Load()
Store()
Attribute(value=Str(s=''), attr='join', ctx=Load())
ListComp(elt=Subscript(value=Name(id='full_state', ctx=Load()), slice=Index(value=Name(id='i', ctx=Load())), ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='objective_qubits', ctx=Load()), ifs=[], is_async=0)])
Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='is_good_state', ctx=Load())
Subscript(value=Name(id='state', ctx=Load()), slice=Slice(lower=None, upper=None, step=UnaryOp(op=USub(), operand=Num(n=1))), ctx=Load())
Name(id='prob', ctx=Store())
BinOp(left=Name(id='prob', ctx=Load()), op=Add(), right=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='abs', ctx=Load()), args=[Name(id='amplitude', ctx=Load())], keywords=[]), op=Pow(), right=Num(n=2)))
Num(n=2)
Mult()
Name(id='prob', ctx=Load())
Name(id='self', ctx=Load())
Load()
Load()
Load()
NameConstant(value=True)
Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load())
Load()
Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()), attr='execute', ctx=Load()), args=[Name(id='circuit', ctx=Load())], keywords=[])
Load()
Load()
BinOp(left=Num(n=2), op=Mult(), right=Name(id='k', ctx=Load()))
Add()
Num(n=1)
Load()
Store()
Store()
Name(id='counts', ctx=Load())
Load()
Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='is_good_state', ctx=Load())
Name(id='state', ctx=Load())
Name(id='good_counts', ctx=Store())
Add()
Name(id='count', ctx=Load())
BinOp(left=Num(n=2), op=Mult(), right=Name(id='good_counts', ctx=Load()))
Div()
Name(id='shots', ctx=Load())
Load()
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='log', ctx=Load()), args=[BinOp(left=Num(n=2), op=Div(), right=Attribute(value=Name(id='self', ctx=Load()), attr='_delta', ctx=Load()))], keywords=[])
Mult()
Num(n=12)
Load()
Name(id='np', ctx=Load())
Load()
USub()
Num(n=1)
Name(id='cos', ctx=Load())
Sub()
Name(id='width', ctx=Load())
Name(id='np', ctx=Load())
Load()
Name(id='cos', ctx=Load())
Add()
Name(id='width', ctx=Load())
Name(id='estimation_problem', ctx=Load())
Load()
Name(id='estimation_problem', ctx=Load())
Load()
Load()
Name(id='len', ctx=Load())
Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='objective_qubits', ctx=Load())
Name(id='circuit', ctx=Load())
Load()
Load()
Load()
Load()
Name(id='circuit', ctx=Load())
Load()
Attribute(value=Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='grover_operator', ctx=Load()), attr='power', ctx=Load())
Name(id='k', ctx=Load())
NameConstant(value=True)
Name(id='circuit', ctx=Load())
Load()
Name(id='circuit', ctx=Load())
Load()
Name(id='estimation_problem', ctx=Load())
Load()
Name(id='c', ctx=Load())
Slice(lower=None, upper=None, step=None)
Load()
Load()
Name(id='Tuple', ctx=Load())
Index(value=Tuple(elts=[Name(id='QuantumCircuit', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='int', ctx=Load())), ctx=Load())], ctx=Load()))
Load()
Name(id='self', ctx=Load())
Load()
Name(id='estimation_problem', ctx=Load())
Load()
Load()
Name(id='self', ctx=Load())
Load()
Load()
Num(n=0)
Num(n=1)
Attribute(value=Name(id='np', ctx=Load()), attr='arccos', ctx=Load())
Name(id='cos', ctx=Load())
Load()
Load()
Load()
Attribute(value=Name(id='np', ctx=Load()), attr='arcsin', ctx=Load())
Num(n=0.25)
Load()
Load()
Attribute(value=Name(id='self', ctx=Load()), attr='_cos_estimate', ctx=Load())
Name(id='problem', ctx=Load())
Name(id='power', ctx=Load())
Name(id='shots', ctx=Load())
Load()
Attribute(value=Name(id='self', ctx=Load()), attr='_maxiter', ctx=Load())
Add()
Num(n=1)
Store()
Load()
Name(id='num_first_stage_steps', ctx=Store())
Add()
Num(n=1)
Name(id='c', ctx=Store())
Call(func=Name(id='cos_estimate', ctx=Load()), args=[BinOp(left=Num(n=2), op=Pow(), right=BinOp(left=Name(id='j', ctx=Load()), op=Sub(), right=Num(n=1))), Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_shots', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())], keywords=[])
Name(id='chernoff_ci', ctx=Store())
Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_chernoff', ctx=Load()), args=[Name(id='c', ctx=Load()), Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_shots', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())], keywords=[])
Name(id='theta_ci', ctx=Store())
ListComp(elt=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='arccos', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), op=Div(), right=BinOp(left=BinOp(left=Num(n=2), op=Pow(), right=BinOp(left=Name(id='j', ctx=Load()), op=Add(), right=Num(n=1))), op=Add(), right=Num(n=2))), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='chernoff_ci', ctx=Load()), slice=Slice(lower=None, upper=None, step=UnaryOp(op=USub(), operand=Num(n=1))), ctx=Load()), ifs=[], is_async=0)])
BoolOp(op=And(), values=[Compare(left=BinOp(left=BinOp(left=Num(n=2), op=Pow(), right=BinOp(left=Name(id='j', ctx=Load()), op=Add(), right=Num(n=1))), op=Mult(), right=Subscript(value=Name(id='theta_ci', ctx=Load()), slice=Index(value=Num(n=1)), ctx=Load())), ops=[GtE()], comparators=[BinOp(left=BinOp(left=Num(n=3), op=Mult(), right=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load())), op=Div(), right=Num(n=8))]), Compare(left=Name(id='j', ctx=Load()), ops=[Lt()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='_maxiter', ctx=Load())])])
Assign(targets=[Name(id='j_0', ctx=Store())], value=Name(id='j', ctx=Load()))
Assign(targets=[Name(id='v', ctx=Store())], value=BinOp(left=BinOp(left=Num(n=2), op=Pow(), right=Name(id='j', ctx=Load())), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sum', ctx=Load()), args=[Name(id='theta_ci', ctx=Load())], keywords=[])))
Assign(targets=[Name(id='first_stage', ctx=Store())], value=NameConstant(value=False))
Name(id='cos', ctx=Store())
Call(func=Name(id='cos_estimate', ctx=Load()), args=[BinOp(left=Num(n=2), op=Pow(), right=BinOp(left=Name(id='j', ctx=Load()), op=Sub(), right=Num(n=1))), Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_shots', ctx=Load()), slice=Index(value=Num(n=1)), ctx=Load())], keywords=[])
Name(id='cos_2', ctx=Store())
Call(func=Name(id='cos_estimate', ctx=Load()), args=[BinOp(left=BinOp(left=Num(n=2), op=Pow(), right=BinOp(left=Name(id='j', ctx=Load()), op=Sub(), right=Num(n=1))), op=Add(), right=BinOp(left=Num(n=2), op=Pow(), right=BinOp(left=Name(id='j_0', ctx=Load()), op=Sub(), right=Num(n=1)))), Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_shots', ctx=Load()), slice=Index(value=Num(n=1)), ctx=Load())], keywords=[])
Name(id='sin', ctx=Store())
BinOp(left=BinOp(left=BinOp(left=Name(id='cos', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='cos', ctx=Load()), args=[Name(id='v', ctx=Load())], keywords=[])), op=Sub(), right=Name(id='cos_2', ctx=Load())), op=Div(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[Name(id='v', ctx=Load())], keywords=[]))
Name(id='rho', ctx=Store())
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='arctan2', ctx=Load()), args=[Name(id='sin', ctx=Load()), Name(id='cos', ctx=Load())], keywords=[])
Name(id='n', ctx=Store())
Call(func=Name(id='int', ctx=Load()), args=[BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Num(n=2), op=Pow(), right=BinOp(left=Name(id='j', ctx=Load()), op=Add(), right=Num(n=1))), op=Add(), right=Num(n=2)), op=Mult(), right=Subscript(value=Name(id='theta_ci', ctx=Load()), slice=Index(value=Num(n=1)), ctx=Load())), op=Sub(), right=Name(id='rho', ctx=Load())), op=Add(), right=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Div(), right=Num(n=3))), op=Div(), right=BinOp(left=Num(n=2), op=Mult(), right=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load())))], keywords=[])
Name(id='theta_ci', ctx=Store())
ListComp(elt=BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Num(n=2), op=Mult(), right=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load())), op=Mult(), right=Name(id='n', ctx=Load())), op=Add(), right=Name(id='rho', ctx=Load())), op=Add(), right=BinOp(left=BinOp(left=Name(id='sign', ctx=Load()), op=Mult(), right=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load())), op=Div(), right=Num(n=3))), op=Div(), right=BinOp(left=BinOp(left=Num(n=2), op=Pow(), right=BinOp(left=Name(id='j', ctx=Load()), op=Add(), right=Num(n=1))), op=Add(), right=Num(n=2))), generators=[comprehension(target=Name(id='sign', ctx=Store()), iter=List(elts=[UnaryOp(op=USub(), operand=Num(n=1)), Num(n=1)], ctx=Load()), ifs=[], is_async=0)])
Attribute(value=Name(id='theta_cis', ctx=Load()), attr='append', ctx=Load())
Name(id='theta_ci', ctx=Load())
Load()
Load()
Load()
Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load())
Name(id='theta', ctx=Load())
Name(id='rescaling', ctx=Load())
Mult()
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[])
Store()
Load()
Load()
Load()
Load()
BinOp(left=BinOp(left=Num(n=2), op=Mult(), right=Attribute(value=Name(id='self', ctx=Load()), attr='_maxiter', ctx=Load())), op=Sub(), right=Name(id='j_0', ctx=Load()))
Mult()
Attribute(value=Name(id='self', ctx=Load()), attr='_delta', ctx=Load())
Load()
Attribute(value=Name(id='problem', ctx=Load()), attr='post_processing', ctx=Load())
Name(id='x', ctx=Load())
Name(id='x', ctx=Store())
Name(id='value_ci', ctx=Load())
Name(id='self', ctx=Load())
Load()
Name(id='super', ctx=Load())
Load()
Name(id='float', ctx=Load())
Load()
Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='float', ctx=Load())), ctx=Load())
Name(id='Union', ctx=Load())
Index(value=Tuple(elts=[Name(id='QuantumInstance', ctx=Load()), Name(id='Backend', ctx=Load())], ctx=Load()))
Load()
Load()
Attribute(value=Name(id='np', ctx=Load()), attr='log', ctx=Load())
BinOp(left=Num(n=2), op=Div(), right=Name(id='delta', ctx=Load()))
Attribute(value=Name(id='np', ctx=Load()), attr='log', ctx=Load())
BinOp(left=Num(n=2), op=Div(), right=Name(id='delta', ctx=Load()))
Name(id='QuantumInstance', ctx=Load())
Name(id='Backend', ctx=Load())
Load()
Load()
Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()), attr='execute', ctx=Load())
Name(id='circuit', ctx=Load())
Attribute(value=Subscript(value=Call(func=Name(id='bin', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]), slice=Slice(lower=Num(n=2), upper=None, step=None), ctx=Load()), attr='zfill', ctx=Load())
Attribute(value=Name(id='circuit', ctx=Load()), attr='num_qubits', ctx=Load())
UnaryOp(op=USub(), operand=Num(n=1))
Str(s='')
Load()
Subscript(value=Name(id='full_state', ctx=Load()), slice=Index(value=Name(id='i', ctx=Load())), ctx=Load())
comprehension(target=Name(id='i', ctx=Store()), iter=Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='objective_qubits', ctx=Load()), ifs=[], is_async=0)
Name(id='estimation_problem', ctx=Load())
Load()
Name(id='state', ctx=Load())
Slice(lower=None, upper=None, step=UnaryOp(op=USub(), operand=Num(n=1)))
Load()
Store()
Name(id='prob', ctx=Load())
Add()
BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='abs', ctx=Load()), args=[Name(id='amplitude', ctx=Load())], keywords=[]), op=Pow(), right=Num(n=2))
Load()
Load()
Name(id='self', ctx=Load())
Load()
Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()), attr='execute', ctx=Load())
Name(id='circuit', ctx=Load())
Num(n=2)
Mult()
Name(id='k', ctx=Load())
Load()
Name(id='estimation_problem', ctx=Load())
Load()
Load()
Store()
Load()
Num(n=2)
Mult()
Name(id='good_counts', ctx=Load())
Load()
Attribute(value=Name(id='np', ctx=Load()), attr='log', ctx=Load())
BinOp(left=Num(n=2), op=Div(), right=Attribute(value=Name(id='self', ctx=Load()), attr='_delta', ctx=Load()))
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Name(id='estimation_problem', ctx=Load())
Load()
Load()
Load()
Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='grover_operator', ctx=Load())
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Tuple(elts=[Name(id='QuantumCircuit', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='int', ctx=Load())), ctx=Load())], ctx=Load())
Load()
Load()
Load()
Name(id='np', ctx=Load())
Load()
Load()
Name(id='np', ctx=Load())
Load()
Name(id='self', ctx=Load())
Load()
Load()
Load()
Load()
Name(id='self', ctx=Load())
Load()
Store()
Store()
Name(id='cos_estimate', ctx=Load())
BinOp(left=Num(n=2), op=Pow(), right=BinOp(left=Name(id='j', ctx=Load()), op=Sub(), right=Num(n=1)))
Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_shots', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())
Store()
Attribute(value=Name(id='self', ctx=Load()), attr='_chernoff', ctx=Load())
Name(id='c', ctx=Load())
Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_shots', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())
Store()
BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='arccos', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), op=Div(), right=BinOp(left=BinOp(left=Num(n=2), op=Pow(), right=BinOp(left=Name(id='j', ctx=Load()), op=Add(), right=Num(n=1))), op=Add(), right=Num(n=2)))
comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='chernoff_ci', ctx=Load()), slice=Slice(lower=None, upper=None, step=UnaryOp(op=USub(), operand=Num(n=1))), ctx=Load()), ifs=[], is_async=0)
And()
Compare(left=BinOp(left=BinOp(left=Num(n=2), op=Pow(), right=BinOp(left=Name(id='j', ctx=Load()), op=Add(), right=Num(n=1))), op=Mult(), right=Subscript(value=Name(id='theta_ci', ctx=Load()), slice=Index(value=Num(n=1)), ctx=Load())), ops=[GtE()], comparators=[BinOp(left=BinOp(left=Num(n=3), op=Mult(), right=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load())), op=Div(), right=Num(n=8))])
Compare(left=Name(id='j', ctx=Load()), ops=[Lt()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='_maxiter', ctx=Load())])
Name(id='j_0', ctx=Store())
Name(id='j', ctx=Load())
Name(id='v', ctx=Store())
BinOp(left=BinOp(left=Num(n=2), op=Pow(), right=Name(id='j', ctx=Load())), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sum', ctx=Load()), args=[Name(id='theta_ci', ctx=Load())], keywords=[]))
Name(id='first_stage', ctx=Store())
NameConstant(value=False)
Store()
Name(id='cos_estimate', ctx=Load())
BinOp(left=Num(n=2), op=Pow(), right=BinOp(left=Name(id='j', ctx=Load()), op=Sub(), right=Num(n=1)))
Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_shots', ctx=Load()), slice=Index(value=Num(n=1)), ctx=Load())
Store()
Name(id='cos_estimate', ctx=Load())
BinOp(left=BinOp(left=Num(n=2), op=Pow(), right=BinOp(left=Name(id='j', ctx=Load()), op=Sub(), right=Num(n=1))), op=Add(), right=BinOp(left=Num(n=2), op=Pow(), right=BinOp(left=Name(id='j_0', ctx=Load()), op=Sub(), right=Num(n=1))))
Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_shots', ctx=Load()), slice=Index(value=Num(n=1)), ctx=Load())
Store()
BinOp(left=BinOp(left=Name(id='cos', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='cos', ctx=Load()), args=[Name(id='v', ctx=Load())], keywords=[])), op=Sub(), right=Name(id='cos_2', ctx=Load()))
Div()
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[Name(id='v', ctx=Load())], keywords=[])
Store()
Attribute(value=Name(id='np', ctx=Load()), attr='arctan2', ctx=Load())
Name(id='sin', ctx=Load())
Name(id='cos', ctx=Load())
Store()
Name(id='int', ctx=Load())
BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Num(n=2), op=Pow(), right=BinOp(left=Name(id='j', ctx=Load()), op=Add(), right=Num(n=1))), op=Add(), right=Num(n=2)), op=Mult(), right=Subscript(value=Name(id='theta_ci', ctx=Load()), slice=Index(value=Num(n=1)), ctx=Load())), op=Sub(), right=Name(id='rho', ctx=Load())), op=Add(), right=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Div(), right=Num(n=3))), op=Div(), right=BinOp(left=Num(n=2), op=Mult(), right=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load())))
Store()
BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Num(n=2), op=Mult(), right=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load())), op=Mult(), right=Name(id='n', ctx=Load())), op=Add(), right=Name(id='rho', ctx=Load())), op=Add(), right=BinOp(left=BinOp(left=Name(id='sign', ctx=Load()), op=Mult(), right=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load())), op=Div(), right=Num(n=3))), op=Div(), right=BinOp(left=BinOp(left=Num(n=2), op=Pow(), right=BinOp(left=Name(id='j', ctx=Load()), op=Add(), right=Num(n=1))), op=Add(), right=Num(n=2)))
comprehension(target=Name(id='sign', ctx=Store()), iter=List(elts=[UnaryOp(op=USub(), operand=Num(n=1)), Num(n=1)], ctx=Load()), ifs=[], is_async=0)
Name(id='theta_cis', ctx=Load())
Load()
Load()
Name(id='np', ctx=Load())
Load()
Load()
Load()
Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load())
Name(id='x', ctx=Load())
BinOp(left=Num(n=2), op=Mult(), right=Attribute(value=Name(id='self', ctx=Load()), attr='_maxiter', ctx=Load()))
Sub()
Name(id='j_0', ctx=Load())
Name(id='self', ctx=Load())
Load()
Name(id='problem', ctx=Load())
Load()
Load()
Store()
Load()
Load()
Load()
Load()
Name(id='List', ctx=Load())
Index(value=Name(id='float', ctx=Load()))
Load()
Load()
Tuple(elts=[Name(id='QuantumInstance', ctx=Load()), Name(id='Backend', ctx=Load())], ctx=Load())
Name(id='np', ctx=Load())
Load()
Num(n=2)
Div()
Name(id='delta', ctx=Load())
Name(id='np', ctx=Load())
Load()
Num(n=2)
Div()
Name(id='delta', ctx=Load())
Load()
Load()
Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load())
Load()
Load()
Subscript(value=Call(func=Name(id='bin', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]), slice=Slice(lower=Num(n=2), upper=None, step=None), ctx=Load())
Load()
Name(id='circuit', ctx=Load())
Load()
USub()
Num(n=1)
Name(id='full_state', ctx=Load())
Index(value=Name(id='i', ctx=Load()))
Load()
Name(id='i', ctx=Store())
Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='objective_qubits', ctx=Load())
Load()
Load()
UnaryOp(op=USub(), operand=Num(n=1))
Load()
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='abs', ctx=Load()), args=[Name(id='amplitude', ctx=Load())], keywords=[])
Pow()
Num(n=2)
Load()
Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load())
Load()
Load()
Load()
Load()
Load()
Name(id='np', ctx=Load())
Load()
Num(n=2)
Div()
Attribute(value=Name(id='self', ctx=Load()), attr='_delta', ctx=Load())
Load()
Name(id='estimation_problem', ctx=Load())
Load()
Name(id='QuantumCircuit', ctx=Load())
Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='int', ctx=Load())), ctx=Load())
Load()
Load()
Load()
Load()
Load()
Load()
Num(n=2)
Pow()
BinOp(left=Name(id='j', ctx=Load()), op=Sub(), right=Num(n=1))
Attribute(value=Name(id='self', ctx=Load()), attr='_shots', ctx=Load())
Index(value=Num(n=0))
Load()
Name(id='self', ctx=Load())
Load()
Load()
Attribute(value=Name(id='self', ctx=Load()), attr='_shots', ctx=Load())
Index(value=Num(n=0))
Load()
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='arccos', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[])
Div()
BinOp(left=BinOp(left=Num(n=2), op=Pow(), right=BinOp(left=Name(id='j', ctx=Load()), op=Add(), right=Num(n=1))), op=Add(), right=Num(n=2))
Name(id='x', ctx=Store())
Subscript(value=Name(id='chernoff_ci', ctx=Load()), slice=Slice(lower=None, upper=None, step=UnaryOp(op=USub(), operand=Num(n=1))), ctx=Load())
BinOp(left=BinOp(left=Num(n=2), op=Pow(), right=BinOp(left=Name(id='j', ctx=Load()), op=Add(), right=Num(n=1))), op=Mult(), right=Subscript(value=Name(id='theta_ci', ctx=Load()), slice=Index(value=Num(n=1)), ctx=Load()))
GtE()
BinOp(left=BinOp(left=Num(n=3), op=Mult(), right=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load())), op=Div(), right=Num(n=8))
Name(id='j', ctx=Load())
Lt()
Attribute(value=Name(id='self', ctx=Load()), attr='_maxiter', ctx=Load())
Store()
Load()
Store()
BinOp(left=Num(n=2), op=Pow(), right=Name(id='j', ctx=Load()))
Mult()
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sum', ctx=Load()), args=[Name(id='theta_ci', ctx=Load())], keywords=[])
Store()
Load()
Num(n=2)
Pow()
BinOp(left=Name(id='j', ctx=Load()), op=Sub(), right=Num(n=1))
Attribute(value=Name(id='self', ctx=Load()), attr='_shots', ctx=Load())
Index(value=Num(n=1))
Load()
Load()
BinOp(left=Num(n=2), op=Pow(), right=BinOp(left=Name(id='j', ctx=Load()), op=Sub(), right=Num(n=1)))
Add()
BinOp(left=Num(n=2), op=Pow(), right=BinOp(left=Name(id='j_0', ctx=Load()), op=Sub(), right=Num(n=1)))
Attribute(value=Name(id='self', ctx=Load()), attr='_shots', ctx=Load())
Index(value=Num(n=1))
Load()
BinOp(left=Name(id='cos', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='cos', ctx=Load()), args=[Name(id='v', ctx=Load())], keywords=[]))
Sub()
Name(id='cos_2', ctx=Load())
Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load())
Name(id='v', ctx=Load())
Name(id='np', ctx=Load())
Load()
Load()
Load()
Load()
BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Num(n=2), op=Pow(), right=BinOp(left=Name(id='j', ctx=Load()), op=Add(), right=Num(n=1))), op=Add(), right=Num(n=2)), op=Mult(), right=Subscript(value=Name(id='theta_ci', ctx=Load()), slice=Index(value=Num(n=1)), ctx=Load())), op=Sub(), right=Name(id='rho', ctx=Load())), op=Add(), right=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Div(), right=Num(n=3)))
Div()
BinOp(left=Num(n=2), op=Mult(), right=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()))
BinOp(left=BinOp(left=BinOp(left=BinOp(left=Num(n=2), op=Mult(), right=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load())), op=Mult(), right=Name(id='n', ctx=Load())), op=Add(), right=Name(id='rho', ctx=Load())), op=Add(), right=BinOp(left=BinOp(left=Name(id='sign', ctx=Load()), op=Mult(), right=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load())), op=Div(), right=Num(n=3)))
Div()
BinOp(left=BinOp(left=Num(n=2), op=Pow(), right=BinOp(left=Name(id='j', ctx=Load()), op=Add(), right=Num(n=1))), op=Add(), right=Num(n=2))
Name(id='sign', ctx=Store())
List(elts=[UnaryOp(op=USub(), operand=Num(n=1)), Num(n=1)], ctx=Load())
Load()
Load()
Name(id='np', ctx=Load())
Load()
Load()
Num(n=2)
Mult()
Attribute(value=Name(id='self', ctx=Load()), attr='_maxiter', ctx=Load())
Load()
Load()
Load()
Load()
Name(id='float', ctx=Load())
Name(id='QuantumInstance', ctx=Load())
Name(id='Backend', ctx=Load())
Load()
Load()
Load()
Load()
Load()
Name(id='self', ctx=Load())
Load()
Call(func=Name(id='bin', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[])
Slice(lower=Num(n=2), upper=None, step=None)
Load()
Load()
Load()
Name(id='i', ctx=Load())
Store()
Name(id='estimation_problem', ctx=Load())
Load()
USub()
Num(n=1)
Attribute(value=Name(id='np', ctx=Load()), attr='abs', ctx=Load())
Name(id='amplitude', ctx=Load())
Name(id='self', ctx=Load())
Load()
Load()
Name(id='self', ctx=Load())
Load()
Load()
Load()
Name(id='List', ctx=Load())
Index(value=Name(id='int', ctx=Load()))
Load()
Name(id='j', ctx=Load())
Sub()
Num(n=1)
Name(id='self', ctx=Load())
Load()
Num(n=0)
Load()
Name(id='self', ctx=Load())
Load()
Num(n=0)
Attribute(value=Name(id='np', ctx=Load()), attr='arccos', ctx=Load())
Name(id='x', ctx=Load())
BinOp(left=Num(n=2), op=Pow(), right=BinOp(left=Name(id='j', ctx=Load()), op=Add(), right=Num(n=1)))
Add()
Num(n=2)
Store()
Name(id='chernoff_ci', ctx=Load())
Slice(lower=None, upper=None, step=UnaryOp(op=USub(), operand=Num(n=1)))
Load()
BinOp(left=Num(n=2), op=Pow(), right=BinOp(left=Name(id='j', ctx=Load()), op=Add(), right=Num(n=1)))
Mult()
Subscript(value=Name(id='theta_ci', ctx=Load()), slice=Index(value=Num(n=1)), ctx=Load())
BinOp(left=Num(n=3), op=Mult(), right=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()))
Div()
Num(n=8)
Load()
Name(id='self', ctx=Load())
Load()
Num(n=2)
Pow()
Name(id='j', ctx=Load())
Attribute(value=Name(id='np', ctx=Load()), attr='sum', ctx=Load())
Name(id='theta_ci', ctx=Load())
Name(id='j', ctx=Load())
Sub()
Num(n=1)
Name(id='self', ctx=Load())
Load()
Num(n=1)
Num(n=2)
Pow()
BinOp(left=Name(id='j', ctx=Load()), op=Sub(), right=Num(n=1))
Num(n=2)
Pow()
BinOp(left=Name(id='j_0', ctx=Load()), op=Sub(), right=Num(n=1))
Name(id='self', ctx=Load())
Load()
Num(n=1)
Name(id='cos', ctx=Load())
Mult()
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='cos', ctx=Load()), args=[Name(id='v', ctx=Load())], keywords=[])
Load()
Name(id='np', ctx=Load())
Load()
Load()
Load()
BinOp(left=BinOp(left=BinOp(left=BinOp(left=Num(n=2), op=Pow(), right=BinOp(left=Name(id='j', ctx=Load()), op=Add(), right=Num(n=1))), op=Add(), right=Num(n=2)), op=Mult(), right=Subscript(value=Name(id='theta_ci', ctx=Load()), slice=Index(value=Num(n=1)), ctx=Load())), op=Sub(), right=Name(id='rho', ctx=Load()))
Add()
BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Div(), right=Num(n=3))
Num(n=2)
Mult()
Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load())
BinOp(left=BinOp(left=BinOp(left=Num(n=2), op=Mult(), right=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load())), op=Mult(), right=Name(id='n', ctx=Load())), op=Add(), right=Name(id='rho', ctx=Load()))
Add()
BinOp(left=BinOp(left=Name(id='sign', ctx=Load()), op=Mult(), right=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load())), op=Div(), right=Num(n=3))
BinOp(left=Num(n=2), op=Pow(), right=BinOp(left=Name(id='j', ctx=Load()), op=Add(), right=Num(n=1)))
Add()
Num(n=2)
Store()
UnaryOp(op=USub(), operand=Num(n=1))
Num(n=1)
Load()
Load()
Name(id='self', ctx=Load())
Load()
Load()
Load()
Load()
Load()
Name(id='bin', ctx=Load())
Name(id='i', ctx=Load())
Num(n=2)
Load()
Load()
Name(id='np', ctx=Load())
Load()
Load()
Load()
Load()
Load()
Name(id='int', ctx=Load())
Load()
Load()
Load()
Name(id='np', ctx=Load())
Load()
Load()
Num(n=2)
Pow()
BinOp(left=Name(id='j', ctx=Load()), op=Add(), right=Num(n=1))
Load()
UnaryOp(op=USub(), operand=Num(n=1))
Num(n=2)
Pow()
BinOp(left=Name(id='j', ctx=Load()), op=Add(), right=Num(n=1))
Name(id='theta_ci', ctx=Load())
Index(value=Num(n=1))
Load()
Num(n=3)
Mult()
Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load())
Load()
Load()
Name(id='np', ctx=Load())
Load()
Load()
Load()
Load()
Name(id='j', ctx=Load())
Sub()
Num(n=1)
Name(id='j_0', ctx=Load())
Sub()
Num(n=1)
Load()
Load()
Attribute(value=Name(id='np', ctx=Load()), attr='cos', ctx=Load())
Name(id='v', ctx=Load())
Load()
BinOp(left=BinOp(left=BinOp(left=Num(n=2), op=Pow(), right=BinOp(left=Name(id='j', ctx=Load()), op=Add(), right=Num(n=1))), op=Add(), right=Num(n=2)), op=Mult(), right=Subscript(value=Name(id='theta_ci', ctx=Load()), slice=Index(value=Num(n=1)), ctx=Load()))
Sub()
Name(id='rho', ctx=Load())
Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load())
Div()
Num(n=3)
Name(id='np', ctx=Load())
Load()
BinOp(left=BinOp(left=Num(n=2), op=Mult(), right=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load())), op=Mult(), right=Name(id='n', ctx=Load()))
Add()
Name(id='rho', ctx=Load())
BinOp(left=Name(id='sign', ctx=Load()), op=Mult(), right=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()))
Div()
Num(n=3)
Num(n=2)
Pow()
BinOp(left=Name(id='j', ctx=Load()), op=Add(), right=Num(n=1))
USub()
Num(n=1)
Load()
Load()
Load()
Load()
Load()
Load()
Name(id='j', ctx=Load())
Add()
Num(n=1)
USub()
Num(n=1)
Name(id='j', ctx=Load())
Add()
Num(n=1)
Load()
Num(n=1)
Name(id='np', ctx=Load())
Load()
Load()
Load()
Load()
Name(id='np', ctx=Load())
Load()
Load()
BinOp(left=BinOp(left=Num(n=2), op=Pow(), right=BinOp(left=Name(id='j', ctx=Load()), op=Add(), right=Num(n=1))), op=Add(), right=Num(n=2))
Mult()
Subscript(value=Name(id='theta_ci', ctx=Load()), slice=Index(value=Num(n=1)), ctx=Load())
Load()
Name(id='np', ctx=Load())
Load()
Load()
BinOp(left=Num(n=2), op=Mult(), right=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()))
Mult()
Name(id='n', ctx=Load())
Load()
Name(id='sign', ctx=Load())
Mult()
Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load())
Name(id='j', ctx=Load())
Add()
Num(n=1)
Load()
Load()
Load()
Load()
BinOp(left=Num(n=2), op=Pow(), right=BinOp(left=Name(id='j', ctx=Load()), op=Add(), right=Num(n=1)))
Add()
Num(n=2)
Name(id='theta_ci', ctx=Load())
Index(value=Num(n=1))
Load()
Load()
Num(n=2)
Mult()
Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load())
Load()
Load()
Name(id='np', ctx=Load())
Load()
Load()
Num(n=2)
Pow()
BinOp(left=Name(id='j', ctx=Load()), op=Add(), right=Num(n=1))
Load()
Num(n=1)
Name(id='np', ctx=Load())
Load()
Load()
Name(id='j', ctx=Load())
Add()
Num(n=1)
Load()
Load()
  metric  value
0     NC      2
DONE!
