Python 3.7.8
Module(body=[Expr(value=Str(s='The calculation of excited states via the qEOM algorithm')), ImportFrom(module='typing', names=[alias(name='List', asname=None), alias(name='Union', asname=None), alias(name='Optional', asname=None), alias(name='Tuple', asname=None), alias(name='Dict', asname=None), alias(name='cast', asname=None)], level=0), Import(names=[alias(name='itertools', asname=None)]), Import(names=[alias(name='logging', asname=None)]), Import(names=[alias(name='sys', asname=None)]), Import(names=[alias(name='numpy', asname='np')]), ImportFrom(module='scipy', names=[alias(name='linalg', asname=None)], level=0), ImportFrom(module='qiskit.tools', names=[alias(name='parallel_map', asname=None)], level=0), ImportFrom(module='qiskit.tools.events', names=[alias(name='TextProgressBar', asname=None)], level=0), ImportFrom(module='qiskit.utils', names=[alias(name='algorithm_globals', asname=None)], level=0), ImportFrom(module='qiskit.algorithms', names=[alias(name='AlgorithmResult', asname=None)], level=0), ImportFrom(module='qiskit.opflow', names=[alias(name='Z2Symmetries', asname=None), alias(name='commutator', asname=None), alias(name='double_commutator', asname=None), alias(name='PauliSumOp', asname=None)], level=0), ImportFrom(module='qiskit_nature', names=[alias(name='ListOrDictType', asname=None)], level=0), ImportFrom(module='qiskit_nature.operators.second_quantization', names=[alias(name='SecondQuantizedOp', asname=None)], level=0), ImportFrom(module='qiskit_nature.problems.second_quantization', names=[alias(name='BaseProblem', asname=None)], level=0), ImportFrom(module='qiskit_nature.results', names=[alias(name='EigenstateResult', asname=None)], level=0), ImportFrom(module='excited_states_solver', names=[alias(name='ExcitedStatesSolver', asname=None)], level=1), ImportFrom(module='ground_state_solvers', names=[alias(name='GroundStateSolver', asname=None)], level=2), Assign(targets=[Name(id='logger', ctx=Store())], value=Call(func=Attribute(value=Name(id='logging', ctx=Load()), attr='getLogger', ctx=Load()), args=[Name(id='__name__', ctx=Load())], keywords=[])), ClassDef(name='QEOM', bases=[Name(id='ExcitedStatesSolver', ctx=Load())], keywords=[], body=[Expr(value=Str(s='The calculation of excited states via the qEOM algorithm')), FunctionDef(name='__init__', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='ground_state_solver', annotation=Name(id='GroundStateSolver', ctx=Load())), arg(arg='excitations', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='int', ctx=Load())), ctx=Load())), ctx=Load())], ctx=Load())), ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[Str(s='sd')]), body=[Expr(value=Str(s="\n        Args:\n            ground_state_solver: a GroundStateSolver object. The qEOM algorithm\n                will use this ground state to compute the EOM matrix elements\n            excitations: The excitations to be included in the eom pseudo-eigenvalue problem.\n                If a string ('s', 'd' or 'sd') then all excitations of the given type will be used.\n                Otherwise a list of custom excitations can directly be provided.\n        ")), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_gsc', ctx=Store())], value=Name(id='ground_state_solver', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='excitations', ctx=Store())], value=Name(id='excitations', ctx=Load())), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_untapered_qubit_op_main', ctx=Store()), annotation=Name(id='PauliSumOp', ctx=Load()), value=NameConstant(value=None), simple=0)], decorator_list=[], returns=NameConstant(value=None)), FunctionDef(name='excitations', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Returns the excitations to be included in the eom pseudo-eigenvalue problem.')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_excitations', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='int', ctx=Load())), ctx=Load())), ctx=Load())], ctx=Load())), ctx=Load())), FunctionDef(name='excitations', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='excitations', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='int', ctx=Load())), ctx=Load())), ctx=Load())], ctx=Load())), ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='The excitations to be included in the eom pseudo-eigenvalue problem. If a string then\n        all excitations of given type will be used. Otherwise a list of custom excitations can\n        directly be provided.')), If(test=BoolOp(op=And(), values=[Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='excitations', ctx=Load()), Name(id='str', ctx=Load())], keywords=[]), Compare(left=Name(id='excitations', ctx=Load()), ops=[NotIn()], comparators=[List(elts=[Str(s='s'), Str(s='d'), Str(s='sd')], ctx=Load())])]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Str(s='Excitation type must be s (singles), d (doubles) or sd (singles and doubles)')], keywords=[]), cause=None)], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_excitations', ctx=Store())], value=Name(id='excitations', ctx=Load()))], decorator_list=[Attribute(value=Name(id='excitations', ctx=Load()), attr='setter', ctx=Load())], returns=NameConstant(value=None)), FunctionDef(name='solver', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Return(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_gsc', ctx=Load()), attr='solver', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=None), FunctionDef(name='get_qubit_operators', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='problem', annotation=Name(id='BaseProblem', ctx=Load())), arg(arg='aux_operators', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Subscript(value=Name(id='ListOrDictType', ctx=Load()), slice=Index(value=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='SecondQuantizedOp', ctx=Load()), Name(id='PauliSumOp', ctx=Load())], ctx=Load())), ctx=Load())), ctx=Load())), ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[NameConstant(value=None)]), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_gsc', ctx=Load()), attr='get_qubit_operators', ctx=Load()), args=[Name(id='problem', ctx=Load()), Name(id='aux_operators', ctx=Load())], keywords=[]))], decorator_list=[], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='PauliSumOp', ctx=Load()), Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Subscript(value=Name(id='ListOrDictType', ctx=Load()), slice=Index(value=Name(id='PauliSumOp', ctx=Load())), ctx=Load())), ctx=Load())], ctx=Load())), ctx=Load())), FunctionDef(name='solve', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='problem', annotation=Name(id='BaseProblem', ctx=Load())), arg(arg='aux_operators', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Subscript(value=Name(id='ListOrDictType', ctx=Load()), slice=Index(value=Name(id='SecondQuantizedOp', ctx=Load())), ctx=Load())), ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[NameConstant(value=None)]), body=[Expr(value=Str(s='Run the excited-states calculation.\n\n        Construct and solves the EOM pseudo-eigenvalue problem to obtain the excitation energies\n        and the excitation operators expansion coefficients.\n\n        Args:\n            problem: a class encoding a problem to be solved.\n            aux_operators: Additional auxiliary operators to evaluate.\n\n        Returns:\n            An interpreted :class:`~.EigenstateResult`. For more information see also\n            :meth:`~.BaseProblem.interpret`.\n        ')), If(test=Compare(left=Name(id='aux_operators', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='warning', ctx=Load()), args=[Str(s='With qEOM the auxiliary operators can currently only be evaluated on the ground state.')], keywords=[]))], orelse=[]), Assign(targets=[Name(id='groundstate_result', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_gsc', ctx=Load()), attr='solve', ctx=Load()), args=[Name(id='problem', ctx=Load()), Name(id='aux_operators', ctx=Load())], keywords=[])), Assign(targets=[Name(id='second_q_ops', ctx=Store())], value=Call(func=Attribute(value=Name(id='problem', ctx=Load()), attr='second_q_ops', ctx=Load()), args=[], keywords=[])), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='second_q_ops', ctx=Load()), Name(id='list', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='main_second_q_op', ctx=Store())], value=Subscript(value=Name(id='second_q_ops', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load()))], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='second_q_ops', ctx=Load()), Name(id='dict', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='main_second_q_op', ctx=Store())], value=Call(func=Attribute(value=Name(id='second_q_ops', ctx=Load()), attr='pop', ctx=Load()), args=[Attribute(value=Name(id='problem', ctx=Load()), attr='main_property_name', ctx=Load())], keywords=[]))], orelse=[])]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_untapered_qubit_op_main', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_gsc', ctx=Load()), attr='qubit_converter', ctx=Load()), attr='convert_only', ctx=Load()), args=[Name(id='main_second_q_op', ctx=Load()), Attribute(value=Name(id='problem', ctx=Load()), attr='num_particles', ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='matrix_operators_dict', ctx=Store()), Name(id='size', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_prepare_matrix_operators', ctx=Load()), args=[Name(id='problem', ctx=Load())], keywords=[])), Assign(targets=[Name(id='measurement_results', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_gsc', ctx=Load()), attr='evaluate_operators', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='groundstate_result', ctx=Load()), attr='eigenstates', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load()), Name(id='matrix_operators_dict', ctx=Load())], keywords=[])), Assign(targets=[Name(id='measurement_results', ctx=Store())], value=Call(func=Name(id='cast', ctx=Load()), args=[Subscript(value=Name(id='Dict', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='float', ctx=Load())), ctx=Load())], ctx=Load())), ctx=Load()), Name(id='measurement_results', ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='m_mat', ctx=Store()), Name(id='v_mat', ctx=Store()), Name(id='q_mat', ctx=Store()), Name(id='w_mat', ctx=Store()), Name(id='m_mat_std', ctx=Store()), Name(id='v_mat_std', ctx=Store()), Name(id='q_mat_std', ctx=Store()), Name(id='w_mat_std', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_build_eom_matrices', ctx=Load()), args=[Name(id='measurement_results', ctx=Load()), Name(id='size', ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='energy_gaps', ctx=Store()), Name(id='expansion_coefs', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_compute_excitation_energies', ctx=Load()), args=[Name(id='m_mat', ctx=Load()), Name(id='v_mat', ctx=Load()), Name(id='q_mat', ctx=Load()), Name(id='w_mat', ctx=Load())], keywords=[])), Assign(targets=[Name(id='qeom_result', ctx=Store())], value=Call(func=Name(id='QEOMResult', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='qeom_result', ctx=Load()), attr='ground_state_raw_result', ctx=Store())], value=Attribute(value=Name(id='groundstate_result', ctx=Load()), attr='raw_result', ctx=Load())), Assign(targets=[Attribute(value=Name(id='qeom_result', ctx=Load()), attr='expansion_coefficients', ctx=Store())], value=Name(id='expansion_coefs', ctx=Load())), Assign(targets=[Attribute(value=Name(id='qeom_result', ctx=Load()), attr='excitation_energies', ctx=Store())], value=Name(id='energy_gaps', ctx=Load())), Assign(targets=[Attribute(value=Name(id='qeom_result', ctx=Load()), attr='m_matrix', ctx=Store())], value=Name(id='m_mat', ctx=Load())), Assign(targets=[Attribute(value=Name(id='qeom_result', ctx=Load()), attr='v_matrix', ctx=Store())], value=Name(id='v_mat', ctx=Load())), Assign(targets=[Attribute(value=Name(id='qeom_result', ctx=Load()), attr='q_matrix', ctx=Store())], value=Name(id='q_mat', ctx=Load())), Assign(targets=[Attribute(value=Name(id='qeom_result', ctx=Load()), attr='w_matrix', ctx=Store())], value=Name(id='w_mat', ctx=Load())), Assign(targets=[Attribute(value=Name(id='qeom_result', ctx=Load()), attr='m_matrix_std', ctx=Store())], value=Name(id='m_mat_std', ctx=Load())), Assign(targets=[Attribute(value=Name(id='qeom_result', ctx=Load()), attr='v_matrix_std', ctx=Store())], value=Name(id='v_mat_std', ctx=Load())), Assign(targets=[Attribute(value=Name(id='qeom_result', ctx=Load()), attr='q_matrix_std', ctx=Store())], value=Name(id='q_mat_std', ctx=Load())), Assign(targets=[Attribute(value=Name(id='qeom_result', ctx=Load()), attr='w_matrix_std', ctx=Store())], value=Name(id='w_mat_std', ctx=Load())), Assign(targets=[Name(id='eigenstate_result', ctx=Store())], value=Call(func=Name(id='EigenstateResult', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='eigenstate_result', ctx=Load()), attr='eigenstates', ctx=Store())], value=Attribute(value=Name(id='groundstate_result', ctx=Load()), attr='eigenstates', ctx=Load())), Assign(targets=[Attribute(value=Name(id='eigenstate_result', ctx=Load()), attr='aux_operator_eigenvalues', ctx=Store())], value=Attribute(value=Name(id='groundstate_result', ctx=Load()), attr='aux_operator_eigenvalues', ctx=Load())), Assign(targets=[Attribute(value=Name(id='eigenstate_result', ctx=Load()), attr='raw_result', ctx=Store())], value=Name(id='qeom_result', ctx=Load())), Assign(targets=[Attribute(value=Name(id='eigenstate_result', ctx=Load()), attr='eigenenergies', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Attribute(value=Name(id='groundstate_result', ctx=Load()), attr='eigenenergies', ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='asarray', ctx=Load()), args=[ListComp(elt=BinOp(left=Subscript(value=Attribute(value=Name(id='groundstate_result', ctx=Load()), attr='eigenenergies', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load()), op=Add(), right=Name(id='gap', ctx=Load())), generators=[comprehension(target=Name(id='gap', ctx=Store()), iter=Name(id='energy_gaps', ctx=Load()), ifs=[], is_async=0)])], keywords=[])], keywords=[])), Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Attribute(value=Name(id='problem', ctx=Load()), attr='interpret', ctx=Load()), args=[Name(id='eigenstate_result', ctx=Load())], keywords=[])), Return(value=Name(id='result', ctx=Load()))], decorator_list=[], returns=Name(id='EigenstateResult', ctx=Load())), FunctionDef(name='_prepare_matrix_operators', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='problem', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Construct the excitation operators for each matrix element.\n\n        Returns:\n            a dictionary of all matrix elements operators and the number of excitations\n            (or the size of the qEOM pseudo-eigenvalue problem)\n        ')), Assign(targets=[Name(id='data', ctx=Store())], value=Call(func=Attribute(value=Name(id='problem', ctx=Load()), attr='hopping_qeom_ops', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_gsc', ctx=Load()), attr='qubit_converter', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_excitations', ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='hopping_operators', ctx=Store()), Name(id='type_of_commutativities', ctx=Store()), Name(id='excitation_indices', ctx=Store())], ctx=Store())], value=Name(id='data', ctx=Load())), Assign(targets=[Name(id='size', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='excitation_indices', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[]), op=FloorDiv(), right=Num(n=2))], keywords=[])), Assign(targets=[Name(id='eom_matrix_operators', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_build_all_commutators', ctx=Load()), args=[Name(id='hopping_operators', ctx=Load()), Name(id='type_of_commutativities', ctx=Load()), Name(id='size', ctx=Load())], keywords=[])), Return(value=Tuple(elts=[Name(id='eom_matrix_operators', ctx=Load()), Name(id='size', ctx=Load())], ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='dict', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load())), ctx=Load())), FunctionDef(name='_build_all_commutators', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='hopping_operators', annotation=Name(id='dict', ctx=Load())), arg(arg='type_of_commutativities', annotation=Name(id='dict', ctx=Load())), arg(arg='size', annotation=Name(id='int', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Building all commutators for Q, W, M, V matrices.\n\n        Args:\n            hopping_operators: all hopping operators based on excitations_list,\n                key is the string of single/double excitation;\n                value is corresponding operator.\n            type_of_commutativities: if tapering is used, it records the commutativities of\n                hopping operators with the\n                Z2 symmetries found in the original operator.\n            size: the number of excitations (size of the qEOM pseudo-eigenvalue problem)\n\n        Returns:\n            a dictionary that contains the operators for each matrix element\n        ')), Assign(targets=[Name(id='all_matrix_operators', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Tuple(elts=[Name(id='mus', ctx=Store()), Name(id='nus', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='triu_indices', ctx=Load()), args=[Name(id='size', ctx=Load())], keywords=[])), FunctionDef(name='_build_one_sector', args=arguments(args=[arg(arg='available_hopping_ops', annotation=None), arg(arg='untapered_op', annotation=None), arg(arg='z2_symmetries', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Assign(targets=[Name(id='to_be_computed_list', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Tuple(elts=[Name(id='idx', ctx=Store()), Name(id='m_u', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='mus', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='n_u', ctx=Store())], value=Subscript(value=Name(id='nus', ctx=Load()), slice=Index(value=Name(id='idx', ctx=Load())), ctx=Load())), Assign(targets=[Name(id='left_op', ctx=Store())], value=Call(func=Attribute(value=Name(id='available_hopping_ops', ctx=Load()), attr='get', ctx=Load()), args=[JoinedStr(values=[Str(s='E_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None)])], keywords=[])), Assign(targets=[Name(id='right_op_1', ctx=Store())], value=Call(func=Attribute(value=Name(id='available_hopping_ops', ctx=Load()), attr='get', ctx=Load()), args=[JoinedStr(values=[Str(s='E_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])], keywords=[])), Assign(targets=[Name(id='right_op_2', ctx=Store())], value=Call(func=Attribute(value=Name(id='available_hopping_ops', ctx=Load()), attr='get', ctx=Load()), args=[JoinedStr(values=[Str(s='Edag_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='to_be_computed_list', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Name(id='m_u', ctx=Load()), Name(id='n_u', ctx=Load()), Name(id='left_op', ctx=Load()), Name(id='right_op_1', ctx=Load()), Name(id='right_op_2', ctx=Load())], ctx=Load())], keywords=[]))], orelse=[]), If(test=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='isEnabledFor', ctx=Load()), args=[Attribute(value=Name(id='logging', ctx=Load()), attr='INFO', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='info', ctx=Load()), args=[Str(s='Building all commutators:')], keywords=[])), Expr(value=Call(func=Name(id='TextProgressBar', ctx=Load()), args=[Attribute(value=Name(id='sys', ctx=Load()), attr='stderr', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='results', ctx=Store())], value=Call(func=Name(id='parallel_map', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_build_commutator_routine', ctx=Load()), Name(id='to_be_computed_list', ctx=Load())], keywords=[keyword(arg='task_args', value=Tuple(elts=[Name(id='untapered_op', ctx=Load()), Name(id='z2_symmetries', ctx=Load())], ctx=Load())), keyword(arg='num_processes', value=Attribute(value=Name(id='algorithm_globals', ctx=Load()), attr='num_processes', ctx=Load()))])), For(target=Name(id='result', ctx=Store()), iter=Name(id='results', ctx=Load()), body=[Assign(targets=[Tuple(elts=[Name(id='m_u', ctx=Store()), Name(id='n_u', ctx=Store()), Name(id='q_mat_op', ctx=Store()), Name(id='w_mat_op', ctx=Store()), Name(id='m_mat_op', ctx=Store()), Name(id='v_mat_op', ctx=Store())], ctx=Store())], value=Name(id='result', ctx=Load())), If(test=Compare(left=Name(id='q_mat_op', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=[Assign(targets=[Subscript(value=Name(id='all_matrix_operators', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='q_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])), ctx=Store())], value=Name(id='q_mat_op', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='w_mat_op', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=[Assign(targets=[Subscript(value=Name(id='all_matrix_operators', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='w_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])), ctx=Store())], value=Name(id='w_mat_op', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='m_mat_op', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=[Assign(targets=[Subscript(value=Name(id='all_matrix_operators', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='m_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])), ctx=Store())], value=Name(id='m_mat_op', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='v_mat_op', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=[Assign(targets=[Subscript(value=Name(id='all_matrix_operators', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='v_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])), ctx=Store())], value=Name(id='v_mat_op', ctx=Load()))], orelse=[])], orelse=[])], decorator_list=[], returns=None), Try(body=[Assign(targets=[Name(id='z2_symmetries', ctx=Store())], value=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_gsc', ctx=Load()), attr='qubit_converter', ctx=Load()), attr='z2symmetries', ctx=Load()))], handlers=[ExceptHandler(type=Name(id='AttributeError', ctx=Load()), name=None, body=[Assign(targets=[Name(id='z2_symmetries', ctx=Store())], value=Call(func=Name(id='Z2Symmetries', ctx=Load()), args=[List(elts=[], ctx=Load()), List(elts=[], ctx=Load()), List(elts=[], ctx=Load())], keywords=[]))])], orelse=[], finalbody=[]), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='z2_symmetries', ctx=Load()), attr='is_empty', ctx=Load()), args=[], keywords=[])), body=[Assign(targets=[Name(id='combinations', ctx=Store())], value=Call(func=Attribute(value=Name(id='itertools', ctx=Load()), attr='product', ctx=Load()), args=[List(elts=[Num(n=1), UnaryOp(op=USub(), operand=Num(n=1))], ctx=Load())], keywords=[keyword(arg='repeat', value=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='z2_symmetries', ctx=Load()), attr='symmetries', ctx=Load())], keywords=[]))])), For(target=Name(id='targeted_tapering_values', ctx=Store()), iter=Name(id='combinations', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='info', ctx=Load()), args=[Str(s='In sector: (%s)'), Call(func=Attribute(value=Str(s=','), attr='join', ctx=Load()), args=[ListComp(elt=Call(func=Name(id='str', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='targeted_tapering_values', ctx=Load()), ifs=[], is_async=0)])], keywords=[])], keywords=[])), Assign(targets=[Name(id='available_hopping_ops', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='targeted_sector', ctx=Store())], value=Compare(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='asarray', ctx=Load()), args=[Name(id='targeted_tapering_values', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Num(n=1)])), For(target=Tuple(elts=[Name(id='key', ctx=Store()), Name(id='value', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='type_of_commutativities', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Name(id='value', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='asarray', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[])), If(test=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='all', ctx=Load()), args=[Compare(left=Name(id='value', ctx=Load()), ops=[Eq()], comparators=[Name(id='targeted_sector', ctx=Load())])], keywords=[]), body=[Assign(targets=[Subscript(value=Name(id='available_hopping_ops', ctx=Load()), slice=Index(value=Name(id='key', ctx=Load())), ctx=Store())], value=Subscript(value=Name(id='hopping_operators', ctx=Load()), slice=Index(value=Name(id='key', ctx=Load())), ctx=Load()))], orelse=[])], orelse=[]), Expr(value=Call(func=Name(id='_build_one_sector', ctx=Load()), args=[Name(id='available_hopping_ops', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_untapered_qubit_op_main', ctx=Load()), Name(id='z2_symmetries', ctx=Load())], keywords=[]))], orelse=[])], orelse=[Expr(value=Call(func=Name(id='_build_one_sector', ctx=Load()), args=[Name(id='hopping_operators', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_untapered_qubit_op_main', ctx=Load()), Name(id='z2_symmetries', ctx=Load())], keywords=[]))]), Return(value=Name(id='all_matrix_operators', ctx=Load()))], decorator_list=[], returns=Name(id='dict', ctx=Load())), FunctionDef(name='_build_commutator_routine', args=arguments(args=[arg(arg='params', annotation=Name(id='List', ctx=Load())), arg(arg='operator', annotation=Name(id='PauliSumOp', ctx=Load())), arg(arg='z2_symmetries', annotation=Name(id='Z2Symmetries', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Numerically computes the commutator / double commutator between operators.\n\n        Args:\n            params: list containing the indices of matrix element and the corresponding\n                excitation operators\n            operator: the hamiltonian\n            z2_symmetries: z2_symmetries in case of tapering\n\n        Returns:\n            The indices of the matrix element and the corresponding qubit\n            operator for each of the EOM matrices\n        ')), Assign(targets=[Tuple(elts=[Name(id='m_u', ctx=Store()), Name(id='n_u', ctx=Store()), Name(id='left_op', ctx=Store()), Name(id='right_op_1', ctx=Store()), Name(id='right_op_2', ctx=Store())], ctx=Store())], value=Name(id='params', ctx=Load())), If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='left_op', ctx=Load()), ops=[Is()], comparators=[NameConstant(value=None)]), BoolOp(op=And(), values=[Compare(left=Name(id='right_op_1', ctx=Load()), ops=[Is()], comparators=[NameConstant(value=None)]), Compare(left=Name(id='right_op_2', ctx=Load()), ops=[Is()], comparators=[NameConstant(value=None)])])]), body=[Assign(targets=[Name(id='q_mat_op', ctx=Store())], value=NameConstant(value=None)), Assign(targets=[Name(id='w_mat_op', ctx=Store())], value=NameConstant(value=None)), Assign(targets=[Name(id='m_mat_op', ctx=Store())], value=NameConstant(value=None)), Assign(targets=[Name(id='v_mat_op', ctx=Store())], value=NameConstant(value=None))], orelse=[If(test=Compare(left=Name(id='right_op_1', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=[Assign(targets=[Name(id='q_mat_op', ctx=Store())], value=Call(func=Name(id='double_commutator', ctx=Load()), args=[Name(id='left_op', ctx=Load()), Name(id='operator', ctx=Load()), Name(id='right_op_1', ctx=Load())], keywords=[keyword(arg='sign', value=NameConstant(value=False))])), Assign(targets=[Name(id='w_mat_op', ctx=Store())], value=Call(func=Name(id='commutator', ctx=Load()), args=[Name(id='left_op', ctx=Load()), Name(id='right_op_1', ctx=Load())], keywords=[])), Assign(targets=[Name(id='q_mat_op', ctx=Store())], value=IfExp(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='q_mat_op', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Num(n=0)]), body=NameConstant(value=None), orelse=Name(id='q_mat_op', ctx=Load()))), Assign(targets=[Name(id='w_mat_op', ctx=Store())], value=IfExp(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='w_mat_op', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Num(n=0)]), body=NameConstant(value=None), orelse=Name(id='w_mat_op', ctx=Load())))], orelse=[Assign(targets=[Name(id='q_mat_op', ctx=Store())], value=NameConstant(value=None)), Assign(targets=[Name(id='w_mat_op', ctx=Store())], value=NameConstant(value=None))]), If(test=Compare(left=Name(id='right_op_2', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=[Assign(targets=[Name(id='m_mat_op', ctx=Store())], value=Call(func=Name(id='double_commutator', ctx=Load()), args=[Name(id='left_op', ctx=Load()), Name(id='operator', ctx=Load()), Name(id='right_op_2', ctx=Load())], keywords=[keyword(arg='sign', value=NameConstant(value=False))])), Assign(targets=[Name(id='v_mat_op', ctx=Store())], value=Call(func=Name(id='commutator', ctx=Load()), args=[Name(id='left_op', ctx=Load()), Name(id='right_op_2', ctx=Load())], keywords=[])), Assign(targets=[Name(id='m_mat_op', ctx=Store())], value=IfExp(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='m_mat_op', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Num(n=0)]), body=NameConstant(value=None), orelse=Name(id='m_mat_op', ctx=Load()))), Assign(targets=[Name(id='v_mat_op', ctx=Store())], value=IfExp(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='v_mat_op', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Num(n=0)]), body=NameConstant(value=None), orelse=Name(id='v_mat_op', ctx=Load())))], orelse=[Assign(targets=[Name(id='m_mat_op', ctx=Store())], value=NameConstant(value=None)), Assign(targets=[Name(id='v_mat_op', ctx=Store())], value=NameConstant(value=None))]), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='z2_symmetries', ctx=Load()), attr='is_empty', ctx=Load()), args=[], keywords=[])), body=[If(test=BoolOp(op=And(), values=[Compare(left=Name(id='q_mat_op', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='q_mat_op', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Num(n=0)])]), body=[Assign(targets=[Name(id='q_mat_op', ctx=Store())], value=Call(func=Attribute(value=Name(id='z2_symmetries', ctx=Load()), attr='taper', ctx=Load()), args=[Name(id='q_mat_op', ctx=Load())], keywords=[]))], orelse=[]), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='w_mat_op', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='w_mat_op', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Num(n=0)])]), body=[Assign(targets=[Name(id='w_mat_op', ctx=Store())], value=Call(func=Attribute(value=Name(id='z2_symmetries', ctx=Load()), attr='taper', ctx=Load()), args=[Name(id='w_mat_op', ctx=Load())], keywords=[]))], orelse=[]), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='m_mat_op', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='m_mat_op', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Num(n=0)])]), body=[Assign(targets=[Name(id='m_mat_op', ctx=Store())], value=Call(func=Attribute(value=Name(id='z2_symmetries', ctx=Load()), attr='taper', ctx=Load()), args=[Name(id='m_mat_op', ctx=Load())], keywords=[]))], orelse=[]), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='v_mat_op', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='v_mat_op', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Num(n=0)])]), body=[Assign(targets=[Name(id='v_mat_op', ctx=Store())], value=Call(func=Attribute(value=Name(id='z2_symmetries', ctx=Load()), attr='taper', ctx=Load()), args=[Name(id='v_mat_op', ctx=Load())], keywords=[]))], orelse=[])], orelse=[])]), Return(value=Tuple(elts=[Name(id='m_u', ctx=Load()), Name(id='n_u', ctx=Load()), Name(id='q_mat_op', ctx=Load()), Name(id='w_mat_op', ctx=Load()), Name(id='m_mat_op', ctx=Load()), Name(id='v_mat_op', ctx=Load())], ctx=Load()))], decorator_list=[Name(id='staticmethod', ctx=Load())], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='int', ctx=Load()), Name(id='PauliSumOp', ctx=Load()), Name(id='PauliSumOp', ctx=Load()), Name(id='PauliSumOp', ctx=Load()), Name(id='PauliSumOp', ctx=Load())], ctx=Load())), ctx=Load())), FunctionDef(name='_build_eom_matrices', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='gs_results', annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='float', ctx=Load())), ctx=Load())], ctx=Load())), ctx=Load())), arg(arg='size', annotation=Name(id='int', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Constructs the M, V, Q and W matrices from the results on the ground state\n\n        Args:\n            gs_results: a ground state result object\n            size: size of eigenvalue problem\n\n        Returns:\n            the matrices and their standard deviation\n        ')), Assign(targets=[Tuple(elts=[Name(id='mus', ctx=Store()), Name(id='nus', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='triu_indices', ctx=Load()), args=[Name(id='size', ctx=Load())], keywords=[])), Assign(targets=[Name(id='m_mat', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='zeros', ctx=Load()), args=[Tuple(elts=[Name(id='size', ctx=Load()), Name(id='size', ctx=Load())], ctx=Load())], keywords=[keyword(arg='dtype', value=Name(id='complex', ctx=Load()))])), Assign(targets=[Name(id='v_mat', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='zeros', ctx=Load()), args=[Tuple(elts=[Name(id='size', ctx=Load()), Name(id='size', ctx=Load())], ctx=Load())], keywords=[keyword(arg='dtype', value=Name(id='complex', ctx=Load()))])), Assign(targets=[Name(id='q_mat', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='zeros', ctx=Load()), args=[Tuple(elts=[Name(id='size', ctx=Load()), Name(id='size', ctx=Load())], ctx=Load())], keywords=[keyword(arg='dtype', value=Name(id='complex', ctx=Load()))])), Assign(targets=[Name(id='w_mat', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='zeros', ctx=Load()), args=[Tuple(elts=[Name(id='size', ctx=Load()), Name(id='size', ctx=Load())], ctx=Load())], keywords=[keyword(arg='dtype', value=Name(id='complex', ctx=Load()))])), Assign(targets=[Tuple(elts=[Name(id='m_mat_std', ctx=Store()), Name(id='v_mat_std', ctx=Store()), Name(id='q_mat_std', ctx=Store()), Name(id='w_mat_std', ctx=Store())], ctx=Store())], value=Tuple(elts=[Num(n=0.0), Num(n=0.0), Num(n=0.0), Num(n=0.0)], ctx=Load())), For(target=Tuple(elts=[Name(id='idx', ctx=Store()), Name(id='m_u', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='mus', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='n_u', ctx=Store())], value=Subscript(value=Name(id='nus', ctx=Load()), slice=Index(value=Name(id='idx', ctx=Load())), ctx=Load())), Assign(targets=[Subscript(value=Subscript(value=Name(id='q_mat', ctx=Load()), slice=Index(value=Name(id='m_u', ctx=Load())), ctx=Load()), slice=Index(value=Name(id='n_u', ctx=Load())), ctx=Store())], value=IfExp(test=Compare(left=Call(func=Attribute(value=Name(id='gs_results', ctx=Load()), attr='get', ctx=Load()), args=[JoinedStr(values=[Str(s='q_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])], keywords=[]), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=Subscript(value=Subscript(value=Name(id='gs_results', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='q_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])), ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load()), orelse=Subscript(value=Subscript(value=Name(id='q_mat', ctx=Load()), slice=Index(value=Name(id='m_u', ctx=Load())), ctx=Load()), slice=Index(value=Name(id='n_u', ctx=Load())), ctx=Load()))), Assign(targets=[Subscript(value=Subscript(value=Name(id='w_mat', ctx=Load()), slice=Index(value=Name(id='m_u', ctx=Load())), ctx=Load()), slice=Index(value=Name(id='n_u', ctx=Load())), ctx=Store())], value=IfExp(test=Compare(left=Call(func=Attribute(value=Name(id='gs_results', ctx=Load()), attr='get', ctx=Load()), args=[JoinedStr(values=[Str(s='w_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])], keywords=[]), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=Subscript(value=Subscript(value=Name(id='gs_results', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='w_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])), ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load()), orelse=Subscript(value=Subscript(value=Name(id='w_mat', ctx=Load()), slice=Index(value=Name(id='m_u', ctx=Load())), ctx=Load()), slice=Index(value=Name(id='n_u', ctx=Load())), ctx=Load()))), Assign(targets=[Subscript(value=Subscript(value=Name(id='m_mat', ctx=Load()), slice=Index(value=Name(id='m_u', ctx=Load())), ctx=Load()), slice=Index(value=Name(id='n_u', ctx=Load())), ctx=Store())], value=IfExp(test=Compare(left=Call(func=Attribute(value=Name(id='gs_results', ctx=Load()), attr='get', ctx=Load()), args=[JoinedStr(values=[Str(s='m_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])], keywords=[]), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=Subscript(value=Subscript(value=Name(id='gs_results', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='m_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])), ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load()), orelse=Subscript(value=Subscript(value=Name(id='m_mat', ctx=Load()), slice=Index(value=Name(id='m_u', ctx=Load())), ctx=Load()), slice=Index(value=Name(id='n_u', ctx=Load())), ctx=Load()))), Assign(targets=[Subscript(value=Subscript(value=Name(id='v_mat', ctx=Load()), slice=Index(value=Name(id='m_u', ctx=Load())), ctx=Load()), slice=Index(value=Name(id='n_u', ctx=Load())), ctx=Store())], value=IfExp(test=Compare(left=Call(func=Attribute(value=Name(id='gs_results', ctx=Load()), attr='get', ctx=Load()), args=[JoinedStr(values=[Str(s='v_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])], keywords=[]), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=Subscript(value=Subscript(value=Name(id='gs_results', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='v_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])), ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load()), orelse=Subscript(value=Subscript(value=Name(id='v_mat', ctx=Load()), slice=Index(value=Name(id='m_u', ctx=Load())), ctx=Load()), slice=Index(value=Name(id='n_u', ctx=Load())), ctx=Load()))), AugAssign(target=Name(id='q_mat_std', ctx=Store()), op=Add(), value=IfExp(test=Compare(left=Call(func=Attribute(value=Name(id='gs_results', ctx=Load()), attr='get', ctx=Load()), args=[JoinedStr(values=[Str(s='q_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_std')])], keywords=[]), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=Subscript(value=Subscript(value=Name(id='gs_results', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='q_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_std')])), ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load()), orelse=Num(n=0))), AugAssign(target=Name(id='w_mat_std', ctx=Store()), op=Add(), value=IfExp(test=Compare(left=Call(func=Attribute(value=Name(id='gs_results', ctx=Load()), attr='get', ctx=Load()), args=[JoinedStr(values=[Str(s='w_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_std')])], keywords=[]), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=Subscript(value=Subscript(value=Name(id='gs_results', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='w_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_std')])), ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load()), orelse=Num(n=0))), AugAssign(target=Name(id='m_mat_std', ctx=Store()), op=Add(), value=IfExp(test=Compare(left=Call(func=Attribute(value=Name(id='gs_results', ctx=Load()), attr='get', ctx=Load()), args=[JoinedStr(values=[Str(s='m_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_std')])], keywords=[]), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=Subscript(value=Subscript(value=Name(id='gs_results', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='m_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_std')])), ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load()), orelse=Num(n=0))), AugAssign(target=Name(id='v_mat_std', ctx=Store()), op=Add(), value=IfExp(test=Compare(left=Call(func=Attribute(value=Name(id='gs_results', ctx=Load()), attr='get', ctx=Load()), args=[JoinedStr(values=[Str(s='v_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_std')])], keywords=[]), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=Subscript(value=Subscript(value=Name(id='gs_results', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='v_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_std')])), ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load()), orelse=Num(n=0)))], orelse=[]), Assign(targets=[Name(id='q_mat', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='q_mat', ctx=Load()), op=Add(), right=Attribute(value=Name(id='q_mat', ctx=Load()), attr='T', ctx=Load())), op=Sub(), right=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='identity', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='q_mat', ctx=Load()), attr='shape', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())], keywords=[]), op=Mult(), right=Name(id='q_mat', ctx=Load())))), Assign(targets=[Name(id='w_mat', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='w_mat', ctx=Load()), op=Add(), right=Attribute(value=Name(id='w_mat', ctx=Load()), attr='T', ctx=Load())), op=Sub(), right=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='identity', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='w_mat', ctx=Load()), attr='shape', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())], keywords=[]), op=Mult(), right=Name(id='w_mat', ctx=Load())))), Assign(targets=[Name(id='m_mat', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='m_mat', ctx=Load()), op=Add(), right=Attribute(value=Name(id='m_mat', ctx=Load()), attr='T', ctx=Load())), op=Sub(), right=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='identity', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='m_mat', ctx=Load()), attr='shape', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())], keywords=[]), op=Mult(), right=Name(id='m_mat', ctx=Load())))), Assign(targets=[Name(id='v_mat', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='v_mat', ctx=Load()), op=Add(), right=Attribute(value=Name(id='v_mat', ctx=Load()), attr='T', ctx=Load())), op=Sub(), right=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='identity', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='v_mat', ctx=Load()), attr='shape', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())], keywords=[]), op=Mult(), right=Name(id='v_mat', ctx=Load())))), Assign(targets=[Name(id='q_mat', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='real', ctx=Load()), args=[Name(id='q_mat', ctx=Load())], keywords=[])), Assign(targets=[Name(id='w_mat', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='real', ctx=Load()), args=[Name(id='w_mat', ctx=Load())], keywords=[])), Assign(targets=[Name(id='m_mat', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='real', ctx=Load()), args=[Name(id='m_mat', ctx=Load())], keywords=[])), Assign(targets=[Name(id='v_mat', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='real', ctx=Load()), args=[Name(id='v_mat', ctx=Load())], keywords=[])), Assign(targets=[Name(id='q_mat_std', ctx=Store())], value=BinOp(left=Name(id='q_mat_std', ctx=Load()), op=Div(), right=Call(func=Name(id='float', ctx=Load()), args=[BinOp(left=Name(id='size', ctx=Load()), op=Pow(), right=Num(n=2))], keywords=[]))), Assign(targets=[Name(id='w_mat_std', ctx=Store())], value=BinOp(left=Name(id='w_mat_std', ctx=Load()), op=Div(), right=Call(func=Name(id='float', ctx=Load()), args=[BinOp(left=Name(id='size', ctx=Load()), op=Pow(), right=Num(n=2))], keywords=[]))), Assign(targets=[Name(id='m_mat_std', ctx=Store())], value=BinOp(left=Name(id='m_mat_std', ctx=Load()), op=Div(), right=Call(func=Name(id='float', ctx=Load()), args=[BinOp(left=Name(id='size', ctx=Load()), op=Pow(), right=Num(n=2))], keywords=[]))), Assign(targets=[Name(id='v_mat_std', ctx=Store())], value=BinOp(left=Name(id='v_mat_std', ctx=Load()), op=Div(), right=Call(func=Name(id='float', ctx=Load()), args=[BinOp(left=Name(id='size', ctx=Load()), op=Pow(), right=Num(n=2))], keywords=[]))), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Str(s='\nQ:=========================\n%s'), Name(id='q_mat', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Str(s='\nW:=========================\n%s'), Name(id='w_mat', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Str(s='\nM:=========================\n%s'), Name(id='m_mat', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Str(s='\nV:=========================\n%s'), Name(id='v_mat', ctx=Load())], keywords=[])), Return(value=Tuple(elts=[Name(id='m_mat', ctx=Load()), Name(id='v_mat', ctx=Load()), Name(id='q_mat', ctx=Load()), Name(id='w_mat', ctx=Load()), Name(id='m_mat_std', ctx=Load()), Name(id='v_mat_std', ctx=Load()), Name(id='q_mat_std', ctx=Load()), Name(id='w_mat_std', ctx=Load())], ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Index(value=Tuple(elts=[Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Name(id='float', ctx=Load()), Name(id='float', ctx=Load()), Name(id='float', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load())), ctx=Load())), FunctionDef(name='_compute_excitation_energies', args=arguments(args=[arg(arg='m_mat', annotation=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), arg(arg='v_mat', annotation=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), arg(arg='q_mat', annotation=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), arg(arg='w_mat', annotation=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Diagonalizing M, V, Q, W matrices for excitation energies.\n\n        Args:\n            m_mat : M matrices\n            v_mat : V matrices\n            q_mat : Q matrices\n            w_mat : W matrices\n\n        Returns:\n            1-D vector stores all energy gap to reference state\n            2-D array storing the X and Y expansion coefficients\n        ')), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Str(s='Diagonalizing qeom matrices for excited states...')], keywords=[])), Assign(targets=[Name(id='a_mat', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='np', ctx=Load()), attr='matrixlib', ctx=Load()), attr='bmat', ctx=Load()), args=[List(elts=[List(elts=[Name(id='m_mat', ctx=Load()), Name(id='q_mat', ctx=Load())], ctx=Load()), List(elts=[Call(func=Attribute(value=Attribute(value=Name(id='q_mat', ctx=Load()), attr='T', ctx=Load()), attr='conj', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Attribute(value=Name(id='m_mat', ctx=Load()), attr='T', ctx=Load()), attr='conj', ctx=Load()), args=[], keywords=[])], ctx=Load())], ctx=Load())], keywords=[])), Assign(targets=[Name(id='b_mat', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='np', ctx=Load()), attr='matrixlib', ctx=Load()), attr='bmat', ctx=Load()), args=[List(elts=[List(elts=[Name(id='v_mat', ctx=Load()), Name(id='w_mat', ctx=Load())], ctx=Load()), List(elts=[UnaryOp(op=USub(), operand=Call(func=Attribute(value=Attribute(value=Name(id='w_mat', ctx=Load()), attr='T', ctx=Load()), attr='conj', ctx=Load()), args=[], keywords=[])), UnaryOp(op=USub(), operand=Call(func=Attribute(value=Attribute(value=Name(id='v_mat', ctx=Load()), attr='T', ctx=Load()), attr='conj', ctx=Load()), args=[], keywords=[]))], ctx=Load())], ctx=Load())], keywords=[])), Assign(targets=[Name(id='res', ctx=Store())], value=Call(func=Attribute(value=Name(id='linalg', ctx=Load()), attr='eig', ctx=Load()), args=[Name(id='a_mat', ctx=Load()), Name(id='b_mat', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Subscript(value=Name(id='res', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load()), slice=Index(value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='isnan', ctx=Load()), args=[Subscript(value=Name(id='res', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())], keywords=[])], keywords=[])), ctx=Store())], value=Num(n=0.0)), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Str(s='... %s'), Subscript(value=Name(id='res', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())], keywords=[])), Assign(targets=[Name(id='w', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sort', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='real', ctx=Load()), args=[Subscript(value=Name(id='res', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Str(s='Sorted real parts %s'), Name(id='w', ctx=Load())], keywords=[])), Assign(targets=[Name(id='w', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='abs', ctx=Load()), args=[Subscript(value=Name(id='w', ctx=Load()), slice=Slice(lower=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='w', ctx=Load())], keywords=[]), op=FloorDiv(), right=Num(n=2)), upper=None, step=None), ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Name(id='w', ctx=Load()), slice=Index(value=Compare(left=Name(id='w', ctx=Load()), ops=[Lt()], comparators=[Num(n=1e-06)])), ctx=Store())], value=Num(n=0)), Assign(targets=[Name(id='excitation_energies_gap', ctx=Store())], value=Name(id='w', ctx=Load())), Return(value=Tuple(elts=[Name(id='excitation_energies_gap', ctx=Load()), Subscript(value=Name(id='res', ctx=Load()), slice=Index(value=Num(n=1)), ctx=Load())], ctx=Load()))], decorator_list=[Name(id='staticmethod', ctx=Load())], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Index(value=Tuple(elts=[Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())], ctx=Load())), ctx=Load()))], decorator_list=[]), ClassDef(name='QEOMResult', bases=[Name(id='AlgorithmResult', ctx=Load())], keywords=[], body=[Expr(value=Str(s='The results class for the QEOM algorithm.')), FunctionDef(name='__init__', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_ground_state_raw_result', ctx=Store())], value=NameConstant(value=None)), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_excitation_energies', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), ctx=Load()), value=NameConstant(value=None), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_expansion_coefficients', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), ctx=Load()), value=NameConstant(value=None), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_m_matrix', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), ctx=Load()), value=NameConstant(value=None), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_v_matrix', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), ctx=Load()), value=NameConstant(value=None), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_q_matrix', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), ctx=Load()), value=NameConstant(value=None), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_w_matrix', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), ctx=Load()), value=NameConstant(value=None), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_v_matrix_std', ctx=Store()), annotation=Name(id='float', ctx=Load()), value=Num(n=0.0), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_q_matrix_std', ctx=Store()), annotation=Name(id='float', ctx=Load()), value=Num(n=0.0), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_w_matrix_std', ctx=Store()), annotation=Name(id='float', ctx=Load()), value=Num(n=0.0), simple=0)], decorator_list=[], returns=NameConstant(value=None)), FunctionDef(name='ground_state_raw_result', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='returns ground state raw result')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_ground_state_raw_result', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=None), FunctionDef(name='ground_state_raw_result', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='value', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='sets ground state raw result')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_ground_state_raw_result', ctx=Store())], value=Name(id='value', ctx=Load()))], decorator_list=[Attribute(value=Name(id='ground_state_raw_result', ctx=Load()), attr='setter', ctx=Load())], returns=NameConstant(value=None)), FunctionDef(name='excitation_energies', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='returns the excitation energies (energy gaps)')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_excitation_energies', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), ctx=Load())), FunctionDef(name='excitation_energies', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='value', annotation=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='sets the excitation energies (energy gaps)')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_excitation_energies', ctx=Store())], value=Name(id='value', ctx=Load()))], decorator_list=[Attribute(value=Name(id='excitation_energies', ctx=Load()), attr='setter', ctx=Load())], returns=NameConstant(value=None)), FunctionDef(name='expansion_coefficients', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='returns the X and Y expansion coefficients')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_expansion_coefficients', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), ctx=Load())), FunctionDef(name='expansion_coefficients', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='value', annotation=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='sets the X and Y expansion coefficients')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_expansion_coefficients', ctx=Store())], value=Name(id='value', ctx=Load()))], decorator_list=[Attribute(value=Name(id='expansion_coefficients', ctx=Load()), attr='setter', ctx=Load())], returns=NameConstant(value=None)), FunctionDef(name='m_matrix', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='returns the M matrix')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_m_matrix', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), ctx=Load())), FunctionDef(name='m_matrix', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='value', annotation=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='sets the M matrix')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_m_matrix', ctx=Store())], value=Name(id='value', ctx=Load()))], decorator_list=[Attribute(value=Name(id='m_matrix', ctx=Load()), attr='setter', ctx=Load())], returns=NameConstant(value=None)), FunctionDef(name='v_matrix', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='returns the V matrix')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_v_matrix', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), ctx=Load())), FunctionDef(name='v_matrix', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='value', annotation=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='sets the V matrix')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_v_matrix', ctx=Store())], value=Name(id='value', ctx=Load()))], decorator_list=[Attribute(value=Name(id='v_matrix', ctx=Load()), attr='setter', ctx=Load())], returns=NameConstant(value=None)), FunctionDef(name='q_matrix', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='returns the Q matrix')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_q_matrix', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), ctx=Load())), FunctionDef(name='q_matrix', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='value', annotation=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='sets the Q matrix')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_q_matrix', ctx=Store())], value=Name(id='value', ctx=Load()))], decorator_list=[Attribute(value=Name(id='q_matrix', ctx=Load()), attr='setter', ctx=Load())], returns=NameConstant(value=None)), FunctionDef(name='w_matrix', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='returns the W matrix')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_w_matrix', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), ctx=Load())), FunctionDef(name='w_matrix', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='value', annotation=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='sets the W matrix')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_w_matrix', ctx=Store())], value=Name(id='value', ctx=Load()))], decorator_list=[Attribute(value=Name(id='w_matrix', ctx=Load()), attr='setter', ctx=Load())], returns=NameConstant(value=None)), FunctionDef(name='m_matrix_std', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='returns the M matrix standard deviation')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_m_matrix_std', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='float', ctx=Load())), FunctionDef(name='m_matrix_std', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='value', annotation=Name(id='float', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='sets the M matrix standard deviation')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_m_matrix_std', ctx=Store())], value=Name(id='value', ctx=Load()))], decorator_list=[Attribute(value=Name(id='m_matrix_std', ctx=Load()), attr='setter', ctx=Load())], returns=NameConstant(value=None)), FunctionDef(name='v_matrix_std', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='returns the V matrix standard deviation')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_v_matrix_std', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='float', ctx=Load())), FunctionDef(name='v_matrix_std', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='value', annotation=Name(id='float', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='sets the V matrix standard deviation')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_v_matrix_std', ctx=Store())], value=Name(id='value', ctx=Load()))], decorator_list=[Attribute(value=Name(id='v_matrix_std', ctx=Load()), attr='setter', ctx=Load())], returns=NameConstant(value=None)), FunctionDef(name='q_matrix_std', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='returns the Q matrix standard deviation')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_q_matrix_std', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='float', ctx=Load())), FunctionDef(name='q_matrix_std', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='value', annotation=Name(id='float', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='sets the Q matrix standard deviation')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_q_matrix_std', ctx=Store())], value=Name(id='value', ctx=Load()))], decorator_list=[Attribute(value=Name(id='q_matrix_std', ctx=Load()), attr='setter', ctx=Load())], returns=NameConstant(value=None)), FunctionDef(name='w_matrix_std', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='returns the W matrix standard deviation')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_w_matrix_std', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='float', ctx=Load())), FunctionDef(name='w_matrix_std', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='value', annotation=Name(id='float', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='sets the W matrix standard deviation')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_w_matrix_std', ctx=Store())], value=Name(id='value', ctx=Load()))], decorator_list=[Attribute(value=Name(id='w_matrix_std', ctx=Load()), attr='setter', ctx=Load())], returns=NameConstant(value=None))], decorator_list=[])])
Expr(value=Str(s='The calculation of excited states via the qEOM algorithm'))
ImportFrom(module='typing', names=[alias(name='List', asname=None), alias(name='Union', asname=None), alias(name='Optional', asname=None), alias(name='Tuple', asname=None), alias(name='Dict', asname=None), alias(name='cast', asname=None)], level=0)
Import(names=[alias(name='itertools', asname=None)])
Import(names=[alias(name='logging', asname=None)])
Import(names=[alias(name='sys', asname=None)])
Import(names=[alias(name='numpy', asname='np')])
ImportFrom(module='scipy', names=[alias(name='linalg', asname=None)], level=0)
ImportFrom(module='qiskit.tools', names=[alias(name='parallel_map', asname=None)], level=0)
ImportFrom(module='qiskit.tools.events', names=[alias(name='TextProgressBar', asname=None)], level=0)
ImportFrom(module='qiskit.utils', names=[alias(name='algorithm_globals', asname=None)], level=0)
ImportFrom(module='qiskit.algorithms', names=[alias(name='AlgorithmResult', asname=None)], level=0)
ImportFrom(module='qiskit.opflow', names=[alias(name='Z2Symmetries', asname=None), alias(name='commutator', asname=None), alias(name='double_commutator', asname=None), alias(name='PauliSumOp', asname=None)], level=0)
ImportFrom(module='qiskit_nature', names=[alias(name='ListOrDictType', asname=None)], level=0)
ImportFrom(module='qiskit_nature.operators.second_quantization', names=[alias(name='SecondQuantizedOp', asname=None)], level=0)
ImportFrom(module='qiskit_nature.problems.second_quantization', names=[alias(name='BaseProblem', asname=None)], level=0)
ImportFrom(module='qiskit_nature.results', names=[alias(name='EigenstateResult', asname=None)], level=0)
ImportFrom(module='excited_states_solver', names=[alias(name='ExcitedStatesSolver', asname=None)], level=1)
ImportFrom(module='ground_state_solvers', names=[alias(name='GroundStateSolver', asname=None)], level=2)
Assign(targets=[Name(id='logger', ctx=Store())], value=Call(func=Attribute(value=Name(id='logging', ctx=Load()), attr='getLogger', ctx=Load()), args=[Name(id='__name__', ctx=Load())], keywords=[]))
ClassDef(name='QEOM', bases=[Name(id='ExcitedStatesSolver', ctx=Load())], keywords=[], body=[Expr(value=Str(s='The calculation of excited states via the qEOM algorithm')), FunctionDef(name='__init__', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='ground_state_solver', annotation=Name(id='GroundStateSolver', ctx=Load())), arg(arg='excitations', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='int', ctx=Load())), ctx=Load())), ctx=Load())], ctx=Load())), ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[Str(s='sd')]), body=[Expr(value=Str(s="\n        Args:\n            ground_state_solver: a GroundStateSolver object. The qEOM algorithm\n                will use this ground state to compute the EOM matrix elements\n            excitations: The excitations to be included in the eom pseudo-eigenvalue problem.\n                If a string ('s', 'd' or 'sd') then all excitations of the given type will be used.\n                Otherwise a list of custom excitations can directly be provided.\n        ")), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_gsc', ctx=Store())], value=Name(id='ground_state_solver', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='excitations', ctx=Store())], value=Name(id='excitations', ctx=Load())), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_untapered_qubit_op_main', ctx=Store()), annotation=Name(id='PauliSumOp', ctx=Load()), value=NameConstant(value=None), simple=0)], decorator_list=[], returns=NameConstant(value=None)), FunctionDef(name='excitations', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Returns the excitations to be included in the eom pseudo-eigenvalue problem.')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_excitations', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='int', ctx=Load())), ctx=Load())), ctx=Load())], ctx=Load())), ctx=Load())), FunctionDef(name='excitations', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='excitations', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='int', ctx=Load())), ctx=Load())), ctx=Load())], ctx=Load())), ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='The excitations to be included in the eom pseudo-eigenvalue problem. If a string then\n        all excitations of given type will be used. Otherwise a list of custom excitations can\n        directly be provided.')), If(test=BoolOp(op=And(), values=[Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='excitations', ctx=Load()), Name(id='str', ctx=Load())], keywords=[]), Compare(left=Name(id='excitations', ctx=Load()), ops=[NotIn()], comparators=[List(elts=[Str(s='s'), Str(s='d'), Str(s='sd')], ctx=Load())])]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Str(s='Excitation type must be s (singles), d (doubles) or sd (singles and doubles)')], keywords=[]), cause=None)], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_excitations', ctx=Store())], value=Name(id='excitations', ctx=Load()))], decorator_list=[Attribute(value=Name(id='excitations', ctx=Load()), attr='setter', ctx=Load())], returns=NameConstant(value=None)), FunctionDef(name='solver', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Return(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_gsc', ctx=Load()), attr='solver', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=None), FunctionDef(name='get_qubit_operators', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='problem', annotation=Name(id='BaseProblem', ctx=Load())), arg(arg='aux_operators', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Subscript(value=Name(id='ListOrDictType', ctx=Load()), slice=Index(value=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='SecondQuantizedOp', ctx=Load()), Name(id='PauliSumOp', ctx=Load())], ctx=Load())), ctx=Load())), ctx=Load())), ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[NameConstant(value=None)]), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_gsc', ctx=Load()), attr='get_qubit_operators', ctx=Load()), args=[Name(id='problem', ctx=Load()), Name(id='aux_operators', ctx=Load())], keywords=[]))], decorator_list=[], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='PauliSumOp', ctx=Load()), Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Subscript(value=Name(id='ListOrDictType', ctx=Load()), slice=Index(value=Name(id='PauliSumOp', ctx=Load())), ctx=Load())), ctx=Load())], ctx=Load())), ctx=Load())), FunctionDef(name='solve', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='problem', annotation=Name(id='BaseProblem', ctx=Load())), arg(arg='aux_operators', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Subscript(value=Name(id='ListOrDictType', ctx=Load()), slice=Index(value=Name(id='SecondQuantizedOp', ctx=Load())), ctx=Load())), ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[NameConstant(value=None)]), body=[Expr(value=Str(s='Run the excited-states calculation.\n\n        Construct and solves the EOM pseudo-eigenvalue problem to obtain the excitation energies\n        and the excitation operators expansion coefficients.\n\n        Args:\n            problem: a class encoding a problem to be solved.\n            aux_operators: Additional auxiliary operators to evaluate.\n\n        Returns:\n            An interpreted :class:`~.EigenstateResult`. For more information see also\n            :meth:`~.BaseProblem.interpret`.\n        ')), If(test=Compare(left=Name(id='aux_operators', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='warning', ctx=Load()), args=[Str(s='With qEOM the auxiliary operators can currently only be evaluated on the ground state.')], keywords=[]))], orelse=[]), Assign(targets=[Name(id='groundstate_result', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_gsc', ctx=Load()), attr='solve', ctx=Load()), args=[Name(id='problem', ctx=Load()), Name(id='aux_operators', ctx=Load())], keywords=[])), Assign(targets=[Name(id='second_q_ops', ctx=Store())], value=Call(func=Attribute(value=Name(id='problem', ctx=Load()), attr='second_q_ops', ctx=Load()), args=[], keywords=[])), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='second_q_ops', ctx=Load()), Name(id='list', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='main_second_q_op', ctx=Store())], value=Subscript(value=Name(id='second_q_ops', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load()))], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='second_q_ops', ctx=Load()), Name(id='dict', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='main_second_q_op', ctx=Store())], value=Call(func=Attribute(value=Name(id='second_q_ops', ctx=Load()), attr='pop', ctx=Load()), args=[Attribute(value=Name(id='problem', ctx=Load()), attr='main_property_name', ctx=Load())], keywords=[]))], orelse=[])]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_untapered_qubit_op_main', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_gsc', ctx=Load()), attr='qubit_converter', ctx=Load()), attr='convert_only', ctx=Load()), args=[Name(id='main_second_q_op', ctx=Load()), Attribute(value=Name(id='problem', ctx=Load()), attr='num_particles', ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='matrix_operators_dict', ctx=Store()), Name(id='size', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_prepare_matrix_operators', ctx=Load()), args=[Name(id='problem', ctx=Load())], keywords=[])), Assign(targets=[Name(id='measurement_results', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_gsc', ctx=Load()), attr='evaluate_operators', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='groundstate_result', ctx=Load()), attr='eigenstates', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load()), Name(id='matrix_operators_dict', ctx=Load())], keywords=[])), Assign(targets=[Name(id='measurement_results', ctx=Store())], value=Call(func=Name(id='cast', ctx=Load()), args=[Subscript(value=Name(id='Dict', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='float', ctx=Load())), ctx=Load())], ctx=Load())), ctx=Load()), Name(id='measurement_results', ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='m_mat', ctx=Store()), Name(id='v_mat', ctx=Store()), Name(id='q_mat', ctx=Store()), Name(id='w_mat', ctx=Store()), Name(id='m_mat_std', ctx=Store()), Name(id='v_mat_std', ctx=Store()), Name(id='q_mat_std', ctx=Store()), Name(id='w_mat_std', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_build_eom_matrices', ctx=Load()), args=[Name(id='measurement_results', ctx=Load()), Name(id='size', ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='energy_gaps', ctx=Store()), Name(id='expansion_coefs', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_compute_excitation_energies', ctx=Load()), args=[Name(id='m_mat', ctx=Load()), Name(id='v_mat', ctx=Load()), Name(id='q_mat', ctx=Load()), Name(id='w_mat', ctx=Load())], keywords=[])), Assign(targets=[Name(id='qeom_result', ctx=Store())], value=Call(func=Name(id='QEOMResult', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='qeom_result', ctx=Load()), attr='ground_state_raw_result', ctx=Store())], value=Attribute(value=Name(id='groundstate_result', ctx=Load()), attr='raw_result', ctx=Load())), Assign(targets=[Attribute(value=Name(id='qeom_result', ctx=Load()), attr='expansion_coefficients', ctx=Store())], value=Name(id='expansion_coefs', ctx=Load())), Assign(targets=[Attribute(value=Name(id='qeom_result', ctx=Load()), attr='excitation_energies', ctx=Store())], value=Name(id='energy_gaps', ctx=Load())), Assign(targets=[Attribute(value=Name(id='qeom_result', ctx=Load()), attr='m_matrix', ctx=Store())], value=Name(id='m_mat', ctx=Load())), Assign(targets=[Attribute(value=Name(id='qeom_result', ctx=Load()), attr='v_matrix', ctx=Store())], value=Name(id='v_mat', ctx=Load())), Assign(targets=[Attribute(value=Name(id='qeom_result', ctx=Load()), attr='q_matrix', ctx=Store())], value=Name(id='q_mat', ctx=Load())), Assign(targets=[Attribute(value=Name(id='qeom_result', ctx=Load()), attr='w_matrix', ctx=Store())], value=Name(id='w_mat', ctx=Load())), Assign(targets=[Attribute(value=Name(id='qeom_result', ctx=Load()), attr='m_matrix_std', ctx=Store())], value=Name(id='m_mat_std', ctx=Load())), Assign(targets=[Attribute(value=Name(id='qeom_result', ctx=Load()), attr='v_matrix_std', ctx=Store())], value=Name(id='v_mat_std', ctx=Load())), Assign(targets=[Attribute(value=Name(id='qeom_result', ctx=Load()), attr='q_matrix_std', ctx=Store())], value=Name(id='q_mat_std', ctx=Load())), Assign(targets=[Attribute(value=Name(id='qeom_result', ctx=Load()), attr='w_matrix_std', ctx=Store())], value=Name(id='w_mat_std', ctx=Load())), Assign(targets=[Name(id='eigenstate_result', ctx=Store())], value=Call(func=Name(id='EigenstateResult', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='eigenstate_result', ctx=Load()), attr='eigenstates', ctx=Store())], value=Attribute(value=Name(id='groundstate_result', ctx=Load()), attr='eigenstates', ctx=Load())), Assign(targets=[Attribute(value=Name(id='eigenstate_result', ctx=Load()), attr='aux_operator_eigenvalues', ctx=Store())], value=Attribute(value=Name(id='groundstate_result', ctx=Load()), attr='aux_operator_eigenvalues', ctx=Load())), Assign(targets=[Attribute(value=Name(id='eigenstate_result', ctx=Load()), attr='raw_result', ctx=Store())], value=Name(id='qeom_result', ctx=Load())), Assign(targets=[Attribute(value=Name(id='eigenstate_result', ctx=Load()), attr='eigenenergies', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Attribute(value=Name(id='groundstate_result', ctx=Load()), attr='eigenenergies', ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='asarray', ctx=Load()), args=[ListComp(elt=BinOp(left=Subscript(value=Attribute(value=Name(id='groundstate_result', ctx=Load()), attr='eigenenergies', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load()), op=Add(), right=Name(id='gap', ctx=Load())), generators=[comprehension(target=Name(id='gap', ctx=Store()), iter=Name(id='energy_gaps', ctx=Load()), ifs=[], is_async=0)])], keywords=[])], keywords=[])), Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Attribute(value=Name(id='problem', ctx=Load()), attr='interpret', ctx=Load()), args=[Name(id='eigenstate_result', ctx=Load())], keywords=[])), Return(value=Name(id='result', ctx=Load()))], decorator_list=[], returns=Name(id='EigenstateResult', ctx=Load())), FunctionDef(name='_prepare_matrix_operators', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='problem', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Construct the excitation operators for each matrix element.\n\n        Returns:\n            a dictionary of all matrix elements operators and the number of excitations\n            (or the size of the qEOM pseudo-eigenvalue problem)\n        ')), Assign(targets=[Name(id='data', ctx=Store())], value=Call(func=Attribute(value=Name(id='problem', ctx=Load()), attr='hopping_qeom_ops', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_gsc', ctx=Load()), attr='qubit_converter', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_excitations', ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='hopping_operators', ctx=Store()), Name(id='type_of_commutativities', ctx=Store()), Name(id='excitation_indices', ctx=Store())], ctx=Store())], value=Name(id='data', ctx=Load())), Assign(targets=[Name(id='size', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='excitation_indices', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[]), op=FloorDiv(), right=Num(n=2))], keywords=[])), Assign(targets=[Name(id='eom_matrix_operators', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_build_all_commutators', ctx=Load()), args=[Name(id='hopping_operators', ctx=Load()), Name(id='type_of_commutativities', ctx=Load()), Name(id='size', ctx=Load())], keywords=[])), Return(value=Tuple(elts=[Name(id='eom_matrix_operators', ctx=Load()), Name(id='size', ctx=Load())], ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='dict', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load())), ctx=Load())), FunctionDef(name='_build_all_commutators', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='hopping_operators', annotation=Name(id='dict', ctx=Load())), arg(arg='type_of_commutativities', annotation=Name(id='dict', ctx=Load())), arg(arg='size', annotation=Name(id='int', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Building all commutators for Q, W, M, V matrices.\n\n        Args:\n            hopping_operators: all hopping operators based on excitations_list,\n                key is the string of single/double excitation;\n                value is corresponding operator.\n            type_of_commutativities: if tapering is used, it records the commutativities of\n                hopping operators with the\n                Z2 symmetries found in the original operator.\n            size: the number of excitations (size of the qEOM pseudo-eigenvalue problem)\n\n        Returns:\n            a dictionary that contains the operators for each matrix element\n        ')), Assign(targets=[Name(id='all_matrix_operators', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Tuple(elts=[Name(id='mus', ctx=Store()), Name(id='nus', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='triu_indices', ctx=Load()), args=[Name(id='size', ctx=Load())], keywords=[])), FunctionDef(name='_build_one_sector', args=arguments(args=[arg(arg='available_hopping_ops', annotation=None), arg(arg='untapered_op', annotation=None), arg(arg='z2_symmetries', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Assign(targets=[Name(id='to_be_computed_list', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Tuple(elts=[Name(id='idx', ctx=Store()), Name(id='m_u', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='mus', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='n_u', ctx=Store())], value=Subscript(value=Name(id='nus', ctx=Load()), slice=Index(value=Name(id='idx', ctx=Load())), ctx=Load())), Assign(targets=[Name(id='left_op', ctx=Store())], value=Call(func=Attribute(value=Name(id='available_hopping_ops', ctx=Load()), attr='get', ctx=Load()), args=[JoinedStr(values=[Str(s='E_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None)])], keywords=[])), Assign(targets=[Name(id='right_op_1', ctx=Store())], value=Call(func=Attribute(value=Name(id='available_hopping_ops', ctx=Load()), attr='get', ctx=Load()), args=[JoinedStr(values=[Str(s='E_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])], keywords=[])), Assign(targets=[Name(id='right_op_2', ctx=Store())], value=Call(func=Attribute(value=Name(id='available_hopping_ops', ctx=Load()), attr='get', ctx=Load()), args=[JoinedStr(values=[Str(s='Edag_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='to_be_computed_list', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Name(id='m_u', ctx=Load()), Name(id='n_u', ctx=Load()), Name(id='left_op', ctx=Load()), Name(id='right_op_1', ctx=Load()), Name(id='right_op_2', ctx=Load())], ctx=Load())], keywords=[]))], orelse=[]), If(test=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='isEnabledFor', ctx=Load()), args=[Attribute(value=Name(id='logging', ctx=Load()), attr='INFO', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='info', ctx=Load()), args=[Str(s='Building all commutators:')], keywords=[])), Expr(value=Call(func=Name(id='TextProgressBar', ctx=Load()), args=[Attribute(value=Name(id='sys', ctx=Load()), attr='stderr', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='results', ctx=Store())], value=Call(func=Name(id='parallel_map', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_build_commutator_routine', ctx=Load()), Name(id='to_be_computed_list', ctx=Load())], keywords=[keyword(arg='task_args', value=Tuple(elts=[Name(id='untapered_op', ctx=Load()), Name(id='z2_symmetries', ctx=Load())], ctx=Load())), keyword(arg='num_processes', value=Attribute(value=Name(id='algorithm_globals', ctx=Load()), attr='num_processes', ctx=Load()))])), For(target=Name(id='result', ctx=Store()), iter=Name(id='results', ctx=Load()), body=[Assign(targets=[Tuple(elts=[Name(id='m_u', ctx=Store()), Name(id='n_u', ctx=Store()), Name(id='q_mat_op', ctx=Store()), Name(id='w_mat_op', ctx=Store()), Name(id='m_mat_op', ctx=Store()), Name(id='v_mat_op', ctx=Store())], ctx=Store())], value=Name(id='result', ctx=Load())), If(test=Compare(left=Name(id='q_mat_op', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=[Assign(targets=[Subscript(value=Name(id='all_matrix_operators', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='q_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])), ctx=Store())], value=Name(id='q_mat_op', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='w_mat_op', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=[Assign(targets=[Subscript(value=Name(id='all_matrix_operators', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='w_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])), ctx=Store())], value=Name(id='w_mat_op', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='m_mat_op', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=[Assign(targets=[Subscript(value=Name(id='all_matrix_operators', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='m_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])), ctx=Store())], value=Name(id='m_mat_op', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='v_mat_op', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=[Assign(targets=[Subscript(value=Name(id='all_matrix_operators', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='v_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])), ctx=Store())], value=Name(id='v_mat_op', ctx=Load()))], orelse=[])], orelse=[])], decorator_list=[], returns=None), Try(body=[Assign(targets=[Name(id='z2_symmetries', ctx=Store())], value=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_gsc', ctx=Load()), attr='qubit_converter', ctx=Load()), attr='z2symmetries', ctx=Load()))], handlers=[ExceptHandler(type=Name(id='AttributeError', ctx=Load()), name=None, body=[Assign(targets=[Name(id='z2_symmetries', ctx=Store())], value=Call(func=Name(id='Z2Symmetries', ctx=Load()), args=[List(elts=[], ctx=Load()), List(elts=[], ctx=Load()), List(elts=[], ctx=Load())], keywords=[]))])], orelse=[], finalbody=[]), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='z2_symmetries', ctx=Load()), attr='is_empty', ctx=Load()), args=[], keywords=[])), body=[Assign(targets=[Name(id='combinations', ctx=Store())], value=Call(func=Attribute(value=Name(id='itertools', ctx=Load()), attr='product', ctx=Load()), args=[List(elts=[Num(n=1), UnaryOp(op=USub(), operand=Num(n=1))], ctx=Load())], keywords=[keyword(arg='repeat', value=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='z2_symmetries', ctx=Load()), attr='symmetries', ctx=Load())], keywords=[]))])), For(target=Name(id='targeted_tapering_values', ctx=Store()), iter=Name(id='combinations', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='info', ctx=Load()), args=[Str(s='In sector: (%s)'), Call(func=Attribute(value=Str(s=','), attr='join', ctx=Load()), args=[ListComp(elt=Call(func=Name(id='str', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='targeted_tapering_values', ctx=Load()), ifs=[], is_async=0)])], keywords=[])], keywords=[])), Assign(targets=[Name(id='available_hopping_ops', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='targeted_sector', ctx=Store())], value=Compare(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='asarray', ctx=Load()), args=[Name(id='targeted_tapering_values', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Num(n=1)])), For(target=Tuple(elts=[Name(id='key', ctx=Store()), Name(id='value', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='type_of_commutativities', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Name(id='value', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='asarray', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[])), If(test=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='all', ctx=Load()), args=[Compare(left=Name(id='value', ctx=Load()), ops=[Eq()], comparators=[Name(id='targeted_sector', ctx=Load())])], keywords=[]), body=[Assign(targets=[Subscript(value=Name(id='available_hopping_ops', ctx=Load()), slice=Index(value=Name(id='key', ctx=Load())), ctx=Store())], value=Subscript(value=Name(id='hopping_operators', ctx=Load()), slice=Index(value=Name(id='key', ctx=Load())), ctx=Load()))], orelse=[])], orelse=[]), Expr(value=Call(func=Name(id='_build_one_sector', ctx=Load()), args=[Name(id='available_hopping_ops', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_untapered_qubit_op_main', ctx=Load()), Name(id='z2_symmetries', ctx=Load())], keywords=[]))], orelse=[])], orelse=[Expr(value=Call(func=Name(id='_build_one_sector', ctx=Load()), args=[Name(id='hopping_operators', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_untapered_qubit_op_main', ctx=Load()), Name(id='z2_symmetries', ctx=Load())], keywords=[]))]), Return(value=Name(id='all_matrix_operators', ctx=Load()))], decorator_list=[], returns=Name(id='dict', ctx=Load())), FunctionDef(name='_build_commutator_routine', args=arguments(args=[arg(arg='params', annotation=Name(id='List', ctx=Load())), arg(arg='operator', annotation=Name(id='PauliSumOp', ctx=Load())), arg(arg='z2_symmetries', annotation=Name(id='Z2Symmetries', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Numerically computes the commutator / double commutator between operators.\n\n        Args:\n            params: list containing the indices of matrix element and the corresponding\n                excitation operators\n            operator: the hamiltonian\n            z2_symmetries: z2_symmetries in case of tapering\n\n        Returns:\n            The indices of the matrix element and the corresponding qubit\n            operator for each of the EOM matrices\n        ')), Assign(targets=[Tuple(elts=[Name(id='m_u', ctx=Store()), Name(id='n_u', ctx=Store()), Name(id='left_op', ctx=Store()), Name(id='right_op_1', ctx=Store()), Name(id='right_op_2', ctx=Store())], ctx=Store())], value=Name(id='params', ctx=Load())), If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='left_op', ctx=Load()), ops=[Is()], comparators=[NameConstant(value=None)]), BoolOp(op=And(), values=[Compare(left=Name(id='right_op_1', ctx=Load()), ops=[Is()], comparators=[NameConstant(value=None)]), Compare(left=Name(id='right_op_2', ctx=Load()), ops=[Is()], comparators=[NameConstant(value=None)])])]), body=[Assign(targets=[Name(id='q_mat_op', ctx=Store())], value=NameConstant(value=None)), Assign(targets=[Name(id='w_mat_op', ctx=Store())], value=NameConstant(value=None)), Assign(targets=[Name(id='m_mat_op', ctx=Store())], value=NameConstant(value=None)), Assign(targets=[Name(id='v_mat_op', ctx=Store())], value=NameConstant(value=None))], orelse=[If(test=Compare(left=Name(id='right_op_1', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=[Assign(targets=[Name(id='q_mat_op', ctx=Store())], value=Call(func=Name(id='double_commutator', ctx=Load()), args=[Name(id='left_op', ctx=Load()), Name(id='operator', ctx=Load()), Name(id='right_op_1', ctx=Load())], keywords=[keyword(arg='sign', value=NameConstant(value=False))])), Assign(targets=[Name(id='w_mat_op', ctx=Store())], value=Call(func=Name(id='commutator', ctx=Load()), args=[Name(id='left_op', ctx=Load()), Name(id='right_op_1', ctx=Load())], keywords=[])), Assign(targets=[Name(id='q_mat_op', ctx=Store())], value=IfExp(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='q_mat_op', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Num(n=0)]), body=NameConstant(value=None), orelse=Name(id='q_mat_op', ctx=Load()))), Assign(targets=[Name(id='w_mat_op', ctx=Store())], value=IfExp(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='w_mat_op', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Num(n=0)]), body=NameConstant(value=None), orelse=Name(id='w_mat_op', ctx=Load())))], orelse=[Assign(targets=[Name(id='q_mat_op', ctx=Store())], value=NameConstant(value=None)), Assign(targets=[Name(id='w_mat_op', ctx=Store())], value=NameConstant(value=None))]), If(test=Compare(left=Name(id='right_op_2', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=[Assign(targets=[Name(id='m_mat_op', ctx=Store())], value=Call(func=Name(id='double_commutator', ctx=Load()), args=[Name(id='left_op', ctx=Load()), Name(id='operator', ctx=Load()), Name(id='right_op_2', ctx=Load())], keywords=[keyword(arg='sign', value=NameConstant(value=False))])), Assign(targets=[Name(id='v_mat_op', ctx=Store())], value=Call(func=Name(id='commutator', ctx=Load()), args=[Name(id='left_op', ctx=Load()), Name(id='right_op_2', ctx=Load())], keywords=[])), Assign(targets=[Name(id='m_mat_op', ctx=Store())], value=IfExp(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='m_mat_op', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Num(n=0)]), body=NameConstant(value=None), orelse=Name(id='m_mat_op', ctx=Load()))), Assign(targets=[Name(id='v_mat_op', ctx=Store())], value=IfExp(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='v_mat_op', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Num(n=0)]), body=NameConstant(value=None), orelse=Name(id='v_mat_op', ctx=Load())))], orelse=[Assign(targets=[Name(id='m_mat_op', ctx=Store())], value=NameConstant(value=None)), Assign(targets=[Name(id='v_mat_op', ctx=Store())], value=NameConstant(value=None))]), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='z2_symmetries', ctx=Load()), attr='is_empty', ctx=Load()), args=[], keywords=[])), body=[If(test=BoolOp(op=And(), values=[Compare(left=Name(id='q_mat_op', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='q_mat_op', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Num(n=0)])]), body=[Assign(targets=[Name(id='q_mat_op', ctx=Store())], value=Call(func=Attribute(value=Name(id='z2_symmetries', ctx=Load()), attr='taper', ctx=Load()), args=[Name(id='q_mat_op', ctx=Load())], keywords=[]))], orelse=[]), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='w_mat_op', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='w_mat_op', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Num(n=0)])]), body=[Assign(targets=[Name(id='w_mat_op', ctx=Store())], value=Call(func=Attribute(value=Name(id='z2_symmetries', ctx=Load()), attr='taper', ctx=Load()), args=[Name(id='w_mat_op', ctx=Load())], keywords=[]))], orelse=[]), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='m_mat_op', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='m_mat_op', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Num(n=0)])]), body=[Assign(targets=[Name(id='m_mat_op', ctx=Store())], value=Call(func=Attribute(value=Name(id='z2_symmetries', ctx=Load()), attr='taper', ctx=Load()), args=[Name(id='m_mat_op', ctx=Load())], keywords=[]))], orelse=[]), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='v_mat_op', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='v_mat_op', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Num(n=0)])]), body=[Assign(targets=[Name(id='v_mat_op', ctx=Store())], value=Call(func=Attribute(value=Name(id='z2_symmetries', ctx=Load()), attr='taper', ctx=Load()), args=[Name(id='v_mat_op', ctx=Load())], keywords=[]))], orelse=[])], orelse=[])]), Return(value=Tuple(elts=[Name(id='m_u', ctx=Load()), Name(id='n_u', ctx=Load()), Name(id='q_mat_op', ctx=Load()), Name(id='w_mat_op', ctx=Load()), Name(id='m_mat_op', ctx=Load()), Name(id='v_mat_op', ctx=Load())], ctx=Load()))], decorator_list=[Name(id='staticmethod', ctx=Load())], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='int', ctx=Load()), Name(id='PauliSumOp', ctx=Load()), Name(id='PauliSumOp', ctx=Load()), Name(id='PauliSumOp', ctx=Load()), Name(id='PauliSumOp', ctx=Load())], ctx=Load())), ctx=Load())), FunctionDef(name='_build_eom_matrices', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='gs_results', annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='float', ctx=Load())), ctx=Load())], ctx=Load())), ctx=Load())), arg(arg='size', annotation=Name(id='int', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Constructs the M, V, Q and W matrices from the results on the ground state\n\n        Args:\n            gs_results: a ground state result object\n            size: size of eigenvalue problem\n\n        Returns:\n            the matrices and their standard deviation\n        ')), Assign(targets=[Tuple(elts=[Name(id='mus', ctx=Store()), Name(id='nus', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='triu_indices', ctx=Load()), args=[Name(id='size', ctx=Load())], keywords=[])), Assign(targets=[Name(id='m_mat', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='zeros', ctx=Load()), args=[Tuple(elts=[Name(id='size', ctx=Load()), Name(id='size', ctx=Load())], ctx=Load())], keywords=[keyword(arg='dtype', value=Name(id='complex', ctx=Load()))])), Assign(targets=[Name(id='v_mat', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='zeros', ctx=Load()), args=[Tuple(elts=[Name(id='size', ctx=Load()), Name(id='size', ctx=Load())], ctx=Load())], keywords=[keyword(arg='dtype', value=Name(id='complex', ctx=Load()))])), Assign(targets=[Name(id='q_mat', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='zeros', ctx=Load()), args=[Tuple(elts=[Name(id='size', ctx=Load()), Name(id='size', ctx=Load())], ctx=Load())], keywords=[keyword(arg='dtype', value=Name(id='complex', ctx=Load()))])), Assign(targets=[Name(id='w_mat', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='zeros', ctx=Load()), args=[Tuple(elts=[Name(id='size', ctx=Load()), Name(id='size', ctx=Load())], ctx=Load())], keywords=[keyword(arg='dtype', value=Name(id='complex', ctx=Load()))])), Assign(targets=[Tuple(elts=[Name(id='m_mat_std', ctx=Store()), Name(id='v_mat_std', ctx=Store()), Name(id='q_mat_std', ctx=Store()), Name(id='w_mat_std', ctx=Store())], ctx=Store())], value=Tuple(elts=[Num(n=0.0), Num(n=0.0), Num(n=0.0), Num(n=0.0)], ctx=Load())), For(target=Tuple(elts=[Name(id='idx', ctx=Store()), Name(id='m_u', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='mus', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='n_u', ctx=Store())], value=Subscript(value=Name(id='nus', ctx=Load()), slice=Index(value=Name(id='idx', ctx=Load())), ctx=Load())), Assign(targets=[Subscript(value=Subscript(value=Name(id='q_mat', ctx=Load()), slice=Index(value=Name(id='m_u', ctx=Load())), ctx=Load()), slice=Index(value=Name(id='n_u', ctx=Load())), ctx=Store())], value=IfExp(test=Compare(left=Call(func=Attribute(value=Name(id='gs_results', ctx=Load()), attr='get', ctx=Load()), args=[JoinedStr(values=[Str(s='q_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])], keywords=[]), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=Subscript(value=Subscript(value=Name(id='gs_results', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='q_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])), ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load()), orelse=Subscript(value=Subscript(value=Name(id='q_mat', ctx=Load()), slice=Index(value=Name(id='m_u', ctx=Load())), ctx=Load()), slice=Index(value=Name(id='n_u', ctx=Load())), ctx=Load()))), Assign(targets=[Subscript(value=Subscript(value=Name(id='w_mat', ctx=Load()), slice=Index(value=Name(id='m_u', ctx=Load())), ctx=Load()), slice=Index(value=Name(id='n_u', ctx=Load())), ctx=Store())], value=IfExp(test=Compare(left=Call(func=Attribute(value=Name(id='gs_results', ctx=Load()), attr='get', ctx=Load()), args=[JoinedStr(values=[Str(s='w_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])], keywords=[]), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=Subscript(value=Subscript(value=Name(id='gs_results', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='w_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])), ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load()), orelse=Subscript(value=Subscript(value=Name(id='w_mat', ctx=Load()), slice=Index(value=Name(id='m_u', ctx=Load())), ctx=Load()), slice=Index(value=Name(id='n_u', ctx=Load())), ctx=Load()))), Assign(targets=[Subscript(value=Subscript(value=Name(id='m_mat', ctx=Load()), slice=Index(value=Name(id='m_u', ctx=Load())), ctx=Load()), slice=Index(value=Name(id='n_u', ctx=Load())), ctx=Store())], value=IfExp(test=Compare(left=Call(func=Attribute(value=Name(id='gs_results', ctx=Load()), attr='get', ctx=Load()), args=[JoinedStr(values=[Str(s='m_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])], keywords=[]), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=Subscript(value=Subscript(value=Name(id='gs_results', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='m_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])), ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load()), orelse=Subscript(value=Subscript(value=Name(id='m_mat', ctx=Load()), slice=Index(value=Name(id='m_u', ctx=Load())), ctx=Load()), slice=Index(value=Name(id='n_u', ctx=Load())), ctx=Load()))), Assign(targets=[Subscript(value=Subscript(value=Name(id='v_mat', ctx=Load()), slice=Index(value=Name(id='m_u', ctx=Load())), ctx=Load()), slice=Index(value=Name(id='n_u', ctx=Load())), ctx=Store())], value=IfExp(test=Compare(left=Call(func=Attribute(value=Name(id='gs_results', ctx=Load()), attr='get', ctx=Load()), args=[JoinedStr(values=[Str(s='v_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])], keywords=[]), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=Subscript(value=Subscript(value=Name(id='gs_results', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='v_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])), ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load()), orelse=Subscript(value=Subscript(value=Name(id='v_mat', ctx=Load()), slice=Index(value=Name(id='m_u', ctx=Load())), ctx=Load()), slice=Index(value=Name(id='n_u', ctx=Load())), ctx=Load()))), AugAssign(target=Name(id='q_mat_std', ctx=Store()), op=Add(), value=IfExp(test=Compare(left=Call(func=Attribute(value=Name(id='gs_results', ctx=Load()), attr='get', ctx=Load()), args=[JoinedStr(values=[Str(s='q_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_std')])], keywords=[]), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=Subscript(value=Subscript(value=Name(id='gs_results', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='q_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_std')])), ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load()), orelse=Num(n=0))), AugAssign(target=Name(id='w_mat_std', ctx=Store()), op=Add(), value=IfExp(test=Compare(left=Call(func=Attribute(value=Name(id='gs_results', ctx=Load()), attr='get', ctx=Load()), args=[JoinedStr(values=[Str(s='w_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_std')])], keywords=[]), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=Subscript(value=Subscript(value=Name(id='gs_results', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='w_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_std')])), ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load()), orelse=Num(n=0))), AugAssign(target=Name(id='m_mat_std', ctx=Store()), op=Add(), value=IfExp(test=Compare(left=Call(func=Attribute(value=Name(id='gs_results', ctx=Load()), attr='get', ctx=Load()), args=[JoinedStr(values=[Str(s='m_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_std')])], keywords=[]), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=Subscript(value=Subscript(value=Name(id='gs_results', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='m_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_std')])), ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load()), orelse=Num(n=0))), AugAssign(target=Name(id='v_mat_std', ctx=Store()), op=Add(), value=IfExp(test=Compare(left=Call(func=Attribute(value=Name(id='gs_results', ctx=Load()), attr='get', ctx=Load()), args=[JoinedStr(values=[Str(s='v_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_std')])], keywords=[]), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=Subscript(value=Subscript(value=Name(id='gs_results', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='v_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_std')])), ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load()), orelse=Num(n=0)))], orelse=[]), Assign(targets=[Name(id='q_mat', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='q_mat', ctx=Load()), op=Add(), right=Attribute(value=Name(id='q_mat', ctx=Load()), attr='T', ctx=Load())), op=Sub(), right=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='identity', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='q_mat', ctx=Load()), attr='shape', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())], keywords=[]), op=Mult(), right=Name(id='q_mat', ctx=Load())))), Assign(targets=[Name(id='w_mat', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='w_mat', ctx=Load()), op=Add(), right=Attribute(value=Name(id='w_mat', ctx=Load()), attr='T', ctx=Load())), op=Sub(), right=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='identity', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='w_mat', ctx=Load()), attr='shape', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())], keywords=[]), op=Mult(), right=Name(id='w_mat', ctx=Load())))), Assign(targets=[Name(id='m_mat', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='m_mat', ctx=Load()), op=Add(), right=Attribute(value=Name(id='m_mat', ctx=Load()), attr='T', ctx=Load())), op=Sub(), right=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='identity', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='m_mat', ctx=Load()), attr='shape', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())], keywords=[]), op=Mult(), right=Name(id='m_mat', ctx=Load())))), Assign(targets=[Name(id='v_mat', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='v_mat', ctx=Load()), op=Add(), right=Attribute(value=Name(id='v_mat', ctx=Load()), attr='T', ctx=Load())), op=Sub(), right=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='identity', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='v_mat', ctx=Load()), attr='shape', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())], keywords=[]), op=Mult(), right=Name(id='v_mat', ctx=Load())))), Assign(targets=[Name(id='q_mat', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='real', ctx=Load()), args=[Name(id='q_mat', ctx=Load())], keywords=[])), Assign(targets=[Name(id='w_mat', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='real', ctx=Load()), args=[Name(id='w_mat', ctx=Load())], keywords=[])), Assign(targets=[Name(id='m_mat', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='real', ctx=Load()), args=[Name(id='m_mat', ctx=Load())], keywords=[])), Assign(targets=[Name(id='v_mat', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='real', ctx=Load()), args=[Name(id='v_mat', ctx=Load())], keywords=[])), Assign(targets=[Name(id='q_mat_std', ctx=Store())], value=BinOp(left=Name(id='q_mat_std', ctx=Load()), op=Div(), right=Call(func=Name(id='float', ctx=Load()), args=[BinOp(left=Name(id='size', ctx=Load()), op=Pow(), right=Num(n=2))], keywords=[]))), Assign(targets=[Name(id='w_mat_std', ctx=Store())], value=BinOp(left=Name(id='w_mat_std', ctx=Load()), op=Div(), right=Call(func=Name(id='float', ctx=Load()), args=[BinOp(left=Name(id='size', ctx=Load()), op=Pow(), right=Num(n=2))], keywords=[]))), Assign(targets=[Name(id='m_mat_std', ctx=Store())], value=BinOp(left=Name(id='m_mat_std', ctx=Load()), op=Div(), right=Call(func=Name(id='float', ctx=Load()), args=[BinOp(left=Name(id='size', ctx=Load()), op=Pow(), right=Num(n=2))], keywords=[]))), Assign(targets=[Name(id='v_mat_std', ctx=Store())], value=BinOp(left=Name(id='v_mat_std', ctx=Load()), op=Div(), right=Call(func=Name(id='float', ctx=Load()), args=[BinOp(left=Name(id='size', ctx=Load()), op=Pow(), right=Num(n=2))], keywords=[]))), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Str(s='\nQ:=========================\n%s'), Name(id='q_mat', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Str(s='\nW:=========================\n%s'), Name(id='w_mat', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Str(s='\nM:=========================\n%s'), Name(id='m_mat', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Str(s='\nV:=========================\n%s'), Name(id='v_mat', ctx=Load())], keywords=[])), Return(value=Tuple(elts=[Name(id='m_mat', ctx=Load()), Name(id='v_mat', ctx=Load()), Name(id='q_mat', ctx=Load()), Name(id='w_mat', ctx=Load()), Name(id='m_mat_std', ctx=Load()), Name(id='v_mat_std', ctx=Load()), Name(id='q_mat_std', ctx=Load()), Name(id='w_mat_std', ctx=Load())], ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Index(value=Tuple(elts=[Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Name(id='float', ctx=Load()), Name(id='float', ctx=Load()), Name(id='float', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load())), ctx=Load())), FunctionDef(name='_compute_excitation_energies', args=arguments(args=[arg(arg='m_mat', annotation=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), arg(arg='v_mat', annotation=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), arg(arg='q_mat', annotation=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), arg(arg='w_mat', annotation=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Diagonalizing M, V, Q, W matrices for excitation energies.\n\n        Args:\n            m_mat : M matrices\n            v_mat : V matrices\n            q_mat : Q matrices\n            w_mat : W matrices\n\n        Returns:\n            1-D vector stores all energy gap to reference state\n            2-D array storing the X and Y expansion coefficients\n        ')), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Str(s='Diagonalizing qeom matrices for excited states...')], keywords=[])), Assign(targets=[Name(id='a_mat', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='np', ctx=Load()), attr='matrixlib', ctx=Load()), attr='bmat', ctx=Load()), args=[List(elts=[List(elts=[Name(id='m_mat', ctx=Load()), Name(id='q_mat', ctx=Load())], ctx=Load()), List(elts=[Call(func=Attribute(value=Attribute(value=Name(id='q_mat', ctx=Load()), attr='T', ctx=Load()), attr='conj', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Attribute(value=Name(id='m_mat', ctx=Load()), attr='T', ctx=Load()), attr='conj', ctx=Load()), args=[], keywords=[])], ctx=Load())], ctx=Load())], keywords=[])), Assign(targets=[Name(id='b_mat', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='np', ctx=Load()), attr='matrixlib', ctx=Load()), attr='bmat', ctx=Load()), args=[List(elts=[List(elts=[Name(id='v_mat', ctx=Load()), Name(id='w_mat', ctx=Load())], ctx=Load()), List(elts=[UnaryOp(op=USub(), operand=Call(func=Attribute(value=Attribute(value=Name(id='w_mat', ctx=Load()), attr='T', ctx=Load()), attr='conj', ctx=Load()), args=[], keywords=[])), UnaryOp(op=USub(), operand=Call(func=Attribute(value=Attribute(value=Name(id='v_mat', ctx=Load()), attr='T', ctx=Load()), attr='conj', ctx=Load()), args=[], keywords=[]))], ctx=Load())], ctx=Load())], keywords=[])), Assign(targets=[Name(id='res', ctx=Store())], value=Call(func=Attribute(value=Name(id='linalg', ctx=Load()), attr='eig', ctx=Load()), args=[Name(id='a_mat', ctx=Load()), Name(id='b_mat', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Subscript(value=Name(id='res', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load()), slice=Index(value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='isnan', ctx=Load()), args=[Subscript(value=Name(id='res', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())], keywords=[])], keywords=[])), ctx=Store())], value=Num(n=0.0)), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Str(s='... %s'), Subscript(value=Name(id='res', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())], keywords=[])), Assign(targets=[Name(id='w', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sort', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='real', ctx=Load()), args=[Subscript(value=Name(id='res', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Str(s='Sorted real parts %s'), Name(id='w', ctx=Load())], keywords=[])), Assign(targets=[Name(id='w', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='abs', ctx=Load()), args=[Subscript(value=Name(id='w', ctx=Load()), slice=Slice(lower=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='w', ctx=Load())], keywords=[]), op=FloorDiv(), right=Num(n=2)), upper=None, step=None), ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Name(id='w', ctx=Load()), slice=Index(value=Compare(left=Name(id='w', ctx=Load()), ops=[Lt()], comparators=[Num(n=1e-06)])), ctx=Store())], value=Num(n=0)), Assign(targets=[Name(id='excitation_energies_gap', ctx=Store())], value=Name(id='w', ctx=Load())), Return(value=Tuple(elts=[Name(id='excitation_energies_gap', ctx=Load()), Subscript(value=Name(id='res', ctx=Load()), slice=Index(value=Num(n=1)), ctx=Load())], ctx=Load()))], decorator_list=[Name(id='staticmethod', ctx=Load())], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Index(value=Tuple(elts=[Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())], ctx=Load())), ctx=Load()))], decorator_list=[])
ClassDef(name='QEOMResult', bases=[Name(id='AlgorithmResult', ctx=Load())], keywords=[], body=[Expr(value=Str(s='The results class for the QEOM algorithm.')), FunctionDef(name='__init__', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_ground_state_raw_result', ctx=Store())], value=NameConstant(value=None)), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_excitation_energies', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), ctx=Load()), value=NameConstant(value=None), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_expansion_coefficients', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), ctx=Load()), value=NameConstant(value=None), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_m_matrix', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), ctx=Load()), value=NameConstant(value=None), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_v_matrix', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), ctx=Load()), value=NameConstant(value=None), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_q_matrix', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), ctx=Load()), value=NameConstant(value=None), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_w_matrix', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), ctx=Load()), value=NameConstant(value=None), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_v_matrix_std', ctx=Store()), annotation=Name(id='float', ctx=Load()), value=Num(n=0.0), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_q_matrix_std', ctx=Store()), annotation=Name(id='float', ctx=Load()), value=Num(n=0.0), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_w_matrix_std', ctx=Store()), annotation=Name(id='float', ctx=Load()), value=Num(n=0.0), simple=0)], decorator_list=[], returns=NameConstant(value=None)), FunctionDef(name='ground_state_raw_result', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='returns ground state raw result')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_ground_state_raw_result', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=None), FunctionDef(name='ground_state_raw_result', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='value', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='sets ground state raw result')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_ground_state_raw_result', ctx=Store())], value=Name(id='value', ctx=Load()))], decorator_list=[Attribute(value=Name(id='ground_state_raw_result', ctx=Load()), attr='setter', ctx=Load())], returns=NameConstant(value=None)), FunctionDef(name='excitation_energies', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='returns the excitation energies (energy gaps)')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_excitation_energies', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), ctx=Load())), FunctionDef(name='excitation_energies', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='value', annotation=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='sets the excitation energies (energy gaps)')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_excitation_energies', ctx=Store())], value=Name(id='value', ctx=Load()))], decorator_list=[Attribute(value=Name(id='excitation_energies', ctx=Load()), attr='setter', ctx=Load())], returns=NameConstant(value=None)), FunctionDef(name='expansion_coefficients', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='returns the X and Y expansion coefficients')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_expansion_coefficients', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), ctx=Load())), FunctionDef(name='expansion_coefficients', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='value', annotation=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='sets the X and Y expansion coefficients')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_expansion_coefficients', ctx=Store())], value=Name(id='value', ctx=Load()))], decorator_list=[Attribute(value=Name(id='expansion_coefficients', ctx=Load()), attr='setter', ctx=Load())], returns=NameConstant(value=None)), FunctionDef(name='m_matrix', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='returns the M matrix')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_m_matrix', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), ctx=Load())), FunctionDef(name='m_matrix', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='value', annotation=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='sets the M matrix')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_m_matrix', ctx=Store())], value=Name(id='value', ctx=Load()))], decorator_list=[Attribute(value=Name(id='m_matrix', ctx=Load()), attr='setter', ctx=Load())], returns=NameConstant(value=None)), FunctionDef(name='v_matrix', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='returns the V matrix')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_v_matrix', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), ctx=Load())), FunctionDef(name='v_matrix', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='value', annotation=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='sets the V matrix')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_v_matrix', ctx=Store())], value=Name(id='value', ctx=Load()))], decorator_list=[Attribute(value=Name(id='v_matrix', ctx=Load()), attr='setter', ctx=Load())], returns=NameConstant(value=None)), FunctionDef(name='q_matrix', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='returns the Q matrix')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_q_matrix', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), ctx=Load())), FunctionDef(name='q_matrix', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='value', annotation=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='sets the Q matrix')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_q_matrix', ctx=Store())], value=Name(id='value', ctx=Load()))], decorator_list=[Attribute(value=Name(id='q_matrix', ctx=Load()), attr='setter', ctx=Load())], returns=NameConstant(value=None)), FunctionDef(name='w_matrix', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='returns the W matrix')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_w_matrix', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), ctx=Load())), FunctionDef(name='w_matrix', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='value', annotation=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='sets the W matrix')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_w_matrix', ctx=Store())], value=Name(id='value', ctx=Load()))], decorator_list=[Attribute(value=Name(id='w_matrix', ctx=Load()), attr='setter', ctx=Load())], returns=NameConstant(value=None)), FunctionDef(name='m_matrix_std', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='returns the M matrix standard deviation')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_m_matrix_std', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='float', ctx=Load())), FunctionDef(name='m_matrix_std', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='value', annotation=Name(id='float', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='sets the M matrix standard deviation')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_m_matrix_std', ctx=Store())], value=Name(id='value', ctx=Load()))], decorator_list=[Attribute(value=Name(id='m_matrix_std', ctx=Load()), attr='setter', ctx=Load())], returns=NameConstant(value=None)), FunctionDef(name='v_matrix_std', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='returns the V matrix standard deviation')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_v_matrix_std', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='float', ctx=Load())), FunctionDef(name='v_matrix_std', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='value', annotation=Name(id='float', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='sets the V matrix standard deviation')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_v_matrix_std', ctx=Store())], value=Name(id='value', ctx=Load()))], decorator_list=[Attribute(value=Name(id='v_matrix_std', ctx=Load()), attr='setter', ctx=Load())], returns=NameConstant(value=None)), FunctionDef(name='q_matrix_std', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='returns the Q matrix standard deviation')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_q_matrix_std', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='float', ctx=Load())), FunctionDef(name='q_matrix_std', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='value', annotation=Name(id='float', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='sets the Q matrix standard deviation')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_q_matrix_std', ctx=Store())], value=Name(id='value', ctx=Load()))], decorator_list=[Attribute(value=Name(id='q_matrix_std', ctx=Load()), attr='setter', ctx=Load())], returns=NameConstant(value=None)), FunctionDef(name='w_matrix_std', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='returns the W matrix standard deviation')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_w_matrix_std', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='float', ctx=Load())), FunctionDef(name='w_matrix_std', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='value', annotation=Name(id='float', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='sets the W matrix standard deviation')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_w_matrix_std', ctx=Store())], value=Name(id='value', ctx=Load()))], decorator_list=[Attribute(value=Name(id='w_matrix_std', ctx=Load()), attr='setter', ctx=Load())], returns=NameConstant(value=None))], decorator_list=[])
Str(s='The calculation of excited states via the qEOM algorithm')
alias(name='List', asname=None)
alias(name='Union', asname=None)
alias(name='Optional', asname=None)
alias(name='Tuple', asname=None)
alias(name='Dict', asname=None)
alias(name='cast', asname=None)
alias(name='itertools', asname=None)
alias(name='logging', asname=None)
alias(name='sys', asname=None)
alias(name='numpy', asname='np')
alias(name='linalg', asname=None)
alias(name='parallel_map', asname=None)
alias(name='TextProgressBar', asname=None)
alias(name='algorithm_globals', asname=None)
alias(name='AlgorithmResult', asname=None)
alias(name='Z2Symmetries', asname=None)
alias(name='commutator', asname=None)
alias(name='double_commutator', asname=None)
alias(name='PauliSumOp', asname=None)
alias(name='ListOrDictType', asname=None)
alias(name='SecondQuantizedOp', asname=None)
alias(name='BaseProblem', asname=None)
alias(name='EigenstateResult', asname=None)
alias(name='ExcitedStatesSolver', asname=None)
alias(name='GroundStateSolver', asname=None)
Name(id='logger', ctx=Store())
Call(func=Attribute(value=Name(id='logging', ctx=Load()), attr='getLogger', ctx=Load()), args=[Name(id='__name__', ctx=Load())], keywords=[])
Name(id='ExcitedStatesSolver', ctx=Load())
Expr(value=Str(s='The calculation of excited states via the qEOM algorithm'))
FunctionDef(name='__init__', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='ground_state_solver', annotation=Name(id='GroundStateSolver', ctx=Load())), arg(arg='excitations', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='int', ctx=Load())), ctx=Load())), ctx=Load())], ctx=Load())), ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[Str(s='sd')]), body=[Expr(value=Str(s="\n        Args:\n            ground_state_solver: a GroundStateSolver object. The qEOM algorithm\n                will use this ground state to compute the EOM matrix elements\n            excitations: The excitations to be included in the eom pseudo-eigenvalue problem.\n                If a string ('s', 'd' or 'sd') then all excitations of the given type will be used.\n                Otherwise a list of custom excitations can directly be provided.\n        ")), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_gsc', ctx=Store())], value=Name(id='ground_state_solver', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='excitations', ctx=Store())], value=Name(id='excitations', ctx=Load())), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_untapered_qubit_op_main', ctx=Store()), annotation=Name(id='PauliSumOp', ctx=Load()), value=NameConstant(value=None), simple=0)], decorator_list=[], returns=NameConstant(value=None))
FunctionDef(name='excitations', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Returns the excitations to be included in the eom pseudo-eigenvalue problem.')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_excitations', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='int', ctx=Load())), ctx=Load())), ctx=Load())], ctx=Load())), ctx=Load()))
FunctionDef(name='excitations', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='excitations', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='int', ctx=Load())), ctx=Load())), ctx=Load())], ctx=Load())), ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='The excitations to be included in the eom pseudo-eigenvalue problem. If a string then\n        all excitations of given type will be used. Otherwise a list of custom excitations can\n        directly be provided.')), If(test=BoolOp(op=And(), values=[Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='excitations', ctx=Load()), Name(id='str', ctx=Load())], keywords=[]), Compare(left=Name(id='excitations', ctx=Load()), ops=[NotIn()], comparators=[List(elts=[Str(s='s'), Str(s='d'), Str(s='sd')], ctx=Load())])]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Str(s='Excitation type must be s (singles), d (doubles) or sd (singles and doubles)')], keywords=[]), cause=None)], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_excitations', ctx=Store())], value=Name(id='excitations', ctx=Load()))], decorator_list=[Attribute(value=Name(id='excitations', ctx=Load()), attr='setter', ctx=Load())], returns=NameConstant(value=None))
FunctionDef(name='solver', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Return(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_gsc', ctx=Load()), attr='solver', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=None)
FunctionDef(name='get_qubit_operators', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='problem', annotation=Name(id='BaseProblem', ctx=Load())), arg(arg='aux_operators', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Subscript(value=Name(id='ListOrDictType', ctx=Load()), slice=Index(value=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='SecondQuantizedOp', ctx=Load()), Name(id='PauliSumOp', ctx=Load())], ctx=Load())), ctx=Load())), ctx=Load())), ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[NameConstant(value=None)]), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_gsc', ctx=Load()), attr='get_qubit_operators', ctx=Load()), args=[Name(id='problem', ctx=Load()), Name(id='aux_operators', ctx=Load())], keywords=[]))], decorator_list=[], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='PauliSumOp', ctx=Load()), Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Subscript(value=Name(id='ListOrDictType', ctx=Load()), slice=Index(value=Name(id='PauliSumOp', ctx=Load())), ctx=Load())), ctx=Load())], ctx=Load())), ctx=Load()))
FunctionDef(name='solve', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='problem', annotation=Name(id='BaseProblem', ctx=Load())), arg(arg='aux_operators', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Subscript(value=Name(id='ListOrDictType', ctx=Load()), slice=Index(value=Name(id='SecondQuantizedOp', ctx=Load())), ctx=Load())), ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[NameConstant(value=None)]), body=[Expr(value=Str(s='Run the excited-states calculation.\n\n        Construct and solves the EOM pseudo-eigenvalue problem to obtain the excitation energies\n        and the excitation operators expansion coefficients.\n\n        Args:\n            problem: a class encoding a problem to be solved.\n            aux_operators: Additional auxiliary operators to evaluate.\n\n        Returns:\n            An interpreted :class:`~.EigenstateResult`. For more information see also\n            :meth:`~.BaseProblem.interpret`.\n        ')), If(test=Compare(left=Name(id='aux_operators', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='warning', ctx=Load()), args=[Str(s='With qEOM the auxiliary operators can currently only be evaluated on the ground state.')], keywords=[]))], orelse=[]), Assign(targets=[Name(id='groundstate_result', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_gsc', ctx=Load()), attr='solve', ctx=Load()), args=[Name(id='problem', ctx=Load()), Name(id='aux_operators', ctx=Load())], keywords=[])), Assign(targets=[Name(id='second_q_ops', ctx=Store())], value=Call(func=Attribute(value=Name(id='problem', ctx=Load()), attr='second_q_ops', ctx=Load()), args=[], keywords=[])), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='second_q_ops', ctx=Load()), Name(id='list', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='main_second_q_op', ctx=Store())], value=Subscript(value=Name(id='second_q_ops', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load()))], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='second_q_ops', ctx=Load()), Name(id='dict', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='main_second_q_op', ctx=Store())], value=Call(func=Attribute(value=Name(id='second_q_ops', ctx=Load()), attr='pop', ctx=Load()), args=[Attribute(value=Name(id='problem', ctx=Load()), attr='main_property_name', ctx=Load())], keywords=[]))], orelse=[])]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_untapered_qubit_op_main', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_gsc', ctx=Load()), attr='qubit_converter', ctx=Load()), attr='convert_only', ctx=Load()), args=[Name(id='main_second_q_op', ctx=Load()), Attribute(value=Name(id='problem', ctx=Load()), attr='num_particles', ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='matrix_operators_dict', ctx=Store()), Name(id='size', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_prepare_matrix_operators', ctx=Load()), args=[Name(id='problem', ctx=Load())], keywords=[])), Assign(targets=[Name(id='measurement_results', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_gsc', ctx=Load()), attr='evaluate_operators', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='groundstate_result', ctx=Load()), attr='eigenstates', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load()), Name(id='matrix_operators_dict', ctx=Load())], keywords=[])), Assign(targets=[Name(id='measurement_results', ctx=Store())], value=Call(func=Name(id='cast', ctx=Load()), args=[Subscript(value=Name(id='Dict', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='float', ctx=Load())), ctx=Load())], ctx=Load())), ctx=Load()), Name(id='measurement_results', ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='m_mat', ctx=Store()), Name(id='v_mat', ctx=Store()), Name(id='q_mat', ctx=Store()), Name(id='w_mat', ctx=Store()), Name(id='m_mat_std', ctx=Store()), Name(id='v_mat_std', ctx=Store()), Name(id='q_mat_std', ctx=Store()), Name(id='w_mat_std', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_build_eom_matrices', ctx=Load()), args=[Name(id='measurement_results', ctx=Load()), Name(id='size', ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='energy_gaps', ctx=Store()), Name(id='expansion_coefs', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_compute_excitation_energies', ctx=Load()), args=[Name(id='m_mat', ctx=Load()), Name(id='v_mat', ctx=Load()), Name(id='q_mat', ctx=Load()), Name(id='w_mat', ctx=Load())], keywords=[])), Assign(targets=[Name(id='qeom_result', ctx=Store())], value=Call(func=Name(id='QEOMResult', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='qeom_result', ctx=Load()), attr='ground_state_raw_result', ctx=Store())], value=Attribute(value=Name(id='groundstate_result', ctx=Load()), attr='raw_result', ctx=Load())), Assign(targets=[Attribute(value=Name(id='qeom_result', ctx=Load()), attr='expansion_coefficients', ctx=Store())], value=Name(id='expansion_coefs', ctx=Load())), Assign(targets=[Attribute(value=Name(id='qeom_result', ctx=Load()), attr='excitation_energies', ctx=Store())], value=Name(id='energy_gaps', ctx=Load())), Assign(targets=[Attribute(value=Name(id='qeom_result', ctx=Load()), attr='m_matrix', ctx=Store())], value=Name(id='m_mat', ctx=Load())), Assign(targets=[Attribute(value=Name(id='qeom_result', ctx=Load()), attr='v_matrix', ctx=Store())], value=Name(id='v_mat', ctx=Load())), Assign(targets=[Attribute(value=Name(id='qeom_result', ctx=Load()), attr='q_matrix', ctx=Store())], value=Name(id='q_mat', ctx=Load())), Assign(targets=[Attribute(value=Name(id='qeom_result', ctx=Load()), attr='w_matrix', ctx=Store())], value=Name(id='w_mat', ctx=Load())), Assign(targets=[Attribute(value=Name(id='qeom_result', ctx=Load()), attr='m_matrix_std', ctx=Store())], value=Name(id='m_mat_std', ctx=Load())), Assign(targets=[Attribute(value=Name(id='qeom_result', ctx=Load()), attr='v_matrix_std', ctx=Store())], value=Name(id='v_mat_std', ctx=Load())), Assign(targets=[Attribute(value=Name(id='qeom_result', ctx=Load()), attr='q_matrix_std', ctx=Store())], value=Name(id='q_mat_std', ctx=Load())), Assign(targets=[Attribute(value=Name(id='qeom_result', ctx=Load()), attr='w_matrix_std', ctx=Store())], value=Name(id='w_mat_std', ctx=Load())), Assign(targets=[Name(id='eigenstate_result', ctx=Store())], value=Call(func=Name(id='EigenstateResult', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='eigenstate_result', ctx=Load()), attr='eigenstates', ctx=Store())], value=Attribute(value=Name(id='groundstate_result', ctx=Load()), attr='eigenstates', ctx=Load())), Assign(targets=[Attribute(value=Name(id='eigenstate_result', ctx=Load()), attr='aux_operator_eigenvalues', ctx=Store())], value=Attribute(value=Name(id='groundstate_result', ctx=Load()), attr='aux_operator_eigenvalues', ctx=Load())), Assign(targets=[Attribute(value=Name(id='eigenstate_result', ctx=Load()), attr='raw_result', ctx=Store())], value=Name(id='qeom_result', ctx=Load())), Assign(targets=[Attribute(value=Name(id='eigenstate_result', ctx=Load()), attr='eigenenergies', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Attribute(value=Name(id='groundstate_result', ctx=Load()), attr='eigenenergies', ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='asarray', ctx=Load()), args=[ListComp(elt=BinOp(left=Subscript(value=Attribute(value=Name(id='groundstate_result', ctx=Load()), attr='eigenenergies', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load()), op=Add(), right=Name(id='gap', ctx=Load())), generators=[comprehension(target=Name(id='gap', ctx=Store()), iter=Name(id='energy_gaps', ctx=Load()), ifs=[], is_async=0)])], keywords=[])], keywords=[])), Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Attribute(value=Name(id='problem', ctx=Load()), attr='interpret', ctx=Load()), args=[Name(id='eigenstate_result', ctx=Load())], keywords=[])), Return(value=Name(id='result', ctx=Load()))], decorator_list=[], returns=Name(id='EigenstateResult', ctx=Load()))
FunctionDef(name='_prepare_matrix_operators', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='problem', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Construct the excitation operators for each matrix element.\n\n        Returns:\n            a dictionary of all matrix elements operators and the number of excitations\n            (or the size of the qEOM pseudo-eigenvalue problem)\n        ')), Assign(targets=[Name(id='data', ctx=Store())], value=Call(func=Attribute(value=Name(id='problem', ctx=Load()), attr='hopping_qeom_ops', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_gsc', ctx=Load()), attr='qubit_converter', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_excitations', ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='hopping_operators', ctx=Store()), Name(id='type_of_commutativities', ctx=Store()), Name(id='excitation_indices', ctx=Store())], ctx=Store())], value=Name(id='data', ctx=Load())), Assign(targets=[Name(id='size', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='excitation_indices', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[]), op=FloorDiv(), right=Num(n=2))], keywords=[])), Assign(targets=[Name(id='eom_matrix_operators', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_build_all_commutators', ctx=Load()), args=[Name(id='hopping_operators', ctx=Load()), Name(id='type_of_commutativities', ctx=Load()), Name(id='size', ctx=Load())], keywords=[])), Return(value=Tuple(elts=[Name(id='eom_matrix_operators', ctx=Load()), Name(id='size', ctx=Load())], ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='dict', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load())), ctx=Load()))
FunctionDef(name='_build_all_commutators', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='hopping_operators', annotation=Name(id='dict', ctx=Load())), arg(arg='type_of_commutativities', annotation=Name(id='dict', ctx=Load())), arg(arg='size', annotation=Name(id='int', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Building all commutators for Q, W, M, V matrices.\n\n        Args:\n            hopping_operators: all hopping operators based on excitations_list,\n                key is the string of single/double excitation;\n                value is corresponding operator.\n            type_of_commutativities: if tapering is used, it records the commutativities of\n                hopping operators with the\n                Z2 symmetries found in the original operator.\n            size: the number of excitations (size of the qEOM pseudo-eigenvalue problem)\n\n        Returns:\n            a dictionary that contains the operators for each matrix element\n        ')), Assign(targets=[Name(id='all_matrix_operators', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Tuple(elts=[Name(id='mus', ctx=Store()), Name(id='nus', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='triu_indices', ctx=Load()), args=[Name(id='size', ctx=Load())], keywords=[])), FunctionDef(name='_build_one_sector', args=arguments(args=[arg(arg='available_hopping_ops', annotation=None), arg(arg='untapered_op', annotation=None), arg(arg='z2_symmetries', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Assign(targets=[Name(id='to_be_computed_list', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Tuple(elts=[Name(id='idx', ctx=Store()), Name(id='m_u', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='mus', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='n_u', ctx=Store())], value=Subscript(value=Name(id='nus', ctx=Load()), slice=Index(value=Name(id='idx', ctx=Load())), ctx=Load())), Assign(targets=[Name(id='left_op', ctx=Store())], value=Call(func=Attribute(value=Name(id='available_hopping_ops', ctx=Load()), attr='get', ctx=Load()), args=[JoinedStr(values=[Str(s='E_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None)])], keywords=[])), Assign(targets=[Name(id='right_op_1', ctx=Store())], value=Call(func=Attribute(value=Name(id='available_hopping_ops', ctx=Load()), attr='get', ctx=Load()), args=[JoinedStr(values=[Str(s='E_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])], keywords=[])), Assign(targets=[Name(id='right_op_2', ctx=Store())], value=Call(func=Attribute(value=Name(id='available_hopping_ops', ctx=Load()), attr='get', ctx=Load()), args=[JoinedStr(values=[Str(s='Edag_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='to_be_computed_list', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Name(id='m_u', ctx=Load()), Name(id='n_u', ctx=Load()), Name(id='left_op', ctx=Load()), Name(id='right_op_1', ctx=Load()), Name(id='right_op_2', ctx=Load())], ctx=Load())], keywords=[]))], orelse=[]), If(test=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='isEnabledFor', ctx=Load()), args=[Attribute(value=Name(id='logging', ctx=Load()), attr='INFO', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='info', ctx=Load()), args=[Str(s='Building all commutators:')], keywords=[])), Expr(value=Call(func=Name(id='TextProgressBar', ctx=Load()), args=[Attribute(value=Name(id='sys', ctx=Load()), attr='stderr', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='results', ctx=Store())], value=Call(func=Name(id='parallel_map', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_build_commutator_routine', ctx=Load()), Name(id='to_be_computed_list', ctx=Load())], keywords=[keyword(arg='task_args', value=Tuple(elts=[Name(id='untapered_op', ctx=Load()), Name(id='z2_symmetries', ctx=Load())], ctx=Load())), keyword(arg='num_processes', value=Attribute(value=Name(id='algorithm_globals', ctx=Load()), attr='num_processes', ctx=Load()))])), For(target=Name(id='result', ctx=Store()), iter=Name(id='results', ctx=Load()), body=[Assign(targets=[Tuple(elts=[Name(id='m_u', ctx=Store()), Name(id='n_u', ctx=Store()), Name(id='q_mat_op', ctx=Store()), Name(id='w_mat_op', ctx=Store()), Name(id='m_mat_op', ctx=Store()), Name(id='v_mat_op', ctx=Store())], ctx=Store())], value=Name(id='result', ctx=Load())), If(test=Compare(left=Name(id='q_mat_op', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=[Assign(targets=[Subscript(value=Name(id='all_matrix_operators', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='q_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])), ctx=Store())], value=Name(id='q_mat_op', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='w_mat_op', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=[Assign(targets=[Subscript(value=Name(id='all_matrix_operators', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='w_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])), ctx=Store())], value=Name(id='w_mat_op', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='m_mat_op', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=[Assign(targets=[Subscript(value=Name(id='all_matrix_operators', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='m_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])), ctx=Store())], value=Name(id='m_mat_op', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='v_mat_op', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=[Assign(targets=[Subscript(value=Name(id='all_matrix_operators', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='v_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])), ctx=Store())], value=Name(id='v_mat_op', ctx=Load()))], orelse=[])], orelse=[])], decorator_list=[], returns=None), Try(body=[Assign(targets=[Name(id='z2_symmetries', ctx=Store())], value=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_gsc', ctx=Load()), attr='qubit_converter', ctx=Load()), attr='z2symmetries', ctx=Load()))], handlers=[ExceptHandler(type=Name(id='AttributeError', ctx=Load()), name=None, body=[Assign(targets=[Name(id='z2_symmetries', ctx=Store())], value=Call(func=Name(id='Z2Symmetries', ctx=Load()), args=[List(elts=[], ctx=Load()), List(elts=[], ctx=Load()), List(elts=[], ctx=Load())], keywords=[]))])], orelse=[], finalbody=[]), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='z2_symmetries', ctx=Load()), attr='is_empty', ctx=Load()), args=[], keywords=[])), body=[Assign(targets=[Name(id='combinations', ctx=Store())], value=Call(func=Attribute(value=Name(id='itertools', ctx=Load()), attr='product', ctx=Load()), args=[List(elts=[Num(n=1), UnaryOp(op=USub(), operand=Num(n=1))], ctx=Load())], keywords=[keyword(arg='repeat', value=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='z2_symmetries', ctx=Load()), attr='symmetries', ctx=Load())], keywords=[]))])), For(target=Name(id='targeted_tapering_values', ctx=Store()), iter=Name(id='combinations', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='info', ctx=Load()), args=[Str(s='In sector: (%s)'), Call(func=Attribute(value=Str(s=','), attr='join', ctx=Load()), args=[ListComp(elt=Call(func=Name(id='str', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='targeted_tapering_values', ctx=Load()), ifs=[], is_async=0)])], keywords=[])], keywords=[])), Assign(targets=[Name(id='available_hopping_ops', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='targeted_sector', ctx=Store())], value=Compare(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='asarray', ctx=Load()), args=[Name(id='targeted_tapering_values', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Num(n=1)])), For(target=Tuple(elts=[Name(id='key', ctx=Store()), Name(id='value', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='type_of_commutativities', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Name(id='value', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='asarray', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[])), If(test=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='all', ctx=Load()), args=[Compare(left=Name(id='value', ctx=Load()), ops=[Eq()], comparators=[Name(id='targeted_sector', ctx=Load())])], keywords=[]), body=[Assign(targets=[Subscript(value=Name(id='available_hopping_ops', ctx=Load()), slice=Index(value=Name(id='key', ctx=Load())), ctx=Store())], value=Subscript(value=Name(id='hopping_operators', ctx=Load()), slice=Index(value=Name(id='key', ctx=Load())), ctx=Load()))], orelse=[])], orelse=[]), Expr(value=Call(func=Name(id='_build_one_sector', ctx=Load()), args=[Name(id='available_hopping_ops', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_untapered_qubit_op_main', ctx=Load()), Name(id='z2_symmetries', ctx=Load())], keywords=[]))], orelse=[])], orelse=[Expr(value=Call(func=Name(id='_build_one_sector', ctx=Load()), args=[Name(id='hopping_operators', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_untapered_qubit_op_main', ctx=Load()), Name(id='z2_symmetries', ctx=Load())], keywords=[]))]), Return(value=Name(id='all_matrix_operators', ctx=Load()))], decorator_list=[], returns=Name(id='dict', ctx=Load()))
FunctionDef(name='_build_commutator_routine', args=arguments(args=[arg(arg='params', annotation=Name(id='List', ctx=Load())), arg(arg='operator', annotation=Name(id='PauliSumOp', ctx=Load())), arg(arg='z2_symmetries', annotation=Name(id='Z2Symmetries', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Numerically computes the commutator / double commutator between operators.\n\n        Args:\n            params: list containing the indices of matrix element and the corresponding\n                excitation operators\n            operator: the hamiltonian\n            z2_symmetries: z2_symmetries in case of tapering\n\n        Returns:\n            The indices of the matrix element and the corresponding qubit\n            operator for each of the EOM matrices\n        ')), Assign(targets=[Tuple(elts=[Name(id='m_u', ctx=Store()), Name(id='n_u', ctx=Store()), Name(id='left_op', ctx=Store()), Name(id='right_op_1', ctx=Store()), Name(id='right_op_2', ctx=Store())], ctx=Store())], value=Name(id='params', ctx=Load())), If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='left_op', ctx=Load()), ops=[Is()], comparators=[NameConstant(value=None)]), BoolOp(op=And(), values=[Compare(left=Name(id='right_op_1', ctx=Load()), ops=[Is()], comparators=[NameConstant(value=None)]), Compare(left=Name(id='right_op_2', ctx=Load()), ops=[Is()], comparators=[NameConstant(value=None)])])]), body=[Assign(targets=[Name(id='q_mat_op', ctx=Store())], value=NameConstant(value=None)), Assign(targets=[Name(id='w_mat_op', ctx=Store())], value=NameConstant(value=None)), Assign(targets=[Name(id='m_mat_op', ctx=Store())], value=NameConstant(value=None)), Assign(targets=[Name(id='v_mat_op', ctx=Store())], value=NameConstant(value=None))], orelse=[If(test=Compare(left=Name(id='right_op_1', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=[Assign(targets=[Name(id='q_mat_op', ctx=Store())], value=Call(func=Name(id='double_commutator', ctx=Load()), args=[Name(id='left_op', ctx=Load()), Name(id='operator', ctx=Load()), Name(id='right_op_1', ctx=Load())], keywords=[keyword(arg='sign', value=NameConstant(value=False))])), Assign(targets=[Name(id='w_mat_op', ctx=Store())], value=Call(func=Name(id='commutator', ctx=Load()), args=[Name(id='left_op', ctx=Load()), Name(id='right_op_1', ctx=Load())], keywords=[])), Assign(targets=[Name(id='q_mat_op', ctx=Store())], value=IfExp(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='q_mat_op', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Num(n=0)]), body=NameConstant(value=None), orelse=Name(id='q_mat_op', ctx=Load()))), Assign(targets=[Name(id='w_mat_op', ctx=Store())], value=IfExp(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='w_mat_op', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Num(n=0)]), body=NameConstant(value=None), orelse=Name(id='w_mat_op', ctx=Load())))], orelse=[Assign(targets=[Name(id='q_mat_op', ctx=Store())], value=NameConstant(value=None)), Assign(targets=[Name(id='w_mat_op', ctx=Store())], value=NameConstant(value=None))]), If(test=Compare(left=Name(id='right_op_2', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=[Assign(targets=[Name(id='m_mat_op', ctx=Store())], value=Call(func=Name(id='double_commutator', ctx=Load()), args=[Name(id='left_op', ctx=Load()), Name(id='operator', ctx=Load()), Name(id='right_op_2', ctx=Load())], keywords=[keyword(arg='sign', value=NameConstant(value=False))])), Assign(targets=[Name(id='v_mat_op', ctx=Store())], value=Call(func=Name(id='commutator', ctx=Load()), args=[Name(id='left_op', ctx=Load()), Name(id='right_op_2', ctx=Load())], keywords=[])), Assign(targets=[Name(id='m_mat_op', ctx=Store())], value=IfExp(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='m_mat_op', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Num(n=0)]), body=NameConstant(value=None), orelse=Name(id='m_mat_op', ctx=Load()))), Assign(targets=[Name(id='v_mat_op', ctx=Store())], value=IfExp(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='v_mat_op', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Num(n=0)]), body=NameConstant(value=None), orelse=Name(id='v_mat_op', ctx=Load())))], orelse=[Assign(targets=[Name(id='m_mat_op', ctx=Store())], value=NameConstant(value=None)), Assign(targets=[Name(id='v_mat_op', ctx=Store())], value=NameConstant(value=None))]), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='z2_symmetries', ctx=Load()), attr='is_empty', ctx=Load()), args=[], keywords=[])), body=[If(test=BoolOp(op=And(), values=[Compare(left=Name(id='q_mat_op', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='q_mat_op', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Num(n=0)])]), body=[Assign(targets=[Name(id='q_mat_op', ctx=Store())], value=Call(func=Attribute(value=Name(id='z2_symmetries', ctx=Load()), attr='taper', ctx=Load()), args=[Name(id='q_mat_op', ctx=Load())], keywords=[]))], orelse=[]), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='w_mat_op', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='w_mat_op', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Num(n=0)])]), body=[Assign(targets=[Name(id='w_mat_op', ctx=Store())], value=Call(func=Attribute(value=Name(id='z2_symmetries', ctx=Load()), attr='taper', ctx=Load()), args=[Name(id='w_mat_op', ctx=Load())], keywords=[]))], orelse=[]), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='m_mat_op', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='m_mat_op', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Num(n=0)])]), body=[Assign(targets=[Name(id='m_mat_op', ctx=Store())], value=Call(func=Attribute(value=Name(id='z2_symmetries', ctx=Load()), attr='taper', ctx=Load()), args=[Name(id='m_mat_op', ctx=Load())], keywords=[]))], orelse=[]), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='v_mat_op', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='v_mat_op', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Num(n=0)])]), body=[Assign(targets=[Name(id='v_mat_op', ctx=Store())], value=Call(func=Attribute(value=Name(id='z2_symmetries', ctx=Load()), attr='taper', ctx=Load()), args=[Name(id='v_mat_op', ctx=Load())], keywords=[]))], orelse=[])], orelse=[])]), Return(value=Tuple(elts=[Name(id='m_u', ctx=Load()), Name(id='n_u', ctx=Load()), Name(id='q_mat_op', ctx=Load()), Name(id='w_mat_op', ctx=Load()), Name(id='m_mat_op', ctx=Load()), Name(id='v_mat_op', ctx=Load())], ctx=Load()))], decorator_list=[Name(id='staticmethod', ctx=Load())], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='int', ctx=Load()), Name(id='PauliSumOp', ctx=Load()), Name(id='PauliSumOp', ctx=Load()), Name(id='PauliSumOp', ctx=Load()), Name(id='PauliSumOp', ctx=Load())], ctx=Load())), ctx=Load()))
FunctionDef(name='_build_eom_matrices', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='gs_results', annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='float', ctx=Load())), ctx=Load())], ctx=Load())), ctx=Load())), arg(arg='size', annotation=Name(id='int', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Constructs the M, V, Q and W matrices from the results on the ground state\n\n        Args:\n            gs_results: a ground state result object\n            size: size of eigenvalue problem\n\n        Returns:\n            the matrices and their standard deviation\n        ')), Assign(targets=[Tuple(elts=[Name(id='mus', ctx=Store()), Name(id='nus', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='triu_indices', ctx=Load()), args=[Name(id='size', ctx=Load())], keywords=[])), Assign(targets=[Name(id='m_mat', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='zeros', ctx=Load()), args=[Tuple(elts=[Name(id='size', ctx=Load()), Name(id='size', ctx=Load())], ctx=Load())], keywords=[keyword(arg='dtype', value=Name(id='complex', ctx=Load()))])), Assign(targets=[Name(id='v_mat', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='zeros', ctx=Load()), args=[Tuple(elts=[Name(id='size', ctx=Load()), Name(id='size', ctx=Load())], ctx=Load())], keywords=[keyword(arg='dtype', value=Name(id='complex', ctx=Load()))])), Assign(targets=[Name(id='q_mat', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='zeros', ctx=Load()), args=[Tuple(elts=[Name(id='size', ctx=Load()), Name(id='size', ctx=Load())], ctx=Load())], keywords=[keyword(arg='dtype', value=Name(id='complex', ctx=Load()))])), Assign(targets=[Name(id='w_mat', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='zeros', ctx=Load()), args=[Tuple(elts=[Name(id='size', ctx=Load()), Name(id='size', ctx=Load())], ctx=Load())], keywords=[keyword(arg='dtype', value=Name(id='complex', ctx=Load()))])), Assign(targets=[Tuple(elts=[Name(id='m_mat_std', ctx=Store()), Name(id='v_mat_std', ctx=Store()), Name(id='q_mat_std', ctx=Store()), Name(id='w_mat_std', ctx=Store())], ctx=Store())], value=Tuple(elts=[Num(n=0.0), Num(n=0.0), Num(n=0.0), Num(n=0.0)], ctx=Load())), For(target=Tuple(elts=[Name(id='idx', ctx=Store()), Name(id='m_u', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='mus', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='n_u', ctx=Store())], value=Subscript(value=Name(id='nus', ctx=Load()), slice=Index(value=Name(id='idx', ctx=Load())), ctx=Load())), Assign(targets=[Subscript(value=Subscript(value=Name(id='q_mat', ctx=Load()), slice=Index(value=Name(id='m_u', ctx=Load())), ctx=Load()), slice=Index(value=Name(id='n_u', ctx=Load())), ctx=Store())], value=IfExp(test=Compare(left=Call(func=Attribute(value=Name(id='gs_results', ctx=Load()), attr='get', ctx=Load()), args=[JoinedStr(values=[Str(s='q_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])], keywords=[]), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=Subscript(value=Subscript(value=Name(id='gs_results', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='q_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])), ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load()), orelse=Subscript(value=Subscript(value=Name(id='q_mat', ctx=Load()), slice=Index(value=Name(id='m_u', ctx=Load())), ctx=Load()), slice=Index(value=Name(id='n_u', ctx=Load())), ctx=Load()))), Assign(targets=[Subscript(value=Subscript(value=Name(id='w_mat', ctx=Load()), slice=Index(value=Name(id='m_u', ctx=Load())), ctx=Load()), slice=Index(value=Name(id='n_u', ctx=Load())), ctx=Store())], value=IfExp(test=Compare(left=Call(func=Attribute(value=Name(id='gs_results', ctx=Load()), attr='get', ctx=Load()), args=[JoinedStr(values=[Str(s='w_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])], keywords=[]), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=Subscript(value=Subscript(value=Name(id='gs_results', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='w_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])), ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load()), orelse=Subscript(value=Subscript(value=Name(id='w_mat', ctx=Load()), slice=Index(value=Name(id='m_u', ctx=Load())), ctx=Load()), slice=Index(value=Name(id='n_u', ctx=Load())), ctx=Load()))), Assign(targets=[Subscript(value=Subscript(value=Name(id='m_mat', ctx=Load()), slice=Index(value=Name(id='m_u', ctx=Load())), ctx=Load()), slice=Index(value=Name(id='n_u', ctx=Load())), ctx=Store())], value=IfExp(test=Compare(left=Call(func=Attribute(value=Name(id='gs_results', ctx=Load()), attr='get', ctx=Load()), args=[JoinedStr(values=[Str(s='m_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])], keywords=[]), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=Subscript(value=Subscript(value=Name(id='gs_results', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='m_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])), ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load()), orelse=Subscript(value=Subscript(value=Name(id='m_mat', ctx=Load()), slice=Index(value=Name(id='m_u', ctx=Load())), ctx=Load()), slice=Index(value=Name(id='n_u', ctx=Load())), ctx=Load()))), Assign(targets=[Subscript(value=Subscript(value=Name(id='v_mat', ctx=Load()), slice=Index(value=Name(id='m_u', ctx=Load())), ctx=Load()), slice=Index(value=Name(id='n_u', ctx=Load())), ctx=Store())], value=IfExp(test=Compare(left=Call(func=Attribute(value=Name(id='gs_results', ctx=Load()), attr='get', ctx=Load()), args=[JoinedStr(values=[Str(s='v_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])], keywords=[]), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=Subscript(value=Subscript(value=Name(id='gs_results', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='v_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])), ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load()), orelse=Subscript(value=Subscript(value=Name(id='v_mat', ctx=Load()), slice=Index(value=Name(id='m_u', ctx=Load())), ctx=Load()), slice=Index(value=Name(id='n_u', ctx=Load())), ctx=Load()))), AugAssign(target=Name(id='q_mat_std', ctx=Store()), op=Add(), value=IfExp(test=Compare(left=Call(func=Attribute(value=Name(id='gs_results', ctx=Load()), attr='get', ctx=Load()), args=[JoinedStr(values=[Str(s='q_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_std')])], keywords=[]), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=Subscript(value=Subscript(value=Name(id='gs_results', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='q_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_std')])), ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load()), orelse=Num(n=0))), AugAssign(target=Name(id='w_mat_std', ctx=Store()), op=Add(), value=IfExp(test=Compare(left=Call(func=Attribute(value=Name(id='gs_results', ctx=Load()), attr='get', ctx=Load()), args=[JoinedStr(values=[Str(s='w_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_std')])], keywords=[]), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=Subscript(value=Subscript(value=Name(id='gs_results', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='w_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_std')])), ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load()), orelse=Num(n=0))), AugAssign(target=Name(id='m_mat_std', ctx=Store()), op=Add(), value=IfExp(test=Compare(left=Call(func=Attribute(value=Name(id='gs_results', ctx=Load()), attr='get', ctx=Load()), args=[JoinedStr(values=[Str(s='m_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_std')])], keywords=[]), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=Subscript(value=Subscript(value=Name(id='gs_results', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='m_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_std')])), ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load()), orelse=Num(n=0))), AugAssign(target=Name(id='v_mat_std', ctx=Store()), op=Add(), value=IfExp(test=Compare(left=Call(func=Attribute(value=Name(id='gs_results', ctx=Load()), attr='get', ctx=Load()), args=[JoinedStr(values=[Str(s='v_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_std')])], keywords=[]), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=Subscript(value=Subscript(value=Name(id='gs_results', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='v_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_std')])), ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load()), orelse=Num(n=0)))], orelse=[]), Assign(targets=[Name(id='q_mat', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='q_mat', ctx=Load()), op=Add(), right=Attribute(value=Name(id='q_mat', ctx=Load()), attr='T', ctx=Load())), op=Sub(), right=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='identity', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='q_mat', ctx=Load()), attr='shape', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())], keywords=[]), op=Mult(), right=Name(id='q_mat', ctx=Load())))), Assign(targets=[Name(id='w_mat', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='w_mat', ctx=Load()), op=Add(), right=Attribute(value=Name(id='w_mat', ctx=Load()), attr='T', ctx=Load())), op=Sub(), right=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='identity', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='w_mat', ctx=Load()), attr='shape', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())], keywords=[]), op=Mult(), right=Name(id='w_mat', ctx=Load())))), Assign(targets=[Name(id='m_mat', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='m_mat', ctx=Load()), op=Add(), right=Attribute(value=Name(id='m_mat', ctx=Load()), attr='T', ctx=Load())), op=Sub(), right=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='identity', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='m_mat', ctx=Load()), attr='shape', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())], keywords=[]), op=Mult(), right=Name(id='m_mat', ctx=Load())))), Assign(targets=[Name(id='v_mat', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='v_mat', ctx=Load()), op=Add(), right=Attribute(value=Name(id='v_mat', ctx=Load()), attr='T', ctx=Load())), op=Sub(), right=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='identity', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='v_mat', ctx=Load()), attr='shape', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())], keywords=[]), op=Mult(), right=Name(id='v_mat', ctx=Load())))), Assign(targets=[Name(id='q_mat', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='real', ctx=Load()), args=[Name(id='q_mat', ctx=Load())], keywords=[])), Assign(targets=[Name(id='w_mat', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='real', ctx=Load()), args=[Name(id='w_mat', ctx=Load())], keywords=[])), Assign(targets=[Name(id='m_mat', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='real', ctx=Load()), args=[Name(id='m_mat', ctx=Load())], keywords=[])), Assign(targets=[Name(id='v_mat', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='real', ctx=Load()), args=[Name(id='v_mat', ctx=Load())], keywords=[])), Assign(targets=[Name(id='q_mat_std', ctx=Store())], value=BinOp(left=Name(id='q_mat_std', ctx=Load()), op=Div(), right=Call(func=Name(id='float', ctx=Load()), args=[BinOp(left=Name(id='size', ctx=Load()), op=Pow(), right=Num(n=2))], keywords=[]))), Assign(targets=[Name(id='w_mat_std', ctx=Store())], value=BinOp(left=Name(id='w_mat_std', ctx=Load()), op=Div(), right=Call(func=Name(id='float', ctx=Load()), args=[BinOp(left=Name(id='size', ctx=Load()), op=Pow(), right=Num(n=2))], keywords=[]))), Assign(targets=[Name(id='m_mat_std', ctx=Store())], value=BinOp(left=Name(id='m_mat_std', ctx=Load()), op=Div(), right=Call(func=Name(id='float', ctx=Load()), args=[BinOp(left=Name(id='size', ctx=Load()), op=Pow(), right=Num(n=2))], keywords=[]))), Assign(targets=[Name(id='v_mat_std', ctx=Store())], value=BinOp(left=Name(id='v_mat_std', ctx=Load()), op=Div(), right=Call(func=Name(id='float', ctx=Load()), args=[BinOp(left=Name(id='size', ctx=Load()), op=Pow(), right=Num(n=2))], keywords=[]))), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Str(s='\nQ:=========================\n%s'), Name(id='q_mat', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Str(s='\nW:=========================\n%s'), Name(id='w_mat', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Str(s='\nM:=========================\n%s'), Name(id='m_mat', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Str(s='\nV:=========================\n%s'), Name(id='v_mat', ctx=Load())], keywords=[])), Return(value=Tuple(elts=[Name(id='m_mat', ctx=Load()), Name(id='v_mat', ctx=Load()), Name(id='q_mat', ctx=Load()), Name(id='w_mat', ctx=Load()), Name(id='m_mat_std', ctx=Load()), Name(id='v_mat_std', ctx=Load()), Name(id='q_mat_std', ctx=Load()), Name(id='w_mat_std', ctx=Load())], ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Index(value=Tuple(elts=[Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Name(id='float', ctx=Load()), Name(id='float', ctx=Load()), Name(id='float', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load())), ctx=Load()))
FunctionDef(name='_compute_excitation_energies', args=arguments(args=[arg(arg='m_mat', annotation=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), arg(arg='v_mat', annotation=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), arg(arg='q_mat', annotation=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), arg(arg='w_mat', annotation=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Diagonalizing M, V, Q, W matrices for excitation energies.\n\n        Args:\n            m_mat : M matrices\n            v_mat : V matrices\n            q_mat : Q matrices\n            w_mat : W matrices\n\n        Returns:\n            1-D vector stores all energy gap to reference state\n            2-D array storing the X and Y expansion coefficients\n        ')), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Str(s='Diagonalizing qeom matrices for excited states...')], keywords=[])), Assign(targets=[Name(id='a_mat', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='np', ctx=Load()), attr='matrixlib', ctx=Load()), attr='bmat', ctx=Load()), args=[List(elts=[List(elts=[Name(id='m_mat', ctx=Load()), Name(id='q_mat', ctx=Load())], ctx=Load()), List(elts=[Call(func=Attribute(value=Attribute(value=Name(id='q_mat', ctx=Load()), attr='T', ctx=Load()), attr='conj', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Attribute(value=Name(id='m_mat', ctx=Load()), attr='T', ctx=Load()), attr='conj', ctx=Load()), args=[], keywords=[])], ctx=Load())], ctx=Load())], keywords=[])), Assign(targets=[Name(id='b_mat', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='np', ctx=Load()), attr='matrixlib', ctx=Load()), attr='bmat', ctx=Load()), args=[List(elts=[List(elts=[Name(id='v_mat', ctx=Load()), Name(id='w_mat', ctx=Load())], ctx=Load()), List(elts=[UnaryOp(op=USub(), operand=Call(func=Attribute(value=Attribute(value=Name(id='w_mat', ctx=Load()), attr='T', ctx=Load()), attr='conj', ctx=Load()), args=[], keywords=[])), UnaryOp(op=USub(), operand=Call(func=Attribute(value=Attribute(value=Name(id='v_mat', ctx=Load()), attr='T', ctx=Load()), attr='conj', ctx=Load()), args=[], keywords=[]))], ctx=Load())], ctx=Load())], keywords=[])), Assign(targets=[Name(id='res', ctx=Store())], value=Call(func=Attribute(value=Name(id='linalg', ctx=Load()), attr='eig', ctx=Load()), args=[Name(id='a_mat', ctx=Load()), Name(id='b_mat', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Subscript(value=Name(id='res', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load()), slice=Index(value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='isnan', ctx=Load()), args=[Subscript(value=Name(id='res', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())], keywords=[])], keywords=[])), ctx=Store())], value=Num(n=0.0)), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Str(s='... %s'), Subscript(value=Name(id='res', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())], keywords=[])), Assign(targets=[Name(id='w', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sort', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='real', ctx=Load()), args=[Subscript(value=Name(id='res', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Str(s='Sorted real parts %s'), Name(id='w', ctx=Load())], keywords=[])), Assign(targets=[Name(id='w', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='abs', ctx=Load()), args=[Subscript(value=Name(id='w', ctx=Load()), slice=Slice(lower=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='w', ctx=Load())], keywords=[]), op=FloorDiv(), right=Num(n=2)), upper=None, step=None), ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Name(id='w', ctx=Load()), slice=Index(value=Compare(left=Name(id='w', ctx=Load()), ops=[Lt()], comparators=[Num(n=1e-06)])), ctx=Store())], value=Num(n=0)), Assign(targets=[Name(id='excitation_energies_gap', ctx=Store())], value=Name(id='w', ctx=Load())), Return(value=Tuple(elts=[Name(id='excitation_energies_gap', ctx=Load()), Subscript(value=Name(id='res', ctx=Load()), slice=Index(value=Num(n=1)), ctx=Load())], ctx=Load()))], decorator_list=[Name(id='staticmethod', ctx=Load())], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Index(value=Tuple(elts=[Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())], ctx=Load())), ctx=Load()))
Name(id='AlgorithmResult', ctx=Load())
Expr(value=Str(s='The results class for the QEOM algorithm.'))
FunctionDef(name='__init__', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_ground_state_raw_result', ctx=Store())], value=NameConstant(value=None)), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_excitation_energies', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), ctx=Load()), value=NameConstant(value=None), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_expansion_coefficients', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), ctx=Load()), value=NameConstant(value=None), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_m_matrix', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), ctx=Load()), value=NameConstant(value=None), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_v_matrix', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), ctx=Load()), value=NameConstant(value=None), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_q_matrix', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), ctx=Load()), value=NameConstant(value=None), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_w_matrix', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), ctx=Load()), value=NameConstant(value=None), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_v_matrix_std', ctx=Store()), annotation=Name(id='float', ctx=Load()), value=Num(n=0.0), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_q_matrix_std', ctx=Store()), annotation=Name(id='float', ctx=Load()), value=Num(n=0.0), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_w_matrix_std', ctx=Store()), annotation=Name(id='float', ctx=Load()), value=Num(n=0.0), simple=0)], decorator_list=[], returns=NameConstant(value=None))
FunctionDef(name='ground_state_raw_result', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='returns ground state raw result')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_ground_state_raw_result', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=None)
FunctionDef(name='ground_state_raw_result', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='value', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='sets ground state raw result')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_ground_state_raw_result', ctx=Store())], value=Name(id='value', ctx=Load()))], decorator_list=[Attribute(value=Name(id='ground_state_raw_result', ctx=Load()), attr='setter', ctx=Load())], returns=NameConstant(value=None))
FunctionDef(name='excitation_energies', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='returns the excitation energies (energy gaps)')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_excitation_energies', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), ctx=Load()))
FunctionDef(name='excitation_energies', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='value', annotation=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='sets the excitation energies (energy gaps)')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_excitation_energies', ctx=Store())], value=Name(id='value', ctx=Load()))], decorator_list=[Attribute(value=Name(id='excitation_energies', ctx=Load()), attr='setter', ctx=Load())], returns=NameConstant(value=None))
FunctionDef(name='expansion_coefficients', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='returns the X and Y expansion coefficients')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_expansion_coefficients', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), ctx=Load()))
FunctionDef(name='expansion_coefficients', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='value', annotation=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='sets the X and Y expansion coefficients')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_expansion_coefficients', ctx=Store())], value=Name(id='value', ctx=Load()))], decorator_list=[Attribute(value=Name(id='expansion_coefficients', ctx=Load()), attr='setter', ctx=Load())], returns=NameConstant(value=None))
FunctionDef(name='m_matrix', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='returns the M matrix')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_m_matrix', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), ctx=Load()))
FunctionDef(name='m_matrix', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='value', annotation=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='sets the M matrix')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_m_matrix', ctx=Store())], value=Name(id='value', ctx=Load()))], decorator_list=[Attribute(value=Name(id='m_matrix', ctx=Load()), attr='setter', ctx=Load())], returns=NameConstant(value=None))
FunctionDef(name='v_matrix', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='returns the V matrix')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_v_matrix', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), ctx=Load()))
FunctionDef(name='v_matrix', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='value', annotation=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='sets the V matrix')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_v_matrix', ctx=Store())], value=Name(id='value', ctx=Load()))], decorator_list=[Attribute(value=Name(id='v_matrix', ctx=Load()), attr='setter', ctx=Load())], returns=NameConstant(value=None))
FunctionDef(name='q_matrix', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='returns the Q matrix')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_q_matrix', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), ctx=Load()))
FunctionDef(name='q_matrix', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='value', annotation=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='sets the Q matrix')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_q_matrix', ctx=Store())], value=Name(id='value', ctx=Load()))], decorator_list=[Attribute(value=Name(id='q_matrix', ctx=Load()), attr='setter', ctx=Load())], returns=NameConstant(value=None))
FunctionDef(name='w_matrix', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='returns the W matrix')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_w_matrix', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), ctx=Load()))
FunctionDef(name='w_matrix', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='value', annotation=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='sets the W matrix')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_w_matrix', ctx=Store())], value=Name(id='value', ctx=Load()))], decorator_list=[Attribute(value=Name(id='w_matrix', ctx=Load()), attr='setter', ctx=Load())], returns=NameConstant(value=None))
FunctionDef(name='m_matrix_std', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='returns the M matrix standard deviation')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_m_matrix_std', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='float', ctx=Load()))
FunctionDef(name='m_matrix_std', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='value', annotation=Name(id='float', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='sets the M matrix standard deviation')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_m_matrix_std', ctx=Store())], value=Name(id='value', ctx=Load()))], decorator_list=[Attribute(value=Name(id='m_matrix_std', ctx=Load()), attr='setter', ctx=Load())], returns=NameConstant(value=None))
FunctionDef(name='v_matrix_std', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='returns the V matrix standard deviation')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_v_matrix_std', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='float', ctx=Load()))
FunctionDef(name='v_matrix_std', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='value', annotation=Name(id='float', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='sets the V matrix standard deviation')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_v_matrix_std', ctx=Store())], value=Name(id='value', ctx=Load()))], decorator_list=[Attribute(value=Name(id='v_matrix_std', ctx=Load()), attr='setter', ctx=Load())], returns=NameConstant(value=None))
FunctionDef(name='q_matrix_std', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='returns the Q matrix standard deviation')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_q_matrix_std', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='float', ctx=Load()))
FunctionDef(name='q_matrix_std', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='value', annotation=Name(id='float', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='sets the Q matrix standard deviation')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_q_matrix_std', ctx=Store())], value=Name(id='value', ctx=Load()))], decorator_list=[Attribute(value=Name(id='q_matrix_std', ctx=Load()), attr='setter', ctx=Load())], returns=NameConstant(value=None))
FunctionDef(name='w_matrix_std', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='returns the W matrix standard deviation')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_w_matrix_std', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='float', ctx=Load()))
FunctionDef(name='w_matrix_std', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='value', annotation=Name(id='float', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='sets the W matrix standard deviation')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_w_matrix_std', ctx=Store())], value=Name(id='value', ctx=Load()))], decorator_list=[Attribute(value=Name(id='w_matrix_std', ctx=Load()), attr='setter', ctx=Load())], returns=NameConstant(value=None))
Store()
Attribute(value=Name(id='logging', ctx=Load()), attr='getLogger', ctx=Load())
Name(id='__name__', ctx=Load())
Load()
Str(s='The calculation of excited states via the qEOM algorithm')
arguments(args=[arg(arg='self', annotation=None), arg(arg='ground_state_solver', annotation=Name(id='GroundStateSolver', ctx=Load())), arg(arg='excitations', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='int', ctx=Load())), ctx=Load())), ctx=Load())], ctx=Load())), ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[Str(s='sd')])
Expr(value=Str(s="\n        Args:\n            ground_state_solver: a GroundStateSolver object. The qEOM algorithm\n                will use this ground state to compute the EOM matrix elements\n            excitations: The excitations to be included in the eom pseudo-eigenvalue problem.\n                If a string ('s', 'd' or 'sd') then all excitations of the given type will be used.\n                Otherwise a list of custom excitations can directly be provided.\n        "))
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_gsc', ctx=Store())], value=Name(id='ground_state_solver', ctx=Load()))
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='excitations', ctx=Store())], value=Name(id='excitations', ctx=Load()))
AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_untapered_qubit_op_main', ctx=Store()), annotation=Name(id='PauliSumOp', ctx=Load()), value=NameConstant(value=None), simple=0)
NameConstant(value=None)
arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Expr(value=Str(s='Returns the excitations to be included in the eom pseudo-eigenvalue problem.'))
Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_excitations', ctx=Load()))
Name(id='property', ctx=Load())
Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='int', ctx=Load())), ctx=Load())), ctx=Load())], ctx=Load())), ctx=Load())
arguments(args=[arg(arg='self', annotation=None), arg(arg='excitations', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='int', ctx=Load())), ctx=Load())), ctx=Load())], ctx=Load())), ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Expr(value=Str(s='The excitations to be included in the eom pseudo-eigenvalue problem. If a string then\n        all excitations of given type will be used. Otherwise a list of custom excitations can\n        directly be provided.'))
If(test=BoolOp(op=And(), values=[Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='excitations', ctx=Load()), Name(id='str', ctx=Load())], keywords=[]), Compare(left=Name(id='excitations', ctx=Load()), ops=[NotIn()], comparators=[List(elts=[Str(s='s'), Str(s='d'), Str(s='sd')], ctx=Load())])]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Str(s='Excitation type must be s (singles), d (doubles) or sd (singles and doubles)')], keywords=[]), cause=None)], orelse=[])
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_excitations', ctx=Store())], value=Name(id='excitations', ctx=Load()))
Attribute(value=Name(id='excitations', ctx=Load()), attr='setter', ctx=Load())
NameConstant(value=None)
arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Return(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_gsc', ctx=Load()), attr='solver', ctx=Load()))
Name(id='property', ctx=Load())
arguments(args=[arg(arg='self', annotation=None), arg(arg='problem', annotation=Name(id='BaseProblem', ctx=Load())), arg(arg='aux_operators', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Subscript(value=Name(id='ListOrDictType', ctx=Load()), slice=Index(value=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='SecondQuantizedOp', ctx=Load()), Name(id='PauliSumOp', ctx=Load())], ctx=Load())), ctx=Load())), ctx=Load())), ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[NameConstant(value=None)])
Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_gsc', ctx=Load()), attr='get_qubit_operators', ctx=Load()), args=[Name(id='problem', ctx=Load()), Name(id='aux_operators', ctx=Load())], keywords=[]))
Subscript(value=Name(id='Tuple', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='PauliSumOp', ctx=Load()), Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Subscript(value=Name(id='ListOrDictType', ctx=Load()), slice=Index(value=Name(id='PauliSumOp', ctx=Load())), ctx=Load())), ctx=Load())], ctx=Load())), ctx=Load())
arguments(args=[arg(arg='self', annotation=None), arg(arg='problem', annotation=Name(id='BaseProblem', ctx=Load())), arg(arg='aux_operators', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Subscript(value=Name(id='ListOrDictType', ctx=Load()), slice=Index(value=Name(id='SecondQuantizedOp', ctx=Load())), ctx=Load())), ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[NameConstant(value=None)])
Expr(value=Str(s='Run the excited-states calculation.\n\n        Construct and solves the EOM pseudo-eigenvalue problem to obtain the excitation energies\n        and the excitation operators expansion coefficients.\n\n        Args:\n            problem: a class encoding a problem to be solved.\n            aux_operators: Additional auxiliary operators to evaluate.\n\n        Returns:\n            An interpreted :class:`~.EigenstateResult`. For more information see also\n            :meth:`~.BaseProblem.interpret`.\n        '))
If(test=Compare(left=Name(id='aux_operators', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='warning', ctx=Load()), args=[Str(s='With qEOM the auxiliary operators can currently only be evaluated on the ground state.')], keywords=[]))], orelse=[])
Assign(targets=[Name(id='groundstate_result', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_gsc', ctx=Load()), attr='solve', ctx=Load()), args=[Name(id='problem', ctx=Load()), Name(id='aux_operators', ctx=Load())], keywords=[]))
Assign(targets=[Name(id='second_q_ops', ctx=Store())], value=Call(func=Attribute(value=Name(id='problem', ctx=Load()), attr='second_q_ops', ctx=Load()), args=[], keywords=[]))
If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='second_q_ops', ctx=Load()), Name(id='list', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='main_second_q_op', ctx=Store())], value=Subscript(value=Name(id='second_q_ops', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load()))], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='second_q_ops', ctx=Load()), Name(id='dict', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='main_second_q_op', ctx=Store())], value=Call(func=Attribute(value=Name(id='second_q_ops', ctx=Load()), attr='pop', ctx=Load()), args=[Attribute(value=Name(id='problem', ctx=Load()), attr='main_property_name', ctx=Load())], keywords=[]))], orelse=[])])
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_untapered_qubit_op_main', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_gsc', ctx=Load()), attr='qubit_converter', ctx=Load()), attr='convert_only', ctx=Load()), args=[Name(id='main_second_q_op', ctx=Load()), Attribute(value=Name(id='problem', ctx=Load()), attr='num_particles', ctx=Load())], keywords=[]))
Assign(targets=[Tuple(elts=[Name(id='matrix_operators_dict', ctx=Store()), Name(id='size', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_prepare_matrix_operators', ctx=Load()), args=[Name(id='problem', ctx=Load())], keywords=[]))
Assign(targets=[Name(id='measurement_results', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_gsc', ctx=Load()), attr='evaluate_operators', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='groundstate_result', ctx=Load()), attr='eigenstates', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load()), Name(id='matrix_operators_dict', ctx=Load())], keywords=[]))
Assign(targets=[Name(id='measurement_results', ctx=Store())], value=Call(func=Name(id='cast', ctx=Load()), args=[Subscript(value=Name(id='Dict', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='float', ctx=Load())), ctx=Load())], ctx=Load())), ctx=Load()), Name(id='measurement_results', ctx=Load())], keywords=[]))
Assign(targets=[Tuple(elts=[Name(id='m_mat', ctx=Store()), Name(id='v_mat', ctx=Store()), Name(id='q_mat', ctx=Store()), Name(id='w_mat', ctx=Store()), Name(id='m_mat_std', ctx=Store()), Name(id='v_mat_std', ctx=Store()), Name(id='q_mat_std', ctx=Store()), Name(id='w_mat_std', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_build_eom_matrices', ctx=Load()), args=[Name(id='measurement_results', ctx=Load()), Name(id='size', ctx=Load())], keywords=[]))
Assign(targets=[Tuple(elts=[Name(id='energy_gaps', ctx=Store()), Name(id='expansion_coefs', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_compute_excitation_energies', ctx=Load()), args=[Name(id='m_mat', ctx=Load()), Name(id='v_mat', ctx=Load()), Name(id='q_mat', ctx=Load()), Name(id='w_mat', ctx=Load())], keywords=[]))
Assign(targets=[Name(id='qeom_result', ctx=Store())], value=Call(func=Name(id='QEOMResult', ctx=Load()), args=[], keywords=[]))
Assign(targets=[Attribute(value=Name(id='qeom_result', ctx=Load()), attr='ground_state_raw_result', ctx=Store())], value=Attribute(value=Name(id='groundstate_result', ctx=Load()), attr='raw_result', ctx=Load()))
Assign(targets=[Attribute(value=Name(id='qeom_result', ctx=Load()), attr='expansion_coefficients', ctx=Store())], value=Name(id='expansion_coefs', ctx=Load()))
Assign(targets=[Attribute(value=Name(id='qeom_result', ctx=Load()), attr='excitation_energies', ctx=Store())], value=Name(id='energy_gaps', ctx=Load()))
Assign(targets=[Attribute(value=Name(id='qeom_result', ctx=Load()), attr='m_matrix', ctx=Store())], value=Name(id='m_mat', ctx=Load()))
Assign(targets=[Attribute(value=Name(id='qeom_result', ctx=Load()), attr='v_matrix', ctx=Store())], value=Name(id='v_mat', ctx=Load()))
Assign(targets=[Attribute(value=Name(id='qeom_result', ctx=Load()), attr='q_matrix', ctx=Store())], value=Name(id='q_mat', ctx=Load()))
Assign(targets=[Attribute(value=Name(id='qeom_result', ctx=Load()), attr='w_matrix', ctx=Store())], value=Name(id='w_mat', ctx=Load()))
Assign(targets=[Attribute(value=Name(id='qeom_result', ctx=Load()), attr='m_matrix_std', ctx=Store())], value=Name(id='m_mat_std', ctx=Load()))
Assign(targets=[Attribute(value=Name(id='qeom_result', ctx=Load()), attr='v_matrix_std', ctx=Store())], value=Name(id='v_mat_std', ctx=Load()))
Assign(targets=[Attribute(value=Name(id='qeom_result', ctx=Load()), attr='q_matrix_std', ctx=Store())], value=Name(id='q_mat_std', ctx=Load()))
Assign(targets=[Attribute(value=Name(id='qeom_result', ctx=Load()), attr='w_matrix_std', ctx=Store())], value=Name(id='w_mat_std', ctx=Load()))
Assign(targets=[Name(id='eigenstate_result', ctx=Store())], value=Call(func=Name(id='EigenstateResult', ctx=Load()), args=[], keywords=[]))
Assign(targets=[Attribute(value=Name(id='eigenstate_result', ctx=Load()), attr='eigenstates', ctx=Store())], value=Attribute(value=Name(id='groundstate_result', ctx=Load()), attr='eigenstates', ctx=Load()))
Assign(targets=[Attribute(value=Name(id='eigenstate_result', ctx=Load()), attr='aux_operator_eigenvalues', ctx=Store())], value=Attribute(value=Name(id='groundstate_result', ctx=Load()), attr='aux_operator_eigenvalues', ctx=Load()))
Assign(targets=[Attribute(value=Name(id='eigenstate_result', ctx=Load()), attr='raw_result', ctx=Store())], value=Name(id='qeom_result', ctx=Load()))
Assign(targets=[Attribute(value=Name(id='eigenstate_result', ctx=Load()), attr='eigenenergies', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Attribute(value=Name(id='groundstate_result', ctx=Load()), attr='eigenenergies', ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='asarray', ctx=Load()), args=[ListComp(elt=BinOp(left=Subscript(value=Attribute(value=Name(id='groundstate_result', ctx=Load()), attr='eigenenergies', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load()), op=Add(), right=Name(id='gap', ctx=Load())), generators=[comprehension(target=Name(id='gap', ctx=Store()), iter=Name(id='energy_gaps', ctx=Load()), ifs=[], is_async=0)])], keywords=[])], keywords=[]))
Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Attribute(value=Name(id='problem', ctx=Load()), attr='interpret', ctx=Load()), args=[Name(id='eigenstate_result', ctx=Load())], keywords=[]))
Return(value=Name(id='result', ctx=Load()))
Name(id='EigenstateResult', ctx=Load())
arguments(args=[arg(arg='self', annotation=None), arg(arg='problem', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Expr(value=Str(s='Construct the excitation operators for each matrix element.\n\n        Returns:\n            a dictionary of all matrix elements operators and the number of excitations\n            (or the size of the qEOM pseudo-eigenvalue problem)\n        '))
Assign(targets=[Name(id='data', ctx=Store())], value=Call(func=Attribute(value=Name(id='problem', ctx=Load()), attr='hopping_qeom_ops', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_gsc', ctx=Load()), attr='qubit_converter', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_excitations', ctx=Load())], keywords=[]))
Assign(targets=[Tuple(elts=[Name(id='hopping_operators', ctx=Store()), Name(id='type_of_commutativities', ctx=Store()), Name(id='excitation_indices', ctx=Store())], ctx=Store())], value=Name(id='data', ctx=Load()))
Assign(targets=[Name(id='size', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='excitation_indices', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[]), op=FloorDiv(), right=Num(n=2))], keywords=[]))
Assign(targets=[Name(id='eom_matrix_operators', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_build_all_commutators', ctx=Load()), args=[Name(id='hopping_operators', ctx=Load()), Name(id='type_of_commutativities', ctx=Load()), Name(id='size', ctx=Load())], keywords=[]))
Return(value=Tuple(elts=[Name(id='eom_matrix_operators', ctx=Load()), Name(id='size', ctx=Load())], ctx=Load()))
Subscript(value=Name(id='Tuple', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='dict', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load())), ctx=Load())
arguments(args=[arg(arg='self', annotation=None), arg(arg='hopping_operators', annotation=Name(id='dict', ctx=Load())), arg(arg='type_of_commutativities', annotation=Name(id='dict', ctx=Load())), arg(arg='size', annotation=Name(id='int', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Expr(value=Str(s='Building all commutators for Q, W, M, V matrices.\n\n        Args:\n            hopping_operators: all hopping operators based on excitations_list,\n                key is the string of single/double excitation;\n                value is corresponding operator.\n            type_of_commutativities: if tapering is used, it records the commutativities of\n                hopping operators with the\n                Z2 symmetries found in the original operator.\n            size: the number of excitations (size of the qEOM pseudo-eigenvalue problem)\n\n        Returns:\n            a dictionary that contains the operators for each matrix element\n        '))
Assign(targets=[Name(id='all_matrix_operators', ctx=Store())], value=Dict(keys=[], values=[]))
Assign(targets=[Tuple(elts=[Name(id='mus', ctx=Store()), Name(id='nus', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='triu_indices', ctx=Load()), args=[Name(id='size', ctx=Load())], keywords=[]))
FunctionDef(name='_build_one_sector', args=arguments(args=[arg(arg='available_hopping_ops', annotation=None), arg(arg='untapered_op', annotation=None), arg(arg='z2_symmetries', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Assign(targets=[Name(id='to_be_computed_list', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Tuple(elts=[Name(id='idx', ctx=Store()), Name(id='m_u', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='mus', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='n_u', ctx=Store())], value=Subscript(value=Name(id='nus', ctx=Load()), slice=Index(value=Name(id='idx', ctx=Load())), ctx=Load())), Assign(targets=[Name(id='left_op', ctx=Store())], value=Call(func=Attribute(value=Name(id='available_hopping_ops', ctx=Load()), attr='get', ctx=Load()), args=[JoinedStr(values=[Str(s='E_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None)])], keywords=[])), Assign(targets=[Name(id='right_op_1', ctx=Store())], value=Call(func=Attribute(value=Name(id='available_hopping_ops', ctx=Load()), attr='get', ctx=Load()), args=[JoinedStr(values=[Str(s='E_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])], keywords=[])), Assign(targets=[Name(id='right_op_2', ctx=Store())], value=Call(func=Attribute(value=Name(id='available_hopping_ops', ctx=Load()), attr='get', ctx=Load()), args=[JoinedStr(values=[Str(s='Edag_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='to_be_computed_list', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Name(id='m_u', ctx=Load()), Name(id='n_u', ctx=Load()), Name(id='left_op', ctx=Load()), Name(id='right_op_1', ctx=Load()), Name(id='right_op_2', ctx=Load())], ctx=Load())], keywords=[]))], orelse=[]), If(test=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='isEnabledFor', ctx=Load()), args=[Attribute(value=Name(id='logging', ctx=Load()), attr='INFO', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='info', ctx=Load()), args=[Str(s='Building all commutators:')], keywords=[])), Expr(value=Call(func=Name(id='TextProgressBar', ctx=Load()), args=[Attribute(value=Name(id='sys', ctx=Load()), attr='stderr', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='results', ctx=Store())], value=Call(func=Name(id='parallel_map', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_build_commutator_routine', ctx=Load()), Name(id='to_be_computed_list', ctx=Load())], keywords=[keyword(arg='task_args', value=Tuple(elts=[Name(id='untapered_op', ctx=Load()), Name(id='z2_symmetries', ctx=Load())], ctx=Load())), keyword(arg='num_processes', value=Attribute(value=Name(id='algorithm_globals', ctx=Load()), attr='num_processes', ctx=Load()))])), For(target=Name(id='result', ctx=Store()), iter=Name(id='results', ctx=Load()), body=[Assign(targets=[Tuple(elts=[Name(id='m_u', ctx=Store()), Name(id='n_u', ctx=Store()), Name(id='q_mat_op', ctx=Store()), Name(id='w_mat_op', ctx=Store()), Name(id='m_mat_op', ctx=Store()), Name(id='v_mat_op', ctx=Store())], ctx=Store())], value=Name(id='result', ctx=Load())), If(test=Compare(left=Name(id='q_mat_op', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=[Assign(targets=[Subscript(value=Name(id='all_matrix_operators', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='q_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])), ctx=Store())], value=Name(id='q_mat_op', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='w_mat_op', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=[Assign(targets=[Subscript(value=Name(id='all_matrix_operators', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='w_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])), ctx=Store())], value=Name(id='w_mat_op', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='m_mat_op', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=[Assign(targets=[Subscript(value=Name(id='all_matrix_operators', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='m_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])), ctx=Store())], value=Name(id='m_mat_op', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='v_mat_op', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=[Assign(targets=[Subscript(value=Name(id='all_matrix_operators', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='v_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])), ctx=Store())], value=Name(id='v_mat_op', ctx=Load()))], orelse=[])], orelse=[])], decorator_list=[], returns=None)
Try(body=[Assign(targets=[Name(id='z2_symmetries', ctx=Store())], value=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_gsc', ctx=Load()), attr='qubit_converter', ctx=Load()), attr='z2symmetries', ctx=Load()))], handlers=[ExceptHandler(type=Name(id='AttributeError', ctx=Load()), name=None, body=[Assign(targets=[Name(id='z2_symmetries', ctx=Store())], value=Call(func=Name(id='Z2Symmetries', ctx=Load()), args=[List(elts=[], ctx=Load()), List(elts=[], ctx=Load()), List(elts=[], ctx=Load())], keywords=[]))])], orelse=[], finalbody=[])
If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='z2_symmetries', ctx=Load()), attr='is_empty', ctx=Load()), args=[], keywords=[])), body=[Assign(targets=[Name(id='combinations', ctx=Store())], value=Call(func=Attribute(value=Name(id='itertools', ctx=Load()), attr='product', ctx=Load()), args=[List(elts=[Num(n=1), UnaryOp(op=USub(), operand=Num(n=1))], ctx=Load())], keywords=[keyword(arg='repeat', value=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='z2_symmetries', ctx=Load()), attr='symmetries', ctx=Load())], keywords=[]))])), For(target=Name(id='targeted_tapering_values', ctx=Store()), iter=Name(id='combinations', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='info', ctx=Load()), args=[Str(s='In sector: (%s)'), Call(func=Attribute(value=Str(s=','), attr='join', ctx=Load()), args=[ListComp(elt=Call(func=Name(id='str', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='targeted_tapering_values', ctx=Load()), ifs=[], is_async=0)])], keywords=[])], keywords=[])), Assign(targets=[Name(id='available_hopping_ops', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='targeted_sector', ctx=Store())], value=Compare(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='asarray', ctx=Load()), args=[Name(id='targeted_tapering_values', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Num(n=1)])), For(target=Tuple(elts=[Name(id='key', ctx=Store()), Name(id='value', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='type_of_commutativities', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Name(id='value', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='asarray', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[])), If(test=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='all', ctx=Load()), args=[Compare(left=Name(id='value', ctx=Load()), ops=[Eq()], comparators=[Name(id='targeted_sector', ctx=Load())])], keywords=[]), body=[Assign(targets=[Subscript(value=Name(id='available_hopping_ops', ctx=Load()), slice=Index(value=Name(id='key', ctx=Load())), ctx=Store())], value=Subscript(value=Name(id='hopping_operators', ctx=Load()), slice=Index(value=Name(id='key', ctx=Load())), ctx=Load()))], orelse=[])], orelse=[]), Expr(value=Call(func=Name(id='_build_one_sector', ctx=Load()), args=[Name(id='available_hopping_ops', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_untapered_qubit_op_main', ctx=Load()), Name(id='z2_symmetries', ctx=Load())], keywords=[]))], orelse=[])], orelse=[Expr(value=Call(func=Name(id='_build_one_sector', ctx=Load()), args=[Name(id='hopping_operators', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_untapered_qubit_op_main', ctx=Load()), Name(id='z2_symmetries', ctx=Load())], keywords=[]))])
Return(value=Name(id='all_matrix_operators', ctx=Load()))
Name(id='dict', ctx=Load())
arguments(args=[arg(arg='params', annotation=Name(id='List', ctx=Load())), arg(arg='operator', annotation=Name(id='PauliSumOp', ctx=Load())), arg(arg='z2_symmetries', annotation=Name(id='Z2Symmetries', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Expr(value=Str(s='Numerically computes the commutator / double commutator between operators.\n\n        Args:\n            params: list containing the indices of matrix element and the corresponding\n                excitation operators\n            operator: the hamiltonian\n            z2_symmetries: z2_symmetries in case of tapering\n\n        Returns:\n            The indices of the matrix element and the corresponding qubit\n            operator for each of the EOM matrices\n        '))
Assign(targets=[Tuple(elts=[Name(id='m_u', ctx=Store()), Name(id='n_u', ctx=Store()), Name(id='left_op', ctx=Store()), Name(id='right_op_1', ctx=Store()), Name(id='right_op_2', ctx=Store())], ctx=Store())], value=Name(id='params', ctx=Load()))
If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='left_op', ctx=Load()), ops=[Is()], comparators=[NameConstant(value=None)]), BoolOp(op=And(), values=[Compare(left=Name(id='right_op_1', ctx=Load()), ops=[Is()], comparators=[NameConstant(value=None)]), Compare(left=Name(id='right_op_2', ctx=Load()), ops=[Is()], comparators=[NameConstant(value=None)])])]), body=[Assign(targets=[Name(id='q_mat_op', ctx=Store())], value=NameConstant(value=None)), Assign(targets=[Name(id='w_mat_op', ctx=Store())], value=NameConstant(value=None)), Assign(targets=[Name(id='m_mat_op', ctx=Store())], value=NameConstant(value=None)), Assign(targets=[Name(id='v_mat_op', ctx=Store())], value=NameConstant(value=None))], orelse=[If(test=Compare(left=Name(id='right_op_1', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=[Assign(targets=[Name(id='q_mat_op', ctx=Store())], value=Call(func=Name(id='double_commutator', ctx=Load()), args=[Name(id='left_op', ctx=Load()), Name(id='operator', ctx=Load()), Name(id='right_op_1', ctx=Load())], keywords=[keyword(arg='sign', value=NameConstant(value=False))])), Assign(targets=[Name(id='w_mat_op', ctx=Store())], value=Call(func=Name(id='commutator', ctx=Load()), args=[Name(id='left_op', ctx=Load()), Name(id='right_op_1', ctx=Load())], keywords=[])), Assign(targets=[Name(id='q_mat_op', ctx=Store())], value=IfExp(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='q_mat_op', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Num(n=0)]), body=NameConstant(value=None), orelse=Name(id='q_mat_op', ctx=Load()))), Assign(targets=[Name(id='w_mat_op', ctx=Store())], value=IfExp(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='w_mat_op', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Num(n=0)]), body=NameConstant(value=None), orelse=Name(id='w_mat_op', ctx=Load())))], orelse=[Assign(targets=[Name(id='q_mat_op', ctx=Store())], value=NameConstant(value=None)), Assign(targets=[Name(id='w_mat_op', ctx=Store())], value=NameConstant(value=None))]), If(test=Compare(left=Name(id='right_op_2', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=[Assign(targets=[Name(id='m_mat_op', ctx=Store())], value=Call(func=Name(id='double_commutator', ctx=Load()), args=[Name(id='left_op', ctx=Load()), Name(id='operator', ctx=Load()), Name(id='right_op_2', ctx=Load())], keywords=[keyword(arg='sign', value=NameConstant(value=False))])), Assign(targets=[Name(id='v_mat_op', ctx=Store())], value=Call(func=Name(id='commutator', ctx=Load()), args=[Name(id='left_op', ctx=Load()), Name(id='right_op_2', ctx=Load())], keywords=[])), Assign(targets=[Name(id='m_mat_op', ctx=Store())], value=IfExp(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='m_mat_op', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Num(n=0)]), body=NameConstant(value=None), orelse=Name(id='m_mat_op', ctx=Load()))), Assign(targets=[Name(id='v_mat_op', ctx=Store())], value=IfExp(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='v_mat_op', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Num(n=0)]), body=NameConstant(value=None), orelse=Name(id='v_mat_op', ctx=Load())))], orelse=[Assign(targets=[Name(id='m_mat_op', ctx=Store())], value=NameConstant(value=None)), Assign(targets=[Name(id='v_mat_op', ctx=Store())], value=NameConstant(value=None))]), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='z2_symmetries', ctx=Load()), attr='is_empty', ctx=Load()), args=[], keywords=[])), body=[If(test=BoolOp(op=And(), values=[Compare(left=Name(id='q_mat_op', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='q_mat_op', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Num(n=0)])]), body=[Assign(targets=[Name(id='q_mat_op', ctx=Store())], value=Call(func=Attribute(value=Name(id='z2_symmetries', ctx=Load()), attr='taper', ctx=Load()), args=[Name(id='q_mat_op', ctx=Load())], keywords=[]))], orelse=[]), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='w_mat_op', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='w_mat_op', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Num(n=0)])]), body=[Assign(targets=[Name(id='w_mat_op', ctx=Store())], value=Call(func=Attribute(value=Name(id='z2_symmetries', ctx=Load()), attr='taper', ctx=Load()), args=[Name(id='w_mat_op', ctx=Load())], keywords=[]))], orelse=[]), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='m_mat_op', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='m_mat_op', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Num(n=0)])]), body=[Assign(targets=[Name(id='m_mat_op', ctx=Store())], value=Call(func=Attribute(value=Name(id='z2_symmetries', ctx=Load()), attr='taper', ctx=Load()), args=[Name(id='m_mat_op', ctx=Load())], keywords=[]))], orelse=[]), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='v_mat_op', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='v_mat_op', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Num(n=0)])]), body=[Assign(targets=[Name(id='v_mat_op', ctx=Store())], value=Call(func=Attribute(value=Name(id='z2_symmetries', ctx=Load()), attr='taper', ctx=Load()), args=[Name(id='v_mat_op', ctx=Load())], keywords=[]))], orelse=[])], orelse=[])])
Return(value=Tuple(elts=[Name(id='m_u', ctx=Load()), Name(id='n_u', ctx=Load()), Name(id='q_mat_op', ctx=Load()), Name(id='w_mat_op', ctx=Load()), Name(id='m_mat_op', ctx=Load()), Name(id='v_mat_op', ctx=Load())], ctx=Load()))
Name(id='staticmethod', ctx=Load())
Subscript(value=Name(id='Tuple', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='int', ctx=Load()), Name(id='PauliSumOp', ctx=Load()), Name(id='PauliSumOp', ctx=Load()), Name(id='PauliSumOp', ctx=Load()), Name(id='PauliSumOp', ctx=Load())], ctx=Load())), ctx=Load())
arguments(args=[arg(arg='self', annotation=None), arg(arg='gs_results', annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='float', ctx=Load())), ctx=Load())], ctx=Load())), ctx=Load())), arg(arg='size', annotation=Name(id='int', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Expr(value=Str(s='Constructs the M, V, Q and W matrices from the results on the ground state\n\n        Args:\n            gs_results: a ground state result object\n            size: size of eigenvalue problem\n\n        Returns:\n            the matrices and their standard deviation\n        '))
Assign(targets=[Tuple(elts=[Name(id='mus', ctx=Store()), Name(id='nus', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='triu_indices', ctx=Load()), args=[Name(id='size', ctx=Load())], keywords=[]))
Assign(targets=[Name(id='m_mat', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='zeros', ctx=Load()), args=[Tuple(elts=[Name(id='size', ctx=Load()), Name(id='size', ctx=Load())], ctx=Load())], keywords=[keyword(arg='dtype', value=Name(id='complex', ctx=Load()))]))
Assign(targets=[Name(id='v_mat', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='zeros', ctx=Load()), args=[Tuple(elts=[Name(id='size', ctx=Load()), Name(id='size', ctx=Load())], ctx=Load())], keywords=[keyword(arg='dtype', value=Name(id='complex', ctx=Load()))]))
Assign(targets=[Name(id='q_mat', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='zeros', ctx=Load()), args=[Tuple(elts=[Name(id='size', ctx=Load()), Name(id='size', ctx=Load())], ctx=Load())], keywords=[keyword(arg='dtype', value=Name(id='complex', ctx=Load()))]))
Assign(targets=[Name(id='w_mat', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='zeros', ctx=Load()), args=[Tuple(elts=[Name(id='size', ctx=Load()), Name(id='size', ctx=Load())], ctx=Load())], keywords=[keyword(arg='dtype', value=Name(id='complex', ctx=Load()))]))
Assign(targets=[Tuple(elts=[Name(id='m_mat_std', ctx=Store()), Name(id='v_mat_std', ctx=Store()), Name(id='q_mat_std', ctx=Store()), Name(id='w_mat_std', ctx=Store())], ctx=Store())], value=Tuple(elts=[Num(n=0.0), Num(n=0.0), Num(n=0.0), Num(n=0.0)], ctx=Load()))
For(target=Tuple(elts=[Name(id='idx', ctx=Store()), Name(id='m_u', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='mus', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='n_u', ctx=Store())], value=Subscript(value=Name(id='nus', ctx=Load()), slice=Index(value=Name(id='idx', ctx=Load())), ctx=Load())), Assign(targets=[Subscript(value=Subscript(value=Name(id='q_mat', ctx=Load()), slice=Index(value=Name(id='m_u', ctx=Load())), ctx=Load()), slice=Index(value=Name(id='n_u', ctx=Load())), ctx=Store())], value=IfExp(test=Compare(left=Call(func=Attribute(value=Name(id='gs_results', ctx=Load()), attr='get', ctx=Load()), args=[JoinedStr(values=[Str(s='q_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])], keywords=[]), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=Subscript(value=Subscript(value=Name(id='gs_results', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='q_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])), ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load()), orelse=Subscript(value=Subscript(value=Name(id='q_mat', ctx=Load()), slice=Index(value=Name(id='m_u', ctx=Load())), ctx=Load()), slice=Index(value=Name(id='n_u', ctx=Load())), ctx=Load()))), Assign(targets=[Subscript(value=Subscript(value=Name(id='w_mat', ctx=Load()), slice=Index(value=Name(id='m_u', ctx=Load())), ctx=Load()), slice=Index(value=Name(id='n_u', ctx=Load())), ctx=Store())], value=IfExp(test=Compare(left=Call(func=Attribute(value=Name(id='gs_results', ctx=Load()), attr='get', ctx=Load()), args=[JoinedStr(values=[Str(s='w_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])], keywords=[]), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=Subscript(value=Subscript(value=Name(id='gs_results', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='w_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])), ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load()), orelse=Subscript(value=Subscript(value=Name(id='w_mat', ctx=Load()), slice=Index(value=Name(id='m_u', ctx=Load())), ctx=Load()), slice=Index(value=Name(id='n_u', ctx=Load())), ctx=Load()))), Assign(targets=[Subscript(value=Subscript(value=Name(id='m_mat', ctx=Load()), slice=Index(value=Name(id='m_u', ctx=Load())), ctx=Load()), slice=Index(value=Name(id='n_u', ctx=Load())), ctx=Store())], value=IfExp(test=Compare(left=Call(func=Attribute(value=Name(id='gs_results', ctx=Load()), attr='get', ctx=Load()), args=[JoinedStr(values=[Str(s='m_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])], keywords=[]), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=Subscript(value=Subscript(value=Name(id='gs_results', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='m_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])), ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load()), orelse=Subscript(value=Subscript(value=Name(id='m_mat', ctx=Load()), slice=Index(value=Name(id='m_u', ctx=Load())), ctx=Load()), slice=Index(value=Name(id='n_u', ctx=Load())), ctx=Load()))), Assign(targets=[Subscript(value=Subscript(value=Name(id='v_mat', ctx=Load()), slice=Index(value=Name(id='m_u', ctx=Load())), ctx=Load()), slice=Index(value=Name(id='n_u', ctx=Load())), ctx=Store())], value=IfExp(test=Compare(left=Call(func=Attribute(value=Name(id='gs_results', ctx=Load()), attr='get', ctx=Load()), args=[JoinedStr(values=[Str(s='v_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])], keywords=[]), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=Subscript(value=Subscript(value=Name(id='gs_results', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='v_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])), ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load()), orelse=Subscript(value=Subscript(value=Name(id='v_mat', ctx=Load()), slice=Index(value=Name(id='m_u', ctx=Load())), ctx=Load()), slice=Index(value=Name(id='n_u', ctx=Load())), ctx=Load()))), AugAssign(target=Name(id='q_mat_std', ctx=Store()), op=Add(), value=IfExp(test=Compare(left=Call(func=Attribute(value=Name(id='gs_results', ctx=Load()), attr='get', ctx=Load()), args=[JoinedStr(values=[Str(s='q_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_std')])], keywords=[]), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=Subscript(value=Subscript(value=Name(id='gs_results', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='q_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_std')])), ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load()), orelse=Num(n=0))), AugAssign(target=Name(id='w_mat_std', ctx=Store()), op=Add(), value=IfExp(test=Compare(left=Call(func=Attribute(value=Name(id='gs_results', ctx=Load()), attr='get', ctx=Load()), args=[JoinedStr(values=[Str(s='w_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_std')])], keywords=[]), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=Subscript(value=Subscript(value=Name(id='gs_results', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='w_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_std')])), ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load()), orelse=Num(n=0))), AugAssign(target=Name(id='m_mat_std', ctx=Store()), op=Add(), value=IfExp(test=Compare(left=Call(func=Attribute(value=Name(id='gs_results', ctx=Load()), attr='get', ctx=Load()), args=[JoinedStr(values=[Str(s='m_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_std')])], keywords=[]), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=Subscript(value=Subscript(value=Name(id='gs_results', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='m_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_std')])), ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load()), orelse=Num(n=0))), AugAssign(target=Name(id='v_mat_std', ctx=Store()), op=Add(), value=IfExp(test=Compare(left=Call(func=Attribute(value=Name(id='gs_results', ctx=Load()), attr='get', ctx=Load()), args=[JoinedStr(values=[Str(s='v_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_std')])], keywords=[]), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=Subscript(value=Subscript(value=Name(id='gs_results', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='v_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_std')])), ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load()), orelse=Num(n=0)))], orelse=[])
Assign(targets=[Name(id='q_mat', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='q_mat', ctx=Load()), op=Add(), right=Attribute(value=Name(id='q_mat', ctx=Load()), attr='T', ctx=Load())), op=Sub(), right=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='identity', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='q_mat', ctx=Load()), attr='shape', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())], keywords=[]), op=Mult(), right=Name(id='q_mat', ctx=Load()))))
Assign(targets=[Name(id='w_mat', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='w_mat', ctx=Load()), op=Add(), right=Attribute(value=Name(id='w_mat', ctx=Load()), attr='T', ctx=Load())), op=Sub(), right=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='identity', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='w_mat', ctx=Load()), attr='shape', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())], keywords=[]), op=Mult(), right=Name(id='w_mat', ctx=Load()))))
Assign(targets=[Name(id='m_mat', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='m_mat', ctx=Load()), op=Add(), right=Attribute(value=Name(id='m_mat', ctx=Load()), attr='T', ctx=Load())), op=Sub(), right=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='identity', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='m_mat', ctx=Load()), attr='shape', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())], keywords=[]), op=Mult(), right=Name(id='m_mat', ctx=Load()))))
Assign(targets=[Name(id='v_mat', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='v_mat', ctx=Load()), op=Add(), right=Attribute(value=Name(id='v_mat', ctx=Load()), attr='T', ctx=Load())), op=Sub(), right=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='identity', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='v_mat', ctx=Load()), attr='shape', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())], keywords=[]), op=Mult(), right=Name(id='v_mat', ctx=Load()))))
Assign(targets=[Name(id='q_mat', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='real', ctx=Load()), args=[Name(id='q_mat', ctx=Load())], keywords=[]))
Assign(targets=[Name(id='w_mat', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='real', ctx=Load()), args=[Name(id='w_mat', ctx=Load())], keywords=[]))
Assign(targets=[Name(id='m_mat', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='real', ctx=Load()), args=[Name(id='m_mat', ctx=Load())], keywords=[]))
Assign(targets=[Name(id='v_mat', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='real', ctx=Load()), args=[Name(id='v_mat', ctx=Load())], keywords=[]))
Assign(targets=[Name(id='q_mat_std', ctx=Store())], value=BinOp(left=Name(id='q_mat_std', ctx=Load()), op=Div(), right=Call(func=Name(id='float', ctx=Load()), args=[BinOp(left=Name(id='size', ctx=Load()), op=Pow(), right=Num(n=2))], keywords=[])))
Assign(targets=[Name(id='w_mat_std', ctx=Store())], value=BinOp(left=Name(id='w_mat_std', ctx=Load()), op=Div(), right=Call(func=Name(id='float', ctx=Load()), args=[BinOp(left=Name(id='size', ctx=Load()), op=Pow(), right=Num(n=2))], keywords=[])))
Assign(targets=[Name(id='m_mat_std', ctx=Store())], value=BinOp(left=Name(id='m_mat_std', ctx=Load()), op=Div(), right=Call(func=Name(id='float', ctx=Load()), args=[BinOp(left=Name(id='size', ctx=Load()), op=Pow(), right=Num(n=2))], keywords=[])))
Assign(targets=[Name(id='v_mat_std', ctx=Store())], value=BinOp(left=Name(id='v_mat_std', ctx=Load()), op=Div(), right=Call(func=Name(id='float', ctx=Load()), args=[BinOp(left=Name(id='size', ctx=Load()), op=Pow(), right=Num(n=2))], keywords=[])))
Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Str(s='\nQ:=========================\n%s'), Name(id='q_mat', ctx=Load())], keywords=[]))
Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Str(s='\nW:=========================\n%s'), Name(id='w_mat', ctx=Load())], keywords=[]))
Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Str(s='\nM:=========================\n%s'), Name(id='m_mat', ctx=Load())], keywords=[]))
Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Str(s='\nV:=========================\n%s'), Name(id='v_mat', ctx=Load())], keywords=[]))
Return(value=Tuple(elts=[Name(id='m_mat', ctx=Load()), Name(id='v_mat', ctx=Load()), Name(id='q_mat', ctx=Load()), Name(id='w_mat', ctx=Load()), Name(id='m_mat_std', ctx=Load()), Name(id='v_mat_std', ctx=Load()), Name(id='q_mat_std', ctx=Load()), Name(id='w_mat_std', ctx=Load())], ctx=Load()))
Subscript(value=Name(id='Tuple', ctx=Load()), slice=Index(value=Tuple(elts=[Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Name(id='float', ctx=Load()), Name(id='float', ctx=Load()), Name(id='float', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load())), ctx=Load())
arguments(args=[arg(arg='m_mat', annotation=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), arg(arg='v_mat', annotation=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), arg(arg='q_mat', annotation=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), arg(arg='w_mat', annotation=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Expr(value=Str(s='Diagonalizing M, V, Q, W matrices for excitation energies.\n\n        Args:\n            m_mat : M matrices\n            v_mat : V matrices\n            q_mat : Q matrices\n            w_mat : W matrices\n\n        Returns:\n            1-D vector stores all energy gap to reference state\n            2-D array storing the X and Y expansion coefficients\n        '))
Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Str(s='Diagonalizing qeom matrices for excited states...')], keywords=[]))
Assign(targets=[Name(id='a_mat', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='np', ctx=Load()), attr='matrixlib', ctx=Load()), attr='bmat', ctx=Load()), args=[List(elts=[List(elts=[Name(id='m_mat', ctx=Load()), Name(id='q_mat', ctx=Load())], ctx=Load()), List(elts=[Call(func=Attribute(value=Attribute(value=Name(id='q_mat', ctx=Load()), attr='T', ctx=Load()), attr='conj', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Attribute(value=Name(id='m_mat', ctx=Load()), attr='T', ctx=Load()), attr='conj', ctx=Load()), args=[], keywords=[])], ctx=Load())], ctx=Load())], keywords=[]))
Assign(targets=[Name(id='b_mat', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='np', ctx=Load()), attr='matrixlib', ctx=Load()), attr='bmat', ctx=Load()), args=[List(elts=[List(elts=[Name(id='v_mat', ctx=Load()), Name(id='w_mat', ctx=Load())], ctx=Load()), List(elts=[UnaryOp(op=USub(), operand=Call(func=Attribute(value=Attribute(value=Name(id='w_mat', ctx=Load()), attr='T', ctx=Load()), attr='conj', ctx=Load()), args=[], keywords=[])), UnaryOp(op=USub(), operand=Call(func=Attribute(value=Attribute(value=Name(id='v_mat', ctx=Load()), attr='T', ctx=Load()), attr='conj', ctx=Load()), args=[], keywords=[]))], ctx=Load())], ctx=Load())], keywords=[]))
Assign(targets=[Name(id='res', ctx=Store())], value=Call(func=Attribute(value=Name(id='linalg', ctx=Load()), attr='eig', ctx=Load()), args=[Name(id='a_mat', ctx=Load()), Name(id='b_mat', ctx=Load())], keywords=[]))
Assign(targets=[Subscript(value=Subscript(value=Name(id='res', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load()), slice=Index(value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='isnan', ctx=Load()), args=[Subscript(value=Name(id='res', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())], keywords=[])], keywords=[])), ctx=Store())], value=Num(n=0.0))
Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Str(s='... %s'), Subscript(value=Name(id='res', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())], keywords=[]))
Assign(targets=[Name(id='w', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sort', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='real', ctx=Load()), args=[Subscript(value=Name(id='res', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())], keywords=[])], keywords=[]))
Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Str(s='Sorted real parts %s'), Name(id='w', ctx=Load())], keywords=[]))
Assign(targets=[Name(id='w', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='abs', ctx=Load()), args=[Subscript(value=Name(id='w', ctx=Load()), slice=Slice(lower=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='w', ctx=Load())], keywords=[]), op=FloorDiv(), right=Num(n=2)), upper=None, step=None), ctx=Load())], keywords=[]))
Assign(targets=[Subscript(value=Name(id='w', ctx=Load()), slice=Index(value=Compare(left=Name(id='w', ctx=Load()), ops=[Lt()], comparators=[Num(n=1e-06)])), ctx=Store())], value=Num(n=0))
Assign(targets=[Name(id='excitation_energies_gap', ctx=Store())], value=Name(id='w', ctx=Load()))
Return(value=Tuple(elts=[Name(id='excitation_energies_gap', ctx=Load()), Subscript(value=Name(id='res', ctx=Load()), slice=Index(value=Num(n=1)), ctx=Load())], ctx=Load()))
Name(id='staticmethod', ctx=Load())
Subscript(value=Name(id='Tuple', ctx=Load()), slice=Index(value=Tuple(elts=[Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())], ctx=Load())), ctx=Load())
Load()
Str(s='The results class for the QEOM algorithm.')
arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[]))
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_ground_state_raw_result', ctx=Store())], value=NameConstant(value=None))
AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_excitation_energies', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), ctx=Load()), value=NameConstant(value=None), simple=0)
AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_expansion_coefficients', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), ctx=Load()), value=NameConstant(value=None), simple=0)
AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_m_matrix', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), ctx=Load()), value=NameConstant(value=None), simple=0)
AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_v_matrix', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), ctx=Load()), value=NameConstant(value=None), simple=0)
AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_q_matrix', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), ctx=Load()), value=NameConstant(value=None), simple=0)
AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_w_matrix', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), ctx=Load()), value=NameConstant(value=None), simple=0)
AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_v_matrix_std', ctx=Store()), annotation=Name(id='float', ctx=Load()), value=Num(n=0.0), simple=0)
AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_q_matrix_std', ctx=Store()), annotation=Name(id='float', ctx=Load()), value=Num(n=0.0), simple=0)
AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_w_matrix_std', ctx=Store()), annotation=Name(id='float', ctx=Load()), value=Num(n=0.0), simple=0)
NameConstant(value=None)
arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Expr(value=Str(s='returns ground state raw result'))
Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_ground_state_raw_result', ctx=Load()))
Name(id='property', ctx=Load())
arguments(args=[arg(arg='self', annotation=None), arg(arg='value', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Expr(value=Str(s='sets ground state raw result'))
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_ground_state_raw_result', ctx=Store())], value=Name(id='value', ctx=Load()))
Attribute(value=Name(id='ground_state_raw_result', ctx=Load()), attr='setter', ctx=Load())
NameConstant(value=None)
arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Expr(value=Str(s='returns the excitation energies (energy gaps)'))
Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_excitation_energies', ctx=Load()))
Name(id='property', ctx=Load())
Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), ctx=Load())
arguments(args=[arg(arg='self', annotation=None), arg(arg='value', annotation=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Expr(value=Str(s='sets the excitation energies (energy gaps)'))
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_excitation_energies', ctx=Store())], value=Name(id='value', ctx=Load()))
Attribute(value=Name(id='excitation_energies', ctx=Load()), attr='setter', ctx=Load())
NameConstant(value=None)
arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Expr(value=Str(s='returns the X and Y expansion coefficients'))
Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_expansion_coefficients', ctx=Load()))
Name(id='property', ctx=Load())
Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), ctx=Load())
arguments(args=[arg(arg='self', annotation=None), arg(arg='value', annotation=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Expr(value=Str(s='sets the X and Y expansion coefficients'))
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_expansion_coefficients', ctx=Store())], value=Name(id='value', ctx=Load()))
Attribute(value=Name(id='expansion_coefficients', ctx=Load()), attr='setter', ctx=Load())
NameConstant(value=None)
arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Expr(value=Str(s='returns the M matrix'))
Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_m_matrix', ctx=Load()))
Name(id='property', ctx=Load())
Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), ctx=Load())
arguments(args=[arg(arg='self', annotation=None), arg(arg='value', annotation=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Expr(value=Str(s='sets the M matrix'))
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_m_matrix', ctx=Store())], value=Name(id='value', ctx=Load()))
Attribute(value=Name(id='m_matrix', ctx=Load()), attr='setter', ctx=Load())
NameConstant(value=None)
arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Expr(value=Str(s='returns the V matrix'))
Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_v_matrix', ctx=Load()))
Name(id='property', ctx=Load())
Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), ctx=Load())
arguments(args=[arg(arg='self', annotation=None), arg(arg='value', annotation=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Expr(value=Str(s='sets the V matrix'))
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_v_matrix', ctx=Store())], value=Name(id='value', ctx=Load()))
Attribute(value=Name(id='v_matrix', ctx=Load()), attr='setter', ctx=Load())
NameConstant(value=None)
arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Expr(value=Str(s='returns the Q matrix'))
Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_q_matrix', ctx=Load()))
Name(id='property', ctx=Load())
Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), ctx=Load())
arguments(args=[arg(arg='self', annotation=None), arg(arg='value', annotation=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Expr(value=Str(s='sets the Q matrix'))
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_q_matrix', ctx=Store())], value=Name(id='value', ctx=Load()))
Attribute(value=Name(id='q_matrix', ctx=Load()), attr='setter', ctx=Load())
NameConstant(value=None)
arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Expr(value=Str(s='returns the W matrix'))
Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_w_matrix', ctx=Load()))
Name(id='property', ctx=Load())
Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), ctx=Load())
arguments(args=[arg(arg='self', annotation=None), arg(arg='value', annotation=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Expr(value=Str(s='sets the W matrix'))
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_w_matrix', ctx=Store())], value=Name(id='value', ctx=Load()))
Attribute(value=Name(id='w_matrix', ctx=Load()), attr='setter', ctx=Load())
NameConstant(value=None)
arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Expr(value=Str(s='returns the M matrix standard deviation'))
Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_m_matrix_std', ctx=Load()))
Name(id='property', ctx=Load())
Name(id='float', ctx=Load())
arguments(args=[arg(arg='self', annotation=None), arg(arg='value', annotation=Name(id='float', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Expr(value=Str(s='sets the M matrix standard deviation'))
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_m_matrix_std', ctx=Store())], value=Name(id='value', ctx=Load()))
Attribute(value=Name(id='m_matrix_std', ctx=Load()), attr='setter', ctx=Load())
NameConstant(value=None)
arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Expr(value=Str(s='returns the V matrix standard deviation'))
Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_v_matrix_std', ctx=Load()))
Name(id='property', ctx=Load())
Name(id='float', ctx=Load())
arguments(args=[arg(arg='self', annotation=None), arg(arg='value', annotation=Name(id='float', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Expr(value=Str(s='sets the V matrix standard deviation'))
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_v_matrix_std', ctx=Store())], value=Name(id='value', ctx=Load()))
Attribute(value=Name(id='v_matrix_std', ctx=Load()), attr='setter', ctx=Load())
NameConstant(value=None)
arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Expr(value=Str(s='returns the Q matrix standard deviation'))
Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_q_matrix_std', ctx=Load()))
Name(id='property', ctx=Load())
Name(id='float', ctx=Load())
arguments(args=[arg(arg='self', annotation=None), arg(arg='value', annotation=Name(id='float', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Expr(value=Str(s='sets the Q matrix standard deviation'))
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_q_matrix_std', ctx=Store())], value=Name(id='value', ctx=Load()))
Attribute(value=Name(id='q_matrix_std', ctx=Load()), attr='setter', ctx=Load())
NameConstant(value=None)
arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Expr(value=Str(s='returns the W matrix standard deviation'))
Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_w_matrix_std', ctx=Load()))
Name(id='property', ctx=Load())
Name(id='float', ctx=Load())
arguments(args=[arg(arg='self', annotation=None), arg(arg='value', annotation=Name(id='float', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Expr(value=Str(s='sets the W matrix standard deviation'))
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_w_matrix_std', ctx=Store())], value=Name(id='value', ctx=Load()))
Attribute(value=Name(id='w_matrix_std', ctx=Load()), attr='setter', ctx=Load())
NameConstant(value=None)
Name(id='logging', ctx=Load())
Load()
Load()
arg(arg='self', annotation=None)
arg(arg='ground_state_solver', annotation=Name(id='GroundStateSolver', ctx=Load()))
arg(arg='excitations', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='int', ctx=Load())), ctx=Load())), ctx=Load())], ctx=Load())), ctx=Load()))
Str(s='sd')
Str(s="\n        Args:\n            ground_state_solver: a GroundStateSolver object. The qEOM algorithm\n                will use this ground state to compute the EOM matrix elements\n            excitations: The excitations to be included in the eom pseudo-eigenvalue problem.\n                If a string ('s', 'd' or 'sd') then all excitations of the given type will be used.\n                Otherwise a list of custom excitations can directly be provided.\n        ")
Attribute(value=Name(id='self', ctx=Load()), attr='_gsc', ctx=Store())
Name(id='ground_state_solver', ctx=Load())
Attribute(value=Name(id='self', ctx=Load()), attr='excitations', ctx=Store())
Name(id='excitations', ctx=Load())
Attribute(value=Name(id='self', ctx=Load()), attr='_untapered_qubit_op_main', ctx=Store())
Name(id='PauliSumOp', ctx=Load())
NameConstant(value=None)
arg(arg='self', annotation=None)
Str(s='Returns the excitations to be included in the eom pseudo-eigenvalue problem.')
Attribute(value=Name(id='self', ctx=Load()), attr='_excitations', ctx=Load())
Load()
Name(id='Union', ctx=Load())
Index(value=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='int', ctx=Load())), ctx=Load())), ctx=Load())], ctx=Load()))
Load()
arg(arg='self', annotation=None)
arg(arg='excitations', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='int', ctx=Load())), ctx=Load())), ctx=Load())], ctx=Load())), ctx=Load()))
Str(s='The excitations to be included in the eom pseudo-eigenvalue problem. If a string then\n        all excitations of given type will be used. Otherwise a list of custom excitations can\n        directly be provided.')
BoolOp(op=And(), values=[Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='excitations', ctx=Load()), Name(id='str', ctx=Load())], keywords=[]), Compare(left=Name(id='excitations', ctx=Load()), ops=[NotIn()], comparators=[List(elts=[Str(s='s'), Str(s='d'), Str(s='sd')], ctx=Load())])])
Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Str(s='Excitation type must be s (singles), d (doubles) or sd (singles and doubles)')], keywords=[]), cause=None)
Attribute(value=Name(id='self', ctx=Load()), attr='_excitations', ctx=Store())
Name(id='excitations', ctx=Load())
Name(id='excitations', ctx=Load())
Load()
arg(arg='self', annotation=None)
Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_gsc', ctx=Load()), attr='solver', ctx=Load())
Load()
arg(arg='self', annotation=None)
arg(arg='problem', annotation=Name(id='BaseProblem', ctx=Load()))
arg(arg='aux_operators', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Subscript(value=Name(id='ListOrDictType', ctx=Load()), slice=Index(value=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='SecondQuantizedOp', ctx=Load()), Name(id='PauliSumOp', ctx=Load())], ctx=Load())), ctx=Load())), ctx=Load())), ctx=Load()))
NameConstant(value=None)
Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_gsc', ctx=Load()), attr='get_qubit_operators', ctx=Load()), args=[Name(id='problem', ctx=Load()), Name(id='aux_operators', ctx=Load())], keywords=[])
Name(id='Tuple', ctx=Load())
Index(value=Tuple(elts=[Name(id='PauliSumOp', ctx=Load()), Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Subscript(value=Name(id='ListOrDictType', ctx=Load()), slice=Index(value=Name(id='PauliSumOp', ctx=Load())), ctx=Load())), ctx=Load())], ctx=Load()))
Load()
arg(arg='self', annotation=None)
arg(arg='problem', annotation=Name(id='BaseProblem', ctx=Load()))
arg(arg='aux_operators', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Subscript(value=Name(id='ListOrDictType', ctx=Load()), slice=Index(value=Name(id='SecondQuantizedOp', ctx=Load())), ctx=Load())), ctx=Load()))
NameConstant(value=None)
Str(s='Run the excited-states calculation.\n\n        Construct and solves the EOM pseudo-eigenvalue problem to obtain the excitation energies\n        and the excitation operators expansion coefficients.\n\n        Args:\n            problem: a class encoding a problem to be solved.\n            aux_operators: Additional auxiliary operators to evaluate.\n\n        Returns:\n            An interpreted :class:`~.EigenstateResult`. For more information see also\n            :meth:`~.BaseProblem.interpret`.\n        ')
Compare(left=Name(id='aux_operators', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)])
Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='warning', ctx=Load()), args=[Str(s='With qEOM the auxiliary operators can currently only be evaluated on the ground state.')], keywords=[]))
Name(id='groundstate_result', ctx=Store())
Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_gsc', ctx=Load()), attr='solve', ctx=Load()), args=[Name(id='problem', ctx=Load()), Name(id='aux_operators', ctx=Load())], keywords=[])
Name(id='second_q_ops', ctx=Store())
Call(func=Attribute(value=Name(id='problem', ctx=Load()), attr='second_q_ops', ctx=Load()), args=[], keywords=[])
Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='second_q_ops', ctx=Load()), Name(id='list', ctx=Load())], keywords=[])
Assign(targets=[Name(id='main_second_q_op', ctx=Store())], value=Subscript(value=Name(id='second_q_ops', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load()))
If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='second_q_ops', ctx=Load()), Name(id='dict', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='main_second_q_op', ctx=Store())], value=Call(func=Attribute(value=Name(id='second_q_ops', ctx=Load()), attr='pop', ctx=Load()), args=[Attribute(value=Name(id='problem', ctx=Load()), attr='main_property_name', ctx=Load())], keywords=[]))], orelse=[])
Attribute(value=Name(id='self', ctx=Load()), attr='_untapered_qubit_op_main', ctx=Store())
Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_gsc', ctx=Load()), attr='qubit_converter', ctx=Load()), attr='convert_only', ctx=Load()), args=[Name(id='main_second_q_op', ctx=Load()), Attribute(value=Name(id='problem', ctx=Load()), attr='num_particles', ctx=Load())], keywords=[])
Tuple(elts=[Name(id='matrix_operators_dict', ctx=Store()), Name(id='size', ctx=Store())], ctx=Store())
Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_prepare_matrix_operators', ctx=Load()), args=[Name(id='problem', ctx=Load())], keywords=[])
Name(id='measurement_results', ctx=Store())
Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_gsc', ctx=Load()), attr='evaluate_operators', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='groundstate_result', ctx=Load()), attr='eigenstates', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load()), Name(id='matrix_operators_dict', ctx=Load())], keywords=[])
Name(id='measurement_results', ctx=Store())
Call(func=Name(id='cast', ctx=Load()), args=[Subscript(value=Name(id='Dict', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='float', ctx=Load())), ctx=Load())], ctx=Load())), ctx=Load()), Name(id='measurement_results', ctx=Load())], keywords=[])
Tuple(elts=[Name(id='m_mat', ctx=Store()), Name(id='v_mat', ctx=Store()), Name(id='q_mat', ctx=Store()), Name(id='w_mat', ctx=Store()), Name(id='m_mat_std', ctx=Store()), Name(id='v_mat_std', ctx=Store()), Name(id='q_mat_std', ctx=Store()), Name(id='w_mat_std', ctx=Store())], ctx=Store())
Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_build_eom_matrices', ctx=Load()), args=[Name(id='measurement_results', ctx=Load()), Name(id='size', ctx=Load())], keywords=[])
Tuple(elts=[Name(id='energy_gaps', ctx=Store()), Name(id='expansion_coefs', ctx=Store())], ctx=Store())
Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_compute_excitation_energies', ctx=Load()), args=[Name(id='m_mat', ctx=Load()), Name(id='v_mat', ctx=Load()), Name(id='q_mat', ctx=Load()), Name(id='w_mat', ctx=Load())], keywords=[])
Name(id='qeom_result', ctx=Store())
Call(func=Name(id='QEOMResult', ctx=Load()), args=[], keywords=[])
Attribute(value=Name(id='qeom_result', ctx=Load()), attr='ground_state_raw_result', ctx=Store())
Attribute(value=Name(id='groundstate_result', ctx=Load()), attr='raw_result', ctx=Load())
Attribute(value=Name(id='qeom_result', ctx=Load()), attr='expansion_coefficients', ctx=Store())
Name(id='expansion_coefs', ctx=Load())
Attribute(value=Name(id='qeom_result', ctx=Load()), attr='excitation_energies', ctx=Store())
Name(id='energy_gaps', ctx=Load())
Attribute(value=Name(id='qeom_result', ctx=Load()), attr='m_matrix', ctx=Store())
Name(id='m_mat', ctx=Load())
Attribute(value=Name(id='qeom_result', ctx=Load()), attr='v_matrix', ctx=Store())
Name(id='v_mat', ctx=Load())
Attribute(value=Name(id='qeom_result', ctx=Load()), attr='q_matrix', ctx=Store())
Name(id='q_mat', ctx=Load())
Attribute(value=Name(id='qeom_result', ctx=Load()), attr='w_matrix', ctx=Store())
Name(id='w_mat', ctx=Load())
Attribute(value=Name(id='qeom_result', ctx=Load()), attr='m_matrix_std', ctx=Store())
Name(id='m_mat_std', ctx=Load())
Attribute(value=Name(id='qeom_result', ctx=Load()), attr='v_matrix_std', ctx=Store())
Name(id='v_mat_std', ctx=Load())
Attribute(value=Name(id='qeom_result', ctx=Load()), attr='q_matrix_std', ctx=Store())
Name(id='q_mat_std', ctx=Load())
Attribute(value=Name(id='qeom_result', ctx=Load()), attr='w_matrix_std', ctx=Store())
Name(id='w_mat_std', ctx=Load())
Name(id='eigenstate_result', ctx=Store())
Call(func=Name(id='EigenstateResult', ctx=Load()), args=[], keywords=[])
Attribute(value=Name(id='eigenstate_result', ctx=Load()), attr='eigenstates', ctx=Store())
Attribute(value=Name(id='groundstate_result', ctx=Load()), attr='eigenstates', ctx=Load())
Attribute(value=Name(id='eigenstate_result', ctx=Load()), attr='aux_operator_eigenvalues', ctx=Store())
Attribute(value=Name(id='groundstate_result', ctx=Load()), attr='aux_operator_eigenvalues', ctx=Load())
Attribute(value=Name(id='eigenstate_result', ctx=Load()), attr='raw_result', ctx=Store())
Name(id='qeom_result', ctx=Load())
Attribute(value=Name(id='eigenstate_result', ctx=Load()), attr='eigenenergies', ctx=Store())
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Attribute(value=Name(id='groundstate_result', ctx=Load()), attr='eigenenergies', ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='asarray', ctx=Load()), args=[ListComp(elt=BinOp(left=Subscript(value=Attribute(value=Name(id='groundstate_result', ctx=Load()), attr='eigenenergies', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load()), op=Add(), right=Name(id='gap', ctx=Load())), generators=[comprehension(target=Name(id='gap', ctx=Store()), iter=Name(id='energy_gaps', ctx=Load()), ifs=[], is_async=0)])], keywords=[])], keywords=[])
Name(id='result', ctx=Store())
Call(func=Attribute(value=Name(id='problem', ctx=Load()), attr='interpret', ctx=Load()), args=[Name(id='eigenstate_result', ctx=Load())], keywords=[])
Name(id='result', ctx=Load())
Load()
arg(arg='self', annotation=None)
arg(arg='problem', annotation=None)
Str(s='Construct the excitation operators for each matrix element.\n\n        Returns:\n            a dictionary of all matrix elements operators and the number of excitations\n            (or the size of the qEOM pseudo-eigenvalue problem)\n        ')
Name(id='data', ctx=Store())
Call(func=Attribute(value=Name(id='problem', ctx=Load()), attr='hopping_qeom_ops', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_gsc', ctx=Load()), attr='qubit_converter', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_excitations', ctx=Load())], keywords=[])
Tuple(elts=[Name(id='hopping_operators', ctx=Store()), Name(id='type_of_commutativities', ctx=Store()), Name(id='excitation_indices', ctx=Store())], ctx=Store())
Name(id='data', ctx=Load())
Name(id='size', ctx=Store())
Call(func=Name(id='int', ctx=Load()), args=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='excitation_indices', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[]), op=FloorDiv(), right=Num(n=2))], keywords=[])
Name(id='eom_matrix_operators', ctx=Store())
Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_build_all_commutators', ctx=Load()), args=[Name(id='hopping_operators', ctx=Load()), Name(id='type_of_commutativities', ctx=Load()), Name(id='size', ctx=Load())], keywords=[])
Tuple(elts=[Name(id='eom_matrix_operators', ctx=Load()), Name(id='size', ctx=Load())], ctx=Load())
Name(id='Tuple', ctx=Load())
Index(value=Tuple(elts=[Name(id='dict', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()))
Load()
arg(arg='self', annotation=None)
arg(arg='hopping_operators', annotation=Name(id='dict', ctx=Load()))
arg(arg='type_of_commutativities', annotation=Name(id='dict', ctx=Load()))
arg(arg='size', annotation=Name(id='int', ctx=Load()))
Str(s='Building all commutators for Q, W, M, V matrices.\n\n        Args:\n            hopping_operators: all hopping operators based on excitations_list,\n                key is the string of single/double excitation;\n                value is corresponding operator.\n            type_of_commutativities: if tapering is used, it records the commutativities of\n                hopping operators with the\n                Z2 symmetries found in the original operator.\n            size: the number of excitations (size of the qEOM pseudo-eigenvalue problem)\n\n        Returns:\n            a dictionary that contains the operators for each matrix element\n        ')
Name(id='all_matrix_operators', ctx=Store())
Dict(keys=[], values=[])
Tuple(elts=[Name(id='mus', ctx=Store()), Name(id='nus', ctx=Store())], ctx=Store())
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='triu_indices', ctx=Load()), args=[Name(id='size', ctx=Load())], keywords=[])
arguments(args=[arg(arg='available_hopping_ops', annotation=None), arg(arg='untapered_op', annotation=None), arg(arg='z2_symmetries', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Assign(targets=[Name(id='to_be_computed_list', ctx=Store())], value=List(elts=[], ctx=Load()))
For(target=Tuple(elts=[Name(id='idx', ctx=Store()), Name(id='m_u', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='mus', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='n_u', ctx=Store())], value=Subscript(value=Name(id='nus', ctx=Load()), slice=Index(value=Name(id='idx', ctx=Load())), ctx=Load())), Assign(targets=[Name(id='left_op', ctx=Store())], value=Call(func=Attribute(value=Name(id='available_hopping_ops', ctx=Load()), attr='get', ctx=Load()), args=[JoinedStr(values=[Str(s='E_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None)])], keywords=[])), Assign(targets=[Name(id='right_op_1', ctx=Store())], value=Call(func=Attribute(value=Name(id='available_hopping_ops', ctx=Load()), attr='get', ctx=Load()), args=[JoinedStr(values=[Str(s='E_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])], keywords=[])), Assign(targets=[Name(id='right_op_2', ctx=Store())], value=Call(func=Attribute(value=Name(id='available_hopping_ops', ctx=Load()), attr='get', ctx=Load()), args=[JoinedStr(values=[Str(s='Edag_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='to_be_computed_list', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Name(id='m_u', ctx=Load()), Name(id='n_u', ctx=Load()), Name(id='left_op', ctx=Load()), Name(id='right_op_1', ctx=Load()), Name(id='right_op_2', ctx=Load())], ctx=Load())], keywords=[]))], orelse=[])
If(test=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='isEnabledFor', ctx=Load()), args=[Attribute(value=Name(id='logging', ctx=Load()), attr='INFO', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='info', ctx=Load()), args=[Str(s='Building all commutators:')], keywords=[])), Expr(value=Call(func=Name(id='TextProgressBar', ctx=Load()), args=[Attribute(value=Name(id='sys', ctx=Load()), attr='stderr', ctx=Load())], keywords=[]))], orelse=[])
Assign(targets=[Name(id='results', ctx=Store())], value=Call(func=Name(id='parallel_map', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_build_commutator_routine', ctx=Load()), Name(id='to_be_computed_list', ctx=Load())], keywords=[keyword(arg='task_args', value=Tuple(elts=[Name(id='untapered_op', ctx=Load()), Name(id='z2_symmetries', ctx=Load())], ctx=Load())), keyword(arg='num_processes', value=Attribute(value=Name(id='algorithm_globals', ctx=Load()), attr='num_processes', ctx=Load()))]))
For(target=Name(id='result', ctx=Store()), iter=Name(id='results', ctx=Load()), body=[Assign(targets=[Tuple(elts=[Name(id='m_u', ctx=Store()), Name(id='n_u', ctx=Store()), Name(id='q_mat_op', ctx=Store()), Name(id='w_mat_op', ctx=Store()), Name(id='m_mat_op', ctx=Store()), Name(id='v_mat_op', ctx=Store())], ctx=Store())], value=Name(id='result', ctx=Load())), If(test=Compare(left=Name(id='q_mat_op', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=[Assign(targets=[Subscript(value=Name(id='all_matrix_operators', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='q_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])), ctx=Store())], value=Name(id='q_mat_op', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='w_mat_op', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=[Assign(targets=[Subscript(value=Name(id='all_matrix_operators', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='w_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])), ctx=Store())], value=Name(id='w_mat_op', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='m_mat_op', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=[Assign(targets=[Subscript(value=Name(id='all_matrix_operators', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='m_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])), ctx=Store())], value=Name(id='m_mat_op', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='v_mat_op', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=[Assign(targets=[Subscript(value=Name(id='all_matrix_operators', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='v_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])), ctx=Store())], value=Name(id='v_mat_op', ctx=Load()))], orelse=[])], orelse=[])
Assign(targets=[Name(id='z2_symmetries', ctx=Store())], value=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_gsc', ctx=Load()), attr='qubit_converter', ctx=Load()), attr='z2symmetries', ctx=Load()))
ExceptHandler(type=Name(id='AttributeError', ctx=Load()), name=None, body=[Assign(targets=[Name(id='z2_symmetries', ctx=Store())], value=Call(func=Name(id='Z2Symmetries', ctx=Load()), args=[List(elts=[], ctx=Load()), List(elts=[], ctx=Load()), List(elts=[], ctx=Load())], keywords=[]))])
UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='z2_symmetries', ctx=Load()), attr='is_empty', ctx=Load()), args=[], keywords=[]))
Assign(targets=[Name(id='combinations', ctx=Store())], value=Call(func=Attribute(value=Name(id='itertools', ctx=Load()), attr='product', ctx=Load()), args=[List(elts=[Num(n=1), UnaryOp(op=USub(), operand=Num(n=1))], ctx=Load())], keywords=[keyword(arg='repeat', value=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='z2_symmetries', ctx=Load()), attr='symmetries', ctx=Load())], keywords=[]))]))
For(target=Name(id='targeted_tapering_values', ctx=Store()), iter=Name(id='combinations', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='info', ctx=Load()), args=[Str(s='In sector: (%s)'), Call(func=Attribute(value=Str(s=','), attr='join', ctx=Load()), args=[ListComp(elt=Call(func=Name(id='str', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='targeted_tapering_values', ctx=Load()), ifs=[], is_async=0)])], keywords=[])], keywords=[])), Assign(targets=[Name(id='available_hopping_ops', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='targeted_sector', ctx=Store())], value=Compare(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='asarray', ctx=Load()), args=[Name(id='targeted_tapering_values', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Num(n=1)])), For(target=Tuple(elts=[Name(id='key', ctx=Store()), Name(id='value', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='type_of_commutativities', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Name(id='value', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='asarray', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[])), If(test=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='all', ctx=Load()), args=[Compare(left=Name(id='value', ctx=Load()), ops=[Eq()], comparators=[Name(id='targeted_sector', ctx=Load())])], keywords=[]), body=[Assign(targets=[Subscript(value=Name(id='available_hopping_ops', ctx=Load()), slice=Index(value=Name(id='key', ctx=Load())), ctx=Store())], value=Subscript(value=Name(id='hopping_operators', ctx=Load()), slice=Index(value=Name(id='key', ctx=Load())), ctx=Load()))], orelse=[])], orelse=[]), Expr(value=Call(func=Name(id='_build_one_sector', ctx=Load()), args=[Name(id='available_hopping_ops', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_untapered_qubit_op_main', ctx=Load()), Name(id='z2_symmetries', ctx=Load())], keywords=[]))], orelse=[])
Expr(value=Call(func=Name(id='_build_one_sector', ctx=Load()), args=[Name(id='hopping_operators', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_untapered_qubit_op_main', ctx=Load()), Name(id='z2_symmetries', ctx=Load())], keywords=[]))
Name(id='all_matrix_operators', ctx=Load())
Load()
arg(arg='params', annotation=Name(id='List', ctx=Load()))
arg(arg='operator', annotation=Name(id='PauliSumOp', ctx=Load()))
arg(arg='z2_symmetries', annotation=Name(id='Z2Symmetries', ctx=Load()))
Str(s='Numerically computes the commutator / double commutator between operators.\n\n        Args:\n            params: list containing the indices of matrix element and the corresponding\n                excitation operators\n            operator: the hamiltonian\n            z2_symmetries: z2_symmetries in case of tapering\n\n        Returns:\n            The indices of the matrix element and the corresponding qubit\n            operator for each of the EOM matrices\n        ')
Tuple(elts=[Name(id='m_u', ctx=Store()), Name(id='n_u', ctx=Store()), Name(id='left_op', ctx=Store()), Name(id='right_op_1', ctx=Store()), Name(id='right_op_2', ctx=Store())], ctx=Store())
Name(id='params', ctx=Load())
BoolOp(op=Or(), values=[Compare(left=Name(id='left_op', ctx=Load()), ops=[Is()], comparators=[NameConstant(value=None)]), BoolOp(op=And(), values=[Compare(left=Name(id='right_op_1', ctx=Load()), ops=[Is()], comparators=[NameConstant(value=None)]), Compare(left=Name(id='right_op_2', ctx=Load()), ops=[Is()], comparators=[NameConstant(value=None)])])])
Assign(targets=[Name(id='q_mat_op', ctx=Store())], value=NameConstant(value=None))
Assign(targets=[Name(id='w_mat_op', ctx=Store())], value=NameConstant(value=None))
Assign(targets=[Name(id='m_mat_op', ctx=Store())], value=NameConstant(value=None))
Assign(targets=[Name(id='v_mat_op', ctx=Store())], value=NameConstant(value=None))
If(test=Compare(left=Name(id='right_op_1', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=[Assign(targets=[Name(id='q_mat_op', ctx=Store())], value=Call(func=Name(id='double_commutator', ctx=Load()), args=[Name(id='left_op', ctx=Load()), Name(id='operator', ctx=Load()), Name(id='right_op_1', ctx=Load())], keywords=[keyword(arg='sign', value=NameConstant(value=False))])), Assign(targets=[Name(id='w_mat_op', ctx=Store())], value=Call(func=Name(id='commutator', ctx=Load()), args=[Name(id='left_op', ctx=Load()), Name(id='right_op_1', ctx=Load())], keywords=[])), Assign(targets=[Name(id='q_mat_op', ctx=Store())], value=IfExp(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='q_mat_op', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Num(n=0)]), body=NameConstant(value=None), orelse=Name(id='q_mat_op', ctx=Load()))), Assign(targets=[Name(id='w_mat_op', ctx=Store())], value=IfExp(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='w_mat_op', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Num(n=0)]), body=NameConstant(value=None), orelse=Name(id='w_mat_op', ctx=Load())))], orelse=[Assign(targets=[Name(id='q_mat_op', ctx=Store())], value=NameConstant(value=None)), Assign(targets=[Name(id='w_mat_op', ctx=Store())], value=NameConstant(value=None))])
If(test=Compare(left=Name(id='right_op_2', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=[Assign(targets=[Name(id='m_mat_op', ctx=Store())], value=Call(func=Name(id='double_commutator', ctx=Load()), args=[Name(id='left_op', ctx=Load()), Name(id='operator', ctx=Load()), Name(id='right_op_2', ctx=Load())], keywords=[keyword(arg='sign', value=NameConstant(value=False))])), Assign(targets=[Name(id='v_mat_op', ctx=Store())], value=Call(func=Name(id='commutator', ctx=Load()), args=[Name(id='left_op', ctx=Load()), Name(id='right_op_2', ctx=Load())], keywords=[])), Assign(targets=[Name(id='m_mat_op', ctx=Store())], value=IfExp(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='m_mat_op', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Num(n=0)]), body=NameConstant(value=None), orelse=Name(id='m_mat_op', ctx=Load()))), Assign(targets=[Name(id='v_mat_op', ctx=Store())], value=IfExp(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='v_mat_op', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Num(n=0)]), body=NameConstant(value=None), orelse=Name(id='v_mat_op', ctx=Load())))], orelse=[Assign(targets=[Name(id='m_mat_op', ctx=Store())], value=NameConstant(value=None)), Assign(targets=[Name(id='v_mat_op', ctx=Store())], value=NameConstant(value=None))])
If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='z2_symmetries', ctx=Load()), attr='is_empty', ctx=Load()), args=[], keywords=[])), body=[If(test=BoolOp(op=And(), values=[Compare(left=Name(id='q_mat_op', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='q_mat_op', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Num(n=0)])]), body=[Assign(targets=[Name(id='q_mat_op', ctx=Store())], value=Call(func=Attribute(value=Name(id='z2_symmetries', ctx=Load()), attr='taper', ctx=Load()), args=[Name(id='q_mat_op', ctx=Load())], keywords=[]))], orelse=[]), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='w_mat_op', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='w_mat_op', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Num(n=0)])]), body=[Assign(targets=[Name(id='w_mat_op', ctx=Store())], value=Call(func=Attribute(value=Name(id='z2_symmetries', ctx=Load()), attr='taper', ctx=Load()), args=[Name(id='w_mat_op', ctx=Load())], keywords=[]))], orelse=[]), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='m_mat_op', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='m_mat_op', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Num(n=0)])]), body=[Assign(targets=[Name(id='m_mat_op', ctx=Store())], value=Call(func=Attribute(value=Name(id='z2_symmetries', ctx=Load()), attr='taper', ctx=Load()), args=[Name(id='m_mat_op', ctx=Load())], keywords=[]))], orelse=[]), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='v_mat_op', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='v_mat_op', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Num(n=0)])]), body=[Assign(targets=[Name(id='v_mat_op', ctx=Store())], value=Call(func=Attribute(value=Name(id='z2_symmetries', ctx=Load()), attr='taper', ctx=Load()), args=[Name(id='v_mat_op', ctx=Load())], keywords=[]))], orelse=[])], orelse=[])
Tuple(elts=[Name(id='m_u', ctx=Load()), Name(id='n_u', ctx=Load()), Name(id='q_mat_op', ctx=Load()), Name(id='w_mat_op', ctx=Load()), Name(id='m_mat_op', ctx=Load()), Name(id='v_mat_op', ctx=Load())], ctx=Load())
Load()
Name(id='Tuple', ctx=Load())
Index(value=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='int', ctx=Load()), Name(id='PauliSumOp', ctx=Load()), Name(id='PauliSumOp', ctx=Load()), Name(id='PauliSumOp', ctx=Load()), Name(id='PauliSumOp', ctx=Load())], ctx=Load()))
Load()
arg(arg='self', annotation=None)
arg(arg='gs_results', annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='float', ctx=Load())), ctx=Load())], ctx=Load())), ctx=Load()))
arg(arg='size', annotation=Name(id='int', ctx=Load()))
Str(s='Constructs the M, V, Q and W matrices from the results on the ground state\n\n        Args:\n            gs_results: a ground state result object\n            size: size of eigenvalue problem\n\n        Returns:\n            the matrices and their standard deviation\n        ')
Tuple(elts=[Name(id='mus', ctx=Store()), Name(id='nus', ctx=Store())], ctx=Store())
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='triu_indices', ctx=Load()), args=[Name(id='size', ctx=Load())], keywords=[])
Name(id='m_mat', ctx=Store())
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='zeros', ctx=Load()), args=[Tuple(elts=[Name(id='size', ctx=Load()), Name(id='size', ctx=Load())], ctx=Load())], keywords=[keyword(arg='dtype', value=Name(id='complex', ctx=Load()))])
Name(id='v_mat', ctx=Store())
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='zeros', ctx=Load()), args=[Tuple(elts=[Name(id='size', ctx=Load()), Name(id='size', ctx=Load())], ctx=Load())], keywords=[keyword(arg='dtype', value=Name(id='complex', ctx=Load()))])
Name(id='q_mat', ctx=Store())
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='zeros', ctx=Load()), args=[Tuple(elts=[Name(id='size', ctx=Load()), Name(id='size', ctx=Load())], ctx=Load())], keywords=[keyword(arg='dtype', value=Name(id='complex', ctx=Load()))])
Name(id='w_mat', ctx=Store())
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='zeros', ctx=Load()), args=[Tuple(elts=[Name(id='size', ctx=Load()), Name(id='size', ctx=Load())], ctx=Load())], keywords=[keyword(arg='dtype', value=Name(id='complex', ctx=Load()))])
Tuple(elts=[Name(id='m_mat_std', ctx=Store()), Name(id='v_mat_std', ctx=Store()), Name(id='q_mat_std', ctx=Store()), Name(id='w_mat_std', ctx=Store())], ctx=Store())
Tuple(elts=[Num(n=0.0), Num(n=0.0), Num(n=0.0), Num(n=0.0)], ctx=Load())
Tuple(elts=[Name(id='idx', ctx=Store()), Name(id='m_u', ctx=Store())], ctx=Store())
Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='mus', ctx=Load())], keywords=[])
Assign(targets=[Name(id='n_u', ctx=Store())], value=Subscript(value=Name(id='nus', ctx=Load()), slice=Index(value=Name(id='idx', ctx=Load())), ctx=Load()))
Assign(targets=[Subscript(value=Subscript(value=Name(id='q_mat', ctx=Load()), slice=Index(value=Name(id='m_u', ctx=Load())), ctx=Load()), slice=Index(value=Name(id='n_u', ctx=Load())), ctx=Store())], value=IfExp(test=Compare(left=Call(func=Attribute(value=Name(id='gs_results', ctx=Load()), attr='get', ctx=Load()), args=[JoinedStr(values=[Str(s='q_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])], keywords=[]), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=Subscript(value=Subscript(value=Name(id='gs_results', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='q_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])), ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load()), orelse=Subscript(value=Subscript(value=Name(id='q_mat', ctx=Load()), slice=Index(value=Name(id='m_u', ctx=Load())), ctx=Load()), slice=Index(value=Name(id='n_u', ctx=Load())), ctx=Load())))
Assign(targets=[Subscript(value=Subscript(value=Name(id='w_mat', ctx=Load()), slice=Index(value=Name(id='m_u', ctx=Load())), ctx=Load()), slice=Index(value=Name(id='n_u', ctx=Load())), ctx=Store())], value=IfExp(test=Compare(left=Call(func=Attribute(value=Name(id='gs_results', ctx=Load()), attr='get', ctx=Load()), args=[JoinedStr(values=[Str(s='w_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])], keywords=[]), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=Subscript(value=Subscript(value=Name(id='gs_results', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='w_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])), ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load()), orelse=Subscript(value=Subscript(value=Name(id='w_mat', ctx=Load()), slice=Index(value=Name(id='m_u', ctx=Load())), ctx=Load()), slice=Index(value=Name(id='n_u', ctx=Load())), ctx=Load())))
Assign(targets=[Subscript(value=Subscript(value=Name(id='m_mat', ctx=Load()), slice=Index(value=Name(id='m_u', ctx=Load())), ctx=Load()), slice=Index(value=Name(id='n_u', ctx=Load())), ctx=Store())], value=IfExp(test=Compare(left=Call(func=Attribute(value=Name(id='gs_results', ctx=Load()), attr='get', ctx=Load()), args=[JoinedStr(values=[Str(s='m_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])], keywords=[]), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=Subscript(value=Subscript(value=Name(id='gs_results', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='m_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])), ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load()), orelse=Subscript(value=Subscript(value=Name(id='m_mat', ctx=Load()), slice=Index(value=Name(id='m_u', ctx=Load())), ctx=Load()), slice=Index(value=Name(id='n_u', ctx=Load())), ctx=Load())))
Assign(targets=[Subscript(value=Subscript(value=Name(id='v_mat', ctx=Load()), slice=Index(value=Name(id='m_u', ctx=Load())), ctx=Load()), slice=Index(value=Name(id='n_u', ctx=Load())), ctx=Store())], value=IfExp(test=Compare(left=Call(func=Attribute(value=Name(id='gs_results', ctx=Load()), attr='get', ctx=Load()), args=[JoinedStr(values=[Str(s='v_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])], keywords=[]), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=Subscript(value=Subscript(value=Name(id='gs_results', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='v_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])), ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load()), orelse=Subscript(value=Subscript(value=Name(id='v_mat', ctx=Load()), slice=Index(value=Name(id='m_u', ctx=Load())), ctx=Load()), slice=Index(value=Name(id='n_u', ctx=Load())), ctx=Load())))
AugAssign(target=Name(id='q_mat_std', ctx=Store()), op=Add(), value=IfExp(test=Compare(left=Call(func=Attribute(value=Name(id='gs_results', ctx=Load()), attr='get', ctx=Load()), args=[JoinedStr(values=[Str(s='q_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_std')])], keywords=[]), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=Subscript(value=Subscript(value=Name(id='gs_results', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='q_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_std')])), ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load()), orelse=Num(n=0)))
AugAssign(target=Name(id='w_mat_std', ctx=Store()), op=Add(), value=IfExp(test=Compare(left=Call(func=Attribute(value=Name(id='gs_results', ctx=Load()), attr='get', ctx=Load()), args=[JoinedStr(values=[Str(s='w_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_std')])], keywords=[]), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=Subscript(value=Subscript(value=Name(id='gs_results', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='w_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_std')])), ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load()), orelse=Num(n=0)))
AugAssign(target=Name(id='m_mat_std', ctx=Store()), op=Add(), value=IfExp(test=Compare(left=Call(func=Attribute(value=Name(id='gs_results', ctx=Load()), attr='get', ctx=Load()), args=[JoinedStr(values=[Str(s='m_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_std')])], keywords=[]), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=Subscript(value=Subscript(value=Name(id='gs_results', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='m_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_std')])), ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load()), orelse=Num(n=0)))
AugAssign(target=Name(id='v_mat_std', ctx=Store()), op=Add(), value=IfExp(test=Compare(left=Call(func=Attribute(value=Name(id='gs_results', ctx=Load()), attr='get', ctx=Load()), args=[JoinedStr(values=[Str(s='v_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_std')])], keywords=[]), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=Subscript(value=Subscript(value=Name(id='gs_results', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='v_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_std')])), ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load()), orelse=Num(n=0)))
Name(id='q_mat', ctx=Store())
BinOp(left=BinOp(left=Name(id='q_mat', ctx=Load()), op=Add(), right=Attribute(value=Name(id='q_mat', ctx=Load()), attr='T', ctx=Load())), op=Sub(), right=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='identity', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='q_mat', ctx=Load()), attr='shape', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())], keywords=[]), op=Mult(), right=Name(id='q_mat', ctx=Load())))
Name(id='w_mat', ctx=Store())
BinOp(left=BinOp(left=Name(id='w_mat', ctx=Load()), op=Add(), right=Attribute(value=Name(id='w_mat', ctx=Load()), attr='T', ctx=Load())), op=Sub(), right=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='identity', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='w_mat', ctx=Load()), attr='shape', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())], keywords=[]), op=Mult(), right=Name(id='w_mat', ctx=Load())))
Name(id='m_mat', ctx=Store())
BinOp(left=BinOp(left=Name(id='m_mat', ctx=Load()), op=Add(), right=Attribute(value=Name(id='m_mat', ctx=Load()), attr='T', ctx=Load())), op=Sub(), right=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='identity', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='m_mat', ctx=Load()), attr='shape', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())], keywords=[]), op=Mult(), right=Name(id='m_mat', ctx=Load())))
Name(id='v_mat', ctx=Store())
BinOp(left=BinOp(left=Name(id='v_mat', ctx=Load()), op=Add(), right=Attribute(value=Name(id='v_mat', ctx=Load()), attr='T', ctx=Load())), op=Sub(), right=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='identity', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='v_mat', ctx=Load()), attr='shape', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())], keywords=[]), op=Mult(), right=Name(id='v_mat', ctx=Load())))
Name(id='q_mat', ctx=Store())
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='real', ctx=Load()), args=[Name(id='q_mat', ctx=Load())], keywords=[])
Name(id='w_mat', ctx=Store())
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='real', ctx=Load()), args=[Name(id='w_mat', ctx=Load())], keywords=[])
Name(id='m_mat', ctx=Store())
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='real', ctx=Load()), args=[Name(id='m_mat', ctx=Load())], keywords=[])
Name(id='v_mat', ctx=Store())
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='real', ctx=Load()), args=[Name(id='v_mat', ctx=Load())], keywords=[])
Name(id='q_mat_std', ctx=Store())
BinOp(left=Name(id='q_mat_std', ctx=Load()), op=Div(), right=Call(func=Name(id='float', ctx=Load()), args=[BinOp(left=Name(id='size', ctx=Load()), op=Pow(), right=Num(n=2))], keywords=[]))
Name(id='w_mat_std', ctx=Store())
BinOp(left=Name(id='w_mat_std', ctx=Load()), op=Div(), right=Call(func=Name(id='float', ctx=Load()), args=[BinOp(left=Name(id='size', ctx=Load()), op=Pow(), right=Num(n=2))], keywords=[]))
Name(id='m_mat_std', ctx=Store())
BinOp(left=Name(id='m_mat_std', ctx=Load()), op=Div(), right=Call(func=Name(id='float', ctx=Load()), args=[BinOp(left=Name(id='size', ctx=Load()), op=Pow(), right=Num(n=2))], keywords=[]))
Name(id='v_mat_std', ctx=Store())
BinOp(left=Name(id='v_mat_std', ctx=Load()), op=Div(), right=Call(func=Name(id='float', ctx=Load()), args=[BinOp(left=Name(id='size', ctx=Load()), op=Pow(), right=Num(n=2))], keywords=[]))
Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Str(s='\nQ:=========================\n%s'), Name(id='q_mat', ctx=Load())], keywords=[])
Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Str(s='\nW:=========================\n%s'), Name(id='w_mat', ctx=Load())], keywords=[])
Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Str(s='\nM:=========================\n%s'), Name(id='m_mat', ctx=Load())], keywords=[])
Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Str(s='\nV:=========================\n%s'), Name(id='v_mat', ctx=Load())], keywords=[])
Tuple(elts=[Name(id='m_mat', ctx=Load()), Name(id='v_mat', ctx=Load()), Name(id='q_mat', ctx=Load()), Name(id='w_mat', ctx=Load()), Name(id='m_mat_std', ctx=Load()), Name(id='v_mat_std', ctx=Load()), Name(id='q_mat_std', ctx=Load()), Name(id='w_mat_std', ctx=Load())], ctx=Load())
Name(id='Tuple', ctx=Load())
Index(value=Tuple(elts=[Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Name(id='float', ctx=Load()), Name(id='float', ctx=Load()), Name(id='float', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load()))
Load()
arg(arg='m_mat', annotation=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()))
arg(arg='v_mat', annotation=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()))
arg(arg='q_mat', annotation=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()))
arg(arg='w_mat', annotation=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()))
Str(s='Diagonalizing M, V, Q, W matrices for excitation energies.\n\n        Args:\n            m_mat : M matrices\n            v_mat : V matrices\n            q_mat : Q matrices\n            w_mat : W matrices\n\n        Returns:\n            1-D vector stores all energy gap to reference state\n            2-D array storing the X and Y expansion coefficients\n        ')
Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Str(s='Diagonalizing qeom matrices for excited states...')], keywords=[])
Name(id='a_mat', ctx=Store())
Call(func=Attribute(value=Attribute(value=Name(id='np', ctx=Load()), attr='matrixlib', ctx=Load()), attr='bmat', ctx=Load()), args=[List(elts=[List(elts=[Name(id='m_mat', ctx=Load()), Name(id='q_mat', ctx=Load())], ctx=Load()), List(elts=[Call(func=Attribute(value=Attribute(value=Name(id='q_mat', ctx=Load()), attr='T', ctx=Load()), attr='conj', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Attribute(value=Name(id='m_mat', ctx=Load()), attr='T', ctx=Load()), attr='conj', ctx=Load()), args=[], keywords=[])], ctx=Load())], ctx=Load())], keywords=[])
Name(id='b_mat', ctx=Store())
Call(func=Attribute(value=Attribute(value=Name(id='np', ctx=Load()), attr='matrixlib', ctx=Load()), attr='bmat', ctx=Load()), args=[List(elts=[List(elts=[Name(id='v_mat', ctx=Load()), Name(id='w_mat', ctx=Load())], ctx=Load()), List(elts=[UnaryOp(op=USub(), operand=Call(func=Attribute(value=Attribute(value=Name(id='w_mat', ctx=Load()), attr='T', ctx=Load()), attr='conj', ctx=Load()), args=[], keywords=[])), UnaryOp(op=USub(), operand=Call(func=Attribute(value=Attribute(value=Name(id='v_mat', ctx=Load()), attr='T', ctx=Load()), attr='conj', ctx=Load()), args=[], keywords=[]))], ctx=Load())], ctx=Load())], keywords=[])
Name(id='res', ctx=Store())
Call(func=Attribute(value=Name(id='linalg', ctx=Load()), attr='eig', ctx=Load()), args=[Name(id='a_mat', ctx=Load()), Name(id='b_mat', ctx=Load())], keywords=[])
Subscript(value=Subscript(value=Name(id='res', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load()), slice=Index(value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='isnan', ctx=Load()), args=[Subscript(value=Name(id='res', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())], keywords=[])], keywords=[])), ctx=Store())
Num(n=0.0)
Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Str(s='... %s'), Subscript(value=Name(id='res', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())], keywords=[])
Name(id='w', ctx=Store())
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sort', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='real', ctx=Load()), args=[Subscript(value=Name(id='res', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())], keywords=[])], keywords=[])
Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Str(s='Sorted real parts %s'), Name(id='w', ctx=Load())], keywords=[])
Name(id='w', ctx=Store())
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='abs', ctx=Load()), args=[Subscript(value=Name(id='w', ctx=Load()), slice=Slice(lower=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='w', ctx=Load())], keywords=[]), op=FloorDiv(), right=Num(n=2)), upper=None, step=None), ctx=Load())], keywords=[])
Subscript(value=Name(id='w', ctx=Load()), slice=Index(value=Compare(left=Name(id='w', ctx=Load()), ops=[Lt()], comparators=[Num(n=1e-06)])), ctx=Store())
Num(n=0)
Name(id='excitation_energies_gap', ctx=Store())
Name(id='w', ctx=Load())
Tuple(elts=[Name(id='excitation_energies_gap', ctx=Load()), Subscript(value=Name(id='res', ctx=Load()), slice=Index(value=Num(n=1)), ctx=Load())], ctx=Load())
Load()
Name(id='Tuple', ctx=Load())
Index(value=Tuple(elts=[Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())], ctx=Load()))
Load()
arg(arg='self', annotation=None)
Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[])
Attribute(value=Name(id='self', ctx=Load()), attr='_ground_state_raw_result', ctx=Store())
NameConstant(value=None)
Attribute(value=Name(id='self', ctx=Load()), attr='_excitation_energies', ctx=Store())
Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), ctx=Load())
NameConstant(value=None)
Attribute(value=Name(id='self', ctx=Load()), attr='_expansion_coefficients', ctx=Store())
Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), ctx=Load())
NameConstant(value=None)
Attribute(value=Name(id='self', ctx=Load()), attr='_m_matrix', ctx=Store())
Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), ctx=Load())
NameConstant(value=None)
Attribute(value=Name(id='self', ctx=Load()), attr='_v_matrix', ctx=Store())
Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), ctx=Load())
NameConstant(value=None)
Attribute(value=Name(id='self', ctx=Load()), attr='_q_matrix', ctx=Store())
Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), ctx=Load())
NameConstant(value=None)
Attribute(value=Name(id='self', ctx=Load()), attr='_w_matrix', ctx=Store())
Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), ctx=Load())
NameConstant(value=None)
Attribute(value=Name(id='self', ctx=Load()), attr='_v_matrix_std', ctx=Store())
Name(id='float', ctx=Load())
Num(n=0.0)
Attribute(value=Name(id='self', ctx=Load()), attr='_q_matrix_std', ctx=Store())
Name(id='float', ctx=Load())
Num(n=0.0)
Attribute(value=Name(id='self', ctx=Load()), attr='_w_matrix_std', ctx=Store())
Name(id='float', ctx=Load())
Num(n=0.0)
arg(arg='self', annotation=None)
Str(s='returns ground state raw result')
Attribute(value=Name(id='self', ctx=Load()), attr='_ground_state_raw_result', ctx=Load())
Load()
arg(arg='self', annotation=None)
arg(arg='value', annotation=None)
Str(s='sets ground state raw result')
Attribute(value=Name(id='self', ctx=Load()), attr='_ground_state_raw_result', ctx=Store())
Name(id='value', ctx=Load())
Name(id='ground_state_raw_result', ctx=Load())
Load()
arg(arg='self', annotation=None)
Str(s='returns the excitation energies (energy gaps)')
Attribute(value=Name(id='self', ctx=Load()), attr='_excitation_energies', ctx=Load())
Load()
Name(id='Optional', ctx=Load())
Index(value=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()))
Load()
arg(arg='self', annotation=None)
arg(arg='value', annotation=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()))
Str(s='sets the excitation energies (energy gaps)')
Attribute(value=Name(id='self', ctx=Load()), attr='_excitation_energies', ctx=Store())
Name(id='value', ctx=Load())
Name(id='excitation_energies', ctx=Load())
Load()
arg(arg='self', annotation=None)
Str(s='returns the X and Y expansion coefficients')
Attribute(value=Name(id='self', ctx=Load()), attr='_expansion_coefficients', ctx=Load())
Load()
Name(id='Optional', ctx=Load())
Index(value=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()))
Load()
arg(arg='self', annotation=None)
arg(arg='value', annotation=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()))
Str(s='sets the X and Y expansion coefficients')
Attribute(value=Name(id='self', ctx=Load()), attr='_expansion_coefficients', ctx=Store())
Name(id='value', ctx=Load())
Name(id='expansion_coefficients', ctx=Load())
Load()
arg(arg='self', annotation=None)
Str(s='returns the M matrix')
Attribute(value=Name(id='self', ctx=Load()), attr='_m_matrix', ctx=Load())
Load()
Name(id='Optional', ctx=Load())
Index(value=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()))
Load()
arg(arg='self', annotation=None)
arg(arg='value', annotation=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()))
Str(s='sets the M matrix')
Attribute(value=Name(id='self', ctx=Load()), attr='_m_matrix', ctx=Store())
Name(id='value', ctx=Load())
Name(id='m_matrix', ctx=Load())
Load()
arg(arg='self', annotation=None)
Str(s='returns the V matrix')
Attribute(value=Name(id='self', ctx=Load()), attr='_v_matrix', ctx=Load())
Load()
Name(id='Optional', ctx=Load())
Index(value=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()))
Load()
arg(arg='self', annotation=None)
arg(arg='value', annotation=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()))
Str(s='sets the V matrix')
Attribute(value=Name(id='self', ctx=Load()), attr='_v_matrix', ctx=Store())
Name(id='value', ctx=Load())
Name(id='v_matrix', ctx=Load())
Load()
arg(arg='self', annotation=None)
Str(s='returns the Q matrix')
Attribute(value=Name(id='self', ctx=Load()), attr='_q_matrix', ctx=Load())
Load()
Name(id='Optional', ctx=Load())
Index(value=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()))
Load()
arg(arg='self', annotation=None)
arg(arg='value', annotation=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()))
Str(s='sets the Q matrix')
Attribute(value=Name(id='self', ctx=Load()), attr='_q_matrix', ctx=Store())
Name(id='value', ctx=Load())
Name(id='q_matrix', ctx=Load())
Load()
arg(arg='self', annotation=None)
Str(s='returns the W matrix')
Attribute(value=Name(id='self', ctx=Load()), attr='_w_matrix', ctx=Load())
Load()
Name(id='Optional', ctx=Load())
Index(value=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()))
Load()
arg(arg='self', annotation=None)
arg(arg='value', annotation=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()))
Str(s='sets the W matrix')
Attribute(value=Name(id='self', ctx=Load()), attr='_w_matrix', ctx=Store())
Name(id='value', ctx=Load())
Name(id='w_matrix', ctx=Load())
Load()
arg(arg='self', annotation=None)
Str(s='returns the M matrix standard deviation')
Attribute(value=Name(id='self', ctx=Load()), attr='_m_matrix_std', ctx=Load())
Load()
Load()
arg(arg='self', annotation=None)
arg(arg='value', annotation=Name(id='float', ctx=Load()))
Str(s='sets the M matrix standard deviation')
Attribute(value=Name(id='self', ctx=Load()), attr='_m_matrix_std', ctx=Store())
Name(id='value', ctx=Load())
Name(id='m_matrix_std', ctx=Load())
Load()
arg(arg='self', annotation=None)
Str(s='returns the V matrix standard deviation')
Attribute(value=Name(id='self', ctx=Load()), attr='_v_matrix_std', ctx=Load())
Load()
Load()
arg(arg='self', annotation=None)
arg(arg='value', annotation=Name(id='float', ctx=Load()))
Str(s='sets the V matrix standard deviation')
Attribute(value=Name(id='self', ctx=Load()), attr='_v_matrix_std', ctx=Store())
Name(id='value', ctx=Load())
Name(id='v_matrix_std', ctx=Load())
Load()
arg(arg='self', annotation=None)
Str(s='returns the Q matrix standard deviation')
Attribute(value=Name(id='self', ctx=Load()), attr='_q_matrix_std', ctx=Load())
Load()
Load()
arg(arg='self', annotation=None)
arg(arg='value', annotation=Name(id='float', ctx=Load()))
Str(s='sets the Q matrix standard deviation')
Attribute(value=Name(id='self', ctx=Load()), attr='_q_matrix_std', ctx=Store())
Name(id='value', ctx=Load())
Name(id='q_matrix_std', ctx=Load())
Load()
arg(arg='self', annotation=None)
Str(s='returns the W matrix standard deviation')
Attribute(value=Name(id='self', ctx=Load()), attr='_w_matrix_std', ctx=Load())
Load()
Load()
arg(arg='self', annotation=None)
arg(arg='value', annotation=Name(id='float', ctx=Load()))
Str(s='sets the W matrix standard deviation')
Attribute(value=Name(id='self', ctx=Load()), attr='_w_matrix_std', ctx=Store())
Name(id='value', ctx=Load())
Name(id='w_matrix_std', ctx=Load())
Load()
Load()
Name(id='GroundStateSolver', ctx=Load())
Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='int', ctx=Load())), ctx=Load())), ctx=Load())], ctx=Load())), ctx=Load())
Name(id='self', ctx=Load())
Store()
Load()
Name(id='self', ctx=Load())
Store()
Load()
Name(id='self', ctx=Load())
Store()
Load()
Name(id='self', ctx=Load())
Load()
Load()
Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='int', ctx=Load())), ctx=Load())), ctx=Load())], ctx=Load())
Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='int', ctx=Load())), ctx=Load())), ctx=Load())], ctx=Load())), ctx=Load())
And()
Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='excitations', ctx=Load()), Name(id='str', ctx=Load())], keywords=[])
Compare(left=Name(id='excitations', ctx=Load()), ops=[NotIn()], comparators=[List(elts=[Str(s='s'), Str(s='d'), Str(s='sd')], ctx=Load())])
Call(func=Name(id='ValueError', ctx=Load()), args=[Str(s='Excitation type must be s (singles), d (doubles) or sd (singles and doubles)')], keywords=[])
Name(id='self', ctx=Load())
Store()
Load()
Load()
Attribute(value=Name(id='self', ctx=Load()), attr='_gsc', ctx=Load())
Load()
Name(id='BaseProblem', ctx=Load())
Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Subscript(value=Name(id='ListOrDictType', ctx=Load()), slice=Index(value=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='SecondQuantizedOp', ctx=Load()), Name(id='PauliSumOp', ctx=Load())], ctx=Load())), ctx=Load())), ctx=Load())), ctx=Load())
Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_gsc', ctx=Load()), attr='get_qubit_operators', ctx=Load())
Name(id='problem', ctx=Load())
Name(id='aux_operators', ctx=Load())
Load()
Tuple(elts=[Name(id='PauliSumOp', ctx=Load()), Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Subscript(value=Name(id='ListOrDictType', ctx=Load()), slice=Index(value=Name(id='PauliSumOp', ctx=Load())), ctx=Load())), ctx=Load())], ctx=Load())
Name(id='BaseProblem', ctx=Load())
Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Subscript(value=Name(id='ListOrDictType', ctx=Load()), slice=Index(value=Name(id='SecondQuantizedOp', ctx=Load())), ctx=Load())), ctx=Load())
Name(id='aux_operators', ctx=Load())
IsNot()
NameConstant(value=None)
Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='warning', ctx=Load()), args=[Str(s='With qEOM the auxiliary operators can currently only be evaluated on the ground state.')], keywords=[])
Store()
Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_gsc', ctx=Load()), attr='solve', ctx=Load())
Name(id='problem', ctx=Load())
Name(id='aux_operators', ctx=Load())
Store()
Attribute(value=Name(id='problem', ctx=Load()), attr='second_q_ops', ctx=Load())
Name(id='isinstance', ctx=Load())
Name(id='second_q_ops', ctx=Load())
Name(id='list', ctx=Load())
Name(id='main_second_q_op', ctx=Store())
Subscript(value=Name(id='second_q_ops', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())
Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='second_q_ops', ctx=Load()), Name(id='dict', ctx=Load())], keywords=[])
Assign(targets=[Name(id='main_second_q_op', ctx=Store())], value=Call(func=Attribute(value=Name(id='second_q_ops', ctx=Load()), attr='pop', ctx=Load()), args=[Attribute(value=Name(id='problem', ctx=Load()), attr='main_property_name', ctx=Load())], keywords=[]))
Name(id='self', ctx=Load())
Store()
Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_gsc', ctx=Load()), attr='qubit_converter', ctx=Load()), attr='convert_only', ctx=Load())
Name(id='main_second_q_op', ctx=Load())
Attribute(value=Name(id='problem', ctx=Load()), attr='num_particles', ctx=Load())
Name(id='matrix_operators_dict', ctx=Store())
Name(id='size', ctx=Store())
Store()
Attribute(value=Name(id='self', ctx=Load()), attr='_prepare_matrix_operators', ctx=Load())
Name(id='problem', ctx=Load())
Store()
Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_gsc', ctx=Load()), attr='evaluate_operators', ctx=Load())
Subscript(value=Attribute(value=Name(id='groundstate_result', ctx=Load()), attr='eigenstates', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())
Name(id='matrix_operators_dict', ctx=Load())
Store()
Name(id='cast', ctx=Load())
Subscript(value=Name(id='Dict', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='float', ctx=Load())), ctx=Load())], ctx=Load())), ctx=Load())
Name(id='measurement_results', ctx=Load())
Name(id='m_mat', ctx=Store())
Name(id='v_mat', ctx=Store())
Name(id='q_mat', ctx=Store())
Name(id='w_mat', ctx=Store())
Name(id='m_mat_std', ctx=Store())
Name(id='v_mat_std', ctx=Store())
Name(id='q_mat_std', ctx=Store())
Name(id='w_mat_std', ctx=Store())
Store()
Attribute(value=Name(id='self', ctx=Load()), attr='_build_eom_matrices', ctx=Load())
Name(id='measurement_results', ctx=Load())
Name(id='size', ctx=Load())
Name(id='energy_gaps', ctx=Store())
Name(id='expansion_coefs', ctx=Store())
Store()
Attribute(value=Name(id='self', ctx=Load()), attr='_compute_excitation_energies', ctx=Load())
Name(id='m_mat', ctx=Load())
Name(id='v_mat', ctx=Load())
Name(id='q_mat', ctx=Load())
Name(id='w_mat', ctx=Load())
Store()
Name(id='QEOMResult', ctx=Load())
Name(id='qeom_result', ctx=Load())
Store()
Name(id='groundstate_result', ctx=Load())
Load()
Name(id='qeom_result', ctx=Load())
Store()
Load()
Name(id='qeom_result', ctx=Load())
Store()
Load()
Name(id='qeom_result', ctx=Load())
Store()
Load()
Name(id='qeom_result', ctx=Load())
Store()
Load()
Name(id='qeom_result', ctx=Load())
Store()
Load()
Name(id='qeom_result', ctx=Load())
Store()
Load()
Name(id='qeom_result', ctx=Load())
Store()
Load()
Name(id='qeom_result', ctx=Load())
Store()
Load()
Name(id='qeom_result', ctx=Load())
Store()
Load()
Name(id='qeom_result', ctx=Load())
Store()
Load()
Store()
Name(id='EigenstateResult', ctx=Load())
Name(id='eigenstate_result', ctx=Load())
Store()
Name(id='groundstate_result', ctx=Load())
Load()
Name(id='eigenstate_result', ctx=Load())
Store()
Name(id='groundstate_result', ctx=Load())
Load()
Name(id='eigenstate_result', ctx=Load())
Store()
Load()
Name(id='eigenstate_result', ctx=Load())
Store()
Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load())
Attribute(value=Name(id='groundstate_result', ctx=Load()), attr='eigenenergies', ctx=Load())
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='asarray', ctx=Load()), args=[ListComp(elt=BinOp(left=Subscript(value=Attribute(value=Name(id='groundstate_result', ctx=Load()), attr='eigenenergies', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load()), op=Add(), right=Name(id='gap', ctx=Load())), generators=[comprehension(target=Name(id='gap', ctx=Store()), iter=Name(id='energy_gaps', ctx=Load()), ifs=[], is_async=0)])], keywords=[])
Store()
Attribute(value=Name(id='problem', ctx=Load()), attr='interpret', ctx=Load())
Name(id='eigenstate_result', ctx=Load())
Load()
Store()
Attribute(value=Name(id='problem', ctx=Load()), attr='hopping_qeom_ops', ctx=Load())
Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_gsc', ctx=Load()), attr='qubit_converter', ctx=Load())
Attribute(value=Name(id='self', ctx=Load()), attr='_excitations', ctx=Load())
Name(id='hopping_operators', ctx=Store())
Name(id='type_of_commutativities', ctx=Store())
Name(id='excitation_indices', ctx=Store())
Store()
Load()
Store()
Name(id='int', ctx=Load())
BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='excitation_indices', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[]), op=FloorDiv(), right=Num(n=2))
Store()
Attribute(value=Name(id='self', ctx=Load()), attr='_build_all_commutators', ctx=Load())
Name(id='hopping_operators', ctx=Load())
Name(id='type_of_commutativities', ctx=Load())
Name(id='size', ctx=Load())
Name(id='eom_matrix_operators', ctx=Load())
Name(id='size', ctx=Load())
Load()
Load()
Tuple(elts=[Name(id='dict', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load())
Name(id='dict', ctx=Load())
Name(id='dict', ctx=Load())
Name(id='int', ctx=Load())
Store()
Name(id='mus', ctx=Store())
Name(id='nus', ctx=Store())
Store()
Attribute(value=Name(id='np', ctx=Load()), attr='triu_indices', ctx=Load())
Name(id='size', ctx=Load())
arg(arg='available_hopping_ops', annotation=None)
arg(arg='untapered_op', annotation=None)
arg(arg='z2_symmetries', annotation=None)
Name(id='to_be_computed_list', ctx=Store())
List(elts=[], ctx=Load())
Tuple(elts=[Name(id='idx', ctx=Store()), Name(id='m_u', ctx=Store())], ctx=Store())
Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='mus', ctx=Load())], keywords=[])
Assign(targets=[Name(id='n_u', ctx=Store())], value=Subscript(value=Name(id='nus', ctx=Load()), slice=Index(value=Name(id='idx', ctx=Load())), ctx=Load()))
Assign(targets=[Name(id='left_op', ctx=Store())], value=Call(func=Attribute(value=Name(id='available_hopping_ops', ctx=Load()), attr='get', ctx=Load()), args=[JoinedStr(values=[Str(s='E_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None)])], keywords=[]))
Assign(targets=[Name(id='right_op_1', ctx=Store())], value=Call(func=Attribute(value=Name(id='available_hopping_ops', ctx=Load()), attr='get', ctx=Load()), args=[JoinedStr(values=[Str(s='E_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])], keywords=[]))
Assign(targets=[Name(id='right_op_2', ctx=Store())], value=Call(func=Attribute(value=Name(id='available_hopping_ops', ctx=Load()), attr='get', ctx=Load()), args=[JoinedStr(values=[Str(s='Edag_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])], keywords=[]))
Expr(value=Call(func=Attribute(value=Name(id='to_be_computed_list', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Name(id='m_u', ctx=Load()), Name(id='n_u', ctx=Load()), Name(id='left_op', ctx=Load()), Name(id='right_op_1', ctx=Load()), Name(id='right_op_2', ctx=Load())], ctx=Load())], keywords=[]))
Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='isEnabledFor', ctx=Load()), args=[Attribute(value=Name(id='logging', ctx=Load()), attr='INFO', ctx=Load())], keywords=[])
Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='info', ctx=Load()), args=[Str(s='Building all commutators:')], keywords=[]))
Expr(value=Call(func=Name(id='TextProgressBar', ctx=Load()), args=[Attribute(value=Name(id='sys', ctx=Load()), attr='stderr', ctx=Load())], keywords=[]))
Name(id='results', ctx=Store())
Call(func=Name(id='parallel_map', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_build_commutator_routine', ctx=Load()), Name(id='to_be_computed_list', ctx=Load())], keywords=[keyword(arg='task_args', value=Tuple(elts=[Name(id='untapered_op', ctx=Load()), Name(id='z2_symmetries', ctx=Load())], ctx=Load())), keyword(arg='num_processes', value=Attribute(value=Name(id='algorithm_globals', ctx=Load()), attr='num_processes', ctx=Load()))])
Name(id='result', ctx=Store())
Name(id='results', ctx=Load())
Assign(targets=[Tuple(elts=[Name(id='m_u', ctx=Store()), Name(id='n_u', ctx=Store()), Name(id='q_mat_op', ctx=Store()), Name(id='w_mat_op', ctx=Store()), Name(id='m_mat_op', ctx=Store()), Name(id='v_mat_op', ctx=Store())], ctx=Store())], value=Name(id='result', ctx=Load()))
If(test=Compare(left=Name(id='q_mat_op', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=[Assign(targets=[Subscript(value=Name(id='all_matrix_operators', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='q_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])), ctx=Store())], value=Name(id='q_mat_op', ctx=Load()))], orelse=[])
If(test=Compare(left=Name(id='w_mat_op', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=[Assign(targets=[Subscript(value=Name(id='all_matrix_operators', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='w_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])), ctx=Store())], value=Name(id='w_mat_op', ctx=Load()))], orelse=[])
If(test=Compare(left=Name(id='m_mat_op', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=[Assign(targets=[Subscript(value=Name(id='all_matrix_operators', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='m_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])), ctx=Store())], value=Name(id='m_mat_op', ctx=Load()))], orelse=[])
If(test=Compare(left=Name(id='v_mat_op', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=[Assign(targets=[Subscript(value=Name(id='all_matrix_operators', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='v_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])), ctx=Store())], value=Name(id='v_mat_op', ctx=Load()))], orelse=[])
Name(id='z2_symmetries', ctx=Store())
Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_gsc', ctx=Load()), attr='qubit_converter', ctx=Load()), attr='z2symmetries', ctx=Load())
Name(id='AttributeError', ctx=Load())
Assign(targets=[Name(id='z2_symmetries', ctx=Store())], value=Call(func=Name(id='Z2Symmetries', ctx=Load()), args=[List(elts=[], ctx=Load()), List(elts=[], ctx=Load()), List(elts=[], ctx=Load())], keywords=[]))
Not()
Call(func=Attribute(value=Name(id='z2_symmetries', ctx=Load()), attr='is_empty', ctx=Load()), args=[], keywords=[])
Name(id='combinations', ctx=Store())
Call(func=Attribute(value=Name(id='itertools', ctx=Load()), attr='product', ctx=Load()), args=[List(elts=[Num(n=1), UnaryOp(op=USub(), operand=Num(n=1))], ctx=Load())], keywords=[keyword(arg='repeat', value=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='z2_symmetries', ctx=Load()), attr='symmetries', ctx=Load())], keywords=[]))])
Name(id='targeted_tapering_values', ctx=Store())
Name(id='combinations', ctx=Load())
Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='info', ctx=Load()), args=[Str(s='In sector: (%s)'), Call(func=Attribute(value=Str(s=','), attr='join', ctx=Load()), args=[ListComp(elt=Call(func=Name(id='str', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='targeted_tapering_values', ctx=Load()), ifs=[], is_async=0)])], keywords=[])], keywords=[]))
Assign(targets=[Name(id='available_hopping_ops', ctx=Store())], value=Dict(keys=[], values=[]))
Assign(targets=[Name(id='targeted_sector', ctx=Store())], value=Compare(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='asarray', ctx=Load()), args=[Name(id='targeted_tapering_values', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Num(n=1)]))
For(target=Tuple(elts=[Name(id='key', ctx=Store()), Name(id='value', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='type_of_commutativities', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Name(id='value', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='asarray', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[])), If(test=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='all', ctx=Load()), args=[Compare(left=Name(id='value', ctx=Load()), ops=[Eq()], comparators=[Name(id='targeted_sector', ctx=Load())])], keywords=[]), body=[Assign(targets=[Subscript(value=Name(id='available_hopping_ops', ctx=Load()), slice=Index(value=Name(id='key', ctx=Load())), ctx=Store())], value=Subscript(value=Name(id='hopping_operators', ctx=Load()), slice=Index(value=Name(id='key', ctx=Load())), ctx=Load()))], orelse=[])], orelse=[])
Expr(value=Call(func=Name(id='_build_one_sector', ctx=Load()), args=[Name(id='available_hopping_ops', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_untapered_qubit_op_main', ctx=Load()), Name(id='z2_symmetries', ctx=Load())], keywords=[]))
Call(func=Name(id='_build_one_sector', ctx=Load()), args=[Name(id='hopping_operators', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_untapered_qubit_op_main', ctx=Load()), Name(id='z2_symmetries', ctx=Load())], keywords=[])
Load()
Name(id='List', ctx=Load())
Name(id='PauliSumOp', ctx=Load())
Name(id='Z2Symmetries', ctx=Load())
Name(id='m_u', ctx=Store())
Name(id='n_u', ctx=Store())
Name(id='left_op', ctx=Store())
Name(id='right_op_1', ctx=Store())
Name(id='right_op_2', ctx=Store())
Store()
Load()
Or()
Compare(left=Name(id='left_op', ctx=Load()), ops=[Is()], comparators=[NameConstant(value=None)])
BoolOp(op=And(), values=[Compare(left=Name(id='right_op_1', ctx=Load()), ops=[Is()], comparators=[NameConstant(value=None)]), Compare(left=Name(id='right_op_2', ctx=Load()), ops=[Is()], comparators=[NameConstant(value=None)])])
Name(id='q_mat_op', ctx=Store())
NameConstant(value=None)
Name(id='w_mat_op', ctx=Store())
NameConstant(value=None)
Name(id='m_mat_op', ctx=Store())
NameConstant(value=None)
Name(id='v_mat_op', ctx=Store())
NameConstant(value=None)
Compare(left=Name(id='right_op_1', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)])
Assign(targets=[Name(id='q_mat_op', ctx=Store())], value=Call(func=Name(id='double_commutator', ctx=Load()), args=[Name(id='left_op', ctx=Load()), Name(id='operator', ctx=Load()), Name(id='right_op_1', ctx=Load())], keywords=[keyword(arg='sign', value=NameConstant(value=False))]))
Assign(targets=[Name(id='w_mat_op', ctx=Store())], value=Call(func=Name(id='commutator', ctx=Load()), args=[Name(id='left_op', ctx=Load()), Name(id='right_op_1', ctx=Load())], keywords=[]))
Assign(targets=[Name(id='q_mat_op', ctx=Store())], value=IfExp(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='q_mat_op', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Num(n=0)]), body=NameConstant(value=None), orelse=Name(id='q_mat_op', ctx=Load())))
Assign(targets=[Name(id='w_mat_op', ctx=Store())], value=IfExp(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='w_mat_op', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Num(n=0)]), body=NameConstant(value=None), orelse=Name(id='w_mat_op', ctx=Load())))
Assign(targets=[Name(id='q_mat_op', ctx=Store())], value=NameConstant(value=None))
Assign(targets=[Name(id='w_mat_op', ctx=Store())], value=NameConstant(value=None))
Compare(left=Name(id='right_op_2', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)])
Assign(targets=[Name(id='m_mat_op', ctx=Store())], value=Call(func=Name(id='double_commutator', ctx=Load()), args=[Name(id='left_op', ctx=Load()), Name(id='operator', ctx=Load()), Name(id='right_op_2', ctx=Load())], keywords=[keyword(arg='sign', value=NameConstant(value=False))]))
Assign(targets=[Name(id='v_mat_op', ctx=Store())], value=Call(func=Name(id='commutator', ctx=Load()), args=[Name(id='left_op', ctx=Load()), Name(id='right_op_2', ctx=Load())], keywords=[]))
Assign(targets=[Name(id='m_mat_op', ctx=Store())], value=IfExp(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='m_mat_op', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Num(n=0)]), body=NameConstant(value=None), orelse=Name(id='m_mat_op', ctx=Load())))
Assign(targets=[Name(id='v_mat_op', ctx=Store())], value=IfExp(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='v_mat_op', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Num(n=0)]), body=NameConstant(value=None), orelse=Name(id='v_mat_op', ctx=Load())))
Assign(targets=[Name(id='m_mat_op', ctx=Store())], value=NameConstant(value=None))
Assign(targets=[Name(id='v_mat_op', ctx=Store())], value=NameConstant(value=None))
UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='z2_symmetries', ctx=Load()), attr='is_empty', ctx=Load()), args=[], keywords=[]))
If(test=BoolOp(op=And(), values=[Compare(left=Name(id='q_mat_op', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='q_mat_op', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Num(n=0)])]), body=[Assign(targets=[Name(id='q_mat_op', ctx=Store())], value=Call(func=Attribute(value=Name(id='z2_symmetries', ctx=Load()), attr='taper', ctx=Load()), args=[Name(id='q_mat_op', ctx=Load())], keywords=[]))], orelse=[])
If(test=BoolOp(op=And(), values=[Compare(left=Name(id='w_mat_op', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='w_mat_op', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Num(n=0)])]), body=[Assign(targets=[Name(id='w_mat_op', ctx=Store())], value=Call(func=Attribute(value=Name(id='z2_symmetries', ctx=Load()), attr='taper', ctx=Load()), args=[Name(id='w_mat_op', ctx=Load())], keywords=[]))], orelse=[])
If(test=BoolOp(op=And(), values=[Compare(left=Name(id='m_mat_op', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='m_mat_op', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Num(n=0)])]), body=[Assign(targets=[Name(id='m_mat_op', ctx=Store())], value=Call(func=Attribute(value=Name(id='z2_symmetries', ctx=Load()), attr='taper', ctx=Load()), args=[Name(id='m_mat_op', ctx=Load())], keywords=[]))], orelse=[])
If(test=BoolOp(op=And(), values=[Compare(left=Name(id='v_mat_op', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='v_mat_op', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Num(n=0)])]), body=[Assign(targets=[Name(id='v_mat_op', ctx=Store())], value=Call(func=Attribute(value=Name(id='z2_symmetries', ctx=Load()), attr='taper', ctx=Load()), args=[Name(id='v_mat_op', ctx=Load())], keywords=[]))], orelse=[])
Name(id='m_u', ctx=Load())
Name(id='n_u', ctx=Load())
Name(id='q_mat_op', ctx=Load())
Name(id='w_mat_op', ctx=Load())
Name(id='m_mat_op', ctx=Load())
Name(id='v_mat_op', ctx=Load())
Load()
Load()
Tuple(elts=[Name(id='int', ctx=Load()), Name(id='int', ctx=Load()), Name(id='PauliSumOp', ctx=Load()), Name(id='PauliSumOp', ctx=Load()), Name(id='PauliSumOp', ctx=Load()), Name(id='PauliSumOp', ctx=Load())], ctx=Load())
Subscript(value=Name(id='Dict', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='float', ctx=Load())), ctx=Load())], ctx=Load())), ctx=Load())
Name(id='int', ctx=Load())
Name(id='mus', ctx=Store())
Name(id='nus', ctx=Store())
Store()
Attribute(value=Name(id='np', ctx=Load()), attr='triu_indices', ctx=Load())
Name(id='size', ctx=Load())
Store()
Attribute(value=Name(id='np', ctx=Load()), attr='zeros', ctx=Load())
Tuple(elts=[Name(id='size', ctx=Load()), Name(id='size', ctx=Load())], ctx=Load())
keyword(arg='dtype', value=Name(id='complex', ctx=Load()))
Store()
Attribute(value=Name(id='np', ctx=Load()), attr='zeros', ctx=Load())
Tuple(elts=[Name(id='size', ctx=Load()), Name(id='size', ctx=Load())], ctx=Load())
keyword(arg='dtype', value=Name(id='complex', ctx=Load()))
Store()
Attribute(value=Name(id='np', ctx=Load()), attr='zeros', ctx=Load())
Tuple(elts=[Name(id='size', ctx=Load()), Name(id='size', ctx=Load())], ctx=Load())
keyword(arg='dtype', value=Name(id='complex', ctx=Load()))
Store()
Attribute(value=Name(id='np', ctx=Load()), attr='zeros', ctx=Load())
Tuple(elts=[Name(id='size', ctx=Load()), Name(id='size', ctx=Load())], ctx=Load())
keyword(arg='dtype', value=Name(id='complex', ctx=Load()))
Name(id='m_mat_std', ctx=Store())
Name(id='v_mat_std', ctx=Store())
Name(id='q_mat_std', ctx=Store())
Name(id='w_mat_std', ctx=Store())
Store()
Num(n=0.0)
Num(n=0.0)
Num(n=0.0)
Num(n=0.0)
Load()
Name(id='idx', ctx=Store())
Name(id='m_u', ctx=Store())
Store()
Name(id='enumerate', ctx=Load())
Name(id='mus', ctx=Load())
Name(id='n_u', ctx=Store())
Subscript(value=Name(id='nus', ctx=Load()), slice=Index(value=Name(id='idx', ctx=Load())), ctx=Load())
Subscript(value=Subscript(value=Name(id='q_mat', ctx=Load()), slice=Index(value=Name(id='m_u', ctx=Load())), ctx=Load()), slice=Index(value=Name(id='n_u', ctx=Load())), ctx=Store())
IfExp(test=Compare(left=Call(func=Attribute(value=Name(id='gs_results', ctx=Load()), attr='get', ctx=Load()), args=[JoinedStr(values=[Str(s='q_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])], keywords=[]), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=Subscript(value=Subscript(value=Name(id='gs_results', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='q_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])), ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load()), orelse=Subscript(value=Subscript(value=Name(id='q_mat', ctx=Load()), slice=Index(value=Name(id='m_u', ctx=Load())), ctx=Load()), slice=Index(value=Name(id='n_u', ctx=Load())), ctx=Load()))
Subscript(value=Subscript(value=Name(id='w_mat', ctx=Load()), slice=Index(value=Name(id='m_u', ctx=Load())), ctx=Load()), slice=Index(value=Name(id='n_u', ctx=Load())), ctx=Store())
IfExp(test=Compare(left=Call(func=Attribute(value=Name(id='gs_results', ctx=Load()), attr='get', ctx=Load()), args=[JoinedStr(values=[Str(s='w_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])], keywords=[]), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=Subscript(value=Subscript(value=Name(id='gs_results', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='w_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])), ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load()), orelse=Subscript(value=Subscript(value=Name(id='w_mat', ctx=Load()), slice=Index(value=Name(id='m_u', ctx=Load())), ctx=Load()), slice=Index(value=Name(id='n_u', ctx=Load())), ctx=Load()))
Subscript(value=Subscript(value=Name(id='m_mat', ctx=Load()), slice=Index(value=Name(id='m_u', ctx=Load())), ctx=Load()), slice=Index(value=Name(id='n_u', ctx=Load())), ctx=Store())
IfExp(test=Compare(left=Call(func=Attribute(value=Name(id='gs_results', ctx=Load()), attr='get', ctx=Load()), args=[JoinedStr(values=[Str(s='m_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])], keywords=[]), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=Subscript(value=Subscript(value=Name(id='gs_results', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='m_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])), ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load()), orelse=Subscript(value=Subscript(value=Name(id='m_mat', ctx=Load()), slice=Index(value=Name(id='m_u', ctx=Load())), ctx=Load()), slice=Index(value=Name(id='n_u', ctx=Load())), ctx=Load()))
Subscript(value=Subscript(value=Name(id='v_mat', ctx=Load()), slice=Index(value=Name(id='m_u', ctx=Load())), ctx=Load()), slice=Index(value=Name(id='n_u', ctx=Load())), ctx=Store())
IfExp(test=Compare(left=Call(func=Attribute(value=Name(id='gs_results', ctx=Load()), attr='get', ctx=Load()), args=[JoinedStr(values=[Str(s='v_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])], keywords=[]), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=Subscript(value=Subscript(value=Name(id='gs_results', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='v_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])), ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load()), orelse=Subscript(value=Subscript(value=Name(id='v_mat', ctx=Load()), slice=Index(value=Name(id='m_u', ctx=Load())), ctx=Load()), slice=Index(value=Name(id='n_u', ctx=Load())), ctx=Load()))
Name(id='q_mat_std', ctx=Store())
Add()
IfExp(test=Compare(left=Call(func=Attribute(value=Name(id='gs_results', ctx=Load()), attr='get', ctx=Load()), args=[JoinedStr(values=[Str(s='q_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_std')])], keywords=[]), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=Subscript(value=Subscript(value=Name(id='gs_results', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='q_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_std')])), ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load()), orelse=Num(n=0))
Name(id='w_mat_std', ctx=Store())
Add()
IfExp(test=Compare(left=Call(func=Attribute(value=Name(id='gs_results', ctx=Load()), attr='get', ctx=Load()), args=[JoinedStr(values=[Str(s='w_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_std')])], keywords=[]), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=Subscript(value=Subscript(value=Name(id='gs_results', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='w_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_std')])), ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load()), orelse=Num(n=0))
Name(id='m_mat_std', ctx=Store())
Add()
IfExp(test=Compare(left=Call(func=Attribute(value=Name(id='gs_results', ctx=Load()), attr='get', ctx=Load()), args=[JoinedStr(values=[Str(s='m_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_std')])], keywords=[]), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=Subscript(value=Subscript(value=Name(id='gs_results', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='m_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_std')])), ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load()), orelse=Num(n=0))
Name(id='v_mat_std', ctx=Store())
Add()
IfExp(test=Compare(left=Call(func=Attribute(value=Name(id='gs_results', ctx=Load()), attr='get', ctx=Load()), args=[JoinedStr(values=[Str(s='v_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_std')])], keywords=[]), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=Subscript(value=Subscript(value=Name(id='gs_results', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='v_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_std')])), ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load()), orelse=Num(n=0))
Store()
BinOp(left=Name(id='q_mat', ctx=Load()), op=Add(), right=Attribute(value=Name(id='q_mat', ctx=Load()), attr='T', ctx=Load()))
Sub()
BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='identity', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='q_mat', ctx=Load()), attr='shape', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())], keywords=[]), op=Mult(), right=Name(id='q_mat', ctx=Load()))
Store()
BinOp(left=Name(id='w_mat', ctx=Load()), op=Add(), right=Attribute(value=Name(id='w_mat', ctx=Load()), attr='T', ctx=Load()))
Sub()
BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='identity', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='w_mat', ctx=Load()), attr='shape', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())], keywords=[]), op=Mult(), right=Name(id='w_mat', ctx=Load()))
Store()
BinOp(left=Name(id='m_mat', ctx=Load()), op=Add(), right=Attribute(value=Name(id='m_mat', ctx=Load()), attr='T', ctx=Load()))
Sub()
BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='identity', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='m_mat', ctx=Load()), attr='shape', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())], keywords=[]), op=Mult(), right=Name(id='m_mat', ctx=Load()))
Store()
BinOp(left=Name(id='v_mat', ctx=Load()), op=Add(), right=Attribute(value=Name(id='v_mat', ctx=Load()), attr='T', ctx=Load()))
Sub()
BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='identity', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='v_mat', ctx=Load()), attr='shape', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())], keywords=[]), op=Mult(), right=Name(id='v_mat', ctx=Load()))
Store()
Attribute(value=Name(id='np', ctx=Load()), attr='real', ctx=Load())
Name(id='q_mat', ctx=Load())
Store()
Attribute(value=Name(id='np', ctx=Load()), attr='real', ctx=Load())
Name(id='w_mat', ctx=Load())
Store()
Attribute(value=Name(id='np', ctx=Load()), attr='real', ctx=Load())
Name(id='m_mat', ctx=Load())
Store()
Attribute(value=Name(id='np', ctx=Load()), attr='real', ctx=Load())
Name(id='v_mat', ctx=Load())
Store()
Name(id='q_mat_std', ctx=Load())
Div()
Call(func=Name(id='float', ctx=Load()), args=[BinOp(left=Name(id='size', ctx=Load()), op=Pow(), right=Num(n=2))], keywords=[])
Store()
Name(id='w_mat_std', ctx=Load())
Div()
Call(func=Name(id='float', ctx=Load()), args=[BinOp(left=Name(id='size', ctx=Load()), op=Pow(), right=Num(n=2))], keywords=[])
Store()
Name(id='m_mat_std', ctx=Load())
Div()
Call(func=Name(id='float', ctx=Load()), args=[BinOp(left=Name(id='size', ctx=Load()), op=Pow(), right=Num(n=2))], keywords=[])
Store()
Name(id='v_mat_std', ctx=Load())
Div()
Call(func=Name(id='float', ctx=Load()), args=[BinOp(left=Name(id='size', ctx=Load()), op=Pow(), right=Num(n=2))], keywords=[])
Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load())
Str(s='\nQ:=========================\n%s')
Name(id='q_mat', ctx=Load())
Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load())
Str(s='\nW:=========================\n%s')
Name(id='w_mat', ctx=Load())
Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load())
Str(s='\nM:=========================\n%s')
Name(id='m_mat', ctx=Load())
Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load())
Str(s='\nV:=========================\n%s')
Name(id='v_mat', ctx=Load())
Name(id='m_mat', ctx=Load())
Name(id='v_mat', ctx=Load())
Name(id='q_mat', ctx=Load())
Name(id='w_mat', ctx=Load())
Name(id='m_mat_std', ctx=Load())
Name(id='v_mat_std', ctx=Load())
Name(id='q_mat_std', ctx=Load())
Name(id='w_mat_std', ctx=Load())
Load()
Load()
Tuple(elts=[Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Name(id='float', ctx=Load()), Name(id='float', ctx=Load()), Name(id='float', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load())
Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())
Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())
Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())
Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())
Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load())
Str(s='Diagonalizing qeom matrices for excited states...')
Store()
Attribute(value=Attribute(value=Name(id='np', ctx=Load()), attr='matrixlib', ctx=Load()), attr='bmat', ctx=Load())
List(elts=[List(elts=[Name(id='m_mat', ctx=Load()), Name(id='q_mat', ctx=Load())], ctx=Load()), List(elts=[Call(func=Attribute(value=Attribute(value=Name(id='q_mat', ctx=Load()), attr='T', ctx=Load()), attr='conj', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Attribute(value=Name(id='m_mat', ctx=Load()), attr='T', ctx=Load()), attr='conj', ctx=Load()), args=[], keywords=[])], ctx=Load())], ctx=Load())
Store()
Attribute(value=Attribute(value=Name(id='np', ctx=Load()), attr='matrixlib', ctx=Load()), attr='bmat', ctx=Load())
List(elts=[List(elts=[Name(id='v_mat', ctx=Load()), Name(id='w_mat', ctx=Load())], ctx=Load()), List(elts=[UnaryOp(op=USub(), operand=Call(func=Attribute(value=Attribute(value=Name(id='w_mat', ctx=Load()), attr='T', ctx=Load()), attr='conj', ctx=Load()), args=[], keywords=[])), UnaryOp(op=USub(), operand=Call(func=Attribute(value=Attribute(value=Name(id='v_mat', ctx=Load()), attr='T', ctx=Load()), attr='conj', ctx=Load()), args=[], keywords=[]))], ctx=Load())], ctx=Load())
Store()
Attribute(value=Name(id='linalg', ctx=Load()), attr='eig', ctx=Load())
Name(id='a_mat', ctx=Load())
Name(id='b_mat', ctx=Load())
Subscript(value=Name(id='res', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())
Index(value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='isnan', ctx=Load()), args=[Subscript(value=Name(id='res', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())], keywords=[])], keywords=[]))
Store()
Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load())
Str(s='... %s')
Subscript(value=Name(id='res', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())
Store()
Attribute(value=Name(id='np', ctx=Load()), attr='sort', ctx=Load())
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='real', ctx=Load()), args=[Subscript(value=Name(id='res', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())], keywords=[])
Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load())
Str(s='Sorted real parts %s')
Name(id='w', ctx=Load())
Store()
Attribute(value=Name(id='np', ctx=Load()), attr='abs', ctx=Load())
Subscript(value=Name(id='w', ctx=Load()), slice=Slice(lower=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='w', ctx=Load())], keywords=[]), op=FloorDiv(), right=Num(n=2)), upper=None, step=None), ctx=Load())
Name(id='w', ctx=Load())
Index(value=Compare(left=Name(id='w', ctx=Load()), ops=[Lt()], comparators=[Num(n=1e-06)]))
Store()
Store()
Load()
Name(id='excitation_energies_gap', ctx=Load())
Subscript(value=Name(id='res', ctx=Load()), slice=Index(value=Num(n=1)), ctx=Load())
Load()
Load()
Tuple(elts=[Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())], ctx=Load())
Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load())
Name(id='self', ctx=Load())
Store()
Name(id='self', ctx=Load())
Store()
Name(id='Optional', ctx=Load())
Index(value=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()))
Load()
Name(id='self', ctx=Load())
Store()
Name(id='Optional', ctx=Load())
Index(value=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()))
Load()
Name(id='self', ctx=Load())
Store()
Name(id='Optional', ctx=Load())
Index(value=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()))
Load()
Name(id='self', ctx=Load())
Store()
Name(id='Optional', ctx=Load())
Index(value=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()))
Load()
Name(id='self', ctx=Load())
Store()
Name(id='Optional', ctx=Load())
Index(value=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()))
Load()
Name(id='self', ctx=Load())
Store()
Name(id='Optional', ctx=Load())
Index(value=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()))
Load()
Name(id='self', ctx=Load())
Store()
Load()
Name(id='self', ctx=Load())
Store()
Load()
Name(id='self', ctx=Load())
Store()
Load()
Name(id='self', ctx=Load())
Load()
Name(id='self', ctx=Load())
Store()
Load()
Load()
Name(id='self', ctx=Load())
Load()
Load()
Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())
Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())
Name(id='self', ctx=Load())
Store()
Load()
Load()
Name(id='self', ctx=Load())
Load()
Load()
Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())
Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())
Name(id='self', ctx=Load())
Store()
Load()
Load()
Name(id='self', ctx=Load())
Load()
Load()
Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())
Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())
Name(id='self', ctx=Load())
Store()
Load()
Load()
Name(id='self', ctx=Load())
Load()
Load()
Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())
Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())
Name(id='self', ctx=Load())
Store()
Load()
Load()
Name(id='self', ctx=Load())
Load()
Load()
Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())
Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())
Name(id='self', ctx=Load())
Store()
Load()
Load()
Name(id='self', ctx=Load())
Load()
Load()
Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())
Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())
Name(id='self', ctx=Load())
Store()
Load()
Load()
Name(id='self', ctx=Load())
Load()
Name(id='float', ctx=Load())
Name(id='self', ctx=Load())
Store()
Load()
Load()
Name(id='self', ctx=Load())
Load()
Name(id='float', ctx=Load())
Name(id='self', ctx=Load())
Store()
Load()
Load()
Name(id='self', ctx=Load())
Load()
Name(id='float', ctx=Load())
Name(id='self', ctx=Load())
Store()
Load()
Load()
Name(id='self', ctx=Load())
Load()
Name(id='float', ctx=Load())
Name(id='self', ctx=Load())
Store()
Load()
Load()
Load()
Name(id='Union', ctx=Load())
Index(value=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='int', ctx=Load())), ctx=Load())), ctx=Load())], ctx=Load()))
Load()
Load()
Load()
Load()
Load()
Name(id='str', ctx=Load())
Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='int', ctx=Load())), ctx=Load())), ctx=Load())
Load()
Name(id='Union', ctx=Load())
Index(value=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='int', ctx=Load())), ctx=Load())), ctx=Load())], ctx=Load()))
Load()
Name(id='isinstance', ctx=Load())
Name(id='excitations', ctx=Load())
Name(id='str', ctx=Load())
Name(id='excitations', ctx=Load())
NotIn()
List(elts=[Str(s='s'), Str(s='d'), Str(s='sd')], ctx=Load())
Name(id='ValueError', ctx=Load())
Str(s='Excitation type must be s (singles), d (doubles) or sd (singles and doubles)')
Load()
Name(id='self', ctx=Load())
Load()
Load()
Name(id='Optional', ctx=Load())
Index(value=Subscript(value=Name(id='ListOrDictType', ctx=Load()), slice=Index(value=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='SecondQuantizedOp', ctx=Load()), Name(id='PauliSumOp', ctx=Load())], ctx=Load())), ctx=Load())), ctx=Load()))
Load()
Attribute(value=Name(id='self', ctx=Load()), attr='_gsc', ctx=Load())
Load()
Load()
Load()
Name(id='PauliSumOp', ctx=Load())
Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Subscript(value=Name(id='ListOrDictType', ctx=Load()), slice=Index(value=Name(id='PauliSumOp', ctx=Load())), ctx=Load())), ctx=Load())
Load()
Load()
Name(id='Optional', ctx=Load())
Index(value=Subscript(value=Name(id='ListOrDictType', ctx=Load()), slice=Index(value=Name(id='SecondQuantizedOp', ctx=Load())), ctx=Load()))
Load()
Load()
Attribute(value=Name(id='logger', ctx=Load()), attr='warning', ctx=Load())
Str(s='With qEOM the auxiliary operators can currently only be evaluated on the ground state.')
Attribute(value=Name(id='self', ctx=Load()), attr='_gsc', ctx=Load())
Load()
Load()
Load()
Name(id='problem', ctx=Load())
Load()
Load()
Load()
Load()
Store()
Name(id='second_q_ops', ctx=Load())
Index(value=Num(n=0))
Load()
Name(id='isinstance', ctx=Load())
Name(id='second_q_ops', ctx=Load())
Name(id='dict', ctx=Load())
Name(id='main_second_q_op', ctx=Store())
Call(func=Attribute(value=Name(id='second_q_ops', ctx=Load()), attr='pop', ctx=Load()), args=[Attribute(value=Name(id='problem', ctx=Load()), attr='main_property_name', ctx=Load())], keywords=[])
Load()
Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_gsc', ctx=Load()), attr='qubit_converter', ctx=Load())
Load()
Load()
Name(id='problem', ctx=Load())
Load()
Store()
Store()
Name(id='self', ctx=Load())
Load()
Load()
Attribute(value=Name(id='self', ctx=Load()), attr='_gsc', ctx=Load())
Load()
Attribute(value=Name(id='groundstate_result', ctx=Load()), attr='eigenstates', ctx=Load())
Index(value=Num(n=0))
Load()
Load()
Load()
Name(id='Dict', ctx=Load())
Index(value=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='float', ctx=Load())), ctx=Load())], ctx=Load()))
Load()
Load()
Store()
Store()
Store()
Store()
Store()
Store()
Store()
Store()
Name(id='self', ctx=Load())
Load()
Load()
Load()
Store()
Store()
Name(id='self', ctx=Load())
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Name(id='np', ctx=Load())
Load()
Name(id='groundstate_result', ctx=Load())
Load()
Attribute(value=Name(id='np', ctx=Load()), attr='asarray', ctx=Load())
ListComp(elt=BinOp(left=Subscript(value=Attribute(value=Name(id='groundstate_result', ctx=Load()), attr='eigenenergies', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load()), op=Add(), right=Name(id='gap', ctx=Load())), generators=[comprehension(target=Name(id='gap', ctx=Store()), iter=Name(id='energy_gaps', ctx=Load()), ifs=[], is_async=0)])
Name(id='problem', ctx=Load())
Load()
Load()
Name(id='problem', ctx=Load())
Load()
Attribute(value=Name(id='self', ctx=Load()), attr='_gsc', ctx=Load())
Load()
Name(id='self', ctx=Load())
Load()
Store()
Store()
Store()
Load()
Call(func=Name(id='len', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='excitation_indices', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[])
FloorDiv()
Num(n=2)
Name(id='self', ctx=Load())
Load()
Load()
Load()
Load()
Load()
Load()
Name(id='dict', ctx=Load())
Name(id='int', ctx=Load())
Load()
Load()
Load()
Load()
Store()
Store()
Name(id='np', ctx=Load())
Load()
Load()
Store()
Load()
Name(id='idx', ctx=Store())
Name(id='m_u', ctx=Store())
Store()
Name(id='enumerate', ctx=Load())
Name(id='mus', ctx=Load())
Name(id='n_u', ctx=Store())
Subscript(value=Name(id='nus', ctx=Load()), slice=Index(value=Name(id='idx', ctx=Load())), ctx=Load())
Name(id='left_op', ctx=Store())
Call(func=Attribute(value=Name(id='available_hopping_ops', ctx=Load()), attr='get', ctx=Load()), args=[JoinedStr(values=[Str(s='E_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None)])], keywords=[])
Name(id='right_op_1', ctx=Store())
Call(func=Attribute(value=Name(id='available_hopping_ops', ctx=Load()), attr='get', ctx=Load()), args=[JoinedStr(values=[Str(s='E_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])], keywords=[])
Name(id='right_op_2', ctx=Store())
Call(func=Attribute(value=Name(id='available_hopping_ops', ctx=Load()), attr='get', ctx=Load()), args=[JoinedStr(values=[Str(s='Edag_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])], keywords=[])
Call(func=Attribute(value=Name(id='to_be_computed_list', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Name(id='m_u', ctx=Load()), Name(id='n_u', ctx=Load()), Name(id='left_op', ctx=Load()), Name(id='right_op_1', ctx=Load()), Name(id='right_op_2', ctx=Load())], ctx=Load())], keywords=[])
Attribute(value=Name(id='logger', ctx=Load()), attr='isEnabledFor', ctx=Load())
Attribute(value=Name(id='logging', ctx=Load()), attr='INFO', ctx=Load())
Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='info', ctx=Load()), args=[Str(s='Building all commutators:')], keywords=[])
Call(func=Name(id='TextProgressBar', ctx=Load()), args=[Attribute(value=Name(id='sys', ctx=Load()), attr='stderr', ctx=Load())], keywords=[])
Store()
Name(id='parallel_map', ctx=Load())
Attribute(value=Name(id='self', ctx=Load()), attr='_build_commutator_routine', ctx=Load())
Name(id='to_be_computed_list', ctx=Load())
keyword(arg='task_args', value=Tuple(elts=[Name(id='untapered_op', ctx=Load()), Name(id='z2_symmetries', ctx=Load())], ctx=Load()))
keyword(arg='num_processes', value=Attribute(value=Name(id='algorithm_globals', ctx=Load()), attr='num_processes', ctx=Load()))
Store()
Load()
Tuple(elts=[Name(id='m_u', ctx=Store()), Name(id='n_u', ctx=Store()), Name(id='q_mat_op', ctx=Store()), Name(id='w_mat_op', ctx=Store()), Name(id='m_mat_op', ctx=Store()), Name(id='v_mat_op', ctx=Store())], ctx=Store())
Name(id='result', ctx=Load())
Compare(left=Name(id='q_mat_op', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)])
Assign(targets=[Subscript(value=Name(id='all_matrix_operators', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='q_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])), ctx=Store())], value=Name(id='q_mat_op', ctx=Load()))
Compare(left=Name(id='w_mat_op', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)])
Assign(targets=[Subscript(value=Name(id='all_matrix_operators', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='w_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])), ctx=Store())], value=Name(id='w_mat_op', ctx=Load()))
Compare(left=Name(id='m_mat_op', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)])
Assign(targets=[Subscript(value=Name(id='all_matrix_operators', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='m_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])), ctx=Store())], value=Name(id='m_mat_op', ctx=Load()))
Compare(left=Name(id='v_mat_op', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)])
Assign(targets=[Subscript(value=Name(id='all_matrix_operators', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='v_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])), ctx=Store())], value=Name(id='v_mat_op', ctx=Load()))
Store()
Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_gsc', ctx=Load()), attr='qubit_converter', ctx=Load())
Load()
Load()
Name(id='z2_symmetries', ctx=Store())
Call(func=Name(id='Z2Symmetries', ctx=Load()), args=[List(elts=[], ctx=Load()), List(elts=[], ctx=Load()), List(elts=[], ctx=Load())], keywords=[])
Attribute(value=Name(id='z2_symmetries', ctx=Load()), attr='is_empty', ctx=Load())
Store()
Attribute(value=Name(id='itertools', ctx=Load()), attr='product', ctx=Load())
List(elts=[Num(n=1), UnaryOp(op=USub(), operand=Num(n=1))], ctx=Load())
keyword(arg='repeat', value=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='z2_symmetries', ctx=Load()), attr='symmetries', ctx=Load())], keywords=[]))
Store()
Load()
Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='info', ctx=Load()), args=[Str(s='In sector: (%s)'), Call(func=Attribute(value=Str(s=','), attr='join', ctx=Load()), args=[ListComp(elt=Call(func=Name(id='str', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='targeted_tapering_values', ctx=Load()), ifs=[], is_async=0)])], keywords=[])], keywords=[])
Name(id='available_hopping_ops', ctx=Store())
Dict(keys=[], values=[])
Name(id='targeted_sector', ctx=Store())
Compare(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='asarray', ctx=Load()), args=[Name(id='targeted_tapering_values', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Num(n=1)])
Tuple(elts=[Name(id='key', ctx=Store()), Name(id='value', ctx=Store())], ctx=Store())
Call(func=Attribute(value=Name(id='type_of_commutativities', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])
Assign(targets=[Name(id='value', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='asarray', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[]))
If(test=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='all', ctx=Load()), args=[Compare(left=Name(id='value', ctx=Load()), ops=[Eq()], comparators=[Name(id='targeted_sector', ctx=Load())])], keywords=[]), body=[Assign(targets=[Subscript(value=Name(id='available_hopping_ops', ctx=Load()), slice=Index(value=Name(id='key', ctx=Load())), ctx=Store())], value=Subscript(value=Name(id='hopping_operators', ctx=Load()), slice=Index(value=Name(id='key', ctx=Load())), ctx=Load()))], orelse=[])
Call(func=Name(id='_build_one_sector', ctx=Load()), args=[Name(id='available_hopping_ops', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_untapered_qubit_op_main', ctx=Load()), Name(id='z2_symmetries', ctx=Load())], keywords=[])
Name(id='_build_one_sector', ctx=Load())
Name(id='hopping_operators', ctx=Load())
Attribute(value=Name(id='self', ctx=Load()), attr='_untapered_qubit_op_main', ctx=Load())
Name(id='z2_symmetries', ctx=Load())
Load()
Load()
Load()
Store()
Store()
Store()
Store()
Store()
Name(id='left_op', ctx=Load())
Is()
NameConstant(value=None)
And()
Compare(left=Name(id='right_op_1', ctx=Load()), ops=[Is()], comparators=[NameConstant(value=None)])
Compare(left=Name(id='right_op_2', ctx=Load()), ops=[Is()], comparators=[NameConstant(value=None)])
Store()
Store()
Store()
Store()
Name(id='right_op_1', ctx=Load())
IsNot()
NameConstant(value=None)
Name(id='q_mat_op', ctx=Store())
Call(func=Name(id='double_commutator', ctx=Load()), args=[Name(id='left_op', ctx=Load()), Name(id='operator', ctx=Load()), Name(id='right_op_1', ctx=Load())], keywords=[keyword(arg='sign', value=NameConstant(value=False))])
Name(id='w_mat_op', ctx=Store())
Call(func=Name(id='commutator', ctx=Load()), args=[Name(id='left_op', ctx=Load()), Name(id='right_op_1', ctx=Load())], keywords=[])
Name(id='q_mat_op', ctx=Store())
IfExp(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='q_mat_op', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Num(n=0)]), body=NameConstant(value=None), orelse=Name(id='q_mat_op', ctx=Load()))
Name(id='w_mat_op', ctx=Store())
IfExp(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='w_mat_op', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Num(n=0)]), body=NameConstant(value=None), orelse=Name(id='w_mat_op', ctx=Load()))
Name(id='q_mat_op', ctx=Store())
NameConstant(value=None)
Name(id='w_mat_op', ctx=Store())
NameConstant(value=None)
Name(id='right_op_2', ctx=Load())
IsNot()
NameConstant(value=None)
Name(id='m_mat_op', ctx=Store())
Call(func=Name(id='double_commutator', ctx=Load()), args=[Name(id='left_op', ctx=Load()), Name(id='operator', ctx=Load()), Name(id='right_op_2', ctx=Load())], keywords=[keyword(arg='sign', value=NameConstant(value=False))])
Name(id='v_mat_op', ctx=Store())
Call(func=Name(id='commutator', ctx=Load()), args=[Name(id='left_op', ctx=Load()), Name(id='right_op_2', ctx=Load())], keywords=[])
Name(id='m_mat_op', ctx=Store())
IfExp(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='m_mat_op', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Num(n=0)]), body=NameConstant(value=None), orelse=Name(id='m_mat_op', ctx=Load()))
Name(id='v_mat_op', ctx=Store())
IfExp(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='v_mat_op', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Num(n=0)]), body=NameConstant(value=None), orelse=Name(id='v_mat_op', ctx=Load()))
Name(id='m_mat_op', ctx=Store())
NameConstant(value=None)
Name(id='v_mat_op', ctx=Store())
NameConstant(value=None)
Not()
Call(func=Attribute(value=Name(id='z2_symmetries', ctx=Load()), attr='is_empty', ctx=Load()), args=[], keywords=[])
BoolOp(op=And(), values=[Compare(left=Name(id='q_mat_op', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='q_mat_op', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Num(n=0)])])
Assign(targets=[Name(id='q_mat_op', ctx=Store())], value=Call(func=Attribute(value=Name(id='z2_symmetries', ctx=Load()), attr='taper', ctx=Load()), args=[Name(id='q_mat_op', ctx=Load())], keywords=[]))
BoolOp(op=And(), values=[Compare(left=Name(id='w_mat_op', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='w_mat_op', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Num(n=0)])])
Assign(targets=[Name(id='w_mat_op', ctx=Store())], value=Call(func=Attribute(value=Name(id='z2_symmetries', ctx=Load()), attr='taper', ctx=Load()), args=[Name(id='w_mat_op', ctx=Load())], keywords=[]))
BoolOp(op=And(), values=[Compare(left=Name(id='m_mat_op', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='m_mat_op', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Num(n=0)])])
Assign(targets=[Name(id='m_mat_op', ctx=Store())], value=Call(func=Attribute(value=Name(id='z2_symmetries', ctx=Load()), attr='taper', ctx=Load()), args=[Name(id='m_mat_op', ctx=Load())], keywords=[]))
BoolOp(op=And(), values=[Compare(left=Name(id='v_mat_op', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='v_mat_op', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Num(n=0)])])
Assign(targets=[Name(id='v_mat_op', ctx=Store())], value=Call(func=Attribute(value=Name(id='z2_symmetries', ctx=Load()), attr='taper', ctx=Load()), args=[Name(id='v_mat_op', ctx=Load())], keywords=[]))
Load()
Load()
Load()
Load()
Load()
Load()
Name(id='int', ctx=Load())
Name(id='int', ctx=Load())
Name(id='PauliSumOp', ctx=Load())
Name(id='PauliSumOp', ctx=Load())
Name(id='PauliSumOp', ctx=Load())
Name(id='PauliSumOp', ctx=Load())
Load()
Name(id='Dict', ctx=Load())
Index(value=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='float', ctx=Load())), ctx=Load())], ctx=Load()))
Load()
Load()
Store()
Store()
Name(id='np', ctx=Load())
Load()
Load()
Name(id='np', ctx=Load())
Load()
Name(id='size', ctx=Load())
Name(id='size', ctx=Load())
Load()
Name(id='complex', ctx=Load())
Name(id='np', ctx=Load())
Load()
Name(id='size', ctx=Load())
Name(id='size', ctx=Load())
Load()
Name(id='complex', ctx=Load())
Name(id='np', ctx=Load())
Load()
Name(id='size', ctx=Load())
Name(id='size', ctx=Load())
Load()
Name(id='complex', ctx=Load())
Name(id='np', ctx=Load())
Load()
Name(id='size', ctx=Load())
Name(id='size', ctx=Load())
Load()
Name(id='complex', ctx=Load())
Store()
Store()
Store()
Store()
Store()
Store()
Load()
Load()
Store()
Name(id='nus', ctx=Load())
Index(value=Name(id='idx', ctx=Load()))
Load()
Subscript(value=Name(id='q_mat', ctx=Load()), slice=Index(value=Name(id='m_u', ctx=Load())), ctx=Load())
Index(value=Name(id='n_u', ctx=Load()))
Store()
Compare(left=Call(func=Attribute(value=Name(id='gs_results', ctx=Load()), attr='get', ctx=Load()), args=[JoinedStr(values=[Str(s='q_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])], keywords=[]), ops=[IsNot()], comparators=[NameConstant(value=None)])
Subscript(value=Subscript(value=Name(id='gs_results', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='q_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])), ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())
Subscript(value=Subscript(value=Name(id='q_mat', ctx=Load()), slice=Index(value=Name(id='m_u', ctx=Load())), ctx=Load()), slice=Index(value=Name(id='n_u', ctx=Load())), ctx=Load())
Subscript(value=Name(id='w_mat', ctx=Load()), slice=Index(value=Name(id='m_u', ctx=Load())), ctx=Load())
Index(value=Name(id='n_u', ctx=Load()))
Store()
Compare(left=Call(func=Attribute(value=Name(id='gs_results', ctx=Load()), attr='get', ctx=Load()), args=[JoinedStr(values=[Str(s='w_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])], keywords=[]), ops=[IsNot()], comparators=[NameConstant(value=None)])
Subscript(value=Subscript(value=Name(id='gs_results', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='w_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])), ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())
Subscript(value=Subscript(value=Name(id='w_mat', ctx=Load()), slice=Index(value=Name(id='m_u', ctx=Load())), ctx=Load()), slice=Index(value=Name(id='n_u', ctx=Load())), ctx=Load())
Subscript(value=Name(id='m_mat', ctx=Load()), slice=Index(value=Name(id='m_u', ctx=Load())), ctx=Load())
Index(value=Name(id='n_u', ctx=Load()))
Store()
Compare(left=Call(func=Attribute(value=Name(id='gs_results', ctx=Load()), attr='get', ctx=Load()), args=[JoinedStr(values=[Str(s='m_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])], keywords=[]), ops=[IsNot()], comparators=[NameConstant(value=None)])
Subscript(value=Subscript(value=Name(id='gs_results', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='m_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])), ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())
Subscript(value=Subscript(value=Name(id='m_mat', ctx=Load()), slice=Index(value=Name(id='m_u', ctx=Load())), ctx=Load()), slice=Index(value=Name(id='n_u', ctx=Load())), ctx=Load())
Subscript(value=Name(id='v_mat', ctx=Load()), slice=Index(value=Name(id='m_u', ctx=Load())), ctx=Load())
Index(value=Name(id='n_u', ctx=Load()))
Store()
Compare(left=Call(func=Attribute(value=Name(id='gs_results', ctx=Load()), attr='get', ctx=Load()), args=[JoinedStr(values=[Str(s='v_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])], keywords=[]), ops=[IsNot()], comparators=[NameConstant(value=None)])
Subscript(value=Subscript(value=Name(id='gs_results', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='v_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])), ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())
Subscript(value=Subscript(value=Name(id='v_mat', ctx=Load()), slice=Index(value=Name(id='m_u', ctx=Load())), ctx=Load()), slice=Index(value=Name(id='n_u', ctx=Load())), ctx=Load())
Store()
Compare(left=Call(func=Attribute(value=Name(id='gs_results', ctx=Load()), attr='get', ctx=Load()), args=[JoinedStr(values=[Str(s='q_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_std')])], keywords=[]), ops=[IsNot()], comparators=[NameConstant(value=None)])
Subscript(value=Subscript(value=Name(id='gs_results', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='q_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_std')])), ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())
Num(n=0)
Store()
Compare(left=Call(func=Attribute(value=Name(id='gs_results', ctx=Load()), attr='get', ctx=Load()), args=[JoinedStr(values=[Str(s='w_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_std')])], keywords=[]), ops=[IsNot()], comparators=[NameConstant(value=None)])
Subscript(value=Subscript(value=Name(id='gs_results', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='w_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_std')])), ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())
Num(n=0)
Store()
Compare(left=Call(func=Attribute(value=Name(id='gs_results', ctx=Load()), attr='get', ctx=Load()), args=[JoinedStr(values=[Str(s='m_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_std')])], keywords=[]), ops=[IsNot()], comparators=[NameConstant(value=None)])
Subscript(value=Subscript(value=Name(id='gs_results', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='m_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_std')])), ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())
Num(n=0)
Store()
Compare(left=Call(func=Attribute(value=Name(id='gs_results', ctx=Load()), attr='get', ctx=Load()), args=[JoinedStr(values=[Str(s='v_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_std')])], keywords=[]), ops=[IsNot()], comparators=[NameConstant(value=None)])
Subscript(value=Subscript(value=Name(id='gs_results', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='v_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_std')])), ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())
Num(n=0)
Name(id='q_mat', ctx=Load())
Add()
Attribute(value=Name(id='q_mat', ctx=Load()), attr='T', ctx=Load())
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='identity', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='q_mat', ctx=Load()), attr='shape', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())], keywords=[])
Mult()
Name(id='q_mat', ctx=Load())
Name(id='w_mat', ctx=Load())
Add()
Attribute(value=Name(id='w_mat', ctx=Load()), attr='T', ctx=Load())
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='identity', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='w_mat', ctx=Load()), attr='shape', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())], keywords=[])
Mult()
Name(id='w_mat', ctx=Load())
Name(id='m_mat', ctx=Load())
Add()
Attribute(value=Name(id='m_mat', ctx=Load()), attr='T', ctx=Load())
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='identity', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='m_mat', ctx=Load()), attr='shape', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())], keywords=[])
Mult()
Name(id='m_mat', ctx=Load())
Name(id='v_mat', ctx=Load())
Add()
Attribute(value=Name(id='v_mat', ctx=Load()), attr='T', ctx=Load())
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='identity', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='v_mat', ctx=Load()), attr='shape', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())], keywords=[])
Mult()
Name(id='v_mat', ctx=Load())
Name(id='np', ctx=Load())
Load()
Load()
Name(id='np', ctx=Load())
Load()
Load()
Name(id='np', ctx=Load())
Load()
Load()
Name(id='np', ctx=Load())
Load()
Load()
Load()
Name(id='float', ctx=Load())
BinOp(left=Name(id='size', ctx=Load()), op=Pow(), right=Num(n=2))
Load()
Name(id='float', ctx=Load())
BinOp(left=Name(id='size', ctx=Load()), op=Pow(), right=Num(n=2))
Load()
Name(id='float', ctx=Load())
BinOp(left=Name(id='size', ctx=Load()), op=Pow(), right=Num(n=2))
Load()
Name(id='float', ctx=Load())
BinOp(left=Name(id='size', ctx=Load()), op=Pow(), right=Num(n=2))
Name(id='logger', ctx=Load())
Load()
Load()
Name(id='logger', ctx=Load())
Load()
Load()
Name(id='logger', ctx=Load())
Load()
Load()
Name(id='logger', ctx=Load())
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())
Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())
Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())
Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())
Name(id='float', ctx=Load())
Name(id='float', ctx=Load())
Name(id='float', ctx=Load())
Name(id='float', ctx=Load())
Load()
Name(id='np', ctx=Load())
Load()
Name(id='np', ctx=Load())
Load()
Name(id='np', ctx=Load())
Load()
Name(id='np', ctx=Load())
Load()
Name(id='logger', ctx=Load())
Load()
Attribute(value=Name(id='np', ctx=Load()), attr='matrixlib', ctx=Load())
Load()
List(elts=[Name(id='m_mat', ctx=Load()), Name(id='q_mat', ctx=Load())], ctx=Load())
List(elts=[Call(func=Attribute(value=Attribute(value=Name(id='q_mat', ctx=Load()), attr='T', ctx=Load()), attr='conj', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Attribute(value=Name(id='m_mat', ctx=Load()), attr='T', ctx=Load()), attr='conj', ctx=Load()), args=[], keywords=[])], ctx=Load())
Load()
Attribute(value=Name(id='np', ctx=Load()), attr='matrixlib', ctx=Load())
Load()
List(elts=[Name(id='v_mat', ctx=Load()), Name(id='w_mat', ctx=Load())], ctx=Load())
List(elts=[UnaryOp(op=USub(), operand=Call(func=Attribute(value=Attribute(value=Name(id='w_mat', ctx=Load()), attr='T', ctx=Load()), attr='conj', ctx=Load()), args=[], keywords=[])), UnaryOp(op=USub(), operand=Call(func=Attribute(value=Attribute(value=Name(id='v_mat', ctx=Load()), attr='T', ctx=Load()), attr='conj', ctx=Load()), args=[], keywords=[]))], ctx=Load())
Load()
Name(id='linalg', ctx=Load())
Load()
Load()
Load()
Name(id='res', ctx=Load())
Index(value=Num(n=0))
Load()
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='isnan', ctx=Load()), args=[Subscript(value=Name(id='res', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())], keywords=[])], keywords=[])
Name(id='logger', ctx=Load())
Load()
Name(id='res', ctx=Load())
Index(value=Num(n=0))
Load()
Name(id='np', ctx=Load())
Load()
Attribute(value=Name(id='np', ctx=Load()), attr='real', ctx=Load())
Subscript(value=Name(id='res', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())
Name(id='logger', ctx=Load())
Load()
Load()
Name(id='np', ctx=Load())
Load()
Name(id='w', ctx=Load())
Slice(lower=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='w', ctx=Load())], keywords=[]), op=FloorDiv(), right=Num(n=2)), upper=None, step=None)
Load()
Load()
Compare(left=Name(id='w', ctx=Load()), ops=[Lt()], comparators=[Num(n=1e-06)])
Load()
Name(id='res', ctx=Load())
Index(value=Num(n=1))
Load()
Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())
Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())
Load()
Call(func=Name(id='super', ctx=Load()), args=[], keywords=[])
Load()
Load()
Load()
Load()
Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())
Load()
Load()
Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())
Load()
Load()
Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())
Load()
Load()
Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())
Load()
Load()
Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())
Load()
Load()
Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())
Load()
Load()
Load()
Load()
Load()
Load()
Name(id='np', ctx=Load())
Load()
Name(id='np', ctx=Load())
Load()
Load()
Load()
Name(id='np', ctx=Load())
Load()
Name(id='np', ctx=Load())
Load()
Load()
Load()
Name(id='np', ctx=Load())
Load()
Name(id='np', ctx=Load())
Load()
Load()
Load()
Name(id='np', ctx=Load())
Load()
Name(id='np', ctx=Load())
Load()
Load()
Load()
Name(id='np', ctx=Load())
Load()
Name(id='np', ctx=Load())
Load()
Load()
Load()
Name(id='np', ctx=Load())
Load()
Name(id='np', ctx=Load())
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='int', ctx=Load())), ctx=Load())), ctx=Load())], ctx=Load())
Load()
Name(id='List', ctx=Load())
Index(value=Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='int', ctx=Load())), ctx=Load()))
Load()
Load()
Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='int', ctx=Load())), ctx=Load())), ctx=Load())], ctx=Load())
Load()
Load()
Load()
Load()
Str(s='s')
Str(s='d')
Str(s='sd')
Load()
Load()
Load()
Load()
Subscript(value=Name(id='ListOrDictType', ctx=Load()), slice=Index(value=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='SecondQuantizedOp', ctx=Load()), Name(id='PauliSumOp', ctx=Load())], ctx=Load())), ctx=Load())), ctx=Load())
Name(id='self', ctx=Load())
Load()
Load()
Name(id='Optional', ctx=Load())
Index(value=Subscript(value=Name(id='ListOrDictType', ctx=Load()), slice=Index(value=Name(id='PauliSumOp', ctx=Load())), ctx=Load()))
Load()
Load()
Subscript(value=Name(id='ListOrDictType', ctx=Load()), slice=Index(value=Name(id='SecondQuantizedOp', ctx=Load())), ctx=Load())
Name(id='logger', ctx=Load())
Load()
Name(id='self', ctx=Load())
Load()
Load()
Load()
Num(n=0)
Load()
Load()
Load()
Store()
Attribute(value=Name(id='second_q_ops', ctx=Load()), attr='pop', ctx=Load())
Attribute(value=Name(id='problem', ctx=Load()), attr='main_property_name', ctx=Load())
Attribute(value=Name(id='self', ctx=Load()), attr='_gsc', ctx=Load())
Load()
Load()
Load()
Name(id='self', ctx=Load())
Load()
Name(id='groundstate_result', ctx=Load())
Load()
Num(n=0)
Load()
Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='float', ctx=Load())), ctx=Load())], ctx=Load())
Load()
Load()
Load()
Load()
Name(id='np', ctx=Load())
Load()
BinOp(left=Subscript(value=Attribute(value=Name(id='groundstate_result', ctx=Load()), attr='eigenenergies', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load()), op=Add(), right=Name(id='gap', ctx=Load()))
comprehension(target=Name(id='gap', ctx=Store()), iter=Name(id='energy_gaps', ctx=Load()), ifs=[], is_async=0)
Load()
Load()
Name(id='self', ctx=Load())
Load()
Load()
Name(id='len', ctx=Load())
Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='excitation_indices', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])], keywords=[])
Load()
Load()
Load()
Load()
Store()
Store()
Load()
Load()
Store()
Name(id='nus', ctx=Load())
Index(value=Name(id='idx', ctx=Load()))
Load()
Store()
Attribute(value=Name(id='available_hopping_ops', ctx=Load()), attr='get', ctx=Load())
JoinedStr(values=[Str(s='E_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None)])
Store()
Attribute(value=Name(id='available_hopping_ops', ctx=Load()), attr='get', ctx=Load())
JoinedStr(values=[Str(s='E_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])
Store()
Attribute(value=Name(id='available_hopping_ops', ctx=Load()), attr='get', ctx=Load())
JoinedStr(values=[Str(s='Edag_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])
Attribute(value=Name(id='to_be_computed_list', ctx=Load()), attr='append', ctx=Load())
Tuple(elts=[Name(id='m_u', ctx=Load()), Name(id='n_u', ctx=Load()), Name(id='left_op', ctx=Load()), Name(id='right_op_1', ctx=Load()), Name(id='right_op_2', ctx=Load())], ctx=Load())
Name(id='logger', ctx=Load())
Load()
Name(id='logging', ctx=Load())
Load()
Attribute(value=Name(id='logger', ctx=Load()), attr='info', ctx=Load())
Str(s='Building all commutators:')
Name(id='TextProgressBar', ctx=Load())
Attribute(value=Name(id='sys', ctx=Load()), attr='stderr', ctx=Load())
Load()
Name(id='self', ctx=Load())
Load()
Load()
Tuple(elts=[Name(id='untapered_op', ctx=Load()), Name(id='z2_symmetries', ctx=Load())], ctx=Load())
Attribute(value=Name(id='algorithm_globals', ctx=Load()), attr='num_processes', ctx=Load())
Name(id='m_u', ctx=Store())
Name(id='n_u', ctx=Store())
Name(id='q_mat_op', ctx=Store())
Name(id='w_mat_op', ctx=Store())
Name(id='m_mat_op', ctx=Store())
Name(id='v_mat_op', ctx=Store())
Store()
Load()
Name(id='q_mat_op', ctx=Load())
IsNot()
NameConstant(value=None)
Subscript(value=Name(id='all_matrix_operators', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='q_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])), ctx=Store())
Name(id='q_mat_op', ctx=Load())
Name(id='w_mat_op', ctx=Load())
IsNot()
NameConstant(value=None)
Subscript(value=Name(id='all_matrix_operators', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='w_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])), ctx=Store())
Name(id='w_mat_op', ctx=Load())
Name(id='m_mat_op', ctx=Load())
IsNot()
NameConstant(value=None)
Subscript(value=Name(id='all_matrix_operators', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='m_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])), ctx=Store())
Name(id='m_mat_op', ctx=Load())
Name(id='v_mat_op', ctx=Load())
IsNot()
NameConstant(value=None)
Subscript(value=Name(id='all_matrix_operators', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='v_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])), ctx=Store())
Name(id='v_mat_op', ctx=Load())
Attribute(value=Name(id='self', ctx=Load()), attr='_gsc', ctx=Load())
Load()
Store()
Name(id='Z2Symmetries', ctx=Load())
List(elts=[], ctx=Load())
List(elts=[], ctx=Load())
List(elts=[], ctx=Load())
Name(id='z2_symmetries', ctx=Load())
Load()
Name(id='itertools', ctx=Load())
Load()
Num(n=1)
UnaryOp(op=USub(), operand=Num(n=1))
Load()
Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='z2_symmetries', ctx=Load()), attr='symmetries', ctx=Load())], keywords=[])
Attribute(value=Name(id='logger', ctx=Load()), attr='info', ctx=Load())
Str(s='In sector: (%s)')
Call(func=Attribute(value=Str(s=','), attr='join', ctx=Load()), args=[ListComp(elt=Call(func=Name(id='str', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='targeted_tapering_values', ctx=Load()), ifs=[], is_async=0)])], keywords=[])
Store()
Store()
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='asarray', ctx=Load()), args=[Name(id='targeted_tapering_values', ctx=Load())], keywords=[])
Eq()
Num(n=1)
Name(id='key', ctx=Store())
Name(id='value', ctx=Store())
Store()
Attribute(value=Name(id='type_of_commutativities', ctx=Load()), attr='items', ctx=Load())
Name(id='value', ctx=Store())
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='asarray', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[])
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='all', ctx=Load()), args=[Compare(left=Name(id='value', ctx=Load()), ops=[Eq()], comparators=[Name(id='targeted_sector', ctx=Load())])], keywords=[])
Assign(targets=[Subscript(value=Name(id='available_hopping_ops', ctx=Load()), slice=Index(value=Name(id='key', ctx=Load())), ctx=Store())], value=Subscript(value=Name(id='hopping_operators', ctx=Load()), slice=Index(value=Name(id='key', ctx=Load())), ctx=Load()))
Name(id='_build_one_sector', ctx=Load())
Name(id='available_hopping_ops', ctx=Load())
Attribute(value=Name(id='self', ctx=Load()), attr='_untapered_qubit_op_main', ctx=Load())
Name(id='z2_symmetries', ctx=Load())
Load()
Load()
Name(id='self', ctx=Load())
Load()
Load()
Load()
Name(id='right_op_1', ctx=Load())
Is()
NameConstant(value=None)
Name(id='right_op_2', ctx=Load())
Is()
NameConstant(value=None)
Load()
Store()
Name(id='double_commutator', ctx=Load())
Name(id='left_op', ctx=Load())
Name(id='operator', ctx=Load())
Name(id='right_op_1', ctx=Load())
keyword(arg='sign', value=NameConstant(value=False))
Store()
Name(id='commutator', ctx=Load())
Name(id='left_op', ctx=Load())
Name(id='right_op_1', ctx=Load())
Store()
Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='q_mat_op', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Num(n=0)])
NameConstant(value=None)
Name(id='q_mat_op', ctx=Load())
Store()
Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='w_mat_op', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Num(n=0)])
NameConstant(value=None)
Name(id='w_mat_op', ctx=Load())
Store()
Store()
Load()
Store()
Name(id='double_commutator', ctx=Load())
Name(id='left_op', ctx=Load())
Name(id='operator', ctx=Load())
Name(id='right_op_2', ctx=Load())
keyword(arg='sign', value=NameConstant(value=False))
Store()
Name(id='commutator', ctx=Load())
Name(id='left_op', ctx=Load())
Name(id='right_op_2', ctx=Load())
Store()
Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='m_mat_op', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Num(n=0)])
NameConstant(value=None)
Name(id='m_mat_op', ctx=Load())
Store()
Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='v_mat_op', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Num(n=0)])
NameConstant(value=None)
Name(id='v_mat_op', ctx=Load())
Store()
Store()
Attribute(value=Name(id='z2_symmetries', ctx=Load()), attr='is_empty', ctx=Load())
And()
Compare(left=Name(id='q_mat_op', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)])
Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='q_mat_op', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Num(n=0)])
Name(id='q_mat_op', ctx=Store())
Call(func=Attribute(value=Name(id='z2_symmetries', ctx=Load()), attr='taper', ctx=Load()), args=[Name(id='q_mat_op', ctx=Load())], keywords=[])
And()
Compare(left=Name(id='w_mat_op', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)])
Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='w_mat_op', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Num(n=0)])
Name(id='w_mat_op', ctx=Store())
Call(func=Attribute(value=Name(id='z2_symmetries', ctx=Load()), attr='taper', ctx=Load()), args=[Name(id='w_mat_op', ctx=Load())], keywords=[])
And()
Compare(left=Name(id='m_mat_op', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)])
Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='m_mat_op', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Num(n=0)])
Name(id='m_mat_op', ctx=Store())
Call(func=Attribute(value=Name(id='z2_symmetries', ctx=Load()), attr='taper', ctx=Load()), args=[Name(id='m_mat_op', ctx=Load())], keywords=[])
And()
Compare(left=Name(id='v_mat_op', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)])
Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='v_mat_op', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Num(n=0)])
Name(id='v_mat_op', ctx=Store())
Call(func=Attribute(value=Name(id='z2_symmetries', ctx=Load()), attr='taper', ctx=Load()), args=[Name(id='v_mat_op', ctx=Load())], keywords=[])
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='float', ctx=Load())), ctx=Load())], ctx=Load())
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Name(id='idx', ctx=Load())
Name(id='q_mat', ctx=Load())
Index(value=Name(id='m_u', ctx=Load()))
Load()
Name(id='n_u', ctx=Load())
Call(func=Attribute(value=Name(id='gs_results', ctx=Load()), attr='get', ctx=Load()), args=[JoinedStr(values=[Str(s='q_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])], keywords=[])
IsNot()
NameConstant(value=None)
Subscript(value=Name(id='gs_results', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='q_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])), ctx=Load())
Index(value=Num(n=0))
Load()
Subscript(value=Name(id='q_mat', ctx=Load()), slice=Index(value=Name(id='m_u', ctx=Load())), ctx=Load())
Index(value=Name(id='n_u', ctx=Load()))
Load()
Name(id='w_mat', ctx=Load())
Index(value=Name(id='m_u', ctx=Load()))
Load()
Name(id='n_u', ctx=Load())
Call(func=Attribute(value=Name(id='gs_results', ctx=Load()), attr='get', ctx=Load()), args=[JoinedStr(values=[Str(s='w_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])], keywords=[])
IsNot()
NameConstant(value=None)
Subscript(value=Name(id='gs_results', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='w_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])), ctx=Load())
Index(value=Num(n=0))
Load()
Subscript(value=Name(id='w_mat', ctx=Load()), slice=Index(value=Name(id='m_u', ctx=Load())), ctx=Load())
Index(value=Name(id='n_u', ctx=Load()))
Load()
Name(id='m_mat', ctx=Load())
Index(value=Name(id='m_u', ctx=Load()))
Load()
Name(id='n_u', ctx=Load())
Call(func=Attribute(value=Name(id='gs_results', ctx=Load()), attr='get', ctx=Load()), args=[JoinedStr(values=[Str(s='m_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])], keywords=[])
IsNot()
NameConstant(value=None)
Subscript(value=Name(id='gs_results', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='m_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])), ctx=Load())
Index(value=Num(n=0))
Load()
Subscript(value=Name(id='m_mat', ctx=Load()), slice=Index(value=Name(id='m_u', ctx=Load())), ctx=Load())
Index(value=Name(id='n_u', ctx=Load()))
Load()
Name(id='v_mat', ctx=Load())
Index(value=Name(id='m_u', ctx=Load()))
Load()
Name(id='n_u', ctx=Load())
Call(func=Attribute(value=Name(id='gs_results', ctx=Load()), attr='get', ctx=Load()), args=[JoinedStr(values=[Str(s='v_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])], keywords=[])
IsNot()
NameConstant(value=None)
Subscript(value=Name(id='gs_results', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='v_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])), ctx=Load())
Index(value=Num(n=0))
Load()
Subscript(value=Name(id='v_mat', ctx=Load()), slice=Index(value=Name(id='m_u', ctx=Load())), ctx=Load())
Index(value=Name(id='n_u', ctx=Load()))
Load()
Call(func=Attribute(value=Name(id='gs_results', ctx=Load()), attr='get', ctx=Load()), args=[JoinedStr(values=[Str(s='q_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_std')])], keywords=[])
IsNot()
NameConstant(value=None)
Subscript(value=Name(id='gs_results', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='q_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_std')])), ctx=Load())
Index(value=Num(n=0))
Load()
Call(func=Attribute(value=Name(id='gs_results', ctx=Load()), attr='get', ctx=Load()), args=[JoinedStr(values=[Str(s='w_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_std')])], keywords=[])
IsNot()
NameConstant(value=None)
Subscript(value=Name(id='gs_results', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='w_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_std')])), ctx=Load())
Index(value=Num(n=0))
Load()
Call(func=Attribute(value=Name(id='gs_results', ctx=Load()), attr='get', ctx=Load()), args=[JoinedStr(values=[Str(s='m_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_std')])], keywords=[])
IsNot()
NameConstant(value=None)
Subscript(value=Name(id='gs_results', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='m_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_std')])), ctx=Load())
Index(value=Num(n=0))
Load()
Call(func=Attribute(value=Name(id='gs_results', ctx=Load()), attr='get', ctx=Load()), args=[JoinedStr(values=[Str(s='v_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_std')])], keywords=[])
IsNot()
NameConstant(value=None)
Subscript(value=Name(id='gs_results', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='v_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_std')])), ctx=Load())
Index(value=Num(n=0))
Load()
Load()
Name(id='q_mat', ctx=Load())
Load()
Attribute(value=Name(id='np', ctx=Load()), attr='identity', ctx=Load())
Subscript(value=Attribute(value=Name(id='q_mat', ctx=Load()), attr='shape', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())
Load()
Load()
Name(id='w_mat', ctx=Load())
Load()
Attribute(value=Name(id='np', ctx=Load()), attr='identity', ctx=Load())
Subscript(value=Attribute(value=Name(id='w_mat', ctx=Load()), attr='shape', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())
Load()
Load()
Name(id='m_mat', ctx=Load())
Load()
Attribute(value=Name(id='np', ctx=Load()), attr='identity', ctx=Load())
Subscript(value=Attribute(value=Name(id='m_mat', ctx=Load()), attr='shape', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())
Load()
Load()
Name(id='v_mat', ctx=Load())
Load()
Attribute(value=Name(id='np', ctx=Load()), attr='identity', ctx=Load())
Subscript(value=Attribute(value=Name(id='v_mat', ctx=Load()), attr='shape', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())
Load()
Load()
Load()
Load()
Load()
Load()
Name(id='size', ctx=Load())
Pow()
Num(n=2)
Load()
Name(id='size', ctx=Load())
Pow()
Num(n=2)
Load()
Name(id='size', ctx=Load())
Pow()
Num(n=2)
Load()
Name(id='size', ctx=Load())
Pow()
Num(n=2)
Load()
Load()
Load()
Load()
Name(id='np', ctx=Load())
Load()
Name(id='np', ctx=Load())
Load()
Name(id='np', ctx=Load())
Load()
Name(id='np', ctx=Load())
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Name(id='np', ctx=Load())
Load()
Name(id='m_mat', ctx=Load())
Name(id='q_mat', ctx=Load())
Load()
Call(func=Attribute(value=Attribute(value=Name(id='q_mat', ctx=Load()), attr='T', ctx=Load()), attr='conj', ctx=Load()), args=[], keywords=[])
Call(func=Attribute(value=Attribute(value=Name(id='m_mat', ctx=Load()), attr='T', ctx=Load()), attr='conj', ctx=Load()), args=[], keywords=[])
Load()
Name(id='np', ctx=Load())
Load()
Name(id='v_mat', ctx=Load())
Name(id='w_mat', ctx=Load())
Load()
UnaryOp(op=USub(), operand=Call(func=Attribute(value=Attribute(value=Name(id='w_mat', ctx=Load()), attr='T', ctx=Load()), attr='conj', ctx=Load()), args=[], keywords=[]))
UnaryOp(op=USub(), operand=Call(func=Attribute(value=Attribute(value=Name(id='v_mat', ctx=Load()), attr='T', ctx=Load()), attr='conj', ctx=Load()), args=[], keywords=[]))
Load()
Load()
Load()
Num(n=0)
Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load())
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='isnan', ctx=Load()), args=[Subscript(value=Name(id='res', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())], keywords=[])
Load()
Load()
Num(n=0)
Load()
Name(id='np', ctx=Load())
Load()
Name(id='res', ctx=Load())
Index(value=Num(n=0))
Load()
Load()
Load()
Load()
BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='w', ctx=Load())], keywords=[]), op=FloorDiv(), right=Num(n=2))
Name(id='w', ctx=Load())
Lt()
Num(n=1e-06)
Load()
Num(n=1)
Name(id='np', ctx=Load())
Load()
Name(id='np', ctx=Load())
Load()
Name(id='super', ctx=Load())
Name(id='np', ctx=Load())
Load()
Name(id='np', ctx=Load())
Load()
Name(id='np', ctx=Load())
Load()
Name(id='np', ctx=Load())
Load()
Name(id='np', ctx=Load())
Load()
Name(id='np', ctx=Load())
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Name(id='str', ctx=Load())
Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='int', ctx=Load())), ctx=Load())), ctx=Load())
Load()
Load()
Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='int', ctx=Load())), ctx=Load())
Name(id='str', ctx=Load())
Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='int', ctx=Load())), ctx=Load())), ctx=Load())
Load()
Name(id='ListOrDictType', ctx=Load())
Index(value=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='SecondQuantizedOp', ctx=Load()), Name(id='PauliSumOp', ctx=Load())], ctx=Load())), ctx=Load()))
Load()
Load()
Load()
Subscript(value=Name(id='ListOrDictType', ctx=Load()), slice=Index(value=Name(id='PauliSumOp', ctx=Load())), ctx=Load())
Name(id='ListOrDictType', ctx=Load())
Index(value=Name(id='SecondQuantizedOp', ctx=Load()))
Load()
Load()
Load()
Name(id='second_q_ops', ctx=Load())
Load()
Name(id='problem', ctx=Load())
Load()
Name(id='self', ctx=Load())
Load()
Load()
Load()
Name(id='str', ctx=Load())
Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='float', ctx=Load())), ctx=Load())
Load()
Load()
Subscript(value=Attribute(value=Name(id='groundstate_result', ctx=Load()), attr='eigenenergies', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())
Add()
Name(id='gap', ctx=Load())
Name(id='gap', ctx=Store())
Name(id='energy_gaps', ctx=Load())
Load()
Load()
Name(id='list', ctx=Load())
Call(func=Attribute(value=Name(id='excitation_indices', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])
Load()
Name(id='idx', ctx=Load())
Name(id='available_hopping_ops', ctx=Load())
Load()
Str(s='E_')
FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None)
Name(id='available_hopping_ops', ctx=Load())
Load()
Str(s='E_')
FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)
Name(id='available_hopping_ops', ctx=Load())
Load()
Str(s='Edag_')
FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)
Name(id='to_be_computed_list', ctx=Load())
Load()
Name(id='m_u', ctx=Load())
Name(id='n_u', ctx=Load())
Name(id='left_op', ctx=Load())
Name(id='right_op_1', ctx=Load())
Name(id='right_op_2', ctx=Load())
Load()
Load()
Load()
Name(id='logger', ctx=Load())
Load()
Load()
Name(id='sys', ctx=Load())
Load()
Load()
Name(id='untapered_op', ctx=Load())
Name(id='z2_symmetries', ctx=Load())
Load()
Name(id='algorithm_globals', ctx=Load())
Load()
Store()
Store()
Store()
Store()
Store()
Store()
Load()
Name(id='all_matrix_operators', ctx=Load())
Index(value=JoinedStr(values=[Str(s='q_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)]))
Store()
Load()
Load()
Name(id='all_matrix_operators', ctx=Load())
Index(value=JoinedStr(values=[Str(s='w_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)]))
Store()
Load()
Load()
Name(id='all_matrix_operators', ctx=Load())
Index(value=JoinedStr(values=[Str(s='m_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)]))
Store()
Load()
Load()
Name(id='all_matrix_operators', ctx=Load())
Index(value=JoinedStr(values=[Str(s='v_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)]))
Store()
Load()
Name(id='self', ctx=Load())
Load()
Load()
Load()
Load()
Load()
Load()
Load()
USub()
Num(n=1)
Name(id='len', ctx=Load())
Attribute(value=Name(id='z2_symmetries', ctx=Load()), attr='symmetries', ctx=Load())
Name(id='logger', ctx=Load())
Load()
Attribute(value=Str(s=','), attr='join', ctx=Load())
ListComp(elt=Call(func=Name(id='str', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='targeted_tapering_values', ctx=Load()), ifs=[], is_async=0)])
Attribute(value=Name(id='np', ctx=Load()), attr='asarray', ctx=Load())
Name(id='targeted_tapering_values', ctx=Load())
Store()
Store()
Name(id='type_of_commutativities', ctx=Load())
Load()
Store()
Attribute(value=Name(id='np', ctx=Load()), attr='asarray', ctx=Load())
Name(id='value', ctx=Load())
Attribute(value=Name(id='np', ctx=Load()), attr='all', ctx=Load())
Compare(left=Name(id='value', ctx=Load()), ops=[Eq()], comparators=[Name(id='targeted_sector', ctx=Load())])
Subscript(value=Name(id='available_hopping_ops', ctx=Load()), slice=Index(value=Name(id='key', ctx=Load())), ctx=Store())
Subscript(value=Name(id='hopping_operators', ctx=Load()), slice=Index(value=Name(id='key', ctx=Load())), ctx=Load())
Load()
Load()
Name(id='self', ctx=Load())
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
NameConstant(value=False)
Load()
Load()
Load()
Call(func=Name(id='len', ctx=Load()), args=[Name(id='q_mat_op', ctx=Load())], keywords=[])
Eq()
Num(n=0)
Load()
Call(func=Name(id='len', ctx=Load()), args=[Name(id='w_mat_op', ctx=Load())], keywords=[])
Eq()
Num(n=0)
Load()
Load()
Load()
Load()
Load()
NameConstant(value=False)
Load()
Load()
Load()
Call(func=Name(id='len', ctx=Load()), args=[Name(id='m_mat_op', ctx=Load())], keywords=[])
Eq()
Num(n=0)
Load()
Call(func=Name(id='len', ctx=Load()), args=[Name(id='v_mat_op', ctx=Load())], keywords=[])
Eq()
Num(n=0)
Load()
Name(id='z2_symmetries', ctx=Load())
Load()
Name(id='q_mat_op', ctx=Load())
IsNot()
NameConstant(value=None)
Call(func=Name(id='len', ctx=Load()), args=[Name(id='q_mat_op', ctx=Load())], keywords=[])
Gt()
Num(n=0)
Store()
Attribute(value=Name(id='z2_symmetries', ctx=Load()), attr='taper', ctx=Load())
Name(id='q_mat_op', ctx=Load())
Name(id='w_mat_op', ctx=Load())
IsNot()
NameConstant(value=None)
Call(func=Name(id='len', ctx=Load()), args=[Name(id='w_mat_op', ctx=Load())], keywords=[])
Gt()
Num(n=0)
Store()
Attribute(value=Name(id='z2_symmetries', ctx=Load()), attr='taper', ctx=Load())
Name(id='w_mat_op', ctx=Load())
Name(id='m_mat_op', ctx=Load())
IsNot()
NameConstant(value=None)
Call(func=Name(id='len', ctx=Load()), args=[Name(id='m_mat_op', ctx=Load())], keywords=[])
Gt()
Num(n=0)
Store()
Attribute(value=Name(id='z2_symmetries', ctx=Load()), attr='taper', ctx=Load())
Name(id='m_mat_op', ctx=Load())
Name(id='v_mat_op', ctx=Load())
IsNot()
NameConstant(value=None)
Call(func=Name(id='len', ctx=Load()), args=[Name(id='v_mat_op', ctx=Load())], keywords=[])
Gt()
Num(n=0)
Store()
Attribute(value=Name(id='z2_symmetries', ctx=Load()), attr='taper', ctx=Load())
Name(id='v_mat_op', ctx=Load())
Name(id='str', ctx=Load())
Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='float', ctx=Load())), ctx=Load())
Load()
Load()
Load()
Name(id='m_u', ctx=Load())
Load()
Attribute(value=Name(id='gs_results', ctx=Load()), attr='get', ctx=Load())
JoinedStr(values=[Str(s='q_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])
Name(id='gs_results', ctx=Load())
Index(value=JoinedStr(values=[Str(s='q_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)]))
Load()
Num(n=0)
Name(id='q_mat', ctx=Load())
Index(value=Name(id='m_u', ctx=Load()))
Load()
Name(id='n_u', ctx=Load())
Load()
Name(id='m_u', ctx=Load())
Load()
Attribute(value=Name(id='gs_results', ctx=Load()), attr='get', ctx=Load())
JoinedStr(values=[Str(s='w_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])
Name(id='gs_results', ctx=Load())
Index(value=JoinedStr(values=[Str(s='w_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)]))
Load()
Num(n=0)
Name(id='w_mat', ctx=Load())
Index(value=Name(id='m_u', ctx=Load()))
Load()
Name(id='n_u', ctx=Load())
Load()
Name(id='m_u', ctx=Load())
Load()
Attribute(value=Name(id='gs_results', ctx=Load()), attr='get', ctx=Load())
JoinedStr(values=[Str(s='m_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])
Name(id='gs_results', ctx=Load())
Index(value=JoinedStr(values=[Str(s='m_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)]))
Load()
Num(n=0)
Name(id='m_mat', ctx=Load())
Index(value=Name(id='m_u', ctx=Load()))
Load()
Name(id='n_u', ctx=Load())
Load()
Name(id='m_u', ctx=Load())
Load()
Attribute(value=Name(id='gs_results', ctx=Load()), attr='get', ctx=Load())
JoinedStr(values=[Str(s='v_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])
Name(id='gs_results', ctx=Load())
Index(value=JoinedStr(values=[Str(s='v_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)]))
Load()
Num(n=0)
Name(id='v_mat', ctx=Load())
Index(value=Name(id='m_u', ctx=Load()))
Load()
Name(id='n_u', ctx=Load())
Attribute(value=Name(id='gs_results', ctx=Load()), attr='get', ctx=Load())
JoinedStr(values=[Str(s='q_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_std')])
Name(id='gs_results', ctx=Load())
Index(value=JoinedStr(values=[Str(s='q_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_std')]))
Load()
Num(n=0)
Attribute(value=Name(id='gs_results', ctx=Load()), attr='get', ctx=Load())
JoinedStr(values=[Str(s='w_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_std')])
Name(id='gs_results', ctx=Load())
Index(value=JoinedStr(values=[Str(s='w_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_std')]))
Load()
Num(n=0)
Attribute(value=Name(id='gs_results', ctx=Load()), attr='get', ctx=Load())
JoinedStr(values=[Str(s='m_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_std')])
Name(id='gs_results', ctx=Load())
Index(value=JoinedStr(values=[Str(s='m_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_std')]))
Load()
Num(n=0)
Attribute(value=Name(id='gs_results', ctx=Load()), attr='get', ctx=Load())
JoinedStr(values=[Str(s='v_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_std')])
Name(id='gs_results', ctx=Load())
Index(value=JoinedStr(values=[Str(s='v_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_std')]))
Load()
Num(n=0)
Load()
Name(id='np', ctx=Load())
Load()
Attribute(value=Name(id='q_mat', ctx=Load()), attr='shape', ctx=Load())
Index(value=Num(n=0))
Load()
Load()
Name(id='np', ctx=Load())
Load()
Attribute(value=Name(id='w_mat', ctx=Load()), attr='shape', ctx=Load())
Index(value=Num(n=0))
Load()
Load()
Name(id='np', ctx=Load())
Load()
Attribute(value=Name(id='m_mat', ctx=Load()), attr='shape', ctx=Load())
Index(value=Num(n=0))
Load()
Load()
Name(id='np', ctx=Load())
Load()
Attribute(value=Name(id='v_mat', ctx=Load()), attr='shape', ctx=Load())
Index(value=Num(n=0))
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Attribute(value=Attribute(value=Name(id='q_mat', ctx=Load()), attr='T', ctx=Load()), attr='conj', ctx=Load())
Attribute(value=Attribute(value=Name(id='m_mat', ctx=Load()), attr='T', ctx=Load()), attr='conj', ctx=Load())
Load()
Load()
Load()
USub()
Call(func=Attribute(value=Attribute(value=Name(id='w_mat', ctx=Load()), attr='T', ctx=Load()), attr='conj', ctx=Load()), args=[], keywords=[])
USub()
Call(func=Attribute(value=Attribute(value=Name(id='v_mat', ctx=Load()), attr='T', ctx=Load()), attr='conj', ctx=Load()), args=[], keywords=[])
Name(id='np', ctx=Load())
Load()
Attribute(value=Name(id='np', ctx=Load()), attr='isnan', ctx=Load())
Subscript(value=Name(id='res', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())
Load()
Load()
Num(n=0)
Call(func=Name(id='len', ctx=Load()), args=[Name(id='w', ctx=Load())], keywords=[])
FloorDiv()
Num(n=2)
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Name(id='List', ctx=Load())
Index(value=Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='int', ctx=Load())), ctx=Load()))
Load()
Name(id='List', ctx=Load())
Index(value=Name(id='int', ctx=Load()))
Load()
Load()
Name(id='List', ctx=Load())
Index(value=Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='int', ctx=Load())), ctx=Load()))
Load()
Load()
Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='SecondQuantizedOp', ctx=Load()), Name(id='PauliSumOp', ctx=Load())], ctx=Load())), ctx=Load())
Name(id='ListOrDictType', ctx=Load())
Index(value=Name(id='PauliSumOp', ctx=Load()))
Load()
Load()
Name(id='SecondQuantizedOp', ctx=Load())
Load()
Load()
Load()
Load()
Name(id='List', ctx=Load())
Index(value=Name(id='float', ctx=Load()))
Load()
Attribute(value=Name(id='groundstate_result', ctx=Load()), attr='eigenenergies', ctx=Load())
Index(value=Num(n=0))
Load()
Load()
Store()
Load()
Load()
Attribute(value=Name(id='excitation_indices', ctx=Load()), attr='keys', ctx=Load())
Load()
Load()
Name(id='m_u', ctx=Load())
Load()
Name(id='n_u', ctx=Load())
Load()
Name(id='n_u', ctx=Load())
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
JoinedStr(values=[Str(s='q_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])
Load()
JoinedStr(values=[Str(s='w_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])
Load()
JoinedStr(values=[Str(s='m_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])
Load()
JoinedStr(values=[Str(s='v_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])
Load()
Load()
Name(id='z2_symmetries', ctx=Load())
Load()
Load()
Str(s=',')
Load()
Call(func=Name(id='str', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[])
comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='targeted_tapering_values', ctx=Load()), ifs=[], is_async=0)
Name(id='np', ctx=Load())
Load()
Load()
Load()
Name(id='np', ctx=Load())
Load()
Load()
Name(id='np', ctx=Load())
Load()
Name(id='value', ctx=Load())
Eq()
Name(id='targeted_sector', ctx=Load())
Name(id='available_hopping_ops', ctx=Load())
Index(value=Name(id='key', ctx=Load()))
Store()
Name(id='hopping_operators', ctx=Load())
Index(value=Name(id='key', ctx=Load()))
Load()
Load()
Name(id='len', ctx=Load())
Name(id='q_mat_op', ctx=Load())
Name(id='len', ctx=Load())
Name(id='w_mat_op', ctx=Load())
Name(id='len', ctx=Load())
Name(id='m_mat_op', ctx=Load())
Name(id='len', ctx=Load())
Name(id='v_mat_op', ctx=Load())
Load()
Load()
Name(id='len', ctx=Load())
Name(id='q_mat_op', ctx=Load())
Name(id='z2_symmetries', ctx=Load())
Load()
Load()
Load()
Name(id='len', ctx=Load())
Name(id='w_mat_op', ctx=Load())
Name(id='z2_symmetries', ctx=Load())
Load()
Load()
Load()
Name(id='len', ctx=Load())
Name(id='m_mat_op', ctx=Load())
Name(id='z2_symmetries', ctx=Load())
Load()
Load()
Load()
Name(id='len', ctx=Load())
Name(id='v_mat_op', ctx=Load())
Name(id='z2_symmetries', ctx=Load())
Load()
Load()
Load()
Name(id='List', ctx=Load())
Index(value=Name(id='float', ctx=Load()))
Load()
Load()
Name(id='gs_results', ctx=Load())
Load()
Str(s='q_')
FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None)
Str(s='_')
FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)
Load()
JoinedStr(values=[Str(s='q_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])
Load()
Name(id='m_u', ctx=Load())
Load()
Load()
Name(id='gs_results', ctx=Load())
Load()
Str(s='w_')
FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None)
Str(s='_')
FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)
Load()
JoinedStr(values=[Str(s='w_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])
Load()
Name(id='m_u', ctx=Load())
Load()
Load()
Name(id='gs_results', ctx=Load())
Load()
Str(s='m_')
FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None)
Str(s='_')
FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)
Load()
JoinedStr(values=[Str(s='m_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])
Load()
Name(id='m_u', ctx=Load())
Load()
Load()
Name(id='gs_results', ctx=Load())
Load()
Str(s='v_')
FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None)
Str(s='_')
FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)
Load()
JoinedStr(values=[Str(s='v_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])
Load()
Name(id='m_u', ctx=Load())
Load()
Name(id='gs_results', ctx=Load())
Load()
Str(s='q_')
FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None)
Str(s='_')
FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)
Str(s='_std')
Load()
JoinedStr(values=[Str(s='q_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_std')])
Name(id='gs_results', ctx=Load())
Load()
Str(s='w_')
FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None)
Str(s='_')
FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)
Str(s='_std')
Load()
JoinedStr(values=[Str(s='w_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_std')])
Name(id='gs_results', ctx=Load())
Load()
Str(s='m_')
FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None)
Str(s='_')
FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)
Str(s='_std')
Load()
JoinedStr(values=[Str(s='m_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_std')])
Name(id='gs_results', ctx=Load())
Load()
Str(s='v_')
FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None)
Str(s='_')
FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)
Str(s='_std')
Load()
JoinedStr(values=[Str(s='v_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_std')])
Load()
Name(id='q_mat', ctx=Load())
Load()
Num(n=0)
Load()
Name(id='w_mat', ctx=Load())
Load()
Num(n=0)
Load()
Name(id='m_mat', ctx=Load())
Load()
Num(n=0)
Load()
Name(id='v_mat', ctx=Load())
Load()
Num(n=0)
Attribute(value=Name(id='q_mat', ctx=Load()), attr='T', ctx=Load())
Load()
Attribute(value=Name(id='m_mat', ctx=Load()), attr='T', ctx=Load())
Load()
Attribute(value=Attribute(value=Name(id='w_mat', ctx=Load()), attr='T', ctx=Load()), attr='conj', ctx=Load())
Attribute(value=Attribute(value=Name(id='v_mat', ctx=Load()), attr='T', ctx=Load()), attr='conj', ctx=Load())
Load()
Name(id='np', ctx=Load())
Load()
Name(id='res', ctx=Load())
Index(value=Num(n=0))
Load()
Name(id='len', ctx=Load())
Name(id='w', ctx=Load())
Load()
Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='int', ctx=Load())), ctx=Load())
Load()
Name(id='int', ctx=Load())
Load()
Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='int', ctx=Load())), ctx=Load())
Name(id='Union', ctx=Load())
Index(value=Tuple(elts=[Name(id='SecondQuantizedOp', ctx=Load()), Name(id='PauliSumOp', ctx=Load())], ctx=Load()))
Load()
Load()
Name(id='PauliSumOp', ctx=Load())
Load()
Load()
Name(id='float', ctx=Load())
Name(id='groundstate_result', ctx=Load())
Load()
Num(n=0)
Name(id='excitation_indices', ctx=Load())
Load()
Load()
Load()
Load()
Str(s='q_')
FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None)
Str(s='_')
FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)
Str(s='w_')
FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None)
Str(s='_')
FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)
Str(s='m_')
FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None)
Str(s='_')
FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)
Str(s='v_')
FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None)
Str(s='_')
FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)
Load()
Name(id='str', ctx=Load())
Name(id='x', ctx=Load())
Name(id='x', ctx=Store())
Name(id='targeted_tapering_values', ctx=Load())
Load()
Load()
Load()
Load()
Load()
Load()
Name(id='key', ctx=Load())
Load()
Name(id='key', ctx=Load())
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Name(id='float', ctx=Load())
Load()
Name(id='m_u', ctx=Load())
Name(id='n_u', ctx=Load())
Str(s='q_')
FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None)
Str(s='_')
FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)
Load()
Load()
Name(id='m_u', ctx=Load())
Name(id='n_u', ctx=Load())
Str(s='w_')
FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None)
Str(s='_')
FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)
Load()
Load()
Name(id='m_u', ctx=Load())
Name(id='n_u', ctx=Load())
Str(s='m_')
FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None)
Str(s='_')
FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)
Load()
Load()
Name(id='m_u', ctx=Load())
Name(id='n_u', ctx=Load())
Str(s='v_')
FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None)
Str(s='_')
FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)
Load()
Load()
Name(id='m_u', ctx=Load())
Name(id='n_u', ctx=Load())
Str(s='q_')
FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None)
Str(s='_')
FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)
Str(s='_std')
Load()
Name(id='m_u', ctx=Load())
Name(id='n_u', ctx=Load())
Str(s='w_')
FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None)
Str(s='_')
FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)
Str(s='_std')
Load()
Name(id='m_u', ctx=Load())
Name(id='n_u', ctx=Load())
Str(s='m_')
FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None)
Str(s='_')
FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)
Str(s='_std')
Load()
Name(id='m_u', ctx=Load())
Name(id='n_u', ctx=Load())
Str(s='v_')
FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None)
Str(s='_')
FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)
Str(s='_std')
Load()
Load()
Load()
Load()
Name(id='q_mat', ctx=Load())
Load()
Name(id='m_mat', ctx=Load())
Load()
Attribute(value=Name(id='w_mat', ctx=Load()), attr='T', ctx=Load())
Load()
Attribute(value=Name(id='v_mat', ctx=Load()), attr='T', ctx=Load())
Load()
Load()
Load()
Num(n=0)
Load()
Load()
Name(id='List', ctx=Load())
Index(value=Name(id='int', ctx=Load()))
Load()
Load()
Name(id='List', ctx=Load())
Index(value=Name(id='int', ctx=Load()))
Load()
Load()
Tuple(elts=[Name(id='SecondQuantizedOp', ctx=Load()), Name(id='PauliSumOp', ctx=Load())], ctx=Load())
Load()
Load()
Load()
Load()
Name(id='m_u', ctx=Load())
Name(id='n_u', ctx=Load())
Name(id='m_u', ctx=Load())
Name(id='n_u', ctx=Load())
Name(id='m_u', ctx=Load())
Name(id='n_u', ctx=Load())
Name(id='m_u', ctx=Load())
Name(id='n_u', ctx=Load())
Load()
Load()
Store()
Load()
Load()
Load()
Load()
Load()
Load()
Name(id='m_u', ctx=Load())
Name(id='n_u', ctx=Load())
Load()
Load()
Name(id='m_u', ctx=Load())
Name(id='n_u', ctx=Load())
Load()
Load()
Name(id='m_u', ctx=Load())
Name(id='n_u', ctx=Load())
Load()
Load()
Name(id='m_u', ctx=Load())
Name(id='n_u', ctx=Load())
Load()
Load()
Name(id='m_u', ctx=Load())
Name(id='n_u', ctx=Load())
Load()
Load()
Name(id='m_u', ctx=Load())
Name(id='n_u', ctx=Load())
Load()
Load()
Name(id='m_u', ctx=Load())
Name(id='n_u', ctx=Load())
Load()
Load()
Name(id='m_u', ctx=Load())
Name(id='n_u', ctx=Load())
Load()
Load()
Name(id='w_mat', ctx=Load())
Load()
Name(id='v_mat', ctx=Load())
Load()
Load()
Name(id='int', ctx=Load())
Load()
Name(id='int', ctx=Load())
Name(id='SecondQuantizedOp', ctx=Load())
Name(id='PauliSumOp', ctx=Load())
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Module(body=[Expr(value=Str(s='The calculation of excited states via the qEOM algorithm')), ImportFrom(module='typing', names=[alias(name='List', asname=None), alias(name='Union', asname=None), alias(name='Optional', asname=None), alias(name='Tuple', asname=None), alias(name='Dict', asname=None), alias(name='cast', asname=None)], level=0), Import(names=[alias(name='itertools', asname=None)]), Import(names=[alias(name='logging', asname=None)]), Import(names=[alias(name='sys', asname=None)]), Import(names=[alias(name='numpy', asname='np')]), ImportFrom(module='scipy', names=[alias(name='linalg', asname=None)], level=0), ImportFrom(module='qiskit.tools', names=[alias(name='parallel_map', asname=None)], level=0), ImportFrom(module='qiskit.tools.events', names=[alias(name='TextProgressBar', asname=None)], level=0), ImportFrom(module='qiskit.utils', names=[alias(name='algorithm_globals', asname=None)], level=0), ImportFrom(module='qiskit.algorithms', names=[alias(name='AlgorithmResult', asname=None)], level=0), ImportFrom(module='qiskit.opflow', names=[alias(name='Z2Symmetries', asname=None), alias(name='commutator', asname=None), alias(name='double_commutator', asname=None), alias(name='PauliSumOp', asname=None)], level=0), ImportFrom(module='qiskit_nature', names=[alias(name='ListOrDictType', asname=None)], level=0), ImportFrom(module='qiskit_nature.operators.second_quantization', names=[alias(name='SecondQuantizedOp', asname=None)], level=0), ImportFrom(module='qiskit_nature.problems.second_quantization', names=[alias(name='BaseProblem', asname=None)], level=0), ImportFrom(module='qiskit_nature.results', names=[alias(name='EigenstateResult', asname=None)], level=0), ImportFrom(module='excited_states_solver', names=[alias(name='ExcitedStatesSolver', asname=None)], level=1), ImportFrom(module='ground_state_solvers', names=[alias(name='GroundStateSolver', asname=None)], level=2), Assign(targets=[Name(id='logger', ctx=Store())], value=Call(func=Attribute(value=Name(id='logging', ctx=Load()), attr='getLogger', ctx=Load()), args=[Name(id='__name__', ctx=Load())], keywords=[])), ClassDef(name='QEOM', bases=[Name(id='ExcitedStatesSolver', ctx=Load())], keywords=[], body=[Expr(value=Str(s='The calculation of excited states via the qEOM algorithm')), FunctionDef(name='__init__', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='ground_state_solver', annotation=Name(id='GroundStateSolver', ctx=Load())), arg(arg='excitations', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='int', ctx=Load())), ctx=Load())), ctx=Load())], ctx=Load())), ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[Str(s='sd')]), body=[Expr(value=Str(s="\n        Args:\n            ground_state_solver: a GroundStateSolver object. The qEOM algorithm\n                will use this ground state to compute the EOM matrix elements\n            excitations: The excitations to be included in the eom pseudo-eigenvalue problem.\n                If a string ('s', 'd' or 'sd') then all excitations of the given type will be used.\n                Otherwise a list of custom excitations can directly be provided.\n        ")), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_gsc', ctx=Store())], value=Name(id='ground_state_solver', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='excitations', ctx=Store())], value=Name(id='excitations', ctx=Load())), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_untapered_qubit_op_main', ctx=Store()), annotation=Name(id='PauliSumOp', ctx=Load()), value=NameConstant(value=None), simple=0)], decorator_list=[], returns=NameConstant(value=None)), FunctionDef(name='excitations', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Returns the excitations to be included in the eom pseudo-eigenvalue problem.')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_excitations', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='int', ctx=Load())), ctx=Load())), ctx=Load())], ctx=Load())), ctx=Load())), FunctionDef(name='excitations', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='excitations', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='int', ctx=Load())), ctx=Load())), ctx=Load())], ctx=Load())), ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='The excitations to be included in the eom pseudo-eigenvalue problem. If a string then\n        all excitations of given type will be used. Otherwise a list of custom excitations can\n        directly be provided.')), If(test=BoolOp(op=And(), values=[Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='excitations', ctx=Load()), Name(id='str', ctx=Load())], keywords=[]), Compare(left=Name(id='excitations', ctx=Load()), ops=[NotIn()], comparators=[List(elts=[Str(s='s'), Str(s='d'), Str(s='sd')], ctx=Load())])]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Str(s='Excitation type must be s (singles), d (doubles) or sd (singles and doubles)')], keywords=[]), cause=None)], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_excitations', ctx=Store())], value=Name(id='excitations', ctx=Load()))], decorator_list=[Attribute(value=Name(id='excitations', ctx=Load()), attr='setter', ctx=Load())], returns=NameConstant(value=None)), FunctionDef(name='solver', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Return(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_gsc', ctx=Load()), attr='solver', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=None), FunctionDef(name='get_qubit_operators', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='problem', annotation=Name(id='BaseProblem', ctx=Load())), arg(arg='aux_operators', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Subscript(value=Name(id='ListOrDictType', ctx=Load()), slice=Index(value=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='SecondQuantizedOp', ctx=Load()), Name(id='PauliSumOp', ctx=Load())], ctx=Load())), ctx=Load())), ctx=Load())), ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[NameConstant(value=None)]), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_gsc', ctx=Load()), attr='get_qubit_operators', ctx=Load()), args=[Name(id='problem', ctx=Load()), Name(id='aux_operators', ctx=Load())], keywords=[]))], decorator_list=[], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='PauliSumOp', ctx=Load()), Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Subscript(value=Name(id='ListOrDictType', ctx=Load()), slice=Index(value=Name(id='PauliSumOp', ctx=Load())), ctx=Load())), ctx=Load())], ctx=Load())), ctx=Load())), FunctionDef(name='solve', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='problem', annotation=Name(id='BaseProblem', ctx=Load())), arg(arg='aux_operators', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Subscript(value=Name(id='ListOrDictType', ctx=Load()), slice=Index(value=Name(id='SecondQuantizedOp', ctx=Load())), ctx=Load())), ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[NameConstant(value=None)]), body=[Expr(value=Str(s='Run the excited-states calculation.\n\n        Construct and solves the EOM pseudo-eigenvalue problem to obtain the excitation energies\n        and the excitation operators expansion coefficients.\n\n        Args:\n            problem: a class encoding a problem to be solved.\n            aux_operators: Additional auxiliary operators to evaluate.\n\n        Returns:\n            An interpreted :class:`~.EigenstateResult`. For more information see also\n            :meth:`~.BaseProblem.interpret`.\n        ')), If(test=Compare(left=Name(id='aux_operators', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='warning', ctx=Load()), args=[Str(s='With qEOM the auxiliary operators can currently only be evaluated on the ground state.')], keywords=[]))], orelse=[]), Assign(targets=[Name(id='groundstate_result', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_gsc', ctx=Load()), attr='solve', ctx=Load()), args=[Name(id='problem', ctx=Load()), Name(id='aux_operators', ctx=Load())], keywords=[])), Assign(targets=[Name(id='second_q_ops', ctx=Store())], value=Call(func=Attribute(value=Name(id='problem', ctx=Load()), attr='second_q_ops', ctx=Load()), args=[], keywords=[])), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='second_q_ops', ctx=Load()), Name(id='list', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='main_second_q_op', ctx=Store())], value=Subscript(value=Name(id='second_q_ops', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load()))], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='second_q_ops', ctx=Load()), Name(id='dict', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='main_second_q_op', ctx=Store())], value=Call(func=Attribute(value=Name(id='second_q_ops', ctx=Load()), attr='pop', ctx=Load()), args=[Attribute(value=Name(id='problem', ctx=Load()), attr='main_property_name', ctx=Load())], keywords=[]))], orelse=[])]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_untapered_qubit_op_main', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_gsc', ctx=Load()), attr='qubit_converter', ctx=Load()), attr='convert_only', ctx=Load()), args=[Name(id='main_second_q_op', ctx=Load()), Attribute(value=Name(id='problem', ctx=Load()), attr='num_particles', ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='matrix_operators_dict', ctx=Store()), Name(id='size', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_prepare_matrix_operators', ctx=Load()), args=[Name(id='problem', ctx=Load())], keywords=[])), Assign(targets=[Name(id='measurement_results', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_gsc', ctx=Load()), attr='evaluate_operators', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='groundstate_result', ctx=Load()), attr='eigenstates', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load()), Name(id='matrix_operators_dict', ctx=Load())], keywords=[])), Assign(targets=[Name(id='measurement_results', ctx=Store())], value=Call(func=Name(id='cast', ctx=Load()), args=[Subscript(value=Name(id='Dict', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='float', ctx=Load())), ctx=Load())], ctx=Load())), ctx=Load()), Name(id='measurement_results', ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='m_mat', ctx=Store()), Name(id='v_mat', ctx=Store()), Name(id='q_mat', ctx=Store()), Name(id='w_mat', ctx=Store()), Name(id='m_mat_std', ctx=Store()), Name(id='v_mat_std', ctx=Store()), Name(id='q_mat_std', ctx=Store()), Name(id='w_mat_std', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_build_eom_matrices', ctx=Load()), args=[Name(id='measurement_results', ctx=Load()), Name(id='size', ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='energy_gaps', ctx=Store()), Name(id='expansion_coefs', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_compute_excitation_energies', ctx=Load()), args=[Name(id='m_mat', ctx=Load()), Name(id='v_mat', ctx=Load()), Name(id='q_mat', ctx=Load()), Name(id='w_mat', ctx=Load())], keywords=[])), Assign(targets=[Name(id='qeom_result', ctx=Store())], value=Call(func=Name(id='QEOMResult', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='qeom_result', ctx=Load()), attr='ground_state_raw_result', ctx=Store())], value=Attribute(value=Name(id='groundstate_result', ctx=Load()), attr='raw_result', ctx=Load())), Assign(targets=[Attribute(value=Name(id='qeom_result', ctx=Load()), attr='expansion_coefficients', ctx=Store())], value=Name(id='expansion_coefs', ctx=Load())), Assign(targets=[Attribute(value=Name(id='qeom_result', ctx=Load()), attr='excitation_energies', ctx=Store())], value=Name(id='energy_gaps', ctx=Load())), Assign(targets=[Attribute(value=Name(id='qeom_result', ctx=Load()), attr='m_matrix', ctx=Store())], value=Name(id='m_mat', ctx=Load())), Assign(targets=[Attribute(value=Name(id='qeom_result', ctx=Load()), attr='v_matrix', ctx=Store())], value=Name(id='v_mat', ctx=Load())), Assign(targets=[Attribute(value=Name(id='qeom_result', ctx=Load()), attr='q_matrix', ctx=Store())], value=Name(id='q_mat', ctx=Load())), Assign(targets=[Attribute(value=Name(id='qeom_result', ctx=Load()), attr='w_matrix', ctx=Store())], value=Name(id='w_mat', ctx=Load())), Assign(targets=[Attribute(value=Name(id='qeom_result', ctx=Load()), attr='m_matrix_std', ctx=Store())], value=Name(id='m_mat_std', ctx=Load())), Assign(targets=[Attribute(value=Name(id='qeom_result', ctx=Load()), attr='v_matrix_std', ctx=Store())], value=Name(id='v_mat_std', ctx=Load())), Assign(targets=[Attribute(value=Name(id='qeom_result', ctx=Load()), attr='q_matrix_std', ctx=Store())], value=Name(id='q_mat_std', ctx=Load())), Assign(targets=[Attribute(value=Name(id='qeom_result', ctx=Load()), attr='w_matrix_std', ctx=Store())], value=Name(id='w_mat_std', ctx=Load())), Assign(targets=[Name(id='eigenstate_result', ctx=Store())], value=Call(func=Name(id='EigenstateResult', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='eigenstate_result', ctx=Load()), attr='eigenstates', ctx=Store())], value=Attribute(value=Name(id='groundstate_result', ctx=Load()), attr='eigenstates', ctx=Load())), Assign(targets=[Attribute(value=Name(id='eigenstate_result', ctx=Load()), attr='aux_operator_eigenvalues', ctx=Store())], value=Attribute(value=Name(id='groundstate_result', ctx=Load()), attr='aux_operator_eigenvalues', ctx=Load())), Assign(targets=[Attribute(value=Name(id='eigenstate_result', ctx=Load()), attr='raw_result', ctx=Store())], value=Name(id='qeom_result', ctx=Load())), Assign(targets=[Attribute(value=Name(id='eigenstate_result', ctx=Load()), attr='eigenenergies', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Attribute(value=Name(id='groundstate_result', ctx=Load()), attr='eigenenergies', ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='asarray', ctx=Load()), args=[ListComp(elt=BinOp(left=Subscript(value=Attribute(value=Name(id='groundstate_result', ctx=Load()), attr='eigenenergies', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load()), op=Add(), right=Name(id='gap', ctx=Load())), generators=[comprehension(target=Name(id='gap', ctx=Store()), iter=Name(id='energy_gaps', ctx=Load()), ifs=[], is_async=0)])], keywords=[])], keywords=[])), Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Attribute(value=Name(id='problem', ctx=Load()), attr='interpret', ctx=Load()), args=[Name(id='eigenstate_result', ctx=Load())], keywords=[])), Return(value=Name(id='result', ctx=Load()))], decorator_list=[], returns=Name(id='EigenstateResult', ctx=Load())), FunctionDef(name='_prepare_matrix_operators', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='problem', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Construct the excitation operators for each matrix element.\n\n        Returns:\n            a dictionary of all matrix elements operators and the number of excitations\n            (or the size of the qEOM pseudo-eigenvalue problem)\n        ')), Assign(targets=[Name(id='data', ctx=Store())], value=Call(func=Attribute(value=Name(id='problem', ctx=Load()), attr='hopping_qeom_ops', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_gsc', ctx=Load()), attr='qubit_converter', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_excitations', ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='hopping_operators', ctx=Store()), Name(id='type_of_commutativities', ctx=Store()), Name(id='excitation_indices', ctx=Store())], ctx=Store())], value=Name(id='data', ctx=Load())), Assign(targets=[Name(id='size', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='excitation_indices', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[]), op=FloorDiv(), right=Num(n=2))], keywords=[])), Assign(targets=[Name(id='eom_matrix_operators', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_build_all_commutators', ctx=Load()), args=[Name(id='hopping_operators', ctx=Load()), Name(id='type_of_commutativities', ctx=Load()), Name(id='size', ctx=Load())], keywords=[])), Return(value=Tuple(elts=[Name(id='eom_matrix_operators', ctx=Load()), Name(id='size', ctx=Load())], ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='dict', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load())), ctx=Load())), FunctionDef(name='_build_all_commutators', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='hopping_operators', annotation=Name(id='dict', ctx=Load())), arg(arg='type_of_commutativities', annotation=Name(id='dict', ctx=Load())), arg(arg='size', annotation=Name(id='int', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Building all commutators for Q, W, M, V matrices.\n\n        Args:\n            hopping_operators: all hopping operators based on excitations_list,\n                key is the string of single/double excitation;\n                value is corresponding operator.\n            type_of_commutativities: if tapering is used, it records the commutativities of\n                hopping operators with the\n                Z2 symmetries found in the original operator.\n            size: the number of excitations (size of the qEOM pseudo-eigenvalue problem)\n\n        Returns:\n            a dictionary that contains the operators for each matrix element\n        ')), Assign(targets=[Name(id='all_matrix_operators', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Tuple(elts=[Name(id='mus', ctx=Store()), Name(id='nus', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='triu_indices', ctx=Load()), args=[Name(id='size', ctx=Load())], keywords=[])), FunctionDef(name='_build_one_sector', args=arguments(args=[arg(arg='available_hopping_ops', annotation=None), arg(arg='untapered_op', annotation=None), arg(arg='z2_symmetries', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Assign(targets=[Name(id='to_be_computed_list', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Tuple(elts=[Name(id='idx', ctx=Store()), Name(id='m_u', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='mus', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='n_u', ctx=Store())], value=Subscript(value=Name(id='nus', ctx=Load()), slice=Index(value=Name(id='idx', ctx=Load())), ctx=Load())), Assign(targets=[Name(id='left_op', ctx=Store())], value=Call(func=Attribute(value=Name(id='available_hopping_ops', ctx=Load()), attr='get', ctx=Load()), args=[JoinedStr(values=[Str(s='E_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None)])], keywords=[])), Assign(targets=[Name(id='right_op_1', ctx=Store())], value=Call(func=Attribute(value=Name(id='available_hopping_ops', ctx=Load()), attr='get', ctx=Load()), args=[JoinedStr(values=[Str(s='E_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])], keywords=[])), Assign(targets=[Name(id='right_op_2', ctx=Store())], value=Call(func=Attribute(value=Name(id='available_hopping_ops', ctx=Load()), attr='get', ctx=Load()), args=[JoinedStr(values=[Str(s='Edag_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='to_be_computed_list', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Name(id='m_u', ctx=Load()), Name(id='n_u', ctx=Load()), Name(id='left_op', ctx=Load()), Name(id='right_op_1', ctx=Load()), Name(id='right_op_2', ctx=Load())], ctx=Load())], keywords=[]))], orelse=[]), If(test=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='isEnabledFor', ctx=Load()), args=[Attribute(value=Name(id='logging', ctx=Load()), attr='INFO', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='info', ctx=Load()), args=[Str(s='Building all commutators:')], keywords=[])), Expr(value=Call(func=Name(id='TextProgressBar', ctx=Load()), args=[Attribute(value=Name(id='sys', ctx=Load()), attr='stderr', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='results', ctx=Store())], value=Call(func=Name(id='parallel_map', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_build_commutator_routine', ctx=Load()), Name(id='to_be_computed_list', ctx=Load())], keywords=[keyword(arg='task_args', value=Tuple(elts=[Name(id='untapered_op', ctx=Load()), Name(id='z2_symmetries', ctx=Load())], ctx=Load())), keyword(arg='num_processes', value=Attribute(value=Name(id='algorithm_globals', ctx=Load()), attr='num_processes', ctx=Load()))])), For(target=Name(id='result', ctx=Store()), iter=Name(id='results', ctx=Load()), body=[Assign(targets=[Tuple(elts=[Name(id='m_u', ctx=Store()), Name(id='n_u', ctx=Store()), Name(id='q_mat_op', ctx=Store()), Name(id='w_mat_op', ctx=Store()), Name(id='m_mat_op', ctx=Store()), Name(id='v_mat_op', ctx=Store())], ctx=Store())], value=Name(id='result', ctx=Load())), If(test=Compare(left=Name(id='q_mat_op', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=[Assign(targets=[Subscript(value=Name(id='all_matrix_operators', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='q_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])), ctx=Store())], value=Name(id='q_mat_op', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='w_mat_op', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=[Assign(targets=[Subscript(value=Name(id='all_matrix_operators', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='w_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])), ctx=Store())], value=Name(id='w_mat_op', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='m_mat_op', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=[Assign(targets=[Subscript(value=Name(id='all_matrix_operators', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='m_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])), ctx=Store())], value=Name(id='m_mat_op', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='v_mat_op', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=[Assign(targets=[Subscript(value=Name(id='all_matrix_operators', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='v_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])), ctx=Store())], value=Name(id='v_mat_op', ctx=Load()))], orelse=[])], orelse=[])], decorator_list=[], returns=None), Try(body=[Assign(targets=[Name(id='z2_symmetries', ctx=Store())], value=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_gsc', ctx=Load()), attr='qubit_converter', ctx=Load()), attr='z2symmetries', ctx=Load()))], handlers=[ExceptHandler(type=Name(id='AttributeError', ctx=Load()), name=None, body=[Assign(targets=[Name(id='z2_symmetries', ctx=Store())], value=Call(func=Name(id='Z2Symmetries', ctx=Load()), args=[List(elts=[], ctx=Load()), List(elts=[], ctx=Load()), List(elts=[], ctx=Load())], keywords=[]))])], orelse=[], finalbody=[]), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='z2_symmetries', ctx=Load()), attr='is_empty', ctx=Load()), args=[], keywords=[])), body=[Assign(targets=[Name(id='combinations', ctx=Store())], value=Call(func=Attribute(value=Name(id='itertools', ctx=Load()), attr='product', ctx=Load()), args=[List(elts=[Num(n=1), UnaryOp(op=USub(), operand=Num(n=1))], ctx=Load())], keywords=[keyword(arg='repeat', value=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='z2_symmetries', ctx=Load()), attr='symmetries', ctx=Load())], keywords=[]))])), For(target=Name(id='targeted_tapering_values', ctx=Store()), iter=Name(id='combinations', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='info', ctx=Load()), args=[Str(s='In sector: (%s)'), Call(func=Attribute(value=Str(s=','), attr='join', ctx=Load()), args=[ListComp(elt=Call(func=Name(id='str', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='targeted_tapering_values', ctx=Load()), ifs=[], is_async=0)])], keywords=[])], keywords=[])), Assign(targets=[Name(id='available_hopping_ops', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='targeted_sector', ctx=Store())], value=Compare(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='asarray', ctx=Load()), args=[Name(id='targeted_tapering_values', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Num(n=1)])), For(target=Tuple(elts=[Name(id='key', ctx=Store()), Name(id='value', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='type_of_commutativities', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Name(id='value', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='asarray', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[])), If(test=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='all', ctx=Load()), args=[Compare(left=Name(id='value', ctx=Load()), ops=[Eq()], comparators=[Name(id='targeted_sector', ctx=Load())])], keywords=[]), body=[Assign(targets=[Subscript(value=Name(id='available_hopping_ops', ctx=Load()), slice=Index(value=Name(id='key', ctx=Load())), ctx=Store())], value=Subscript(value=Name(id='hopping_operators', ctx=Load()), slice=Index(value=Name(id='key', ctx=Load())), ctx=Load()))], orelse=[])], orelse=[]), Expr(value=Call(func=Name(id='_build_one_sector', ctx=Load()), args=[Name(id='available_hopping_ops', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_untapered_qubit_op_main', ctx=Load()), Name(id='z2_symmetries', ctx=Load())], keywords=[]))], orelse=[])], orelse=[Expr(value=Call(func=Name(id='_build_one_sector', ctx=Load()), args=[Name(id='hopping_operators', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_untapered_qubit_op_main', ctx=Load()), Name(id='z2_symmetries', ctx=Load())], keywords=[]))]), Return(value=Name(id='all_matrix_operators', ctx=Load()))], decorator_list=[], returns=Name(id='dict', ctx=Load())), FunctionDef(name='_build_commutator_routine', args=arguments(args=[arg(arg='params', annotation=Name(id='List', ctx=Load())), arg(arg='operator', annotation=Name(id='PauliSumOp', ctx=Load())), arg(arg='z2_symmetries', annotation=Name(id='Z2Symmetries', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Numerically computes the commutator / double commutator between operators.\n\n        Args:\n            params: list containing the indices of matrix element and the corresponding\n                excitation operators\n            operator: the hamiltonian\n            z2_symmetries: z2_symmetries in case of tapering\n\n        Returns:\n            The indices of the matrix element and the corresponding qubit\n            operator for each of the EOM matrices\n        ')), Assign(targets=[Tuple(elts=[Name(id='m_u', ctx=Store()), Name(id='n_u', ctx=Store()), Name(id='left_op', ctx=Store()), Name(id='right_op_1', ctx=Store()), Name(id='right_op_2', ctx=Store())], ctx=Store())], value=Name(id='params', ctx=Load())), If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='left_op', ctx=Load()), ops=[Is()], comparators=[NameConstant(value=None)]), BoolOp(op=And(), values=[Compare(left=Name(id='right_op_1', ctx=Load()), ops=[Is()], comparators=[NameConstant(value=None)]), Compare(left=Name(id='right_op_2', ctx=Load()), ops=[Is()], comparators=[NameConstant(value=None)])])]), body=[Assign(targets=[Name(id='q_mat_op', ctx=Store())], value=NameConstant(value=None)), Assign(targets=[Name(id='w_mat_op', ctx=Store())], value=NameConstant(value=None)), Assign(targets=[Name(id='m_mat_op', ctx=Store())], value=NameConstant(value=None)), Assign(targets=[Name(id='v_mat_op', ctx=Store())], value=NameConstant(value=None))], orelse=[If(test=Compare(left=Name(id='right_op_1', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=[Assign(targets=[Name(id='q_mat_op', ctx=Store())], value=Call(func=Name(id='double_commutator', ctx=Load()), args=[Name(id='left_op', ctx=Load()), Name(id='operator', ctx=Load()), Name(id='right_op_1', ctx=Load())], keywords=[keyword(arg='sign', value=NameConstant(value=False))])), Assign(targets=[Name(id='w_mat_op', ctx=Store())], value=Call(func=Name(id='commutator', ctx=Load()), args=[Name(id='left_op', ctx=Load()), Name(id='right_op_1', ctx=Load())], keywords=[])), Assign(targets=[Name(id='q_mat_op', ctx=Store())], value=IfExp(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='q_mat_op', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Num(n=0)]), body=NameConstant(value=None), orelse=Name(id='q_mat_op', ctx=Load()))), Assign(targets=[Name(id='w_mat_op', ctx=Store())], value=IfExp(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='w_mat_op', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Num(n=0)]), body=NameConstant(value=None), orelse=Name(id='w_mat_op', ctx=Load())))], orelse=[Assign(targets=[Name(id='q_mat_op', ctx=Store())], value=NameConstant(value=None)), Assign(targets=[Name(id='w_mat_op', ctx=Store())], value=NameConstant(value=None))]), If(test=Compare(left=Name(id='right_op_2', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=[Assign(targets=[Name(id='m_mat_op', ctx=Store())], value=Call(func=Name(id='double_commutator', ctx=Load()), args=[Name(id='left_op', ctx=Load()), Name(id='operator', ctx=Load()), Name(id='right_op_2', ctx=Load())], keywords=[keyword(arg='sign', value=NameConstant(value=False))])), Assign(targets=[Name(id='v_mat_op', ctx=Store())], value=Call(func=Name(id='commutator', ctx=Load()), args=[Name(id='left_op', ctx=Load()), Name(id='right_op_2', ctx=Load())], keywords=[])), Assign(targets=[Name(id='m_mat_op', ctx=Store())], value=IfExp(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='m_mat_op', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Num(n=0)]), body=NameConstant(value=None), orelse=Name(id='m_mat_op', ctx=Load()))), Assign(targets=[Name(id='v_mat_op', ctx=Store())], value=IfExp(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='v_mat_op', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Num(n=0)]), body=NameConstant(value=None), orelse=Name(id='v_mat_op', ctx=Load())))], orelse=[Assign(targets=[Name(id='m_mat_op', ctx=Store())], value=NameConstant(value=None)), Assign(targets=[Name(id='v_mat_op', ctx=Store())], value=NameConstant(value=None))]), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='z2_symmetries', ctx=Load()), attr='is_empty', ctx=Load()), args=[], keywords=[])), body=[If(test=BoolOp(op=And(), values=[Compare(left=Name(id='q_mat_op', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='q_mat_op', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Num(n=0)])]), body=[Assign(targets=[Name(id='q_mat_op', ctx=Store())], value=Call(func=Attribute(value=Name(id='z2_symmetries', ctx=Load()), attr='taper', ctx=Load()), args=[Name(id='q_mat_op', ctx=Load())], keywords=[]))], orelse=[]), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='w_mat_op', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='w_mat_op', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Num(n=0)])]), body=[Assign(targets=[Name(id='w_mat_op', ctx=Store())], value=Call(func=Attribute(value=Name(id='z2_symmetries', ctx=Load()), attr='taper', ctx=Load()), args=[Name(id='w_mat_op', ctx=Load())], keywords=[]))], orelse=[]), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='m_mat_op', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='m_mat_op', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Num(n=0)])]), body=[Assign(targets=[Name(id='m_mat_op', ctx=Store())], value=Call(func=Attribute(value=Name(id='z2_symmetries', ctx=Load()), attr='taper', ctx=Load()), args=[Name(id='m_mat_op', ctx=Load())], keywords=[]))], orelse=[]), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='v_mat_op', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='v_mat_op', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Num(n=0)])]), body=[Assign(targets=[Name(id='v_mat_op', ctx=Store())], value=Call(func=Attribute(value=Name(id='z2_symmetries', ctx=Load()), attr='taper', ctx=Load()), args=[Name(id='v_mat_op', ctx=Load())], keywords=[]))], orelse=[])], orelse=[])]), Return(value=Tuple(elts=[Name(id='m_u', ctx=Load()), Name(id='n_u', ctx=Load()), Name(id='q_mat_op', ctx=Load()), Name(id='w_mat_op', ctx=Load()), Name(id='m_mat_op', ctx=Load()), Name(id='v_mat_op', ctx=Load())], ctx=Load()))], decorator_list=[Name(id='staticmethod', ctx=Load())], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='int', ctx=Load()), Name(id='PauliSumOp', ctx=Load()), Name(id='PauliSumOp', ctx=Load()), Name(id='PauliSumOp', ctx=Load()), Name(id='PauliSumOp', ctx=Load())], ctx=Load())), ctx=Load())), FunctionDef(name='_build_eom_matrices', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='gs_results', annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='float', ctx=Load())), ctx=Load())], ctx=Load())), ctx=Load())), arg(arg='size', annotation=Name(id='int', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Constructs the M, V, Q and W matrices from the results on the ground state\n\n        Args:\n            gs_results: a ground state result object\n            size: size of eigenvalue problem\n\n        Returns:\n            the matrices and their standard deviation\n        ')), Assign(targets=[Tuple(elts=[Name(id='mus', ctx=Store()), Name(id='nus', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='triu_indices', ctx=Load()), args=[Name(id='size', ctx=Load())], keywords=[])), Assign(targets=[Name(id='m_mat', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='zeros', ctx=Load()), args=[Tuple(elts=[Name(id='size', ctx=Load()), Name(id='size', ctx=Load())], ctx=Load())], keywords=[keyword(arg='dtype', value=Name(id='complex', ctx=Load()))])), Assign(targets=[Name(id='v_mat', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='zeros', ctx=Load()), args=[Tuple(elts=[Name(id='size', ctx=Load()), Name(id='size', ctx=Load())], ctx=Load())], keywords=[keyword(arg='dtype', value=Name(id='complex', ctx=Load()))])), Assign(targets=[Name(id='q_mat', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='zeros', ctx=Load()), args=[Tuple(elts=[Name(id='size', ctx=Load()), Name(id='size', ctx=Load())], ctx=Load())], keywords=[keyword(arg='dtype', value=Name(id='complex', ctx=Load()))])), Assign(targets=[Name(id='w_mat', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='zeros', ctx=Load()), args=[Tuple(elts=[Name(id='size', ctx=Load()), Name(id='size', ctx=Load())], ctx=Load())], keywords=[keyword(arg='dtype', value=Name(id='complex', ctx=Load()))])), Assign(targets=[Tuple(elts=[Name(id='m_mat_std', ctx=Store()), Name(id='v_mat_std', ctx=Store()), Name(id='q_mat_std', ctx=Store()), Name(id='w_mat_std', ctx=Store())], ctx=Store())], value=Tuple(elts=[Num(n=0.0), Num(n=0.0), Num(n=0.0), Num(n=0.0)], ctx=Load())), For(target=Tuple(elts=[Name(id='idx', ctx=Store()), Name(id='m_u', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='mus', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='n_u', ctx=Store())], value=Subscript(value=Name(id='nus', ctx=Load()), slice=Index(value=Name(id='idx', ctx=Load())), ctx=Load())), Assign(targets=[Subscript(value=Subscript(value=Name(id='q_mat', ctx=Load()), slice=Index(value=Name(id='m_u', ctx=Load())), ctx=Load()), slice=Index(value=Name(id='n_u', ctx=Load())), ctx=Store())], value=IfExp(test=Compare(left=Call(func=Attribute(value=Name(id='gs_results', ctx=Load()), attr='get', ctx=Load()), args=[JoinedStr(values=[Str(s='q_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])], keywords=[]), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=Subscript(value=Subscript(value=Name(id='gs_results', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='q_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])), ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load()), orelse=Subscript(value=Subscript(value=Name(id='q_mat', ctx=Load()), slice=Index(value=Name(id='m_u', ctx=Load())), ctx=Load()), slice=Index(value=Name(id='n_u', ctx=Load())), ctx=Load()))), Assign(targets=[Subscript(value=Subscript(value=Name(id='w_mat', ctx=Load()), slice=Index(value=Name(id='m_u', ctx=Load())), ctx=Load()), slice=Index(value=Name(id='n_u', ctx=Load())), ctx=Store())], value=IfExp(test=Compare(left=Call(func=Attribute(value=Name(id='gs_results', ctx=Load()), attr='get', ctx=Load()), args=[JoinedStr(values=[Str(s='w_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])], keywords=[]), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=Subscript(value=Subscript(value=Name(id='gs_results', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='w_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])), ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load()), orelse=Subscript(value=Subscript(value=Name(id='w_mat', ctx=Load()), slice=Index(value=Name(id='m_u', ctx=Load())), ctx=Load()), slice=Index(value=Name(id='n_u', ctx=Load())), ctx=Load()))), Assign(targets=[Subscript(value=Subscript(value=Name(id='m_mat', ctx=Load()), slice=Index(value=Name(id='m_u', ctx=Load())), ctx=Load()), slice=Index(value=Name(id='n_u', ctx=Load())), ctx=Store())], value=IfExp(test=Compare(left=Call(func=Attribute(value=Name(id='gs_results', ctx=Load()), attr='get', ctx=Load()), args=[JoinedStr(values=[Str(s='m_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])], keywords=[]), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=Subscript(value=Subscript(value=Name(id='gs_results', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='m_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])), ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load()), orelse=Subscript(value=Subscript(value=Name(id='m_mat', ctx=Load()), slice=Index(value=Name(id='m_u', ctx=Load())), ctx=Load()), slice=Index(value=Name(id='n_u', ctx=Load())), ctx=Load()))), Assign(targets=[Subscript(value=Subscript(value=Name(id='v_mat', ctx=Load()), slice=Index(value=Name(id='m_u', ctx=Load())), ctx=Load()), slice=Index(value=Name(id='n_u', ctx=Load())), ctx=Store())], value=IfExp(test=Compare(left=Call(func=Attribute(value=Name(id='gs_results', ctx=Load()), attr='get', ctx=Load()), args=[JoinedStr(values=[Str(s='v_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])], keywords=[]), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=Subscript(value=Subscript(value=Name(id='gs_results', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='v_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])), ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load()), orelse=Subscript(value=Subscript(value=Name(id='v_mat', ctx=Load()), slice=Index(value=Name(id='m_u', ctx=Load())), ctx=Load()), slice=Index(value=Name(id='n_u', ctx=Load())), ctx=Load()))), AugAssign(target=Name(id='q_mat_std', ctx=Store()), op=Add(), value=IfExp(test=Compare(left=Call(func=Attribute(value=Name(id='gs_results', ctx=Load()), attr='get', ctx=Load()), args=[JoinedStr(values=[Str(s='q_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_std')])], keywords=[]), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=Subscript(value=Subscript(value=Name(id='gs_results', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='q_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_std')])), ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load()), orelse=Num(n=0))), AugAssign(target=Name(id='w_mat_std', ctx=Store()), op=Add(), value=IfExp(test=Compare(left=Call(func=Attribute(value=Name(id='gs_results', ctx=Load()), attr='get', ctx=Load()), args=[JoinedStr(values=[Str(s='w_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_std')])], keywords=[]), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=Subscript(value=Subscript(value=Name(id='gs_results', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='w_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_std')])), ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load()), orelse=Num(n=0))), AugAssign(target=Name(id='m_mat_std', ctx=Store()), op=Add(), value=IfExp(test=Compare(left=Call(func=Attribute(value=Name(id='gs_results', ctx=Load()), attr='get', ctx=Load()), args=[JoinedStr(values=[Str(s='m_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_std')])], keywords=[]), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=Subscript(value=Subscript(value=Name(id='gs_results', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='m_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_std')])), ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load()), orelse=Num(n=0))), AugAssign(target=Name(id='v_mat_std', ctx=Store()), op=Add(), value=IfExp(test=Compare(left=Call(func=Attribute(value=Name(id='gs_results', ctx=Load()), attr='get', ctx=Load()), args=[JoinedStr(values=[Str(s='v_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_std')])], keywords=[]), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=Subscript(value=Subscript(value=Name(id='gs_results', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='v_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_std')])), ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load()), orelse=Num(n=0)))], orelse=[]), Assign(targets=[Name(id='q_mat', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='q_mat', ctx=Load()), op=Add(), right=Attribute(value=Name(id='q_mat', ctx=Load()), attr='T', ctx=Load())), op=Sub(), right=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='identity', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='q_mat', ctx=Load()), attr='shape', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())], keywords=[]), op=Mult(), right=Name(id='q_mat', ctx=Load())))), Assign(targets=[Name(id='w_mat', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='w_mat', ctx=Load()), op=Add(), right=Attribute(value=Name(id='w_mat', ctx=Load()), attr='T', ctx=Load())), op=Sub(), right=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='identity', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='w_mat', ctx=Load()), attr='shape', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())], keywords=[]), op=Mult(), right=Name(id='w_mat', ctx=Load())))), Assign(targets=[Name(id='m_mat', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='m_mat', ctx=Load()), op=Add(), right=Attribute(value=Name(id='m_mat', ctx=Load()), attr='T', ctx=Load())), op=Sub(), right=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='identity', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='m_mat', ctx=Load()), attr='shape', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())], keywords=[]), op=Mult(), right=Name(id='m_mat', ctx=Load())))), Assign(targets=[Name(id='v_mat', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='v_mat', ctx=Load()), op=Add(), right=Attribute(value=Name(id='v_mat', ctx=Load()), attr='T', ctx=Load())), op=Sub(), right=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='identity', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='v_mat', ctx=Load()), attr='shape', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())], keywords=[]), op=Mult(), right=Name(id='v_mat', ctx=Load())))), Assign(targets=[Name(id='q_mat', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='real', ctx=Load()), args=[Name(id='q_mat', ctx=Load())], keywords=[])), Assign(targets=[Name(id='w_mat', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='real', ctx=Load()), args=[Name(id='w_mat', ctx=Load())], keywords=[])), Assign(targets=[Name(id='m_mat', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='real', ctx=Load()), args=[Name(id='m_mat', ctx=Load())], keywords=[])), Assign(targets=[Name(id='v_mat', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='real', ctx=Load()), args=[Name(id='v_mat', ctx=Load())], keywords=[])), Assign(targets=[Name(id='q_mat_std', ctx=Store())], value=BinOp(left=Name(id='q_mat_std', ctx=Load()), op=Div(), right=Call(func=Name(id='float', ctx=Load()), args=[BinOp(left=Name(id='size', ctx=Load()), op=Pow(), right=Num(n=2))], keywords=[]))), Assign(targets=[Name(id='w_mat_std', ctx=Store())], value=BinOp(left=Name(id='w_mat_std', ctx=Load()), op=Div(), right=Call(func=Name(id='float', ctx=Load()), args=[BinOp(left=Name(id='size', ctx=Load()), op=Pow(), right=Num(n=2))], keywords=[]))), Assign(targets=[Name(id='m_mat_std', ctx=Store())], value=BinOp(left=Name(id='m_mat_std', ctx=Load()), op=Div(), right=Call(func=Name(id='float', ctx=Load()), args=[BinOp(left=Name(id='size', ctx=Load()), op=Pow(), right=Num(n=2))], keywords=[]))), Assign(targets=[Name(id='v_mat_std', ctx=Store())], value=BinOp(left=Name(id='v_mat_std', ctx=Load()), op=Div(), right=Call(func=Name(id='float', ctx=Load()), args=[BinOp(left=Name(id='size', ctx=Load()), op=Pow(), right=Num(n=2))], keywords=[]))), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Str(s='\nQ:=========================\n%s'), Name(id='q_mat', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Str(s='\nW:=========================\n%s'), Name(id='w_mat', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Str(s='\nM:=========================\n%s'), Name(id='m_mat', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Str(s='\nV:=========================\n%s'), Name(id='v_mat', ctx=Load())], keywords=[])), Return(value=Tuple(elts=[Name(id='m_mat', ctx=Load()), Name(id='v_mat', ctx=Load()), Name(id='q_mat', ctx=Load()), Name(id='w_mat', ctx=Load()), Name(id='m_mat_std', ctx=Load()), Name(id='v_mat_std', ctx=Load()), Name(id='q_mat_std', ctx=Load()), Name(id='w_mat_std', ctx=Load())], ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Index(value=Tuple(elts=[Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Name(id='float', ctx=Load()), Name(id='float', ctx=Load()), Name(id='float', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load())), ctx=Load())), FunctionDef(name='_compute_excitation_energies', args=arguments(args=[arg(arg='m_mat', annotation=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), arg(arg='v_mat', annotation=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), arg(arg='q_mat', annotation=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), arg(arg='w_mat', annotation=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Diagonalizing M, V, Q, W matrices for excitation energies.\n\n        Args:\n            m_mat : M matrices\n            v_mat : V matrices\n            q_mat : Q matrices\n            w_mat : W matrices\n\n        Returns:\n            1-D vector stores all energy gap to reference state\n            2-D array storing the X and Y expansion coefficients\n        ')), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Str(s='Diagonalizing qeom matrices for excited states...')], keywords=[])), Assign(targets=[Name(id='a_mat', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='np', ctx=Load()), attr='matrixlib', ctx=Load()), attr='bmat', ctx=Load()), args=[List(elts=[List(elts=[Name(id='m_mat', ctx=Load()), Name(id='q_mat', ctx=Load())], ctx=Load()), List(elts=[Call(func=Attribute(value=Attribute(value=Name(id='q_mat', ctx=Load()), attr='T', ctx=Load()), attr='conj', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Attribute(value=Name(id='m_mat', ctx=Load()), attr='T', ctx=Load()), attr='conj', ctx=Load()), args=[], keywords=[])], ctx=Load())], ctx=Load())], keywords=[])), Assign(targets=[Name(id='b_mat', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='np', ctx=Load()), attr='matrixlib', ctx=Load()), attr='bmat', ctx=Load()), args=[List(elts=[List(elts=[Name(id='v_mat', ctx=Load()), Name(id='w_mat', ctx=Load())], ctx=Load()), List(elts=[UnaryOp(op=USub(), operand=Call(func=Attribute(value=Attribute(value=Name(id='w_mat', ctx=Load()), attr='T', ctx=Load()), attr='conj', ctx=Load()), args=[], keywords=[])), UnaryOp(op=USub(), operand=Call(func=Attribute(value=Attribute(value=Name(id='v_mat', ctx=Load()), attr='T', ctx=Load()), attr='conj', ctx=Load()), args=[], keywords=[]))], ctx=Load())], ctx=Load())], keywords=[])), Assign(targets=[Name(id='res', ctx=Store())], value=Call(func=Attribute(value=Name(id='linalg', ctx=Load()), attr='eig', ctx=Load()), args=[Name(id='a_mat', ctx=Load()), Name(id='b_mat', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Subscript(value=Name(id='res', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load()), slice=Index(value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='isnan', ctx=Load()), args=[Subscript(value=Name(id='res', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())], keywords=[])], keywords=[])), ctx=Store())], value=Num(n=0.0)), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Str(s='... %s'), Subscript(value=Name(id='res', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())], keywords=[])), Assign(targets=[Name(id='w', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sort', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='real', ctx=Load()), args=[Subscript(value=Name(id='res', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Str(s='Sorted real parts %s'), Name(id='w', ctx=Load())], keywords=[])), Assign(targets=[Name(id='w', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='abs', ctx=Load()), args=[Subscript(value=Name(id='w', ctx=Load()), slice=Slice(lower=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='w', ctx=Load())], keywords=[]), op=FloorDiv(), right=Num(n=2)), upper=None, step=None), ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Name(id='w', ctx=Load()), slice=Index(value=Compare(left=Name(id='w', ctx=Load()), ops=[Lt()], comparators=[Num(n=1e-06)])), ctx=Store())], value=Num(n=0)), Assign(targets=[Name(id='excitation_energies_gap', ctx=Store())], value=Name(id='w', ctx=Load())), Return(value=Tuple(elts=[Name(id='excitation_energies_gap', ctx=Load()), Subscript(value=Name(id='res', ctx=Load()), slice=Index(value=Num(n=1)), ctx=Load())], ctx=Load()))], decorator_list=[Name(id='staticmethod', ctx=Load())], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Index(value=Tuple(elts=[Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())], ctx=Load())), ctx=Load()))], decorator_list=[]), ClassDef(name='QEOMResult', bases=[Name(id='AlgorithmResult', ctx=Load())], keywords=[], body=[Expr(value=Str(s='The results class for the QEOM algorithm.')), FunctionDef(name='__init__', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_ground_state_raw_result', ctx=Store())], value=NameConstant(value=None)), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_excitation_energies', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), ctx=Load()), value=NameConstant(value=None), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_expansion_coefficients', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), ctx=Load()), value=NameConstant(value=None), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_m_matrix', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), ctx=Load()), value=NameConstant(value=None), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_v_matrix', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), ctx=Load()), value=NameConstant(value=None), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_q_matrix', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), ctx=Load()), value=NameConstant(value=None), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_w_matrix', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), ctx=Load()), value=NameConstant(value=None), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_v_matrix_std', ctx=Store()), annotation=Name(id='float', ctx=Load()), value=Num(n=0.0), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_q_matrix_std', ctx=Store()), annotation=Name(id='float', ctx=Load()), value=Num(n=0.0), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_w_matrix_std', ctx=Store()), annotation=Name(id='float', ctx=Load()), value=Num(n=0.0), simple=0)], decorator_list=[], returns=NameConstant(value=None)), FunctionDef(name='ground_state_raw_result', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='returns ground state raw result')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_ground_state_raw_result', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=None), FunctionDef(name='ground_state_raw_result', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='value', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='sets ground state raw result')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_ground_state_raw_result', ctx=Store())], value=Name(id='value', ctx=Load()))], decorator_list=[Attribute(value=Name(id='ground_state_raw_result', ctx=Load()), attr='setter', ctx=Load())], returns=NameConstant(value=None)), FunctionDef(name='excitation_energies', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='returns the excitation energies (energy gaps)')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_excitation_energies', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), ctx=Load())), FunctionDef(name='excitation_energies', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='value', annotation=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='sets the excitation energies (energy gaps)')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_excitation_energies', ctx=Store())], value=Name(id='value', ctx=Load()))], decorator_list=[Attribute(value=Name(id='excitation_energies', ctx=Load()), attr='setter', ctx=Load())], returns=NameConstant(value=None)), FunctionDef(name='expansion_coefficients', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='returns the X and Y expansion coefficients')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_expansion_coefficients', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), ctx=Load())), FunctionDef(name='expansion_coefficients', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='value', annotation=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='sets the X and Y expansion coefficients')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_expansion_coefficients', ctx=Store())], value=Name(id='value', ctx=Load()))], decorator_list=[Attribute(value=Name(id='expansion_coefficients', ctx=Load()), attr='setter', ctx=Load())], returns=NameConstant(value=None)), FunctionDef(name='m_matrix', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='returns the M matrix')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_m_matrix', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), ctx=Load())), FunctionDef(name='m_matrix', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='value', annotation=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='sets the M matrix')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_m_matrix', ctx=Store())], value=Name(id='value', ctx=Load()))], decorator_list=[Attribute(value=Name(id='m_matrix', ctx=Load()), attr='setter', ctx=Load())], returns=NameConstant(value=None)), FunctionDef(name='v_matrix', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='returns the V matrix')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_v_matrix', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), ctx=Load())), FunctionDef(name='v_matrix', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='value', annotation=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='sets the V matrix')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_v_matrix', ctx=Store())], value=Name(id='value', ctx=Load()))], decorator_list=[Attribute(value=Name(id='v_matrix', ctx=Load()), attr='setter', ctx=Load())], returns=NameConstant(value=None)), FunctionDef(name='q_matrix', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='returns the Q matrix')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_q_matrix', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), ctx=Load())), FunctionDef(name='q_matrix', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='value', annotation=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='sets the Q matrix')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_q_matrix', ctx=Store())], value=Name(id='value', ctx=Load()))], decorator_list=[Attribute(value=Name(id='q_matrix', ctx=Load()), attr='setter', ctx=Load())], returns=NameConstant(value=None)), FunctionDef(name='w_matrix', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='returns the W matrix')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_w_matrix', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), ctx=Load())), FunctionDef(name='w_matrix', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='value', annotation=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='sets the W matrix')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_w_matrix', ctx=Store())], value=Name(id='value', ctx=Load()))], decorator_list=[Attribute(value=Name(id='w_matrix', ctx=Load()), attr='setter', ctx=Load())], returns=NameConstant(value=None)), FunctionDef(name='m_matrix_std', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='returns the M matrix standard deviation')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_m_matrix_std', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='float', ctx=Load())), FunctionDef(name='m_matrix_std', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='value', annotation=Name(id='float', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='sets the M matrix standard deviation')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_m_matrix_std', ctx=Store())], value=Name(id='value', ctx=Load()))], decorator_list=[Attribute(value=Name(id='m_matrix_std', ctx=Load()), attr='setter', ctx=Load())], returns=NameConstant(value=None)), FunctionDef(name='v_matrix_std', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='returns the V matrix standard deviation')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_v_matrix_std', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='float', ctx=Load())), FunctionDef(name='v_matrix_std', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='value', annotation=Name(id='float', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='sets the V matrix standard deviation')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_v_matrix_std', ctx=Store())], value=Name(id='value', ctx=Load()))], decorator_list=[Attribute(value=Name(id='v_matrix_std', ctx=Load()), attr='setter', ctx=Load())], returns=NameConstant(value=None)), FunctionDef(name='q_matrix_std', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='returns the Q matrix standard deviation')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_q_matrix_std', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='float', ctx=Load())), FunctionDef(name='q_matrix_std', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='value', annotation=Name(id='float', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='sets the Q matrix standard deviation')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_q_matrix_std', ctx=Store())], value=Name(id='value', ctx=Load()))], decorator_list=[Attribute(value=Name(id='q_matrix_std', ctx=Load()), attr='setter', ctx=Load())], returns=NameConstant(value=None)), FunctionDef(name='w_matrix_std', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='returns the W matrix standard deviation')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_w_matrix_std', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='float', ctx=Load())), FunctionDef(name='w_matrix_std', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='value', annotation=Name(id='float', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='sets the W matrix standard deviation')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_w_matrix_std', ctx=Store())], value=Name(id='value', ctx=Load()))], decorator_list=[Attribute(value=Name(id='w_matrix_std', ctx=Load()), attr='setter', ctx=Load())], returns=NameConstant(value=None))], decorator_list=[])])
Expr(value=Str(s='The calculation of excited states via the qEOM algorithm'))
ImportFrom(module='typing', names=[alias(name='List', asname=None), alias(name='Union', asname=None), alias(name='Optional', asname=None), alias(name='Tuple', asname=None), alias(name='Dict', asname=None), alias(name='cast', asname=None)], level=0)
Import(names=[alias(name='itertools', asname=None)])
Import(names=[alias(name='logging', asname=None)])
Import(names=[alias(name='sys', asname=None)])
Import(names=[alias(name='numpy', asname='np')])
ImportFrom(module='scipy', names=[alias(name='linalg', asname=None)], level=0)
ImportFrom(module='qiskit.tools', names=[alias(name='parallel_map', asname=None)], level=0)
ImportFrom(module='qiskit.tools.events', names=[alias(name='TextProgressBar', asname=None)], level=0)
ImportFrom(module='qiskit.utils', names=[alias(name='algorithm_globals', asname=None)], level=0)
ImportFrom(module='qiskit.algorithms', names=[alias(name='AlgorithmResult', asname=None)], level=0)
ImportFrom(module='qiskit.opflow', names=[alias(name='Z2Symmetries', asname=None), alias(name='commutator', asname=None), alias(name='double_commutator', asname=None), alias(name='PauliSumOp', asname=None)], level=0)
ImportFrom(module='qiskit_nature', names=[alias(name='ListOrDictType', asname=None)], level=0)
ImportFrom(module='qiskit_nature.operators.second_quantization', names=[alias(name='SecondQuantizedOp', asname=None)], level=0)
ImportFrom(module='qiskit_nature.problems.second_quantization', names=[alias(name='BaseProblem', asname=None)], level=0)
ImportFrom(module='qiskit_nature.results', names=[alias(name='EigenstateResult', asname=None)], level=0)
ImportFrom(module='excited_states_solver', names=[alias(name='ExcitedStatesSolver', asname=None)], level=1)
ImportFrom(module='ground_state_solvers', names=[alias(name='GroundStateSolver', asname=None)], level=2)
Assign(targets=[Name(id='logger', ctx=Store())], value=Call(func=Attribute(value=Name(id='logging', ctx=Load()), attr='getLogger', ctx=Load()), args=[Name(id='__name__', ctx=Load())], keywords=[]))
ClassDef(name='QEOM', bases=[Name(id='ExcitedStatesSolver', ctx=Load())], keywords=[], body=[Expr(value=Str(s='The calculation of excited states via the qEOM algorithm')), FunctionDef(name='__init__', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='ground_state_solver', annotation=Name(id='GroundStateSolver', ctx=Load())), arg(arg='excitations', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='int', ctx=Load())), ctx=Load())), ctx=Load())], ctx=Load())), ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[Str(s='sd')]), body=[Expr(value=Str(s="\n        Args:\n            ground_state_solver: a GroundStateSolver object. The qEOM algorithm\n                will use this ground state to compute the EOM matrix elements\n            excitations: The excitations to be included in the eom pseudo-eigenvalue problem.\n                If a string ('s', 'd' or 'sd') then all excitations of the given type will be used.\n                Otherwise a list of custom excitations can directly be provided.\n        ")), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_gsc', ctx=Store())], value=Name(id='ground_state_solver', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='excitations', ctx=Store())], value=Name(id='excitations', ctx=Load())), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_untapered_qubit_op_main', ctx=Store()), annotation=Name(id='PauliSumOp', ctx=Load()), value=NameConstant(value=None), simple=0)], decorator_list=[], returns=NameConstant(value=None)), FunctionDef(name='excitations', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Returns the excitations to be included in the eom pseudo-eigenvalue problem.')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_excitations', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='int', ctx=Load())), ctx=Load())), ctx=Load())], ctx=Load())), ctx=Load())), FunctionDef(name='excitations', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='excitations', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='int', ctx=Load())), ctx=Load())), ctx=Load())], ctx=Load())), ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='The excitations to be included in the eom pseudo-eigenvalue problem. If a string then\n        all excitations of given type will be used. Otherwise a list of custom excitations can\n        directly be provided.')), If(test=BoolOp(op=And(), values=[Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='excitations', ctx=Load()), Name(id='str', ctx=Load())], keywords=[]), Compare(left=Name(id='excitations', ctx=Load()), ops=[NotIn()], comparators=[List(elts=[Str(s='s'), Str(s='d'), Str(s='sd')], ctx=Load())])]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Str(s='Excitation type must be s (singles), d (doubles) or sd (singles and doubles)')], keywords=[]), cause=None)], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_excitations', ctx=Store())], value=Name(id='excitations', ctx=Load()))], decorator_list=[Attribute(value=Name(id='excitations', ctx=Load()), attr='setter', ctx=Load())], returns=NameConstant(value=None)), FunctionDef(name='solver', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Return(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_gsc', ctx=Load()), attr='solver', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=None), FunctionDef(name='get_qubit_operators', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='problem', annotation=Name(id='BaseProblem', ctx=Load())), arg(arg='aux_operators', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Subscript(value=Name(id='ListOrDictType', ctx=Load()), slice=Index(value=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='SecondQuantizedOp', ctx=Load()), Name(id='PauliSumOp', ctx=Load())], ctx=Load())), ctx=Load())), ctx=Load())), ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[NameConstant(value=None)]), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_gsc', ctx=Load()), attr='get_qubit_operators', ctx=Load()), args=[Name(id='problem', ctx=Load()), Name(id='aux_operators', ctx=Load())], keywords=[]))], decorator_list=[], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='PauliSumOp', ctx=Load()), Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Subscript(value=Name(id='ListOrDictType', ctx=Load()), slice=Index(value=Name(id='PauliSumOp', ctx=Load())), ctx=Load())), ctx=Load())], ctx=Load())), ctx=Load())), FunctionDef(name='solve', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='problem', annotation=Name(id='BaseProblem', ctx=Load())), arg(arg='aux_operators', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Subscript(value=Name(id='ListOrDictType', ctx=Load()), slice=Index(value=Name(id='SecondQuantizedOp', ctx=Load())), ctx=Load())), ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[NameConstant(value=None)]), body=[Expr(value=Str(s='Run the excited-states calculation.\n\n        Construct and solves the EOM pseudo-eigenvalue problem to obtain the excitation energies\n        and the excitation operators expansion coefficients.\n\n        Args:\n            problem: a class encoding a problem to be solved.\n            aux_operators: Additional auxiliary operators to evaluate.\n\n        Returns:\n            An interpreted :class:`~.EigenstateResult`. For more information see also\n            :meth:`~.BaseProblem.interpret`.\n        ')), If(test=Compare(left=Name(id='aux_operators', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='warning', ctx=Load()), args=[Str(s='With qEOM the auxiliary operators can currently only be evaluated on the ground state.')], keywords=[]))], orelse=[]), Assign(targets=[Name(id='groundstate_result', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_gsc', ctx=Load()), attr='solve', ctx=Load()), args=[Name(id='problem', ctx=Load()), Name(id='aux_operators', ctx=Load())], keywords=[])), Assign(targets=[Name(id='second_q_ops', ctx=Store())], value=Call(func=Attribute(value=Name(id='problem', ctx=Load()), attr='second_q_ops', ctx=Load()), args=[], keywords=[])), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='second_q_ops', ctx=Load()), Name(id='list', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='main_second_q_op', ctx=Store())], value=Subscript(value=Name(id='second_q_ops', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load()))], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='second_q_ops', ctx=Load()), Name(id='dict', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='main_second_q_op', ctx=Store())], value=Call(func=Attribute(value=Name(id='second_q_ops', ctx=Load()), attr='pop', ctx=Load()), args=[Attribute(value=Name(id='problem', ctx=Load()), attr='main_property_name', ctx=Load())], keywords=[]))], orelse=[])]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_untapered_qubit_op_main', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_gsc', ctx=Load()), attr='qubit_converter', ctx=Load()), attr='convert_only', ctx=Load()), args=[Name(id='main_second_q_op', ctx=Load()), Attribute(value=Name(id='problem', ctx=Load()), attr='num_particles', ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='matrix_operators_dict', ctx=Store()), Name(id='size', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_prepare_matrix_operators', ctx=Load()), args=[Name(id='problem', ctx=Load())], keywords=[])), Assign(targets=[Name(id='measurement_results', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_gsc', ctx=Load()), attr='evaluate_operators', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='groundstate_result', ctx=Load()), attr='eigenstates', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load()), Name(id='matrix_operators_dict', ctx=Load())], keywords=[])), Assign(targets=[Name(id='measurement_results', ctx=Store())], value=Call(func=Name(id='cast', ctx=Load()), args=[Subscript(value=Name(id='Dict', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='float', ctx=Load())), ctx=Load())], ctx=Load())), ctx=Load()), Name(id='measurement_results', ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='m_mat', ctx=Store()), Name(id='v_mat', ctx=Store()), Name(id='q_mat', ctx=Store()), Name(id='w_mat', ctx=Store()), Name(id='m_mat_std', ctx=Store()), Name(id='v_mat_std', ctx=Store()), Name(id='q_mat_std', ctx=Store()), Name(id='w_mat_std', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_build_eom_matrices', ctx=Load()), args=[Name(id='measurement_results', ctx=Load()), Name(id='size', ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='energy_gaps', ctx=Store()), Name(id='expansion_coefs', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_compute_excitation_energies', ctx=Load()), args=[Name(id='m_mat', ctx=Load()), Name(id='v_mat', ctx=Load()), Name(id='q_mat', ctx=Load()), Name(id='w_mat', ctx=Load())], keywords=[])), Assign(targets=[Name(id='qeom_result', ctx=Store())], value=Call(func=Name(id='QEOMResult', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='qeom_result', ctx=Load()), attr='ground_state_raw_result', ctx=Store())], value=Attribute(value=Name(id='groundstate_result', ctx=Load()), attr='raw_result', ctx=Load())), Assign(targets=[Attribute(value=Name(id='qeom_result', ctx=Load()), attr='expansion_coefficients', ctx=Store())], value=Name(id='expansion_coefs', ctx=Load())), Assign(targets=[Attribute(value=Name(id='qeom_result', ctx=Load()), attr='excitation_energies', ctx=Store())], value=Name(id='energy_gaps', ctx=Load())), Assign(targets=[Attribute(value=Name(id='qeom_result', ctx=Load()), attr='m_matrix', ctx=Store())], value=Name(id='m_mat', ctx=Load())), Assign(targets=[Attribute(value=Name(id='qeom_result', ctx=Load()), attr='v_matrix', ctx=Store())], value=Name(id='v_mat', ctx=Load())), Assign(targets=[Attribute(value=Name(id='qeom_result', ctx=Load()), attr='q_matrix', ctx=Store())], value=Name(id='q_mat', ctx=Load())), Assign(targets=[Attribute(value=Name(id='qeom_result', ctx=Load()), attr='w_matrix', ctx=Store())], value=Name(id='w_mat', ctx=Load())), Assign(targets=[Attribute(value=Name(id='qeom_result', ctx=Load()), attr='m_matrix_std', ctx=Store())], value=Name(id='m_mat_std', ctx=Load())), Assign(targets=[Attribute(value=Name(id='qeom_result', ctx=Load()), attr='v_matrix_std', ctx=Store())], value=Name(id='v_mat_std', ctx=Load())), Assign(targets=[Attribute(value=Name(id='qeom_result', ctx=Load()), attr='q_matrix_std', ctx=Store())], value=Name(id='q_mat_std', ctx=Load())), Assign(targets=[Attribute(value=Name(id='qeom_result', ctx=Load()), attr='w_matrix_std', ctx=Store())], value=Name(id='w_mat_std', ctx=Load())), Assign(targets=[Name(id='eigenstate_result', ctx=Store())], value=Call(func=Name(id='EigenstateResult', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='eigenstate_result', ctx=Load()), attr='eigenstates', ctx=Store())], value=Attribute(value=Name(id='groundstate_result', ctx=Load()), attr='eigenstates', ctx=Load())), Assign(targets=[Attribute(value=Name(id='eigenstate_result', ctx=Load()), attr='aux_operator_eigenvalues', ctx=Store())], value=Attribute(value=Name(id='groundstate_result', ctx=Load()), attr='aux_operator_eigenvalues', ctx=Load())), Assign(targets=[Attribute(value=Name(id='eigenstate_result', ctx=Load()), attr='raw_result', ctx=Store())], value=Name(id='qeom_result', ctx=Load())), Assign(targets=[Attribute(value=Name(id='eigenstate_result', ctx=Load()), attr='eigenenergies', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Attribute(value=Name(id='groundstate_result', ctx=Load()), attr='eigenenergies', ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='asarray', ctx=Load()), args=[ListComp(elt=BinOp(left=Subscript(value=Attribute(value=Name(id='groundstate_result', ctx=Load()), attr='eigenenergies', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load()), op=Add(), right=Name(id='gap', ctx=Load())), generators=[comprehension(target=Name(id='gap', ctx=Store()), iter=Name(id='energy_gaps', ctx=Load()), ifs=[], is_async=0)])], keywords=[])], keywords=[])), Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Attribute(value=Name(id='problem', ctx=Load()), attr='interpret', ctx=Load()), args=[Name(id='eigenstate_result', ctx=Load())], keywords=[])), Return(value=Name(id='result', ctx=Load()))], decorator_list=[], returns=Name(id='EigenstateResult', ctx=Load())), FunctionDef(name='_prepare_matrix_operators', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='problem', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Construct the excitation operators for each matrix element.\n\n        Returns:\n            a dictionary of all matrix elements operators and the number of excitations\n            (or the size of the qEOM pseudo-eigenvalue problem)\n        ')), Assign(targets=[Name(id='data', ctx=Store())], value=Call(func=Attribute(value=Name(id='problem', ctx=Load()), attr='hopping_qeom_ops', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_gsc', ctx=Load()), attr='qubit_converter', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_excitations', ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='hopping_operators', ctx=Store()), Name(id='type_of_commutativities', ctx=Store()), Name(id='excitation_indices', ctx=Store())], ctx=Store())], value=Name(id='data', ctx=Load())), Assign(targets=[Name(id='size', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='excitation_indices', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[]), op=FloorDiv(), right=Num(n=2))], keywords=[])), Assign(targets=[Name(id='eom_matrix_operators', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_build_all_commutators', ctx=Load()), args=[Name(id='hopping_operators', ctx=Load()), Name(id='type_of_commutativities', ctx=Load()), Name(id='size', ctx=Load())], keywords=[])), Return(value=Tuple(elts=[Name(id='eom_matrix_operators', ctx=Load()), Name(id='size', ctx=Load())], ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='dict', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load())), ctx=Load())), FunctionDef(name='_build_all_commutators', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='hopping_operators', annotation=Name(id='dict', ctx=Load())), arg(arg='type_of_commutativities', annotation=Name(id='dict', ctx=Load())), arg(arg='size', annotation=Name(id='int', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Building all commutators for Q, W, M, V matrices.\n\n        Args:\n            hopping_operators: all hopping operators based on excitations_list,\n                key is the string of single/double excitation;\n                value is corresponding operator.\n            type_of_commutativities: if tapering is used, it records the commutativities of\n                hopping operators with the\n                Z2 symmetries found in the original operator.\n            size: the number of excitations (size of the qEOM pseudo-eigenvalue problem)\n\n        Returns:\n            a dictionary that contains the operators for each matrix element\n        ')), Assign(targets=[Name(id='all_matrix_operators', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Tuple(elts=[Name(id='mus', ctx=Store()), Name(id='nus', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='triu_indices', ctx=Load()), args=[Name(id='size', ctx=Load())], keywords=[])), FunctionDef(name='_build_one_sector', args=arguments(args=[arg(arg='available_hopping_ops', annotation=None), arg(arg='untapered_op', annotation=None), arg(arg='z2_symmetries', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Assign(targets=[Name(id='to_be_computed_list', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Tuple(elts=[Name(id='idx', ctx=Store()), Name(id='m_u', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='mus', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='n_u', ctx=Store())], value=Subscript(value=Name(id='nus', ctx=Load()), slice=Index(value=Name(id='idx', ctx=Load())), ctx=Load())), Assign(targets=[Name(id='left_op', ctx=Store())], value=Call(func=Attribute(value=Name(id='available_hopping_ops', ctx=Load()), attr='get', ctx=Load()), args=[JoinedStr(values=[Str(s='E_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None)])], keywords=[])), Assign(targets=[Name(id='right_op_1', ctx=Store())], value=Call(func=Attribute(value=Name(id='available_hopping_ops', ctx=Load()), attr='get', ctx=Load()), args=[JoinedStr(values=[Str(s='E_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])], keywords=[])), Assign(targets=[Name(id='right_op_2', ctx=Store())], value=Call(func=Attribute(value=Name(id='available_hopping_ops', ctx=Load()), attr='get', ctx=Load()), args=[JoinedStr(values=[Str(s='Edag_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='to_be_computed_list', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Name(id='m_u', ctx=Load()), Name(id='n_u', ctx=Load()), Name(id='left_op', ctx=Load()), Name(id='right_op_1', ctx=Load()), Name(id='right_op_2', ctx=Load())], ctx=Load())], keywords=[]))], orelse=[]), If(test=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='isEnabledFor', ctx=Load()), args=[Attribute(value=Name(id='logging', ctx=Load()), attr='INFO', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='info', ctx=Load()), args=[Str(s='Building all commutators:')], keywords=[])), Expr(value=Call(func=Name(id='TextProgressBar', ctx=Load()), args=[Attribute(value=Name(id='sys', ctx=Load()), attr='stderr', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='results', ctx=Store())], value=Call(func=Name(id='parallel_map', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_build_commutator_routine', ctx=Load()), Name(id='to_be_computed_list', ctx=Load())], keywords=[keyword(arg='task_args', value=Tuple(elts=[Name(id='untapered_op', ctx=Load()), Name(id='z2_symmetries', ctx=Load())], ctx=Load())), keyword(arg='num_processes', value=Attribute(value=Name(id='algorithm_globals', ctx=Load()), attr='num_processes', ctx=Load()))])), For(target=Name(id='result', ctx=Store()), iter=Name(id='results', ctx=Load()), body=[Assign(targets=[Tuple(elts=[Name(id='m_u', ctx=Store()), Name(id='n_u', ctx=Store()), Name(id='q_mat_op', ctx=Store()), Name(id='w_mat_op', ctx=Store()), Name(id='m_mat_op', ctx=Store()), Name(id='v_mat_op', ctx=Store())], ctx=Store())], value=Name(id='result', ctx=Load())), If(test=Compare(left=Name(id='q_mat_op', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=[Assign(targets=[Subscript(value=Name(id='all_matrix_operators', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='q_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])), ctx=Store())], value=Name(id='q_mat_op', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='w_mat_op', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=[Assign(targets=[Subscript(value=Name(id='all_matrix_operators', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='w_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])), ctx=Store())], value=Name(id='w_mat_op', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='m_mat_op', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=[Assign(targets=[Subscript(value=Name(id='all_matrix_operators', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='m_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])), ctx=Store())], value=Name(id='m_mat_op', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='v_mat_op', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=[Assign(targets=[Subscript(value=Name(id='all_matrix_operators', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='v_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])), ctx=Store())], value=Name(id='v_mat_op', ctx=Load()))], orelse=[])], orelse=[])], decorator_list=[], returns=None), Try(body=[Assign(targets=[Name(id='z2_symmetries', ctx=Store())], value=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_gsc', ctx=Load()), attr='qubit_converter', ctx=Load()), attr='z2symmetries', ctx=Load()))], handlers=[ExceptHandler(type=Name(id='AttributeError', ctx=Load()), name=None, body=[Assign(targets=[Name(id='z2_symmetries', ctx=Store())], value=Call(func=Name(id='Z2Symmetries', ctx=Load()), args=[List(elts=[], ctx=Load()), List(elts=[], ctx=Load()), List(elts=[], ctx=Load())], keywords=[]))])], orelse=[], finalbody=[]), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='z2_symmetries', ctx=Load()), attr='is_empty', ctx=Load()), args=[], keywords=[])), body=[Assign(targets=[Name(id='combinations', ctx=Store())], value=Call(func=Attribute(value=Name(id='itertools', ctx=Load()), attr='product', ctx=Load()), args=[List(elts=[Num(n=1), UnaryOp(op=USub(), operand=Num(n=1))], ctx=Load())], keywords=[keyword(arg='repeat', value=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='z2_symmetries', ctx=Load()), attr='symmetries', ctx=Load())], keywords=[]))])), For(target=Name(id='targeted_tapering_values', ctx=Store()), iter=Name(id='combinations', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='info', ctx=Load()), args=[Str(s='In sector: (%s)'), Call(func=Attribute(value=Str(s=','), attr='join', ctx=Load()), args=[ListComp(elt=Call(func=Name(id='str', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='targeted_tapering_values', ctx=Load()), ifs=[], is_async=0)])], keywords=[])], keywords=[])), Assign(targets=[Name(id='available_hopping_ops', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='targeted_sector', ctx=Store())], value=Compare(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='asarray', ctx=Load()), args=[Name(id='targeted_tapering_values', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Num(n=1)])), For(target=Tuple(elts=[Name(id='key', ctx=Store()), Name(id='value', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='type_of_commutativities', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Name(id='value', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='asarray', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[])), If(test=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='all', ctx=Load()), args=[Compare(left=Name(id='value', ctx=Load()), ops=[Eq()], comparators=[Name(id='targeted_sector', ctx=Load())])], keywords=[]), body=[Assign(targets=[Subscript(value=Name(id='available_hopping_ops', ctx=Load()), slice=Index(value=Name(id='key', ctx=Load())), ctx=Store())], value=Subscript(value=Name(id='hopping_operators', ctx=Load()), slice=Index(value=Name(id='key', ctx=Load())), ctx=Load()))], orelse=[])], orelse=[]), Expr(value=Call(func=Name(id='_build_one_sector', ctx=Load()), args=[Name(id='available_hopping_ops', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_untapered_qubit_op_main', ctx=Load()), Name(id='z2_symmetries', ctx=Load())], keywords=[]))], orelse=[])], orelse=[Expr(value=Call(func=Name(id='_build_one_sector', ctx=Load()), args=[Name(id='hopping_operators', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_untapered_qubit_op_main', ctx=Load()), Name(id='z2_symmetries', ctx=Load())], keywords=[]))]), Return(value=Name(id='all_matrix_operators', ctx=Load()))], decorator_list=[], returns=Name(id='dict', ctx=Load())), FunctionDef(name='_build_commutator_routine', args=arguments(args=[arg(arg='params', annotation=Name(id='List', ctx=Load())), arg(arg='operator', annotation=Name(id='PauliSumOp', ctx=Load())), arg(arg='z2_symmetries', annotation=Name(id='Z2Symmetries', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Numerically computes the commutator / double commutator between operators.\n\n        Args:\n            params: list containing the indices of matrix element and the corresponding\n                excitation operators\n            operator: the hamiltonian\n            z2_symmetries: z2_symmetries in case of tapering\n\n        Returns:\n            The indices of the matrix element and the corresponding qubit\n            operator for each of the EOM matrices\n        ')), Assign(targets=[Tuple(elts=[Name(id='m_u', ctx=Store()), Name(id='n_u', ctx=Store()), Name(id='left_op', ctx=Store()), Name(id='right_op_1', ctx=Store()), Name(id='right_op_2', ctx=Store())], ctx=Store())], value=Name(id='params', ctx=Load())), If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='left_op', ctx=Load()), ops=[Is()], comparators=[NameConstant(value=None)]), BoolOp(op=And(), values=[Compare(left=Name(id='right_op_1', ctx=Load()), ops=[Is()], comparators=[NameConstant(value=None)]), Compare(left=Name(id='right_op_2', ctx=Load()), ops=[Is()], comparators=[NameConstant(value=None)])])]), body=[Assign(targets=[Name(id='q_mat_op', ctx=Store())], value=NameConstant(value=None)), Assign(targets=[Name(id='w_mat_op', ctx=Store())], value=NameConstant(value=None)), Assign(targets=[Name(id='m_mat_op', ctx=Store())], value=NameConstant(value=None)), Assign(targets=[Name(id='v_mat_op', ctx=Store())], value=NameConstant(value=None))], orelse=[If(test=Compare(left=Name(id='right_op_1', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=[Assign(targets=[Name(id='q_mat_op', ctx=Store())], value=Call(func=Name(id='double_commutator', ctx=Load()), args=[Name(id='left_op', ctx=Load()), Name(id='operator', ctx=Load()), Name(id='right_op_1', ctx=Load())], keywords=[keyword(arg='sign', value=NameConstant(value=False))])), Assign(targets=[Name(id='w_mat_op', ctx=Store())], value=Call(func=Name(id='commutator', ctx=Load()), args=[Name(id='left_op', ctx=Load()), Name(id='right_op_1', ctx=Load())], keywords=[])), Assign(targets=[Name(id='q_mat_op', ctx=Store())], value=IfExp(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='q_mat_op', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Num(n=0)]), body=NameConstant(value=None), orelse=Name(id='q_mat_op', ctx=Load()))), Assign(targets=[Name(id='w_mat_op', ctx=Store())], value=IfExp(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='w_mat_op', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Num(n=0)]), body=NameConstant(value=None), orelse=Name(id='w_mat_op', ctx=Load())))], orelse=[Assign(targets=[Name(id='q_mat_op', ctx=Store())], value=NameConstant(value=None)), Assign(targets=[Name(id='w_mat_op', ctx=Store())], value=NameConstant(value=None))]), If(test=Compare(left=Name(id='right_op_2', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=[Assign(targets=[Name(id='m_mat_op', ctx=Store())], value=Call(func=Name(id='double_commutator', ctx=Load()), args=[Name(id='left_op', ctx=Load()), Name(id='operator', ctx=Load()), Name(id='right_op_2', ctx=Load())], keywords=[keyword(arg='sign', value=NameConstant(value=False))])), Assign(targets=[Name(id='v_mat_op', ctx=Store())], value=Call(func=Name(id='commutator', ctx=Load()), args=[Name(id='left_op', ctx=Load()), Name(id='right_op_2', ctx=Load())], keywords=[])), Assign(targets=[Name(id='m_mat_op', ctx=Store())], value=IfExp(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='m_mat_op', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Num(n=0)]), body=NameConstant(value=None), orelse=Name(id='m_mat_op', ctx=Load()))), Assign(targets=[Name(id='v_mat_op', ctx=Store())], value=IfExp(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='v_mat_op', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Num(n=0)]), body=NameConstant(value=None), orelse=Name(id='v_mat_op', ctx=Load())))], orelse=[Assign(targets=[Name(id='m_mat_op', ctx=Store())], value=NameConstant(value=None)), Assign(targets=[Name(id='v_mat_op', ctx=Store())], value=NameConstant(value=None))]), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='z2_symmetries', ctx=Load()), attr='is_empty', ctx=Load()), args=[], keywords=[])), body=[If(test=BoolOp(op=And(), values=[Compare(left=Name(id='q_mat_op', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='q_mat_op', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Num(n=0)])]), body=[Assign(targets=[Name(id='q_mat_op', ctx=Store())], value=Call(func=Attribute(value=Name(id='z2_symmetries', ctx=Load()), attr='taper', ctx=Load()), args=[Name(id='q_mat_op', ctx=Load())], keywords=[]))], orelse=[]), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='w_mat_op', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='w_mat_op', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Num(n=0)])]), body=[Assign(targets=[Name(id='w_mat_op', ctx=Store())], value=Call(func=Attribute(value=Name(id='z2_symmetries', ctx=Load()), attr='taper', ctx=Load()), args=[Name(id='w_mat_op', ctx=Load())], keywords=[]))], orelse=[]), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='m_mat_op', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='m_mat_op', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Num(n=0)])]), body=[Assign(targets=[Name(id='m_mat_op', ctx=Store())], value=Call(func=Attribute(value=Name(id='z2_symmetries', ctx=Load()), attr='taper', ctx=Load()), args=[Name(id='m_mat_op', ctx=Load())], keywords=[]))], orelse=[]), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='v_mat_op', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='v_mat_op', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Num(n=0)])]), body=[Assign(targets=[Name(id='v_mat_op', ctx=Store())], value=Call(func=Attribute(value=Name(id='z2_symmetries', ctx=Load()), attr='taper', ctx=Load()), args=[Name(id='v_mat_op', ctx=Load())], keywords=[]))], orelse=[])], orelse=[])]), Return(value=Tuple(elts=[Name(id='m_u', ctx=Load()), Name(id='n_u', ctx=Load()), Name(id='q_mat_op', ctx=Load()), Name(id='w_mat_op', ctx=Load()), Name(id='m_mat_op', ctx=Load()), Name(id='v_mat_op', ctx=Load())], ctx=Load()))], decorator_list=[Name(id='staticmethod', ctx=Load())], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='int', ctx=Load()), Name(id='PauliSumOp', ctx=Load()), Name(id='PauliSumOp', ctx=Load()), Name(id='PauliSumOp', ctx=Load()), Name(id='PauliSumOp', ctx=Load())], ctx=Load())), ctx=Load())), FunctionDef(name='_build_eom_matrices', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='gs_results', annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='float', ctx=Load())), ctx=Load())], ctx=Load())), ctx=Load())), arg(arg='size', annotation=Name(id='int', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Constructs the M, V, Q and W matrices from the results on the ground state\n\n        Args:\n            gs_results: a ground state result object\n            size: size of eigenvalue problem\n\n        Returns:\n            the matrices and their standard deviation\n        ')), Assign(targets=[Tuple(elts=[Name(id='mus', ctx=Store()), Name(id='nus', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='triu_indices', ctx=Load()), args=[Name(id='size', ctx=Load())], keywords=[])), Assign(targets=[Name(id='m_mat', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='zeros', ctx=Load()), args=[Tuple(elts=[Name(id='size', ctx=Load()), Name(id='size', ctx=Load())], ctx=Load())], keywords=[keyword(arg='dtype', value=Name(id='complex', ctx=Load()))])), Assign(targets=[Name(id='v_mat', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='zeros', ctx=Load()), args=[Tuple(elts=[Name(id='size', ctx=Load()), Name(id='size', ctx=Load())], ctx=Load())], keywords=[keyword(arg='dtype', value=Name(id='complex', ctx=Load()))])), Assign(targets=[Name(id='q_mat', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='zeros', ctx=Load()), args=[Tuple(elts=[Name(id='size', ctx=Load()), Name(id='size', ctx=Load())], ctx=Load())], keywords=[keyword(arg='dtype', value=Name(id='complex', ctx=Load()))])), Assign(targets=[Name(id='w_mat', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='zeros', ctx=Load()), args=[Tuple(elts=[Name(id='size', ctx=Load()), Name(id='size', ctx=Load())], ctx=Load())], keywords=[keyword(arg='dtype', value=Name(id='complex', ctx=Load()))])), Assign(targets=[Tuple(elts=[Name(id='m_mat_std', ctx=Store()), Name(id='v_mat_std', ctx=Store()), Name(id='q_mat_std', ctx=Store()), Name(id='w_mat_std', ctx=Store())], ctx=Store())], value=Tuple(elts=[Num(n=0.0), Num(n=0.0), Num(n=0.0), Num(n=0.0)], ctx=Load())), For(target=Tuple(elts=[Name(id='idx', ctx=Store()), Name(id='m_u', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='mus', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='n_u', ctx=Store())], value=Subscript(value=Name(id='nus', ctx=Load()), slice=Index(value=Name(id='idx', ctx=Load())), ctx=Load())), Assign(targets=[Subscript(value=Subscript(value=Name(id='q_mat', ctx=Load()), slice=Index(value=Name(id='m_u', ctx=Load())), ctx=Load()), slice=Index(value=Name(id='n_u', ctx=Load())), ctx=Store())], value=IfExp(test=Compare(left=Call(func=Attribute(value=Name(id='gs_results', ctx=Load()), attr='get', ctx=Load()), args=[JoinedStr(values=[Str(s='q_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])], keywords=[]), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=Subscript(value=Subscript(value=Name(id='gs_results', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='q_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])), ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load()), orelse=Subscript(value=Subscript(value=Name(id='q_mat', ctx=Load()), slice=Index(value=Name(id='m_u', ctx=Load())), ctx=Load()), slice=Index(value=Name(id='n_u', ctx=Load())), ctx=Load()))), Assign(targets=[Subscript(value=Subscript(value=Name(id='w_mat', ctx=Load()), slice=Index(value=Name(id='m_u', ctx=Load())), ctx=Load()), slice=Index(value=Name(id='n_u', ctx=Load())), ctx=Store())], value=IfExp(test=Compare(left=Call(func=Attribute(value=Name(id='gs_results', ctx=Load()), attr='get', ctx=Load()), args=[JoinedStr(values=[Str(s='w_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])], keywords=[]), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=Subscript(value=Subscript(value=Name(id='gs_results', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='w_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])), ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load()), orelse=Subscript(value=Subscript(value=Name(id='w_mat', ctx=Load()), slice=Index(value=Name(id='m_u', ctx=Load())), ctx=Load()), slice=Index(value=Name(id='n_u', ctx=Load())), ctx=Load()))), Assign(targets=[Subscript(value=Subscript(value=Name(id='m_mat', ctx=Load()), slice=Index(value=Name(id='m_u', ctx=Load())), ctx=Load()), slice=Index(value=Name(id='n_u', ctx=Load())), ctx=Store())], value=IfExp(test=Compare(left=Call(func=Attribute(value=Name(id='gs_results', ctx=Load()), attr='get', ctx=Load()), args=[JoinedStr(values=[Str(s='m_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])], keywords=[]), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=Subscript(value=Subscript(value=Name(id='gs_results', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='m_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])), ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load()), orelse=Subscript(value=Subscript(value=Name(id='m_mat', ctx=Load()), slice=Index(value=Name(id='m_u', ctx=Load())), ctx=Load()), slice=Index(value=Name(id='n_u', ctx=Load())), ctx=Load()))), Assign(targets=[Subscript(value=Subscript(value=Name(id='v_mat', ctx=Load()), slice=Index(value=Name(id='m_u', ctx=Load())), ctx=Load()), slice=Index(value=Name(id='n_u', ctx=Load())), ctx=Store())], value=IfExp(test=Compare(left=Call(func=Attribute(value=Name(id='gs_results', ctx=Load()), attr='get', ctx=Load()), args=[JoinedStr(values=[Str(s='v_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])], keywords=[]), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=Subscript(value=Subscript(value=Name(id='gs_results', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='v_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])), ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load()), orelse=Subscript(value=Subscript(value=Name(id='v_mat', ctx=Load()), slice=Index(value=Name(id='m_u', ctx=Load())), ctx=Load()), slice=Index(value=Name(id='n_u', ctx=Load())), ctx=Load()))), AugAssign(target=Name(id='q_mat_std', ctx=Store()), op=Add(), value=IfExp(test=Compare(left=Call(func=Attribute(value=Name(id='gs_results', ctx=Load()), attr='get', ctx=Load()), args=[JoinedStr(values=[Str(s='q_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_std')])], keywords=[]), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=Subscript(value=Subscript(value=Name(id='gs_results', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='q_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_std')])), ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load()), orelse=Num(n=0))), AugAssign(target=Name(id='w_mat_std', ctx=Store()), op=Add(), value=IfExp(test=Compare(left=Call(func=Attribute(value=Name(id='gs_results', ctx=Load()), attr='get', ctx=Load()), args=[JoinedStr(values=[Str(s='w_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_std')])], keywords=[]), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=Subscript(value=Subscript(value=Name(id='gs_results', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='w_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_std')])), ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load()), orelse=Num(n=0))), AugAssign(target=Name(id='m_mat_std', ctx=Store()), op=Add(), value=IfExp(test=Compare(left=Call(func=Attribute(value=Name(id='gs_results', ctx=Load()), attr='get', ctx=Load()), args=[JoinedStr(values=[Str(s='m_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_std')])], keywords=[]), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=Subscript(value=Subscript(value=Name(id='gs_results', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='m_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_std')])), ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load()), orelse=Num(n=0))), AugAssign(target=Name(id='v_mat_std', ctx=Store()), op=Add(), value=IfExp(test=Compare(left=Call(func=Attribute(value=Name(id='gs_results', ctx=Load()), attr='get', ctx=Load()), args=[JoinedStr(values=[Str(s='v_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_std')])], keywords=[]), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=Subscript(value=Subscript(value=Name(id='gs_results', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='v_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_std')])), ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load()), orelse=Num(n=0)))], orelse=[]), Assign(targets=[Name(id='q_mat', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='q_mat', ctx=Load()), op=Add(), right=Attribute(value=Name(id='q_mat', ctx=Load()), attr='T', ctx=Load())), op=Sub(), right=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='identity', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='q_mat', ctx=Load()), attr='shape', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())], keywords=[]), op=Mult(), right=Name(id='q_mat', ctx=Load())))), Assign(targets=[Name(id='w_mat', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='w_mat', ctx=Load()), op=Add(), right=Attribute(value=Name(id='w_mat', ctx=Load()), attr='T', ctx=Load())), op=Sub(), right=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='identity', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='w_mat', ctx=Load()), attr='shape', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())], keywords=[]), op=Mult(), right=Name(id='w_mat', ctx=Load())))), Assign(targets=[Name(id='m_mat', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='m_mat', ctx=Load()), op=Add(), right=Attribute(value=Name(id='m_mat', ctx=Load()), attr='T', ctx=Load())), op=Sub(), right=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='identity', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='m_mat', ctx=Load()), attr='shape', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())], keywords=[]), op=Mult(), right=Name(id='m_mat', ctx=Load())))), Assign(targets=[Name(id='v_mat', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='v_mat', ctx=Load()), op=Add(), right=Attribute(value=Name(id='v_mat', ctx=Load()), attr='T', ctx=Load())), op=Sub(), right=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='identity', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='v_mat', ctx=Load()), attr='shape', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())], keywords=[]), op=Mult(), right=Name(id='v_mat', ctx=Load())))), Assign(targets=[Name(id='q_mat', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='real', ctx=Load()), args=[Name(id='q_mat', ctx=Load())], keywords=[])), Assign(targets=[Name(id='w_mat', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='real', ctx=Load()), args=[Name(id='w_mat', ctx=Load())], keywords=[])), Assign(targets=[Name(id='m_mat', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='real', ctx=Load()), args=[Name(id='m_mat', ctx=Load())], keywords=[])), Assign(targets=[Name(id='v_mat', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='real', ctx=Load()), args=[Name(id='v_mat', ctx=Load())], keywords=[])), Assign(targets=[Name(id='q_mat_std', ctx=Store())], value=BinOp(left=Name(id='q_mat_std', ctx=Load()), op=Div(), right=Call(func=Name(id='float', ctx=Load()), args=[BinOp(left=Name(id='size', ctx=Load()), op=Pow(), right=Num(n=2))], keywords=[]))), Assign(targets=[Name(id='w_mat_std', ctx=Store())], value=BinOp(left=Name(id='w_mat_std', ctx=Load()), op=Div(), right=Call(func=Name(id='float', ctx=Load()), args=[BinOp(left=Name(id='size', ctx=Load()), op=Pow(), right=Num(n=2))], keywords=[]))), Assign(targets=[Name(id='m_mat_std', ctx=Store())], value=BinOp(left=Name(id='m_mat_std', ctx=Load()), op=Div(), right=Call(func=Name(id='float', ctx=Load()), args=[BinOp(left=Name(id='size', ctx=Load()), op=Pow(), right=Num(n=2))], keywords=[]))), Assign(targets=[Name(id='v_mat_std', ctx=Store())], value=BinOp(left=Name(id='v_mat_std', ctx=Load()), op=Div(), right=Call(func=Name(id='float', ctx=Load()), args=[BinOp(left=Name(id='size', ctx=Load()), op=Pow(), right=Num(n=2))], keywords=[]))), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Str(s='\nQ:=========================\n%s'), Name(id='q_mat', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Str(s='\nW:=========================\n%s'), Name(id='w_mat', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Str(s='\nM:=========================\n%s'), Name(id='m_mat', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Str(s='\nV:=========================\n%s'), Name(id='v_mat', ctx=Load())], keywords=[])), Return(value=Tuple(elts=[Name(id='m_mat', ctx=Load()), Name(id='v_mat', ctx=Load()), Name(id='q_mat', ctx=Load()), Name(id='w_mat', ctx=Load()), Name(id='m_mat_std', ctx=Load()), Name(id='v_mat_std', ctx=Load()), Name(id='q_mat_std', ctx=Load()), Name(id='w_mat_std', ctx=Load())], ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Index(value=Tuple(elts=[Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Name(id='float', ctx=Load()), Name(id='float', ctx=Load()), Name(id='float', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load())), ctx=Load())), FunctionDef(name='_compute_excitation_energies', args=arguments(args=[arg(arg='m_mat', annotation=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), arg(arg='v_mat', annotation=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), arg(arg='q_mat', annotation=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), arg(arg='w_mat', annotation=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Diagonalizing M, V, Q, W matrices for excitation energies.\n\n        Args:\n            m_mat : M matrices\n            v_mat : V matrices\n            q_mat : Q matrices\n            w_mat : W matrices\n\n        Returns:\n            1-D vector stores all energy gap to reference state\n            2-D array storing the X and Y expansion coefficients\n        ')), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Str(s='Diagonalizing qeom matrices for excited states...')], keywords=[])), Assign(targets=[Name(id='a_mat', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='np', ctx=Load()), attr='matrixlib', ctx=Load()), attr='bmat', ctx=Load()), args=[List(elts=[List(elts=[Name(id='m_mat', ctx=Load()), Name(id='q_mat', ctx=Load())], ctx=Load()), List(elts=[Call(func=Attribute(value=Attribute(value=Name(id='q_mat', ctx=Load()), attr='T', ctx=Load()), attr='conj', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Attribute(value=Name(id='m_mat', ctx=Load()), attr='T', ctx=Load()), attr='conj', ctx=Load()), args=[], keywords=[])], ctx=Load())], ctx=Load())], keywords=[])), Assign(targets=[Name(id='b_mat', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='np', ctx=Load()), attr='matrixlib', ctx=Load()), attr='bmat', ctx=Load()), args=[List(elts=[List(elts=[Name(id='v_mat', ctx=Load()), Name(id='w_mat', ctx=Load())], ctx=Load()), List(elts=[UnaryOp(op=USub(), operand=Call(func=Attribute(value=Attribute(value=Name(id='w_mat', ctx=Load()), attr='T', ctx=Load()), attr='conj', ctx=Load()), args=[], keywords=[])), UnaryOp(op=USub(), operand=Call(func=Attribute(value=Attribute(value=Name(id='v_mat', ctx=Load()), attr='T', ctx=Load()), attr='conj', ctx=Load()), args=[], keywords=[]))], ctx=Load())], ctx=Load())], keywords=[])), Assign(targets=[Name(id='res', ctx=Store())], value=Call(func=Attribute(value=Name(id='linalg', ctx=Load()), attr='eig', ctx=Load()), args=[Name(id='a_mat', ctx=Load()), Name(id='b_mat', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Subscript(value=Name(id='res', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load()), slice=Index(value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='isnan', ctx=Load()), args=[Subscript(value=Name(id='res', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())], keywords=[])], keywords=[])), ctx=Store())], value=Num(n=0.0)), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Str(s='... %s'), Subscript(value=Name(id='res', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())], keywords=[])), Assign(targets=[Name(id='w', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sort', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='real', ctx=Load()), args=[Subscript(value=Name(id='res', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Str(s='Sorted real parts %s'), Name(id='w', ctx=Load())], keywords=[])), Assign(targets=[Name(id='w', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='abs', ctx=Load()), args=[Subscript(value=Name(id='w', ctx=Load()), slice=Slice(lower=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='w', ctx=Load())], keywords=[]), op=FloorDiv(), right=Num(n=2)), upper=None, step=None), ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Name(id='w', ctx=Load()), slice=Index(value=Compare(left=Name(id='w', ctx=Load()), ops=[Lt()], comparators=[Num(n=1e-06)])), ctx=Store())], value=Num(n=0)), Assign(targets=[Name(id='excitation_energies_gap', ctx=Store())], value=Name(id='w', ctx=Load())), Return(value=Tuple(elts=[Name(id='excitation_energies_gap', ctx=Load()), Subscript(value=Name(id='res', ctx=Load()), slice=Index(value=Num(n=1)), ctx=Load())], ctx=Load()))], decorator_list=[Name(id='staticmethod', ctx=Load())], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Index(value=Tuple(elts=[Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())], ctx=Load())), ctx=Load()))], decorator_list=[])
ClassDef(name='QEOMResult', bases=[Name(id='AlgorithmResult', ctx=Load())], keywords=[], body=[Expr(value=Str(s='The results class for the QEOM algorithm.')), FunctionDef(name='__init__', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_ground_state_raw_result', ctx=Store())], value=NameConstant(value=None)), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_excitation_energies', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), ctx=Load()), value=NameConstant(value=None), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_expansion_coefficients', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), ctx=Load()), value=NameConstant(value=None), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_m_matrix', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), ctx=Load()), value=NameConstant(value=None), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_v_matrix', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), ctx=Load()), value=NameConstant(value=None), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_q_matrix', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), ctx=Load()), value=NameConstant(value=None), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_w_matrix', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), ctx=Load()), value=NameConstant(value=None), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_v_matrix_std', ctx=Store()), annotation=Name(id='float', ctx=Load()), value=Num(n=0.0), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_q_matrix_std', ctx=Store()), annotation=Name(id='float', ctx=Load()), value=Num(n=0.0), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_w_matrix_std', ctx=Store()), annotation=Name(id='float', ctx=Load()), value=Num(n=0.0), simple=0)], decorator_list=[], returns=NameConstant(value=None)), FunctionDef(name='ground_state_raw_result', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='returns ground state raw result')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_ground_state_raw_result', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=None), FunctionDef(name='ground_state_raw_result', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='value', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='sets ground state raw result')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_ground_state_raw_result', ctx=Store())], value=Name(id='value', ctx=Load()))], decorator_list=[Attribute(value=Name(id='ground_state_raw_result', ctx=Load()), attr='setter', ctx=Load())], returns=NameConstant(value=None)), FunctionDef(name='excitation_energies', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='returns the excitation energies (energy gaps)')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_excitation_energies', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), ctx=Load())), FunctionDef(name='excitation_energies', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='value', annotation=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='sets the excitation energies (energy gaps)')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_excitation_energies', ctx=Store())], value=Name(id='value', ctx=Load()))], decorator_list=[Attribute(value=Name(id='excitation_energies', ctx=Load()), attr='setter', ctx=Load())], returns=NameConstant(value=None)), FunctionDef(name='expansion_coefficients', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='returns the X and Y expansion coefficients')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_expansion_coefficients', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), ctx=Load())), FunctionDef(name='expansion_coefficients', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='value', annotation=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='sets the X and Y expansion coefficients')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_expansion_coefficients', ctx=Store())], value=Name(id='value', ctx=Load()))], decorator_list=[Attribute(value=Name(id='expansion_coefficients', ctx=Load()), attr='setter', ctx=Load())], returns=NameConstant(value=None)), FunctionDef(name='m_matrix', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='returns the M matrix')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_m_matrix', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), ctx=Load())), FunctionDef(name='m_matrix', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='value', annotation=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='sets the M matrix')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_m_matrix', ctx=Store())], value=Name(id='value', ctx=Load()))], decorator_list=[Attribute(value=Name(id='m_matrix', ctx=Load()), attr='setter', ctx=Load())], returns=NameConstant(value=None)), FunctionDef(name='v_matrix', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='returns the V matrix')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_v_matrix', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), ctx=Load())), FunctionDef(name='v_matrix', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='value', annotation=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='sets the V matrix')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_v_matrix', ctx=Store())], value=Name(id='value', ctx=Load()))], decorator_list=[Attribute(value=Name(id='v_matrix', ctx=Load()), attr='setter', ctx=Load())], returns=NameConstant(value=None)), FunctionDef(name='q_matrix', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='returns the Q matrix')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_q_matrix', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), ctx=Load())), FunctionDef(name='q_matrix', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='value', annotation=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='sets the Q matrix')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_q_matrix', ctx=Store())], value=Name(id='value', ctx=Load()))], decorator_list=[Attribute(value=Name(id='q_matrix', ctx=Load()), attr='setter', ctx=Load())], returns=NameConstant(value=None)), FunctionDef(name='w_matrix', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='returns the W matrix')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_w_matrix', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), ctx=Load())), FunctionDef(name='w_matrix', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='value', annotation=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='sets the W matrix')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_w_matrix', ctx=Store())], value=Name(id='value', ctx=Load()))], decorator_list=[Attribute(value=Name(id='w_matrix', ctx=Load()), attr='setter', ctx=Load())], returns=NameConstant(value=None)), FunctionDef(name='m_matrix_std', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='returns the M matrix standard deviation')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_m_matrix_std', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='float', ctx=Load())), FunctionDef(name='m_matrix_std', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='value', annotation=Name(id='float', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='sets the M matrix standard deviation')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_m_matrix_std', ctx=Store())], value=Name(id='value', ctx=Load()))], decorator_list=[Attribute(value=Name(id='m_matrix_std', ctx=Load()), attr='setter', ctx=Load())], returns=NameConstant(value=None)), FunctionDef(name='v_matrix_std', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='returns the V matrix standard deviation')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_v_matrix_std', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='float', ctx=Load())), FunctionDef(name='v_matrix_std', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='value', annotation=Name(id='float', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='sets the V matrix standard deviation')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_v_matrix_std', ctx=Store())], value=Name(id='value', ctx=Load()))], decorator_list=[Attribute(value=Name(id='v_matrix_std', ctx=Load()), attr='setter', ctx=Load())], returns=NameConstant(value=None)), FunctionDef(name='q_matrix_std', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='returns the Q matrix standard deviation')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_q_matrix_std', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='float', ctx=Load())), FunctionDef(name='q_matrix_std', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='value', annotation=Name(id='float', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='sets the Q matrix standard deviation')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_q_matrix_std', ctx=Store())], value=Name(id='value', ctx=Load()))], decorator_list=[Attribute(value=Name(id='q_matrix_std', ctx=Load()), attr='setter', ctx=Load())], returns=NameConstant(value=None)), FunctionDef(name='w_matrix_std', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='returns the W matrix standard deviation')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_w_matrix_std', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='float', ctx=Load())), FunctionDef(name='w_matrix_std', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='value', annotation=Name(id='float', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='sets the W matrix standard deviation')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_w_matrix_std', ctx=Store())], value=Name(id='value', ctx=Load()))], decorator_list=[Attribute(value=Name(id='w_matrix_std', ctx=Load()), attr='setter', ctx=Load())], returns=NameConstant(value=None))], decorator_list=[])
Str(s='The calculation of excited states via the qEOM algorithm')
alias(name='List', asname=None)
alias(name='Union', asname=None)
alias(name='Optional', asname=None)
alias(name='Tuple', asname=None)
alias(name='Dict', asname=None)
alias(name='cast', asname=None)
alias(name='itertools', asname=None)
alias(name='logging', asname=None)
alias(name='sys', asname=None)
alias(name='numpy', asname='np')
alias(name='linalg', asname=None)
alias(name='parallel_map', asname=None)
alias(name='TextProgressBar', asname=None)
alias(name='algorithm_globals', asname=None)
alias(name='AlgorithmResult', asname=None)
alias(name='Z2Symmetries', asname=None)
alias(name='commutator', asname=None)
alias(name='double_commutator', asname=None)
alias(name='PauliSumOp', asname=None)
alias(name='ListOrDictType', asname=None)
alias(name='SecondQuantizedOp', asname=None)
alias(name='BaseProblem', asname=None)
alias(name='EigenstateResult', asname=None)
alias(name='ExcitedStatesSolver', asname=None)
alias(name='GroundStateSolver', asname=None)
Name(id='logger', ctx=Store())
Call(func=Attribute(value=Name(id='logging', ctx=Load()), attr='getLogger', ctx=Load()), args=[Name(id='__name__', ctx=Load())], keywords=[])
Name(id='ExcitedStatesSolver', ctx=Load())
Expr(value=Str(s='The calculation of excited states via the qEOM algorithm'))
FunctionDef(name='__init__', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='ground_state_solver', annotation=Name(id='GroundStateSolver', ctx=Load())), arg(arg='excitations', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='int', ctx=Load())), ctx=Load())), ctx=Load())], ctx=Load())), ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[Str(s='sd')]), body=[Expr(value=Str(s="\n        Args:\n            ground_state_solver: a GroundStateSolver object. The qEOM algorithm\n                will use this ground state to compute the EOM matrix elements\n            excitations: The excitations to be included in the eom pseudo-eigenvalue problem.\n                If a string ('s', 'd' or 'sd') then all excitations of the given type will be used.\n                Otherwise a list of custom excitations can directly be provided.\n        ")), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_gsc', ctx=Store())], value=Name(id='ground_state_solver', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='excitations', ctx=Store())], value=Name(id='excitations', ctx=Load())), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_untapered_qubit_op_main', ctx=Store()), annotation=Name(id='PauliSumOp', ctx=Load()), value=NameConstant(value=None), simple=0)], decorator_list=[], returns=NameConstant(value=None))
FunctionDef(name='excitations', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Returns the excitations to be included in the eom pseudo-eigenvalue problem.')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_excitations', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='int', ctx=Load())), ctx=Load())), ctx=Load())], ctx=Load())), ctx=Load()))
FunctionDef(name='excitations', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='excitations', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='int', ctx=Load())), ctx=Load())), ctx=Load())], ctx=Load())), ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='The excitations to be included in the eom pseudo-eigenvalue problem. If a string then\n        all excitations of given type will be used. Otherwise a list of custom excitations can\n        directly be provided.')), If(test=BoolOp(op=And(), values=[Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='excitations', ctx=Load()), Name(id='str', ctx=Load())], keywords=[]), Compare(left=Name(id='excitations', ctx=Load()), ops=[NotIn()], comparators=[List(elts=[Str(s='s'), Str(s='d'), Str(s='sd')], ctx=Load())])]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Str(s='Excitation type must be s (singles), d (doubles) or sd (singles and doubles)')], keywords=[]), cause=None)], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_excitations', ctx=Store())], value=Name(id='excitations', ctx=Load()))], decorator_list=[Attribute(value=Name(id='excitations', ctx=Load()), attr='setter', ctx=Load())], returns=NameConstant(value=None))
FunctionDef(name='solver', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Return(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_gsc', ctx=Load()), attr='solver', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=None)
FunctionDef(name='get_qubit_operators', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='problem', annotation=Name(id='BaseProblem', ctx=Load())), arg(arg='aux_operators', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Subscript(value=Name(id='ListOrDictType', ctx=Load()), slice=Index(value=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='SecondQuantizedOp', ctx=Load()), Name(id='PauliSumOp', ctx=Load())], ctx=Load())), ctx=Load())), ctx=Load())), ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[NameConstant(value=None)]), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_gsc', ctx=Load()), attr='get_qubit_operators', ctx=Load()), args=[Name(id='problem', ctx=Load()), Name(id='aux_operators', ctx=Load())], keywords=[]))], decorator_list=[], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='PauliSumOp', ctx=Load()), Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Subscript(value=Name(id='ListOrDictType', ctx=Load()), slice=Index(value=Name(id='PauliSumOp', ctx=Load())), ctx=Load())), ctx=Load())], ctx=Load())), ctx=Load()))
FunctionDef(name='solve', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='problem', annotation=Name(id='BaseProblem', ctx=Load())), arg(arg='aux_operators', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Subscript(value=Name(id='ListOrDictType', ctx=Load()), slice=Index(value=Name(id='SecondQuantizedOp', ctx=Load())), ctx=Load())), ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[NameConstant(value=None)]), body=[Expr(value=Str(s='Run the excited-states calculation.\n\n        Construct and solves the EOM pseudo-eigenvalue problem to obtain the excitation energies\n        and the excitation operators expansion coefficients.\n\n        Args:\n            problem: a class encoding a problem to be solved.\n            aux_operators: Additional auxiliary operators to evaluate.\n\n        Returns:\n            An interpreted :class:`~.EigenstateResult`. For more information see also\n            :meth:`~.BaseProblem.interpret`.\n        ')), If(test=Compare(left=Name(id='aux_operators', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='warning', ctx=Load()), args=[Str(s='With qEOM the auxiliary operators can currently only be evaluated on the ground state.')], keywords=[]))], orelse=[]), Assign(targets=[Name(id='groundstate_result', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_gsc', ctx=Load()), attr='solve', ctx=Load()), args=[Name(id='problem', ctx=Load()), Name(id='aux_operators', ctx=Load())], keywords=[])), Assign(targets=[Name(id='second_q_ops', ctx=Store())], value=Call(func=Attribute(value=Name(id='problem', ctx=Load()), attr='second_q_ops', ctx=Load()), args=[], keywords=[])), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='second_q_ops', ctx=Load()), Name(id='list', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='main_second_q_op', ctx=Store())], value=Subscript(value=Name(id='second_q_ops', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load()))], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='second_q_ops', ctx=Load()), Name(id='dict', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='main_second_q_op', ctx=Store())], value=Call(func=Attribute(value=Name(id='second_q_ops', ctx=Load()), attr='pop', ctx=Load()), args=[Attribute(value=Name(id='problem', ctx=Load()), attr='main_property_name', ctx=Load())], keywords=[]))], orelse=[])]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_untapered_qubit_op_main', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_gsc', ctx=Load()), attr='qubit_converter', ctx=Load()), attr='convert_only', ctx=Load()), args=[Name(id='main_second_q_op', ctx=Load()), Attribute(value=Name(id='problem', ctx=Load()), attr='num_particles', ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='matrix_operators_dict', ctx=Store()), Name(id='size', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_prepare_matrix_operators', ctx=Load()), args=[Name(id='problem', ctx=Load())], keywords=[])), Assign(targets=[Name(id='measurement_results', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_gsc', ctx=Load()), attr='evaluate_operators', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='groundstate_result', ctx=Load()), attr='eigenstates', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load()), Name(id='matrix_operators_dict', ctx=Load())], keywords=[])), Assign(targets=[Name(id='measurement_results', ctx=Store())], value=Call(func=Name(id='cast', ctx=Load()), args=[Subscript(value=Name(id='Dict', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='float', ctx=Load())), ctx=Load())], ctx=Load())), ctx=Load()), Name(id='measurement_results', ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='m_mat', ctx=Store()), Name(id='v_mat', ctx=Store()), Name(id='q_mat', ctx=Store()), Name(id='w_mat', ctx=Store()), Name(id='m_mat_std', ctx=Store()), Name(id='v_mat_std', ctx=Store()), Name(id='q_mat_std', ctx=Store()), Name(id='w_mat_std', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_build_eom_matrices', ctx=Load()), args=[Name(id='measurement_results', ctx=Load()), Name(id='size', ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='energy_gaps', ctx=Store()), Name(id='expansion_coefs', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_compute_excitation_energies', ctx=Load()), args=[Name(id='m_mat', ctx=Load()), Name(id='v_mat', ctx=Load()), Name(id='q_mat', ctx=Load()), Name(id='w_mat', ctx=Load())], keywords=[])), Assign(targets=[Name(id='qeom_result', ctx=Store())], value=Call(func=Name(id='QEOMResult', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='qeom_result', ctx=Load()), attr='ground_state_raw_result', ctx=Store())], value=Attribute(value=Name(id='groundstate_result', ctx=Load()), attr='raw_result', ctx=Load())), Assign(targets=[Attribute(value=Name(id='qeom_result', ctx=Load()), attr='expansion_coefficients', ctx=Store())], value=Name(id='expansion_coefs', ctx=Load())), Assign(targets=[Attribute(value=Name(id='qeom_result', ctx=Load()), attr='excitation_energies', ctx=Store())], value=Name(id='energy_gaps', ctx=Load())), Assign(targets=[Attribute(value=Name(id='qeom_result', ctx=Load()), attr='m_matrix', ctx=Store())], value=Name(id='m_mat', ctx=Load())), Assign(targets=[Attribute(value=Name(id='qeom_result', ctx=Load()), attr='v_matrix', ctx=Store())], value=Name(id='v_mat', ctx=Load())), Assign(targets=[Attribute(value=Name(id='qeom_result', ctx=Load()), attr='q_matrix', ctx=Store())], value=Name(id='q_mat', ctx=Load())), Assign(targets=[Attribute(value=Name(id='qeom_result', ctx=Load()), attr='w_matrix', ctx=Store())], value=Name(id='w_mat', ctx=Load())), Assign(targets=[Attribute(value=Name(id='qeom_result', ctx=Load()), attr='m_matrix_std', ctx=Store())], value=Name(id='m_mat_std', ctx=Load())), Assign(targets=[Attribute(value=Name(id='qeom_result', ctx=Load()), attr='v_matrix_std', ctx=Store())], value=Name(id='v_mat_std', ctx=Load())), Assign(targets=[Attribute(value=Name(id='qeom_result', ctx=Load()), attr='q_matrix_std', ctx=Store())], value=Name(id='q_mat_std', ctx=Load())), Assign(targets=[Attribute(value=Name(id='qeom_result', ctx=Load()), attr='w_matrix_std', ctx=Store())], value=Name(id='w_mat_std', ctx=Load())), Assign(targets=[Name(id='eigenstate_result', ctx=Store())], value=Call(func=Name(id='EigenstateResult', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='eigenstate_result', ctx=Load()), attr='eigenstates', ctx=Store())], value=Attribute(value=Name(id='groundstate_result', ctx=Load()), attr='eigenstates', ctx=Load())), Assign(targets=[Attribute(value=Name(id='eigenstate_result', ctx=Load()), attr='aux_operator_eigenvalues', ctx=Store())], value=Attribute(value=Name(id='groundstate_result', ctx=Load()), attr='aux_operator_eigenvalues', ctx=Load())), Assign(targets=[Attribute(value=Name(id='eigenstate_result', ctx=Load()), attr='raw_result', ctx=Store())], value=Name(id='qeom_result', ctx=Load())), Assign(targets=[Attribute(value=Name(id='eigenstate_result', ctx=Load()), attr='eigenenergies', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Attribute(value=Name(id='groundstate_result', ctx=Load()), attr='eigenenergies', ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='asarray', ctx=Load()), args=[ListComp(elt=BinOp(left=Subscript(value=Attribute(value=Name(id='groundstate_result', ctx=Load()), attr='eigenenergies', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load()), op=Add(), right=Name(id='gap', ctx=Load())), generators=[comprehension(target=Name(id='gap', ctx=Store()), iter=Name(id='energy_gaps', ctx=Load()), ifs=[], is_async=0)])], keywords=[])], keywords=[])), Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Attribute(value=Name(id='problem', ctx=Load()), attr='interpret', ctx=Load()), args=[Name(id='eigenstate_result', ctx=Load())], keywords=[])), Return(value=Name(id='result', ctx=Load()))], decorator_list=[], returns=Name(id='EigenstateResult', ctx=Load()))
FunctionDef(name='_prepare_matrix_operators', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='problem', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Construct the excitation operators for each matrix element.\n\n        Returns:\n            a dictionary of all matrix elements operators and the number of excitations\n            (or the size of the qEOM pseudo-eigenvalue problem)\n        ')), Assign(targets=[Name(id='data', ctx=Store())], value=Call(func=Attribute(value=Name(id='problem', ctx=Load()), attr='hopping_qeom_ops', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_gsc', ctx=Load()), attr='qubit_converter', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_excitations', ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='hopping_operators', ctx=Store()), Name(id='type_of_commutativities', ctx=Store()), Name(id='excitation_indices', ctx=Store())], ctx=Store())], value=Name(id='data', ctx=Load())), Assign(targets=[Name(id='size', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='excitation_indices', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[]), op=FloorDiv(), right=Num(n=2))], keywords=[])), Assign(targets=[Name(id='eom_matrix_operators', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_build_all_commutators', ctx=Load()), args=[Name(id='hopping_operators', ctx=Load()), Name(id='type_of_commutativities', ctx=Load()), Name(id='size', ctx=Load())], keywords=[])), Return(value=Tuple(elts=[Name(id='eom_matrix_operators', ctx=Load()), Name(id='size', ctx=Load())], ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='dict', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load())), ctx=Load()))
FunctionDef(name='_build_all_commutators', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='hopping_operators', annotation=Name(id='dict', ctx=Load())), arg(arg='type_of_commutativities', annotation=Name(id='dict', ctx=Load())), arg(arg='size', annotation=Name(id='int', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Building all commutators for Q, W, M, V matrices.\n\n        Args:\n            hopping_operators: all hopping operators based on excitations_list,\n                key is the string of single/double excitation;\n                value is corresponding operator.\n            type_of_commutativities: if tapering is used, it records the commutativities of\n                hopping operators with the\n                Z2 symmetries found in the original operator.\n            size: the number of excitations (size of the qEOM pseudo-eigenvalue problem)\n\n        Returns:\n            a dictionary that contains the operators for each matrix element\n        ')), Assign(targets=[Name(id='all_matrix_operators', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Tuple(elts=[Name(id='mus', ctx=Store()), Name(id='nus', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='triu_indices', ctx=Load()), args=[Name(id='size', ctx=Load())], keywords=[])), FunctionDef(name='_build_one_sector', args=arguments(args=[arg(arg='available_hopping_ops', annotation=None), arg(arg='untapered_op', annotation=None), arg(arg='z2_symmetries', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Assign(targets=[Name(id='to_be_computed_list', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Tuple(elts=[Name(id='idx', ctx=Store()), Name(id='m_u', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='mus', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='n_u', ctx=Store())], value=Subscript(value=Name(id='nus', ctx=Load()), slice=Index(value=Name(id='idx', ctx=Load())), ctx=Load())), Assign(targets=[Name(id='left_op', ctx=Store())], value=Call(func=Attribute(value=Name(id='available_hopping_ops', ctx=Load()), attr='get', ctx=Load()), args=[JoinedStr(values=[Str(s='E_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None)])], keywords=[])), Assign(targets=[Name(id='right_op_1', ctx=Store())], value=Call(func=Attribute(value=Name(id='available_hopping_ops', ctx=Load()), attr='get', ctx=Load()), args=[JoinedStr(values=[Str(s='E_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])], keywords=[])), Assign(targets=[Name(id='right_op_2', ctx=Store())], value=Call(func=Attribute(value=Name(id='available_hopping_ops', ctx=Load()), attr='get', ctx=Load()), args=[JoinedStr(values=[Str(s='Edag_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='to_be_computed_list', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Name(id='m_u', ctx=Load()), Name(id='n_u', ctx=Load()), Name(id='left_op', ctx=Load()), Name(id='right_op_1', ctx=Load()), Name(id='right_op_2', ctx=Load())], ctx=Load())], keywords=[]))], orelse=[]), If(test=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='isEnabledFor', ctx=Load()), args=[Attribute(value=Name(id='logging', ctx=Load()), attr='INFO', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='info', ctx=Load()), args=[Str(s='Building all commutators:')], keywords=[])), Expr(value=Call(func=Name(id='TextProgressBar', ctx=Load()), args=[Attribute(value=Name(id='sys', ctx=Load()), attr='stderr', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='results', ctx=Store())], value=Call(func=Name(id='parallel_map', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_build_commutator_routine', ctx=Load()), Name(id='to_be_computed_list', ctx=Load())], keywords=[keyword(arg='task_args', value=Tuple(elts=[Name(id='untapered_op', ctx=Load()), Name(id='z2_symmetries', ctx=Load())], ctx=Load())), keyword(arg='num_processes', value=Attribute(value=Name(id='algorithm_globals', ctx=Load()), attr='num_processes', ctx=Load()))])), For(target=Name(id='result', ctx=Store()), iter=Name(id='results', ctx=Load()), body=[Assign(targets=[Tuple(elts=[Name(id='m_u', ctx=Store()), Name(id='n_u', ctx=Store()), Name(id='q_mat_op', ctx=Store()), Name(id='w_mat_op', ctx=Store()), Name(id='m_mat_op', ctx=Store()), Name(id='v_mat_op', ctx=Store())], ctx=Store())], value=Name(id='result', ctx=Load())), If(test=Compare(left=Name(id='q_mat_op', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=[Assign(targets=[Subscript(value=Name(id='all_matrix_operators', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='q_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])), ctx=Store())], value=Name(id='q_mat_op', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='w_mat_op', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=[Assign(targets=[Subscript(value=Name(id='all_matrix_operators', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='w_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])), ctx=Store())], value=Name(id='w_mat_op', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='m_mat_op', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=[Assign(targets=[Subscript(value=Name(id='all_matrix_operators', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='m_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])), ctx=Store())], value=Name(id='m_mat_op', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='v_mat_op', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=[Assign(targets=[Subscript(value=Name(id='all_matrix_operators', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='v_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])), ctx=Store())], value=Name(id='v_mat_op', ctx=Load()))], orelse=[])], orelse=[])], decorator_list=[], returns=None), Try(body=[Assign(targets=[Name(id='z2_symmetries', ctx=Store())], value=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_gsc', ctx=Load()), attr='qubit_converter', ctx=Load()), attr='z2symmetries', ctx=Load()))], handlers=[ExceptHandler(type=Name(id='AttributeError', ctx=Load()), name=None, body=[Assign(targets=[Name(id='z2_symmetries', ctx=Store())], value=Call(func=Name(id='Z2Symmetries', ctx=Load()), args=[List(elts=[], ctx=Load()), List(elts=[], ctx=Load()), List(elts=[], ctx=Load())], keywords=[]))])], orelse=[], finalbody=[]), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='z2_symmetries', ctx=Load()), attr='is_empty', ctx=Load()), args=[], keywords=[])), body=[Assign(targets=[Name(id='combinations', ctx=Store())], value=Call(func=Attribute(value=Name(id='itertools', ctx=Load()), attr='product', ctx=Load()), args=[List(elts=[Num(n=1), UnaryOp(op=USub(), operand=Num(n=1))], ctx=Load())], keywords=[keyword(arg='repeat', value=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='z2_symmetries', ctx=Load()), attr='symmetries', ctx=Load())], keywords=[]))])), For(target=Name(id='targeted_tapering_values', ctx=Store()), iter=Name(id='combinations', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='info', ctx=Load()), args=[Str(s='In sector: (%s)'), Call(func=Attribute(value=Str(s=','), attr='join', ctx=Load()), args=[ListComp(elt=Call(func=Name(id='str', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='targeted_tapering_values', ctx=Load()), ifs=[], is_async=0)])], keywords=[])], keywords=[])), Assign(targets=[Name(id='available_hopping_ops', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='targeted_sector', ctx=Store())], value=Compare(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='asarray', ctx=Load()), args=[Name(id='targeted_tapering_values', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Num(n=1)])), For(target=Tuple(elts=[Name(id='key', ctx=Store()), Name(id='value', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='type_of_commutativities', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Name(id='value', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='asarray', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[])), If(test=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='all', ctx=Load()), args=[Compare(left=Name(id='value', ctx=Load()), ops=[Eq()], comparators=[Name(id='targeted_sector', ctx=Load())])], keywords=[]), body=[Assign(targets=[Subscript(value=Name(id='available_hopping_ops', ctx=Load()), slice=Index(value=Name(id='key', ctx=Load())), ctx=Store())], value=Subscript(value=Name(id='hopping_operators', ctx=Load()), slice=Index(value=Name(id='key', ctx=Load())), ctx=Load()))], orelse=[])], orelse=[]), Expr(value=Call(func=Name(id='_build_one_sector', ctx=Load()), args=[Name(id='available_hopping_ops', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_untapered_qubit_op_main', ctx=Load()), Name(id='z2_symmetries', ctx=Load())], keywords=[]))], orelse=[])], orelse=[Expr(value=Call(func=Name(id='_build_one_sector', ctx=Load()), args=[Name(id='hopping_operators', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_untapered_qubit_op_main', ctx=Load()), Name(id='z2_symmetries', ctx=Load())], keywords=[]))]), Return(value=Name(id='all_matrix_operators', ctx=Load()))], decorator_list=[], returns=Name(id='dict', ctx=Load()))
FunctionDef(name='_build_commutator_routine', args=arguments(args=[arg(arg='params', annotation=Name(id='List', ctx=Load())), arg(arg='operator', annotation=Name(id='PauliSumOp', ctx=Load())), arg(arg='z2_symmetries', annotation=Name(id='Z2Symmetries', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Numerically computes the commutator / double commutator between operators.\n\n        Args:\n            params: list containing the indices of matrix element and the corresponding\n                excitation operators\n            operator: the hamiltonian\n            z2_symmetries: z2_symmetries in case of tapering\n\n        Returns:\n            The indices of the matrix element and the corresponding qubit\n            operator for each of the EOM matrices\n        ')), Assign(targets=[Tuple(elts=[Name(id='m_u', ctx=Store()), Name(id='n_u', ctx=Store()), Name(id='left_op', ctx=Store()), Name(id='right_op_1', ctx=Store()), Name(id='right_op_2', ctx=Store())], ctx=Store())], value=Name(id='params', ctx=Load())), If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='left_op', ctx=Load()), ops=[Is()], comparators=[NameConstant(value=None)]), BoolOp(op=And(), values=[Compare(left=Name(id='right_op_1', ctx=Load()), ops=[Is()], comparators=[NameConstant(value=None)]), Compare(left=Name(id='right_op_2', ctx=Load()), ops=[Is()], comparators=[NameConstant(value=None)])])]), body=[Assign(targets=[Name(id='q_mat_op', ctx=Store())], value=NameConstant(value=None)), Assign(targets=[Name(id='w_mat_op', ctx=Store())], value=NameConstant(value=None)), Assign(targets=[Name(id='m_mat_op', ctx=Store())], value=NameConstant(value=None)), Assign(targets=[Name(id='v_mat_op', ctx=Store())], value=NameConstant(value=None))], orelse=[If(test=Compare(left=Name(id='right_op_1', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=[Assign(targets=[Name(id='q_mat_op', ctx=Store())], value=Call(func=Name(id='double_commutator', ctx=Load()), args=[Name(id='left_op', ctx=Load()), Name(id='operator', ctx=Load()), Name(id='right_op_1', ctx=Load())], keywords=[keyword(arg='sign', value=NameConstant(value=False))])), Assign(targets=[Name(id='w_mat_op', ctx=Store())], value=Call(func=Name(id='commutator', ctx=Load()), args=[Name(id='left_op', ctx=Load()), Name(id='right_op_1', ctx=Load())], keywords=[])), Assign(targets=[Name(id='q_mat_op', ctx=Store())], value=IfExp(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='q_mat_op', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Num(n=0)]), body=NameConstant(value=None), orelse=Name(id='q_mat_op', ctx=Load()))), Assign(targets=[Name(id='w_mat_op', ctx=Store())], value=IfExp(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='w_mat_op', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Num(n=0)]), body=NameConstant(value=None), orelse=Name(id='w_mat_op', ctx=Load())))], orelse=[Assign(targets=[Name(id='q_mat_op', ctx=Store())], value=NameConstant(value=None)), Assign(targets=[Name(id='w_mat_op', ctx=Store())], value=NameConstant(value=None))]), If(test=Compare(left=Name(id='right_op_2', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=[Assign(targets=[Name(id='m_mat_op', ctx=Store())], value=Call(func=Name(id='double_commutator', ctx=Load()), args=[Name(id='left_op', ctx=Load()), Name(id='operator', ctx=Load()), Name(id='right_op_2', ctx=Load())], keywords=[keyword(arg='sign', value=NameConstant(value=False))])), Assign(targets=[Name(id='v_mat_op', ctx=Store())], value=Call(func=Name(id='commutator', ctx=Load()), args=[Name(id='left_op', ctx=Load()), Name(id='right_op_2', ctx=Load())], keywords=[])), Assign(targets=[Name(id='m_mat_op', ctx=Store())], value=IfExp(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='m_mat_op', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Num(n=0)]), body=NameConstant(value=None), orelse=Name(id='m_mat_op', ctx=Load()))), Assign(targets=[Name(id='v_mat_op', ctx=Store())], value=IfExp(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='v_mat_op', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Num(n=0)]), body=NameConstant(value=None), orelse=Name(id='v_mat_op', ctx=Load())))], orelse=[Assign(targets=[Name(id='m_mat_op', ctx=Store())], value=NameConstant(value=None)), Assign(targets=[Name(id='v_mat_op', ctx=Store())], value=NameConstant(value=None))]), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='z2_symmetries', ctx=Load()), attr='is_empty', ctx=Load()), args=[], keywords=[])), body=[If(test=BoolOp(op=And(), values=[Compare(left=Name(id='q_mat_op', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='q_mat_op', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Num(n=0)])]), body=[Assign(targets=[Name(id='q_mat_op', ctx=Store())], value=Call(func=Attribute(value=Name(id='z2_symmetries', ctx=Load()), attr='taper', ctx=Load()), args=[Name(id='q_mat_op', ctx=Load())], keywords=[]))], orelse=[]), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='w_mat_op', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='w_mat_op', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Num(n=0)])]), body=[Assign(targets=[Name(id='w_mat_op', ctx=Store())], value=Call(func=Attribute(value=Name(id='z2_symmetries', ctx=Load()), attr='taper', ctx=Load()), args=[Name(id='w_mat_op', ctx=Load())], keywords=[]))], orelse=[]), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='m_mat_op', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='m_mat_op', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Num(n=0)])]), body=[Assign(targets=[Name(id='m_mat_op', ctx=Store())], value=Call(func=Attribute(value=Name(id='z2_symmetries', ctx=Load()), attr='taper', ctx=Load()), args=[Name(id='m_mat_op', ctx=Load())], keywords=[]))], orelse=[]), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='v_mat_op', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='v_mat_op', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Num(n=0)])]), body=[Assign(targets=[Name(id='v_mat_op', ctx=Store())], value=Call(func=Attribute(value=Name(id='z2_symmetries', ctx=Load()), attr='taper', ctx=Load()), args=[Name(id='v_mat_op', ctx=Load())], keywords=[]))], orelse=[])], orelse=[])]), Return(value=Tuple(elts=[Name(id='m_u', ctx=Load()), Name(id='n_u', ctx=Load()), Name(id='q_mat_op', ctx=Load()), Name(id='w_mat_op', ctx=Load()), Name(id='m_mat_op', ctx=Load()), Name(id='v_mat_op', ctx=Load())], ctx=Load()))], decorator_list=[Name(id='staticmethod', ctx=Load())], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='int', ctx=Load()), Name(id='PauliSumOp', ctx=Load()), Name(id='PauliSumOp', ctx=Load()), Name(id='PauliSumOp', ctx=Load()), Name(id='PauliSumOp', ctx=Load())], ctx=Load())), ctx=Load()))
FunctionDef(name='_build_eom_matrices', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='gs_results', annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='float', ctx=Load())), ctx=Load())], ctx=Load())), ctx=Load())), arg(arg='size', annotation=Name(id='int', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Constructs the M, V, Q and W matrices from the results on the ground state\n\n        Args:\n            gs_results: a ground state result object\n            size: size of eigenvalue problem\n\n        Returns:\n            the matrices and their standard deviation\n        ')), Assign(targets=[Tuple(elts=[Name(id='mus', ctx=Store()), Name(id='nus', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='triu_indices', ctx=Load()), args=[Name(id='size', ctx=Load())], keywords=[])), Assign(targets=[Name(id='m_mat', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='zeros', ctx=Load()), args=[Tuple(elts=[Name(id='size', ctx=Load()), Name(id='size', ctx=Load())], ctx=Load())], keywords=[keyword(arg='dtype', value=Name(id='complex', ctx=Load()))])), Assign(targets=[Name(id='v_mat', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='zeros', ctx=Load()), args=[Tuple(elts=[Name(id='size', ctx=Load()), Name(id='size', ctx=Load())], ctx=Load())], keywords=[keyword(arg='dtype', value=Name(id='complex', ctx=Load()))])), Assign(targets=[Name(id='q_mat', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='zeros', ctx=Load()), args=[Tuple(elts=[Name(id='size', ctx=Load()), Name(id='size', ctx=Load())], ctx=Load())], keywords=[keyword(arg='dtype', value=Name(id='complex', ctx=Load()))])), Assign(targets=[Name(id='w_mat', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='zeros', ctx=Load()), args=[Tuple(elts=[Name(id='size', ctx=Load()), Name(id='size', ctx=Load())], ctx=Load())], keywords=[keyword(arg='dtype', value=Name(id='complex', ctx=Load()))])), Assign(targets=[Tuple(elts=[Name(id='m_mat_std', ctx=Store()), Name(id='v_mat_std', ctx=Store()), Name(id='q_mat_std', ctx=Store()), Name(id='w_mat_std', ctx=Store())], ctx=Store())], value=Tuple(elts=[Num(n=0.0), Num(n=0.0), Num(n=0.0), Num(n=0.0)], ctx=Load())), For(target=Tuple(elts=[Name(id='idx', ctx=Store()), Name(id='m_u', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='mus', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='n_u', ctx=Store())], value=Subscript(value=Name(id='nus', ctx=Load()), slice=Index(value=Name(id='idx', ctx=Load())), ctx=Load())), Assign(targets=[Subscript(value=Subscript(value=Name(id='q_mat', ctx=Load()), slice=Index(value=Name(id='m_u', ctx=Load())), ctx=Load()), slice=Index(value=Name(id='n_u', ctx=Load())), ctx=Store())], value=IfExp(test=Compare(left=Call(func=Attribute(value=Name(id='gs_results', ctx=Load()), attr='get', ctx=Load()), args=[JoinedStr(values=[Str(s='q_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])], keywords=[]), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=Subscript(value=Subscript(value=Name(id='gs_results', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='q_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])), ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load()), orelse=Subscript(value=Subscript(value=Name(id='q_mat', ctx=Load()), slice=Index(value=Name(id='m_u', ctx=Load())), ctx=Load()), slice=Index(value=Name(id='n_u', ctx=Load())), ctx=Load()))), Assign(targets=[Subscript(value=Subscript(value=Name(id='w_mat', ctx=Load()), slice=Index(value=Name(id='m_u', ctx=Load())), ctx=Load()), slice=Index(value=Name(id='n_u', ctx=Load())), ctx=Store())], value=IfExp(test=Compare(left=Call(func=Attribute(value=Name(id='gs_results', ctx=Load()), attr='get', ctx=Load()), args=[JoinedStr(values=[Str(s='w_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])], keywords=[]), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=Subscript(value=Subscript(value=Name(id='gs_results', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='w_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])), ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load()), orelse=Subscript(value=Subscript(value=Name(id='w_mat', ctx=Load()), slice=Index(value=Name(id='m_u', ctx=Load())), ctx=Load()), slice=Index(value=Name(id='n_u', ctx=Load())), ctx=Load()))), Assign(targets=[Subscript(value=Subscript(value=Name(id='m_mat', ctx=Load()), slice=Index(value=Name(id='m_u', ctx=Load())), ctx=Load()), slice=Index(value=Name(id='n_u', ctx=Load())), ctx=Store())], value=IfExp(test=Compare(left=Call(func=Attribute(value=Name(id='gs_results', ctx=Load()), attr='get', ctx=Load()), args=[JoinedStr(values=[Str(s='m_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])], keywords=[]), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=Subscript(value=Subscript(value=Name(id='gs_results', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='m_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])), ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load()), orelse=Subscript(value=Subscript(value=Name(id='m_mat', ctx=Load()), slice=Index(value=Name(id='m_u', ctx=Load())), ctx=Load()), slice=Index(value=Name(id='n_u', ctx=Load())), ctx=Load()))), Assign(targets=[Subscript(value=Subscript(value=Name(id='v_mat', ctx=Load()), slice=Index(value=Name(id='m_u', ctx=Load())), ctx=Load()), slice=Index(value=Name(id='n_u', ctx=Load())), ctx=Store())], value=IfExp(test=Compare(left=Call(func=Attribute(value=Name(id='gs_results', ctx=Load()), attr='get', ctx=Load()), args=[JoinedStr(values=[Str(s='v_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])], keywords=[]), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=Subscript(value=Subscript(value=Name(id='gs_results', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='v_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])), ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load()), orelse=Subscript(value=Subscript(value=Name(id='v_mat', ctx=Load()), slice=Index(value=Name(id='m_u', ctx=Load())), ctx=Load()), slice=Index(value=Name(id='n_u', ctx=Load())), ctx=Load()))), AugAssign(target=Name(id='q_mat_std', ctx=Store()), op=Add(), value=IfExp(test=Compare(left=Call(func=Attribute(value=Name(id='gs_results', ctx=Load()), attr='get', ctx=Load()), args=[JoinedStr(values=[Str(s='q_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_std')])], keywords=[]), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=Subscript(value=Subscript(value=Name(id='gs_results', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='q_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_std')])), ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load()), orelse=Num(n=0))), AugAssign(target=Name(id='w_mat_std', ctx=Store()), op=Add(), value=IfExp(test=Compare(left=Call(func=Attribute(value=Name(id='gs_results', ctx=Load()), attr='get', ctx=Load()), args=[JoinedStr(values=[Str(s='w_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_std')])], keywords=[]), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=Subscript(value=Subscript(value=Name(id='gs_results', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='w_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_std')])), ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load()), orelse=Num(n=0))), AugAssign(target=Name(id='m_mat_std', ctx=Store()), op=Add(), value=IfExp(test=Compare(left=Call(func=Attribute(value=Name(id='gs_results', ctx=Load()), attr='get', ctx=Load()), args=[JoinedStr(values=[Str(s='m_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_std')])], keywords=[]), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=Subscript(value=Subscript(value=Name(id='gs_results', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='m_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_std')])), ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load()), orelse=Num(n=0))), AugAssign(target=Name(id='v_mat_std', ctx=Store()), op=Add(), value=IfExp(test=Compare(left=Call(func=Attribute(value=Name(id='gs_results', ctx=Load()), attr='get', ctx=Load()), args=[JoinedStr(values=[Str(s='v_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_std')])], keywords=[]), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=Subscript(value=Subscript(value=Name(id='gs_results', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='v_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_std')])), ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load()), orelse=Num(n=0)))], orelse=[]), Assign(targets=[Name(id='q_mat', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='q_mat', ctx=Load()), op=Add(), right=Attribute(value=Name(id='q_mat', ctx=Load()), attr='T', ctx=Load())), op=Sub(), right=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='identity', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='q_mat', ctx=Load()), attr='shape', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())], keywords=[]), op=Mult(), right=Name(id='q_mat', ctx=Load())))), Assign(targets=[Name(id='w_mat', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='w_mat', ctx=Load()), op=Add(), right=Attribute(value=Name(id='w_mat', ctx=Load()), attr='T', ctx=Load())), op=Sub(), right=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='identity', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='w_mat', ctx=Load()), attr='shape', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())], keywords=[]), op=Mult(), right=Name(id='w_mat', ctx=Load())))), Assign(targets=[Name(id='m_mat', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='m_mat', ctx=Load()), op=Add(), right=Attribute(value=Name(id='m_mat', ctx=Load()), attr='T', ctx=Load())), op=Sub(), right=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='identity', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='m_mat', ctx=Load()), attr='shape', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())], keywords=[]), op=Mult(), right=Name(id='m_mat', ctx=Load())))), Assign(targets=[Name(id='v_mat', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='v_mat', ctx=Load()), op=Add(), right=Attribute(value=Name(id='v_mat', ctx=Load()), attr='T', ctx=Load())), op=Sub(), right=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='identity', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='v_mat', ctx=Load()), attr='shape', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())], keywords=[]), op=Mult(), right=Name(id='v_mat', ctx=Load())))), Assign(targets=[Name(id='q_mat', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='real', ctx=Load()), args=[Name(id='q_mat', ctx=Load())], keywords=[])), Assign(targets=[Name(id='w_mat', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='real', ctx=Load()), args=[Name(id='w_mat', ctx=Load())], keywords=[])), Assign(targets=[Name(id='m_mat', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='real', ctx=Load()), args=[Name(id='m_mat', ctx=Load())], keywords=[])), Assign(targets=[Name(id='v_mat', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='real', ctx=Load()), args=[Name(id='v_mat', ctx=Load())], keywords=[])), Assign(targets=[Name(id='q_mat_std', ctx=Store())], value=BinOp(left=Name(id='q_mat_std', ctx=Load()), op=Div(), right=Call(func=Name(id='float', ctx=Load()), args=[BinOp(left=Name(id='size', ctx=Load()), op=Pow(), right=Num(n=2))], keywords=[]))), Assign(targets=[Name(id='w_mat_std', ctx=Store())], value=BinOp(left=Name(id='w_mat_std', ctx=Load()), op=Div(), right=Call(func=Name(id='float', ctx=Load()), args=[BinOp(left=Name(id='size', ctx=Load()), op=Pow(), right=Num(n=2))], keywords=[]))), Assign(targets=[Name(id='m_mat_std', ctx=Store())], value=BinOp(left=Name(id='m_mat_std', ctx=Load()), op=Div(), right=Call(func=Name(id='float', ctx=Load()), args=[BinOp(left=Name(id='size', ctx=Load()), op=Pow(), right=Num(n=2))], keywords=[]))), Assign(targets=[Name(id='v_mat_std', ctx=Store())], value=BinOp(left=Name(id='v_mat_std', ctx=Load()), op=Div(), right=Call(func=Name(id='float', ctx=Load()), args=[BinOp(left=Name(id='size', ctx=Load()), op=Pow(), right=Num(n=2))], keywords=[]))), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Str(s='\nQ:=========================\n%s'), Name(id='q_mat', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Str(s='\nW:=========================\n%s'), Name(id='w_mat', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Str(s='\nM:=========================\n%s'), Name(id='m_mat', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Str(s='\nV:=========================\n%s'), Name(id='v_mat', ctx=Load())], keywords=[])), Return(value=Tuple(elts=[Name(id='m_mat', ctx=Load()), Name(id='v_mat', ctx=Load()), Name(id='q_mat', ctx=Load()), Name(id='w_mat', ctx=Load()), Name(id='m_mat_std', ctx=Load()), Name(id='v_mat_std', ctx=Load()), Name(id='q_mat_std', ctx=Load()), Name(id='w_mat_std', ctx=Load())], ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Index(value=Tuple(elts=[Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Name(id='float', ctx=Load()), Name(id='float', ctx=Load()), Name(id='float', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load())), ctx=Load()))
FunctionDef(name='_compute_excitation_energies', args=arguments(args=[arg(arg='m_mat', annotation=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), arg(arg='v_mat', annotation=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), arg(arg='q_mat', annotation=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), arg(arg='w_mat', annotation=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Diagonalizing M, V, Q, W matrices for excitation energies.\n\n        Args:\n            m_mat : M matrices\n            v_mat : V matrices\n            q_mat : Q matrices\n            w_mat : W matrices\n\n        Returns:\n            1-D vector stores all energy gap to reference state\n            2-D array storing the X and Y expansion coefficients\n        ')), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Str(s='Diagonalizing qeom matrices for excited states...')], keywords=[])), Assign(targets=[Name(id='a_mat', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='np', ctx=Load()), attr='matrixlib', ctx=Load()), attr='bmat', ctx=Load()), args=[List(elts=[List(elts=[Name(id='m_mat', ctx=Load()), Name(id='q_mat', ctx=Load())], ctx=Load()), List(elts=[Call(func=Attribute(value=Attribute(value=Name(id='q_mat', ctx=Load()), attr='T', ctx=Load()), attr='conj', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Attribute(value=Name(id='m_mat', ctx=Load()), attr='T', ctx=Load()), attr='conj', ctx=Load()), args=[], keywords=[])], ctx=Load())], ctx=Load())], keywords=[])), Assign(targets=[Name(id='b_mat', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='np', ctx=Load()), attr='matrixlib', ctx=Load()), attr='bmat', ctx=Load()), args=[List(elts=[List(elts=[Name(id='v_mat', ctx=Load()), Name(id='w_mat', ctx=Load())], ctx=Load()), List(elts=[UnaryOp(op=USub(), operand=Call(func=Attribute(value=Attribute(value=Name(id='w_mat', ctx=Load()), attr='T', ctx=Load()), attr='conj', ctx=Load()), args=[], keywords=[])), UnaryOp(op=USub(), operand=Call(func=Attribute(value=Attribute(value=Name(id='v_mat', ctx=Load()), attr='T', ctx=Load()), attr='conj', ctx=Load()), args=[], keywords=[]))], ctx=Load())], ctx=Load())], keywords=[])), Assign(targets=[Name(id='res', ctx=Store())], value=Call(func=Attribute(value=Name(id='linalg', ctx=Load()), attr='eig', ctx=Load()), args=[Name(id='a_mat', ctx=Load()), Name(id='b_mat', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Subscript(value=Name(id='res', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load()), slice=Index(value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='isnan', ctx=Load()), args=[Subscript(value=Name(id='res', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())], keywords=[])], keywords=[])), ctx=Store())], value=Num(n=0.0)), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Str(s='... %s'), Subscript(value=Name(id='res', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())], keywords=[])), Assign(targets=[Name(id='w', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sort', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='real', ctx=Load()), args=[Subscript(value=Name(id='res', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Str(s='Sorted real parts %s'), Name(id='w', ctx=Load())], keywords=[])), Assign(targets=[Name(id='w', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='abs', ctx=Load()), args=[Subscript(value=Name(id='w', ctx=Load()), slice=Slice(lower=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='w', ctx=Load())], keywords=[]), op=FloorDiv(), right=Num(n=2)), upper=None, step=None), ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Name(id='w', ctx=Load()), slice=Index(value=Compare(left=Name(id='w', ctx=Load()), ops=[Lt()], comparators=[Num(n=1e-06)])), ctx=Store())], value=Num(n=0)), Assign(targets=[Name(id='excitation_energies_gap', ctx=Store())], value=Name(id='w', ctx=Load())), Return(value=Tuple(elts=[Name(id='excitation_energies_gap', ctx=Load()), Subscript(value=Name(id='res', ctx=Load()), slice=Index(value=Num(n=1)), ctx=Load())], ctx=Load()))], decorator_list=[Name(id='staticmethod', ctx=Load())], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Index(value=Tuple(elts=[Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())], ctx=Load())), ctx=Load()))
Name(id='AlgorithmResult', ctx=Load())
Expr(value=Str(s='The results class for the QEOM algorithm.'))
FunctionDef(name='__init__', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_ground_state_raw_result', ctx=Store())], value=NameConstant(value=None)), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_excitation_energies', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), ctx=Load()), value=NameConstant(value=None), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_expansion_coefficients', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), ctx=Load()), value=NameConstant(value=None), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_m_matrix', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), ctx=Load()), value=NameConstant(value=None), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_v_matrix', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), ctx=Load()), value=NameConstant(value=None), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_q_matrix', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), ctx=Load()), value=NameConstant(value=None), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_w_matrix', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), ctx=Load()), value=NameConstant(value=None), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_v_matrix_std', ctx=Store()), annotation=Name(id='float', ctx=Load()), value=Num(n=0.0), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_q_matrix_std', ctx=Store()), annotation=Name(id='float', ctx=Load()), value=Num(n=0.0), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_w_matrix_std', ctx=Store()), annotation=Name(id='float', ctx=Load()), value=Num(n=0.0), simple=0)], decorator_list=[], returns=NameConstant(value=None))
FunctionDef(name='ground_state_raw_result', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='returns ground state raw result')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_ground_state_raw_result', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=None)
FunctionDef(name='ground_state_raw_result', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='value', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='sets ground state raw result')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_ground_state_raw_result', ctx=Store())], value=Name(id='value', ctx=Load()))], decorator_list=[Attribute(value=Name(id='ground_state_raw_result', ctx=Load()), attr='setter', ctx=Load())], returns=NameConstant(value=None))
FunctionDef(name='excitation_energies', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='returns the excitation energies (energy gaps)')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_excitation_energies', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), ctx=Load()))
FunctionDef(name='excitation_energies', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='value', annotation=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='sets the excitation energies (energy gaps)')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_excitation_energies', ctx=Store())], value=Name(id='value', ctx=Load()))], decorator_list=[Attribute(value=Name(id='excitation_energies', ctx=Load()), attr='setter', ctx=Load())], returns=NameConstant(value=None))
FunctionDef(name='expansion_coefficients', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='returns the X and Y expansion coefficients')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_expansion_coefficients', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), ctx=Load()))
FunctionDef(name='expansion_coefficients', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='value', annotation=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='sets the X and Y expansion coefficients')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_expansion_coefficients', ctx=Store())], value=Name(id='value', ctx=Load()))], decorator_list=[Attribute(value=Name(id='expansion_coefficients', ctx=Load()), attr='setter', ctx=Load())], returns=NameConstant(value=None))
FunctionDef(name='m_matrix', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='returns the M matrix')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_m_matrix', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), ctx=Load()))
FunctionDef(name='m_matrix', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='value', annotation=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='sets the M matrix')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_m_matrix', ctx=Store())], value=Name(id='value', ctx=Load()))], decorator_list=[Attribute(value=Name(id='m_matrix', ctx=Load()), attr='setter', ctx=Load())], returns=NameConstant(value=None))
FunctionDef(name='v_matrix', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='returns the V matrix')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_v_matrix', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), ctx=Load()))
FunctionDef(name='v_matrix', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='value', annotation=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='sets the V matrix')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_v_matrix', ctx=Store())], value=Name(id='value', ctx=Load()))], decorator_list=[Attribute(value=Name(id='v_matrix', ctx=Load()), attr='setter', ctx=Load())], returns=NameConstant(value=None))
FunctionDef(name='q_matrix', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='returns the Q matrix')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_q_matrix', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), ctx=Load()))
FunctionDef(name='q_matrix', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='value', annotation=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='sets the Q matrix')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_q_matrix', ctx=Store())], value=Name(id='value', ctx=Load()))], decorator_list=[Attribute(value=Name(id='q_matrix', ctx=Load()), attr='setter', ctx=Load())], returns=NameConstant(value=None))
FunctionDef(name='w_matrix', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='returns the W matrix')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_w_matrix', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), ctx=Load()))
FunctionDef(name='w_matrix', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='value', annotation=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='sets the W matrix')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_w_matrix', ctx=Store())], value=Name(id='value', ctx=Load()))], decorator_list=[Attribute(value=Name(id='w_matrix', ctx=Load()), attr='setter', ctx=Load())], returns=NameConstant(value=None))
FunctionDef(name='m_matrix_std', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='returns the M matrix standard deviation')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_m_matrix_std', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='float', ctx=Load()))
FunctionDef(name='m_matrix_std', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='value', annotation=Name(id='float', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='sets the M matrix standard deviation')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_m_matrix_std', ctx=Store())], value=Name(id='value', ctx=Load()))], decorator_list=[Attribute(value=Name(id='m_matrix_std', ctx=Load()), attr='setter', ctx=Load())], returns=NameConstant(value=None))
FunctionDef(name='v_matrix_std', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='returns the V matrix standard deviation')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_v_matrix_std', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='float', ctx=Load()))
FunctionDef(name='v_matrix_std', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='value', annotation=Name(id='float', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='sets the V matrix standard deviation')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_v_matrix_std', ctx=Store())], value=Name(id='value', ctx=Load()))], decorator_list=[Attribute(value=Name(id='v_matrix_std', ctx=Load()), attr='setter', ctx=Load())], returns=NameConstant(value=None))
FunctionDef(name='q_matrix_std', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='returns the Q matrix standard deviation')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_q_matrix_std', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='float', ctx=Load()))
FunctionDef(name='q_matrix_std', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='value', annotation=Name(id='float', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='sets the Q matrix standard deviation')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_q_matrix_std', ctx=Store())], value=Name(id='value', ctx=Load()))], decorator_list=[Attribute(value=Name(id='q_matrix_std', ctx=Load()), attr='setter', ctx=Load())], returns=NameConstant(value=None))
FunctionDef(name='w_matrix_std', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='returns the W matrix standard deviation')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_w_matrix_std', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='float', ctx=Load()))
FunctionDef(name='w_matrix_std', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='value', annotation=Name(id='float', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='sets the W matrix standard deviation')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_w_matrix_std', ctx=Store())], value=Name(id='value', ctx=Load()))], decorator_list=[Attribute(value=Name(id='w_matrix_std', ctx=Load()), attr='setter', ctx=Load())], returns=NameConstant(value=None))
Store()
Attribute(value=Name(id='logging', ctx=Load()), attr='getLogger', ctx=Load())
Name(id='__name__', ctx=Load())
Load()
Str(s='The calculation of excited states via the qEOM algorithm')
arguments(args=[arg(arg='self', annotation=None), arg(arg='ground_state_solver', annotation=Name(id='GroundStateSolver', ctx=Load())), arg(arg='excitations', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='int', ctx=Load())), ctx=Load())), ctx=Load())], ctx=Load())), ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[Str(s='sd')])
Expr(value=Str(s="\n        Args:\n            ground_state_solver: a GroundStateSolver object. The qEOM algorithm\n                will use this ground state to compute the EOM matrix elements\n            excitations: The excitations to be included in the eom pseudo-eigenvalue problem.\n                If a string ('s', 'd' or 'sd') then all excitations of the given type will be used.\n                Otherwise a list of custom excitations can directly be provided.\n        "))
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_gsc', ctx=Store())], value=Name(id='ground_state_solver', ctx=Load()))
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='excitations', ctx=Store())], value=Name(id='excitations', ctx=Load()))
AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_untapered_qubit_op_main', ctx=Store()), annotation=Name(id='PauliSumOp', ctx=Load()), value=NameConstant(value=None), simple=0)
NameConstant(value=None)
arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Expr(value=Str(s='Returns the excitations to be included in the eom pseudo-eigenvalue problem.'))
Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_excitations', ctx=Load()))
Name(id='property', ctx=Load())
Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='int', ctx=Load())), ctx=Load())), ctx=Load())], ctx=Load())), ctx=Load())
arguments(args=[arg(arg='self', annotation=None), arg(arg='excitations', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='int', ctx=Load())), ctx=Load())), ctx=Load())], ctx=Load())), ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Expr(value=Str(s='The excitations to be included in the eom pseudo-eigenvalue problem. If a string then\n        all excitations of given type will be used. Otherwise a list of custom excitations can\n        directly be provided.'))
If(test=BoolOp(op=And(), values=[Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='excitations', ctx=Load()), Name(id='str', ctx=Load())], keywords=[]), Compare(left=Name(id='excitations', ctx=Load()), ops=[NotIn()], comparators=[List(elts=[Str(s='s'), Str(s='d'), Str(s='sd')], ctx=Load())])]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Str(s='Excitation type must be s (singles), d (doubles) or sd (singles and doubles)')], keywords=[]), cause=None)], orelse=[])
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_excitations', ctx=Store())], value=Name(id='excitations', ctx=Load()))
Attribute(value=Name(id='excitations', ctx=Load()), attr='setter', ctx=Load())
NameConstant(value=None)
arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Return(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_gsc', ctx=Load()), attr='solver', ctx=Load()))
Name(id='property', ctx=Load())
arguments(args=[arg(arg='self', annotation=None), arg(arg='problem', annotation=Name(id='BaseProblem', ctx=Load())), arg(arg='aux_operators', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Subscript(value=Name(id='ListOrDictType', ctx=Load()), slice=Index(value=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='SecondQuantizedOp', ctx=Load()), Name(id='PauliSumOp', ctx=Load())], ctx=Load())), ctx=Load())), ctx=Load())), ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[NameConstant(value=None)])
Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_gsc', ctx=Load()), attr='get_qubit_operators', ctx=Load()), args=[Name(id='problem', ctx=Load()), Name(id='aux_operators', ctx=Load())], keywords=[]))
Subscript(value=Name(id='Tuple', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='PauliSumOp', ctx=Load()), Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Subscript(value=Name(id='ListOrDictType', ctx=Load()), slice=Index(value=Name(id='PauliSumOp', ctx=Load())), ctx=Load())), ctx=Load())], ctx=Load())), ctx=Load())
arguments(args=[arg(arg='self', annotation=None), arg(arg='problem', annotation=Name(id='BaseProblem', ctx=Load())), arg(arg='aux_operators', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Subscript(value=Name(id='ListOrDictType', ctx=Load()), slice=Index(value=Name(id='SecondQuantizedOp', ctx=Load())), ctx=Load())), ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[NameConstant(value=None)])
Expr(value=Str(s='Run the excited-states calculation.\n\n        Construct and solves the EOM pseudo-eigenvalue problem to obtain the excitation energies\n        and the excitation operators expansion coefficients.\n\n        Args:\n            problem: a class encoding a problem to be solved.\n            aux_operators: Additional auxiliary operators to evaluate.\n\n        Returns:\n            An interpreted :class:`~.EigenstateResult`. For more information see also\n            :meth:`~.BaseProblem.interpret`.\n        '))
If(test=Compare(left=Name(id='aux_operators', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='warning', ctx=Load()), args=[Str(s='With qEOM the auxiliary operators can currently only be evaluated on the ground state.')], keywords=[]))], orelse=[])
Assign(targets=[Name(id='groundstate_result', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_gsc', ctx=Load()), attr='solve', ctx=Load()), args=[Name(id='problem', ctx=Load()), Name(id='aux_operators', ctx=Load())], keywords=[]))
Assign(targets=[Name(id='second_q_ops', ctx=Store())], value=Call(func=Attribute(value=Name(id='problem', ctx=Load()), attr='second_q_ops', ctx=Load()), args=[], keywords=[]))
If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='second_q_ops', ctx=Load()), Name(id='list', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='main_second_q_op', ctx=Store())], value=Subscript(value=Name(id='second_q_ops', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load()))], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='second_q_ops', ctx=Load()), Name(id='dict', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='main_second_q_op', ctx=Store())], value=Call(func=Attribute(value=Name(id='second_q_ops', ctx=Load()), attr='pop', ctx=Load()), args=[Attribute(value=Name(id='problem', ctx=Load()), attr='main_property_name', ctx=Load())], keywords=[]))], orelse=[])])
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_untapered_qubit_op_main', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_gsc', ctx=Load()), attr='qubit_converter', ctx=Load()), attr='convert_only', ctx=Load()), args=[Name(id='main_second_q_op', ctx=Load()), Attribute(value=Name(id='problem', ctx=Load()), attr='num_particles', ctx=Load())], keywords=[]))
Assign(targets=[Tuple(elts=[Name(id='matrix_operators_dict', ctx=Store()), Name(id='size', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_prepare_matrix_operators', ctx=Load()), args=[Name(id='problem', ctx=Load())], keywords=[]))
Assign(targets=[Name(id='measurement_results', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_gsc', ctx=Load()), attr='evaluate_operators', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='groundstate_result', ctx=Load()), attr='eigenstates', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load()), Name(id='matrix_operators_dict', ctx=Load())], keywords=[]))
Assign(targets=[Name(id='measurement_results', ctx=Store())], value=Call(func=Name(id='cast', ctx=Load()), args=[Subscript(value=Name(id='Dict', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='float', ctx=Load())), ctx=Load())], ctx=Load())), ctx=Load()), Name(id='measurement_results', ctx=Load())], keywords=[]))
Assign(targets=[Tuple(elts=[Name(id='m_mat', ctx=Store()), Name(id='v_mat', ctx=Store()), Name(id='q_mat', ctx=Store()), Name(id='w_mat', ctx=Store()), Name(id='m_mat_std', ctx=Store()), Name(id='v_mat_std', ctx=Store()), Name(id='q_mat_std', ctx=Store()), Name(id='w_mat_std', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_build_eom_matrices', ctx=Load()), args=[Name(id='measurement_results', ctx=Load()), Name(id='size', ctx=Load())], keywords=[]))
Assign(targets=[Tuple(elts=[Name(id='energy_gaps', ctx=Store()), Name(id='expansion_coefs', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_compute_excitation_energies', ctx=Load()), args=[Name(id='m_mat', ctx=Load()), Name(id='v_mat', ctx=Load()), Name(id='q_mat', ctx=Load()), Name(id='w_mat', ctx=Load())], keywords=[]))
Assign(targets=[Name(id='qeom_result', ctx=Store())], value=Call(func=Name(id='QEOMResult', ctx=Load()), args=[], keywords=[]))
Assign(targets=[Attribute(value=Name(id='qeom_result', ctx=Load()), attr='ground_state_raw_result', ctx=Store())], value=Attribute(value=Name(id='groundstate_result', ctx=Load()), attr='raw_result', ctx=Load()))
Assign(targets=[Attribute(value=Name(id='qeom_result', ctx=Load()), attr='expansion_coefficients', ctx=Store())], value=Name(id='expansion_coefs', ctx=Load()))
Assign(targets=[Attribute(value=Name(id='qeom_result', ctx=Load()), attr='excitation_energies', ctx=Store())], value=Name(id='energy_gaps', ctx=Load()))
Assign(targets=[Attribute(value=Name(id='qeom_result', ctx=Load()), attr='m_matrix', ctx=Store())], value=Name(id='m_mat', ctx=Load()))
Assign(targets=[Attribute(value=Name(id='qeom_result', ctx=Load()), attr='v_matrix', ctx=Store())], value=Name(id='v_mat', ctx=Load()))
Assign(targets=[Attribute(value=Name(id='qeom_result', ctx=Load()), attr='q_matrix', ctx=Store())], value=Name(id='q_mat', ctx=Load()))
Assign(targets=[Attribute(value=Name(id='qeom_result', ctx=Load()), attr='w_matrix', ctx=Store())], value=Name(id='w_mat', ctx=Load()))
Assign(targets=[Attribute(value=Name(id='qeom_result', ctx=Load()), attr='m_matrix_std', ctx=Store())], value=Name(id='m_mat_std', ctx=Load()))
Assign(targets=[Attribute(value=Name(id='qeom_result', ctx=Load()), attr='v_matrix_std', ctx=Store())], value=Name(id='v_mat_std', ctx=Load()))
Assign(targets=[Attribute(value=Name(id='qeom_result', ctx=Load()), attr='q_matrix_std', ctx=Store())], value=Name(id='q_mat_std', ctx=Load()))
Assign(targets=[Attribute(value=Name(id='qeom_result', ctx=Load()), attr='w_matrix_std', ctx=Store())], value=Name(id='w_mat_std', ctx=Load()))
Assign(targets=[Name(id='eigenstate_result', ctx=Store())], value=Call(func=Name(id='EigenstateResult', ctx=Load()), args=[], keywords=[]))
Assign(targets=[Attribute(value=Name(id='eigenstate_result', ctx=Load()), attr='eigenstates', ctx=Store())], value=Attribute(value=Name(id='groundstate_result', ctx=Load()), attr='eigenstates', ctx=Load()))
Assign(targets=[Attribute(value=Name(id='eigenstate_result', ctx=Load()), attr='aux_operator_eigenvalues', ctx=Store())], value=Attribute(value=Name(id='groundstate_result', ctx=Load()), attr='aux_operator_eigenvalues', ctx=Load()))
Assign(targets=[Attribute(value=Name(id='eigenstate_result', ctx=Load()), attr='raw_result', ctx=Store())], value=Name(id='qeom_result', ctx=Load()))
Assign(targets=[Attribute(value=Name(id='eigenstate_result', ctx=Load()), attr='eigenenergies', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Attribute(value=Name(id='groundstate_result', ctx=Load()), attr='eigenenergies', ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='asarray', ctx=Load()), args=[ListComp(elt=BinOp(left=Subscript(value=Attribute(value=Name(id='groundstate_result', ctx=Load()), attr='eigenenergies', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load()), op=Add(), right=Name(id='gap', ctx=Load())), generators=[comprehension(target=Name(id='gap', ctx=Store()), iter=Name(id='energy_gaps', ctx=Load()), ifs=[], is_async=0)])], keywords=[])], keywords=[]))
Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Attribute(value=Name(id='problem', ctx=Load()), attr='interpret', ctx=Load()), args=[Name(id='eigenstate_result', ctx=Load())], keywords=[]))
Return(value=Name(id='result', ctx=Load()))
Name(id='EigenstateResult', ctx=Load())
arguments(args=[arg(arg='self', annotation=None), arg(arg='problem', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Expr(value=Str(s='Construct the excitation operators for each matrix element.\n\n        Returns:\n            a dictionary of all matrix elements operators and the number of excitations\n            (or the size of the qEOM pseudo-eigenvalue problem)\n        '))
Assign(targets=[Name(id='data', ctx=Store())], value=Call(func=Attribute(value=Name(id='problem', ctx=Load()), attr='hopping_qeom_ops', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_gsc', ctx=Load()), attr='qubit_converter', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_excitations', ctx=Load())], keywords=[]))
Assign(targets=[Tuple(elts=[Name(id='hopping_operators', ctx=Store()), Name(id='type_of_commutativities', ctx=Store()), Name(id='excitation_indices', ctx=Store())], ctx=Store())], value=Name(id='data', ctx=Load()))
Assign(targets=[Name(id='size', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='excitation_indices', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[]), op=FloorDiv(), right=Num(n=2))], keywords=[]))
Assign(targets=[Name(id='eom_matrix_operators', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_build_all_commutators', ctx=Load()), args=[Name(id='hopping_operators', ctx=Load()), Name(id='type_of_commutativities', ctx=Load()), Name(id='size', ctx=Load())], keywords=[]))
Return(value=Tuple(elts=[Name(id='eom_matrix_operators', ctx=Load()), Name(id='size', ctx=Load())], ctx=Load()))
Subscript(value=Name(id='Tuple', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='dict', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load())), ctx=Load())
arguments(args=[arg(arg='self', annotation=None), arg(arg='hopping_operators', annotation=Name(id='dict', ctx=Load())), arg(arg='type_of_commutativities', annotation=Name(id='dict', ctx=Load())), arg(arg='size', annotation=Name(id='int', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Expr(value=Str(s='Building all commutators for Q, W, M, V matrices.\n\n        Args:\n            hopping_operators: all hopping operators based on excitations_list,\n                key is the string of single/double excitation;\n                value is corresponding operator.\n            type_of_commutativities: if tapering is used, it records the commutativities of\n                hopping operators with the\n                Z2 symmetries found in the original operator.\n            size: the number of excitations (size of the qEOM pseudo-eigenvalue problem)\n\n        Returns:\n            a dictionary that contains the operators for each matrix element\n        '))
Assign(targets=[Name(id='all_matrix_operators', ctx=Store())], value=Dict(keys=[], values=[]))
Assign(targets=[Tuple(elts=[Name(id='mus', ctx=Store()), Name(id='nus', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='triu_indices', ctx=Load()), args=[Name(id='size', ctx=Load())], keywords=[]))
FunctionDef(name='_build_one_sector', args=arguments(args=[arg(arg='available_hopping_ops', annotation=None), arg(arg='untapered_op', annotation=None), arg(arg='z2_symmetries', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Assign(targets=[Name(id='to_be_computed_list', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Tuple(elts=[Name(id='idx', ctx=Store()), Name(id='m_u', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='mus', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='n_u', ctx=Store())], value=Subscript(value=Name(id='nus', ctx=Load()), slice=Index(value=Name(id='idx', ctx=Load())), ctx=Load())), Assign(targets=[Name(id='left_op', ctx=Store())], value=Call(func=Attribute(value=Name(id='available_hopping_ops', ctx=Load()), attr='get', ctx=Load()), args=[JoinedStr(values=[Str(s='E_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None)])], keywords=[])), Assign(targets=[Name(id='right_op_1', ctx=Store())], value=Call(func=Attribute(value=Name(id='available_hopping_ops', ctx=Load()), attr='get', ctx=Load()), args=[JoinedStr(values=[Str(s='E_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])], keywords=[])), Assign(targets=[Name(id='right_op_2', ctx=Store())], value=Call(func=Attribute(value=Name(id='available_hopping_ops', ctx=Load()), attr='get', ctx=Load()), args=[JoinedStr(values=[Str(s='Edag_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='to_be_computed_list', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Name(id='m_u', ctx=Load()), Name(id='n_u', ctx=Load()), Name(id='left_op', ctx=Load()), Name(id='right_op_1', ctx=Load()), Name(id='right_op_2', ctx=Load())], ctx=Load())], keywords=[]))], orelse=[]), If(test=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='isEnabledFor', ctx=Load()), args=[Attribute(value=Name(id='logging', ctx=Load()), attr='INFO', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='info', ctx=Load()), args=[Str(s='Building all commutators:')], keywords=[])), Expr(value=Call(func=Name(id='TextProgressBar', ctx=Load()), args=[Attribute(value=Name(id='sys', ctx=Load()), attr='stderr', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='results', ctx=Store())], value=Call(func=Name(id='parallel_map', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_build_commutator_routine', ctx=Load()), Name(id='to_be_computed_list', ctx=Load())], keywords=[keyword(arg='task_args', value=Tuple(elts=[Name(id='untapered_op', ctx=Load()), Name(id='z2_symmetries', ctx=Load())], ctx=Load())), keyword(arg='num_processes', value=Attribute(value=Name(id='algorithm_globals', ctx=Load()), attr='num_processes', ctx=Load()))])), For(target=Name(id='result', ctx=Store()), iter=Name(id='results', ctx=Load()), body=[Assign(targets=[Tuple(elts=[Name(id='m_u', ctx=Store()), Name(id='n_u', ctx=Store()), Name(id='q_mat_op', ctx=Store()), Name(id='w_mat_op', ctx=Store()), Name(id='m_mat_op', ctx=Store()), Name(id='v_mat_op', ctx=Store())], ctx=Store())], value=Name(id='result', ctx=Load())), If(test=Compare(left=Name(id='q_mat_op', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=[Assign(targets=[Subscript(value=Name(id='all_matrix_operators', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='q_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])), ctx=Store())], value=Name(id='q_mat_op', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='w_mat_op', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=[Assign(targets=[Subscript(value=Name(id='all_matrix_operators', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='w_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])), ctx=Store())], value=Name(id='w_mat_op', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='m_mat_op', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=[Assign(targets=[Subscript(value=Name(id='all_matrix_operators', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='m_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])), ctx=Store())], value=Name(id='m_mat_op', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='v_mat_op', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=[Assign(targets=[Subscript(value=Name(id='all_matrix_operators', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='v_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])), ctx=Store())], value=Name(id='v_mat_op', ctx=Load()))], orelse=[])], orelse=[])], decorator_list=[], returns=None)
Try(body=[Assign(targets=[Name(id='z2_symmetries', ctx=Store())], value=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_gsc', ctx=Load()), attr='qubit_converter', ctx=Load()), attr='z2symmetries', ctx=Load()))], handlers=[ExceptHandler(type=Name(id='AttributeError', ctx=Load()), name=None, body=[Assign(targets=[Name(id='z2_symmetries', ctx=Store())], value=Call(func=Name(id='Z2Symmetries', ctx=Load()), args=[List(elts=[], ctx=Load()), List(elts=[], ctx=Load()), List(elts=[], ctx=Load())], keywords=[]))])], orelse=[], finalbody=[])
If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='z2_symmetries', ctx=Load()), attr='is_empty', ctx=Load()), args=[], keywords=[])), body=[Assign(targets=[Name(id='combinations', ctx=Store())], value=Call(func=Attribute(value=Name(id='itertools', ctx=Load()), attr='product', ctx=Load()), args=[List(elts=[Num(n=1), UnaryOp(op=USub(), operand=Num(n=1))], ctx=Load())], keywords=[keyword(arg='repeat', value=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='z2_symmetries', ctx=Load()), attr='symmetries', ctx=Load())], keywords=[]))])), For(target=Name(id='targeted_tapering_values', ctx=Store()), iter=Name(id='combinations', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='info', ctx=Load()), args=[Str(s='In sector: (%s)'), Call(func=Attribute(value=Str(s=','), attr='join', ctx=Load()), args=[ListComp(elt=Call(func=Name(id='str', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='targeted_tapering_values', ctx=Load()), ifs=[], is_async=0)])], keywords=[])], keywords=[])), Assign(targets=[Name(id='available_hopping_ops', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='targeted_sector', ctx=Store())], value=Compare(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='asarray', ctx=Load()), args=[Name(id='targeted_tapering_values', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Num(n=1)])), For(target=Tuple(elts=[Name(id='key', ctx=Store()), Name(id='value', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='type_of_commutativities', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Name(id='value', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='asarray', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[])), If(test=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='all', ctx=Load()), args=[Compare(left=Name(id='value', ctx=Load()), ops=[Eq()], comparators=[Name(id='targeted_sector', ctx=Load())])], keywords=[]), body=[Assign(targets=[Subscript(value=Name(id='available_hopping_ops', ctx=Load()), slice=Index(value=Name(id='key', ctx=Load())), ctx=Store())], value=Subscript(value=Name(id='hopping_operators', ctx=Load()), slice=Index(value=Name(id='key', ctx=Load())), ctx=Load()))], orelse=[])], orelse=[]), Expr(value=Call(func=Name(id='_build_one_sector', ctx=Load()), args=[Name(id='available_hopping_ops', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_untapered_qubit_op_main', ctx=Load()), Name(id='z2_symmetries', ctx=Load())], keywords=[]))], orelse=[])], orelse=[Expr(value=Call(func=Name(id='_build_one_sector', ctx=Load()), args=[Name(id='hopping_operators', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_untapered_qubit_op_main', ctx=Load()), Name(id='z2_symmetries', ctx=Load())], keywords=[]))])
Return(value=Name(id='all_matrix_operators', ctx=Load()))
Name(id='dict', ctx=Load())
arguments(args=[arg(arg='params', annotation=Name(id='List', ctx=Load())), arg(arg='operator', annotation=Name(id='PauliSumOp', ctx=Load())), arg(arg='z2_symmetries', annotation=Name(id='Z2Symmetries', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Expr(value=Str(s='Numerically computes the commutator / double commutator between operators.\n\n        Args:\n            params: list containing the indices of matrix element and the corresponding\n                excitation operators\n            operator: the hamiltonian\n            z2_symmetries: z2_symmetries in case of tapering\n\n        Returns:\n            The indices of the matrix element and the corresponding qubit\n            operator for each of the EOM matrices\n        '))
Assign(targets=[Tuple(elts=[Name(id='m_u', ctx=Store()), Name(id='n_u', ctx=Store()), Name(id='left_op', ctx=Store()), Name(id='right_op_1', ctx=Store()), Name(id='right_op_2', ctx=Store())], ctx=Store())], value=Name(id='params', ctx=Load()))
If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='left_op', ctx=Load()), ops=[Is()], comparators=[NameConstant(value=None)]), BoolOp(op=And(), values=[Compare(left=Name(id='right_op_1', ctx=Load()), ops=[Is()], comparators=[NameConstant(value=None)]), Compare(left=Name(id='right_op_2', ctx=Load()), ops=[Is()], comparators=[NameConstant(value=None)])])]), body=[Assign(targets=[Name(id='q_mat_op', ctx=Store())], value=NameConstant(value=None)), Assign(targets=[Name(id='w_mat_op', ctx=Store())], value=NameConstant(value=None)), Assign(targets=[Name(id='m_mat_op', ctx=Store())], value=NameConstant(value=None)), Assign(targets=[Name(id='v_mat_op', ctx=Store())], value=NameConstant(value=None))], orelse=[If(test=Compare(left=Name(id='right_op_1', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=[Assign(targets=[Name(id='q_mat_op', ctx=Store())], value=Call(func=Name(id='double_commutator', ctx=Load()), args=[Name(id='left_op', ctx=Load()), Name(id='operator', ctx=Load()), Name(id='right_op_1', ctx=Load())], keywords=[keyword(arg='sign', value=NameConstant(value=False))])), Assign(targets=[Name(id='w_mat_op', ctx=Store())], value=Call(func=Name(id='commutator', ctx=Load()), args=[Name(id='left_op', ctx=Load()), Name(id='right_op_1', ctx=Load())], keywords=[])), Assign(targets=[Name(id='q_mat_op', ctx=Store())], value=IfExp(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='q_mat_op', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Num(n=0)]), body=NameConstant(value=None), orelse=Name(id='q_mat_op', ctx=Load()))), Assign(targets=[Name(id='w_mat_op', ctx=Store())], value=IfExp(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='w_mat_op', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Num(n=0)]), body=NameConstant(value=None), orelse=Name(id='w_mat_op', ctx=Load())))], orelse=[Assign(targets=[Name(id='q_mat_op', ctx=Store())], value=NameConstant(value=None)), Assign(targets=[Name(id='w_mat_op', ctx=Store())], value=NameConstant(value=None))]), If(test=Compare(left=Name(id='right_op_2', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=[Assign(targets=[Name(id='m_mat_op', ctx=Store())], value=Call(func=Name(id='double_commutator', ctx=Load()), args=[Name(id='left_op', ctx=Load()), Name(id='operator', ctx=Load()), Name(id='right_op_2', ctx=Load())], keywords=[keyword(arg='sign', value=NameConstant(value=False))])), Assign(targets=[Name(id='v_mat_op', ctx=Store())], value=Call(func=Name(id='commutator', ctx=Load()), args=[Name(id='left_op', ctx=Load()), Name(id='right_op_2', ctx=Load())], keywords=[])), Assign(targets=[Name(id='m_mat_op', ctx=Store())], value=IfExp(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='m_mat_op', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Num(n=0)]), body=NameConstant(value=None), orelse=Name(id='m_mat_op', ctx=Load()))), Assign(targets=[Name(id='v_mat_op', ctx=Store())], value=IfExp(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='v_mat_op', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Num(n=0)]), body=NameConstant(value=None), orelse=Name(id='v_mat_op', ctx=Load())))], orelse=[Assign(targets=[Name(id='m_mat_op', ctx=Store())], value=NameConstant(value=None)), Assign(targets=[Name(id='v_mat_op', ctx=Store())], value=NameConstant(value=None))]), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='z2_symmetries', ctx=Load()), attr='is_empty', ctx=Load()), args=[], keywords=[])), body=[If(test=BoolOp(op=And(), values=[Compare(left=Name(id='q_mat_op', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='q_mat_op', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Num(n=0)])]), body=[Assign(targets=[Name(id='q_mat_op', ctx=Store())], value=Call(func=Attribute(value=Name(id='z2_symmetries', ctx=Load()), attr='taper', ctx=Load()), args=[Name(id='q_mat_op', ctx=Load())], keywords=[]))], orelse=[]), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='w_mat_op', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='w_mat_op', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Num(n=0)])]), body=[Assign(targets=[Name(id='w_mat_op', ctx=Store())], value=Call(func=Attribute(value=Name(id='z2_symmetries', ctx=Load()), attr='taper', ctx=Load()), args=[Name(id='w_mat_op', ctx=Load())], keywords=[]))], orelse=[]), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='m_mat_op', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='m_mat_op', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Num(n=0)])]), body=[Assign(targets=[Name(id='m_mat_op', ctx=Store())], value=Call(func=Attribute(value=Name(id='z2_symmetries', ctx=Load()), attr='taper', ctx=Load()), args=[Name(id='m_mat_op', ctx=Load())], keywords=[]))], orelse=[]), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='v_mat_op', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='v_mat_op', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Num(n=0)])]), body=[Assign(targets=[Name(id='v_mat_op', ctx=Store())], value=Call(func=Attribute(value=Name(id='z2_symmetries', ctx=Load()), attr='taper', ctx=Load()), args=[Name(id='v_mat_op', ctx=Load())], keywords=[]))], orelse=[])], orelse=[])])
Return(value=Tuple(elts=[Name(id='m_u', ctx=Load()), Name(id='n_u', ctx=Load()), Name(id='q_mat_op', ctx=Load()), Name(id='w_mat_op', ctx=Load()), Name(id='m_mat_op', ctx=Load()), Name(id='v_mat_op', ctx=Load())], ctx=Load()))
Name(id='staticmethod', ctx=Load())
Subscript(value=Name(id='Tuple', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='int', ctx=Load()), Name(id='PauliSumOp', ctx=Load()), Name(id='PauliSumOp', ctx=Load()), Name(id='PauliSumOp', ctx=Load()), Name(id='PauliSumOp', ctx=Load())], ctx=Load())), ctx=Load())
arguments(args=[arg(arg='self', annotation=None), arg(arg='gs_results', annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='float', ctx=Load())), ctx=Load())], ctx=Load())), ctx=Load())), arg(arg='size', annotation=Name(id='int', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Expr(value=Str(s='Constructs the M, V, Q and W matrices from the results on the ground state\n\n        Args:\n            gs_results: a ground state result object\n            size: size of eigenvalue problem\n\n        Returns:\n            the matrices and their standard deviation\n        '))
Assign(targets=[Tuple(elts=[Name(id='mus', ctx=Store()), Name(id='nus', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='triu_indices', ctx=Load()), args=[Name(id='size', ctx=Load())], keywords=[]))
Assign(targets=[Name(id='m_mat', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='zeros', ctx=Load()), args=[Tuple(elts=[Name(id='size', ctx=Load()), Name(id='size', ctx=Load())], ctx=Load())], keywords=[keyword(arg='dtype', value=Name(id='complex', ctx=Load()))]))
Assign(targets=[Name(id='v_mat', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='zeros', ctx=Load()), args=[Tuple(elts=[Name(id='size', ctx=Load()), Name(id='size', ctx=Load())], ctx=Load())], keywords=[keyword(arg='dtype', value=Name(id='complex', ctx=Load()))]))
Assign(targets=[Name(id='q_mat', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='zeros', ctx=Load()), args=[Tuple(elts=[Name(id='size', ctx=Load()), Name(id='size', ctx=Load())], ctx=Load())], keywords=[keyword(arg='dtype', value=Name(id='complex', ctx=Load()))]))
Assign(targets=[Name(id='w_mat', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='zeros', ctx=Load()), args=[Tuple(elts=[Name(id='size', ctx=Load()), Name(id='size', ctx=Load())], ctx=Load())], keywords=[keyword(arg='dtype', value=Name(id='complex', ctx=Load()))]))
Assign(targets=[Tuple(elts=[Name(id='m_mat_std', ctx=Store()), Name(id='v_mat_std', ctx=Store()), Name(id='q_mat_std', ctx=Store()), Name(id='w_mat_std', ctx=Store())], ctx=Store())], value=Tuple(elts=[Num(n=0.0), Num(n=0.0), Num(n=0.0), Num(n=0.0)], ctx=Load()))
For(target=Tuple(elts=[Name(id='idx', ctx=Store()), Name(id='m_u', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='mus', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='n_u', ctx=Store())], value=Subscript(value=Name(id='nus', ctx=Load()), slice=Index(value=Name(id='idx', ctx=Load())), ctx=Load())), Assign(targets=[Subscript(value=Subscript(value=Name(id='q_mat', ctx=Load()), slice=Index(value=Name(id='m_u', ctx=Load())), ctx=Load()), slice=Index(value=Name(id='n_u', ctx=Load())), ctx=Store())], value=IfExp(test=Compare(left=Call(func=Attribute(value=Name(id='gs_results', ctx=Load()), attr='get', ctx=Load()), args=[JoinedStr(values=[Str(s='q_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])], keywords=[]), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=Subscript(value=Subscript(value=Name(id='gs_results', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='q_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])), ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load()), orelse=Subscript(value=Subscript(value=Name(id='q_mat', ctx=Load()), slice=Index(value=Name(id='m_u', ctx=Load())), ctx=Load()), slice=Index(value=Name(id='n_u', ctx=Load())), ctx=Load()))), Assign(targets=[Subscript(value=Subscript(value=Name(id='w_mat', ctx=Load()), slice=Index(value=Name(id='m_u', ctx=Load())), ctx=Load()), slice=Index(value=Name(id='n_u', ctx=Load())), ctx=Store())], value=IfExp(test=Compare(left=Call(func=Attribute(value=Name(id='gs_results', ctx=Load()), attr='get', ctx=Load()), args=[JoinedStr(values=[Str(s='w_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])], keywords=[]), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=Subscript(value=Subscript(value=Name(id='gs_results', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='w_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])), ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load()), orelse=Subscript(value=Subscript(value=Name(id='w_mat', ctx=Load()), slice=Index(value=Name(id='m_u', ctx=Load())), ctx=Load()), slice=Index(value=Name(id='n_u', ctx=Load())), ctx=Load()))), Assign(targets=[Subscript(value=Subscript(value=Name(id='m_mat', ctx=Load()), slice=Index(value=Name(id='m_u', ctx=Load())), ctx=Load()), slice=Index(value=Name(id='n_u', ctx=Load())), ctx=Store())], value=IfExp(test=Compare(left=Call(func=Attribute(value=Name(id='gs_results', ctx=Load()), attr='get', ctx=Load()), args=[JoinedStr(values=[Str(s='m_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])], keywords=[]), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=Subscript(value=Subscript(value=Name(id='gs_results', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='m_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])), ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load()), orelse=Subscript(value=Subscript(value=Name(id='m_mat', ctx=Load()), slice=Index(value=Name(id='m_u', ctx=Load())), ctx=Load()), slice=Index(value=Name(id='n_u', ctx=Load())), ctx=Load()))), Assign(targets=[Subscript(value=Subscript(value=Name(id='v_mat', ctx=Load()), slice=Index(value=Name(id='m_u', ctx=Load())), ctx=Load()), slice=Index(value=Name(id='n_u', ctx=Load())), ctx=Store())], value=IfExp(test=Compare(left=Call(func=Attribute(value=Name(id='gs_results', ctx=Load()), attr='get', ctx=Load()), args=[JoinedStr(values=[Str(s='v_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])], keywords=[]), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=Subscript(value=Subscript(value=Name(id='gs_results', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='v_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])), ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load()), orelse=Subscript(value=Subscript(value=Name(id='v_mat', ctx=Load()), slice=Index(value=Name(id='m_u', ctx=Load())), ctx=Load()), slice=Index(value=Name(id='n_u', ctx=Load())), ctx=Load()))), AugAssign(target=Name(id='q_mat_std', ctx=Store()), op=Add(), value=IfExp(test=Compare(left=Call(func=Attribute(value=Name(id='gs_results', ctx=Load()), attr='get', ctx=Load()), args=[JoinedStr(values=[Str(s='q_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_std')])], keywords=[]), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=Subscript(value=Subscript(value=Name(id='gs_results', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='q_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_std')])), ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load()), orelse=Num(n=0))), AugAssign(target=Name(id='w_mat_std', ctx=Store()), op=Add(), value=IfExp(test=Compare(left=Call(func=Attribute(value=Name(id='gs_results', ctx=Load()), attr='get', ctx=Load()), args=[JoinedStr(values=[Str(s='w_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_std')])], keywords=[]), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=Subscript(value=Subscript(value=Name(id='gs_results', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='w_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_std')])), ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load()), orelse=Num(n=0))), AugAssign(target=Name(id='m_mat_std', ctx=Store()), op=Add(), value=IfExp(test=Compare(left=Call(func=Attribute(value=Name(id='gs_results', ctx=Load()), attr='get', ctx=Load()), args=[JoinedStr(values=[Str(s='m_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_std')])], keywords=[]), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=Subscript(value=Subscript(value=Name(id='gs_results', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='m_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_std')])), ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load()), orelse=Num(n=0))), AugAssign(target=Name(id='v_mat_std', ctx=Store()), op=Add(), value=IfExp(test=Compare(left=Call(func=Attribute(value=Name(id='gs_results', ctx=Load()), attr='get', ctx=Load()), args=[JoinedStr(values=[Str(s='v_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_std')])], keywords=[]), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=Subscript(value=Subscript(value=Name(id='gs_results', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='v_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_std')])), ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load()), orelse=Num(n=0)))], orelse=[])
Assign(targets=[Name(id='q_mat', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='q_mat', ctx=Load()), op=Add(), right=Attribute(value=Name(id='q_mat', ctx=Load()), attr='T', ctx=Load())), op=Sub(), right=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='identity', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='q_mat', ctx=Load()), attr='shape', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())], keywords=[]), op=Mult(), right=Name(id='q_mat', ctx=Load()))))
Assign(targets=[Name(id='w_mat', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='w_mat', ctx=Load()), op=Add(), right=Attribute(value=Name(id='w_mat', ctx=Load()), attr='T', ctx=Load())), op=Sub(), right=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='identity', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='w_mat', ctx=Load()), attr='shape', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())], keywords=[]), op=Mult(), right=Name(id='w_mat', ctx=Load()))))
Assign(targets=[Name(id='m_mat', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='m_mat', ctx=Load()), op=Add(), right=Attribute(value=Name(id='m_mat', ctx=Load()), attr='T', ctx=Load())), op=Sub(), right=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='identity', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='m_mat', ctx=Load()), attr='shape', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())], keywords=[]), op=Mult(), right=Name(id='m_mat', ctx=Load()))))
Assign(targets=[Name(id='v_mat', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='v_mat', ctx=Load()), op=Add(), right=Attribute(value=Name(id='v_mat', ctx=Load()), attr='T', ctx=Load())), op=Sub(), right=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='identity', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='v_mat', ctx=Load()), attr='shape', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())], keywords=[]), op=Mult(), right=Name(id='v_mat', ctx=Load()))))
Assign(targets=[Name(id='q_mat', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='real', ctx=Load()), args=[Name(id='q_mat', ctx=Load())], keywords=[]))
Assign(targets=[Name(id='w_mat', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='real', ctx=Load()), args=[Name(id='w_mat', ctx=Load())], keywords=[]))
Assign(targets=[Name(id='m_mat', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='real', ctx=Load()), args=[Name(id='m_mat', ctx=Load())], keywords=[]))
Assign(targets=[Name(id='v_mat', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='real', ctx=Load()), args=[Name(id='v_mat', ctx=Load())], keywords=[]))
Assign(targets=[Name(id='q_mat_std', ctx=Store())], value=BinOp(left=Name(id='q_mat_std', ctx=Load()), op=Div(), right=Call(func=Name(id='float', ctx=Load()), args=[BinOp(left=Name(id='size', ctx=Load()), op=Pow(), right=Num(n=2))], keywords=[])))
Assign(targets=[Name(id='w_mat_std', ctx=Store())], value=BinOp(left=Name(id='w_mat_std', ctx=Load()), op=Div(), right=Call(func=Name(id='float', ctx=Load()), args=[BinOp(left=Name(id='size', ctx=Load()), op=Pow(), right=Num(n=2))], keywords=[])))
Assign(targets=[Name(id='m_mat_std', ctx=Store())], value=BinOp(left=Name(id='m_mat_std', ctx=Load()), op=Div(), right=Call(func=Name(id='float', ctx=Load()), args=[BinOp(left=Name(id='size', ctx=Load()), op=Pow(), right=Num(n=2))], keywords=[])))
Assign(targets=[Name(id='v_mat_std', ctx=Store())], value=BinOp(left=Name(id='v_mat_std', ctx=Load()), op=Div(), right=Call(func=Name(id='float', ctx=Load()), args=[BinOp(left=Name(id='size', ctx=Load()), op=Pow(), right=Num(n=2))], keywords=[])))
Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Str(s='\nQ:=========================\n%s'), Name(id='q_mat', ctx=Load())], keywords=[]))
Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Str(s='\nW:=========================\n%s'), Name(id='w_mat', ctx=Load())], keywords=[]))
Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Str(s='\nM:=========================\n%s'), Name(id='m_mat', ctx=Load())], keywords=[]))
Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Str(s='\nV:=========================\n%s'), Name(id='v_mat', ctx=Load())], keywords=[]))
Return(value=Tuple(elts=[Name(id='m_mat', ctx=Load()), Name(id='v_mat', ctx=Load()), Name(id='q_mat', ctx=Load()), Name(id='w_mat', ctx=Load()), Name(id='m_mat_std', ctx=Load()), Name(id='v_mat_std', ctx=Load()), Name(id='q_mat_std', ctx=Load()), Name(id='w_mat_std', ctx=Load())], ctx=Load()))
Subscript(value=Name(id='Tuple', ctx=Load()), slice=Index(value=Tuple(elts=[Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Name(id='float', ctx=Load()), Name(id='float', ctx=Load()), Name(id='float', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load())), ctx=Load())
arguments(args=[arg(arg='m_mat', annotation=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), arg(arg='v_mat', annotation=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), arg(arg='q_mat', annotation=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), arg(arg='w_mat', annotation=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Expr(value=Str(s='Diagonalizing M, V, Q, W matrices for excitation energies.\n\n        Args:\n            m_mat : M matrices\n            v_mat : V matrices\n            q_mat : Q matrices\n            w_mat : W matrices\n\n        Returns:\n            1-D vector stores all energy gap to reference state\n            2-D array storing the X and Y expansion coefficients\n        '))
Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Str(s='Diagonalizing qeom matrices for excited states...')], keywords=[]))
Assign(targets=[Name(id='a_mat', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='np', ctx=Load()), attr='matrixlib', ctx=Load()), attr='bmat', ctx=Load()), args=[List(elts=[List(elts=[Name(id='m_mat', ctx=Load()), Name(id='q_mat', ctx=Load())], ctx=Load()), List(elts=[Call(func=Attribute(value=Attribute(value=Name(id='q_mat', ctx=Load()), attr='T', ctx=Load()), attr='conj', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Attribute(value=Name(id='m_mat', ctx=Load()), attr='T', ctx=Load()), attr='conj', ctx=Load()), args=[], keywords=[])], ctx=Load())], ctx=Load())], keywords=[]))
Assign(targets=[Name(id='b_mat', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='np', ctx=Load()), attr='matrixlib', ctx=Load()), attr='bmat', ctx=Load()), args=[List(elts=[List(elts=[Name(id='v_mat', ctx=Load()), Name(id='w_mat', ctx=Load())], ctx=Load()), List(elts=[UnaryOp(op=USub(), operand=Call(func=Attribute(value=Attribute(value=Name(id='w_mat', ctx=Load()), attr='T', ctx=Load()), attr='conj', ctx=Load()), args=[], keywords=[])), UnaryOp(op=USub(), operand=Call(func=Attribute(value=Attribute(value=Name(id='v_mat', ctx=Load()), attr='T', ctx=Load()), attr='conj', ctx=Load()), args=[], keywords=[]))], ctx=Load())], ctx=Load())], keywords=[]))
Assign(targets=[Name(id='res', ctx=Store())], value=Call(func=Attribute(value=Name(id='linalg', ctx=Load()), attr='eig', ctx=Load()), args=[Name(id='a_mat', ctx=Load()), Name(id='b_mat', ctx=Load())], keywords=[]))
Assign(targets=[Subscript(value=Subscript(value=Name(id='res', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load()), slice=Index(value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='isnan', ctx=Load()), args=[Subscript(value=Name(id='res', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())], keywords=[])], keywords=[])), ctx=Store())], value=Num(n=0.0))
Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Str(s='... %s'), Subscript(value=Name(id='res', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())], keywords=[]))
Assign(targets=[Name(id='w', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sort', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='real', ctx=Load()), args=[Subscript(value=Name(id='res', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())], keywords=[])], keywords=[]))
Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Str(s='Sorted real parts %s'), Name(id='w', ctx=Load())], keywords=[]))
Assign(targets=[Name(id='w', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='abs', ctx=Load()), args=[Subscript(value=Name(id='w', ctx=Load()), slice=Slice(lower=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='w', ctx=Load())], keywords=[]), op=FloorDiv(), right=Num(n=2)), upper=None, step=None), ctx=Load())], keywords=[]))
Assign(targets=[Subscript(value=Name(id='w', ctx=Load()), slice=Index(value=Compare(left=Name(id='w', ctx=Load()), ops=[Lt()], comparators=[Num(n=1e-06)])), ctx=Store())], value=Num(n=0))
Assign(targets=[Name(id='excitation_energies_gap', ctx=Store())], value=Name(id='w', ctx=Load()))
Return(value=Tuple(elts=[Name(id='excitation_energies_gap', ctx=Load()), Subscript(value=Name(id='res', ctx=Load()), slice=Index(value=Num(n=1)), ctx=Load())], ctx=Load()))
Name(id='staticmethod', ctx=Load())
Subscript(value=Name(id='Tuple', ctx=Load()), slice=Index(value=Tuple(elts=[Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())], ctx=Load())), ctx=Load())
Load()
Str(s='The results class for the QEOM algorithm.')
arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[]))
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_ground_state_raw_result', ctx=Store())], value=NameConstant(value=None))
AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_excitation_energies', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), ctx=Load()), value=NameConstant(value=None), simple=0)
AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_expansion_coefficients', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), ctx=Load()), value=NameConstant(value=None), simple=0)
AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_m_matrix', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), ctx=Load()), value=NameConstant(value=None), simple=0)
AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_v_matrix', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), ctx=Load()), value=NameConstant(value=None), simple=0)
AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_q_matrix', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), ctx=Load()), value=NameConstant(value=None), simple=0)
AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_w_matrix', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), ctx=Load()), value=NameConstant(value=None), simple=0)
AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_v_matrix_std', ctx=Store()), annotation=Name(id='float', ctx=Load()), value=Num(n=0.0), simple=0)
AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_q_matrix_std', ctx=Store()), annotation=Name(id='float', ctx=Load()), value=Num(n=0.0), simple=0)
AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_w_matrix_std', ctx=Store()), annotation=Name(id='float', ctx=Load()), value=Num(n=0.0), simple=0)
NameConstant(value=None)
arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Expr(value=Str(s='returns ground state raw result'))
Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_ground_state_raw_result', ctx=Load()))
Name(id='property', ctx=Load())
arguments(args=[arg(arg='self', annotation=None), arg(arg='value', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Expr(value=Str(s='sets ground state raw result'))
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_ground_state_raw_result', ctx=Store())], value=Name(id='value', ctx=Load()))
Attribute(value=Name(id='ground_state_raw_result', ctx=Load()), attr='setter', ctx=Load())
NameConstant(value=None)
arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Expr(value=Str(s='returns the excitation energies (energy gaps)'))
Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_excitation_energies', ctx=Load()))
Name(id='property', ctx=Load())
Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), ctx=Load())
arguments(args=[arg(arg='self', annotation=None), arg(arg='value', annotation=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Expr(value=Str(s='sets the excitation energies (energy gaps)'))
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_excitation_energies', ctx=Store())], value=Name(id='value', ctx=Load()))
Attribute(value=Name(id='excitation_energies', ctx=Load()), attr='setter', ctx=Load())
NameConstant(value=None)
arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Expr(value=Str(s='returns the X and Y expansion coefficients'))
Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_expansion_coefficients', ctx=Load()))
Name(id='property', ctx=Load())
Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), ctx=Load())
arguments(args=[arg(arg='self', annotation=None), arg(arg='value', annotation=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Expr(value=Str(s='sets the X and Y expansion coefficients'))
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_expansion_coefficients', ctx=Store())], value=Name(id='value', ctx=Load()))
Attribute(value=Name(id='expansion_coefficients', ctx=Load()), attr='setter', ctx=Load())
NameConstant(value=None)
arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Expr(value=Str(s='returns the M matrix'))
Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_m_matrix', ctx=Load()))
Name(id='property', ctx=Load())
Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), ctx=Load())
arguments(args=[arg(arg='self', annotation=None), arg(arg='value', annotation=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Expr(value=Str(s='sets the M matrix'))
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_m_matrix', ctx=Store())], value=Name(id='value', ctx=Load()))
Attribute(value=Name(id='m_matrix', ctx=Load()), attr='setter', ctx=Load())
NameConstant(value=None)
arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Expr(value=Str(s='returns the V matrix'))
Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_v_matrix', ctx=Load()))
Name(id='property', ctx=Load())
Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), ctx=Load())
arguments(args=[arg(arg='self', annotation=None), arg(arg='value', annotation=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Expr(value=Str(s='sets the V matrix'))
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_v_matrix', ctx=Store())], value=Name(id='value', ctx=Load()))
Attribute(value=Name(id='v_matrix', ctx=Load()), attr='setter', ctx=Load())
NameConstant(value=None)
arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Expr(value=Str(s='returns the Q matrix'))
Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_q_matrix', ctx=Load()))
Name(id='property', ctx=Load())
Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), ctx=Load())
arguments(args=[arg(arg='self', annotation=None), arg(arg='value', annotation=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Expr(value=Str(s='sets the Q matrix'))
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_q_matrix', ctx=Store())], value=Name(id='value', ctx=Load()))
Attribute(value=Name(id='q_matrix', ctx=Load()), attr='setter', ctx=Load())
NameConstant(value=None)
arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Expr(value=Str(s='returns the W matrix'))
Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_w_matrix', ctx=Load()))
Name(id='property', ctx=Load())
Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), ctx=Load())
arguments(args=[arg(arg='self', annotation=None), arg(arg='value', annotation=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Expr(value=Str(s='sets the W matrix'))
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_w_matrix', ctx=Store())], value=Name(id='value', ctx=Load()))
Attribute(value=Name(id='w_matrix', ctx=Load()), attr='setter', ctx=Load())
NameConstant(value=None)
arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Expr(value=Str(s='returns the M matrix standard deviation'))
Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_m_matrix_std', ctx=Load()))
Name(id='property', ctx=Load())
Name(id='float', ctx=Load())
arguments(args=[arg(arg='self', annotation=None), arg(arg='value', annotation=Name(id='float', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Expr(value=Str(s='sets the M matrix standard deviation'))
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_m_matrix_std', ctx=Store())], value=Name(id='value', ctx=Load()))
Attribute(value=Name(id='m_matrix_std', ctx=Load()), attr='setter', ctx=Load())
NameConstant(value=None)
arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Expr(value=Str(s='returns the V matrix standard deviation'))
Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_v_matrix_std', ctx=Load()))
Name(id='property', ctx=Load())
Name(id='float', ctx=Load())
arguments(args=[arg(arg='self', annotation=None), arg(arg='value', annotation=Name(id='float', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Expr(value=Str(s='sets the V matrix standard deviation'))
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_v_matrix_std', ctx=Store())], value=Name(id='value', ctx=Load()))
Attribute(value=Name(id='v_matrix_std', ctx=Load()), attr='setter', ctx=Load())
NameConstant(value=None)
arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Expr(value=Str(s='returns the Q matrix standard deviation'))
Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_q_matrix_std', ctx=Load()))
Name(id='property', ctx=Load())
Name(id='float', ctx=Load())
arguments(args=[arg(arg='self', annotation=None), arg(arg='value', annotation=Name(id='float', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Expr(value=Str(s='sets the Q matrix standard deviation'))
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_q_matrix_std', ctx=Store())], value=Name(id='value', ctx=Load()))
Attribute(value=Name(id='q_matrix_std', ctx=Load()), attr='setter', ctx=Load())
NameConstant(value=None)
arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Expr(value=Str(s='returns the W matrix standard deviation'))
Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_w_matrix_std', ctx=Load()))
Name(id='property', ctx=Load())
Name(id='float', ctx=Load())
arguments(args=[arg(arg='self', annotation=None), arg(arg='value', annotation=Name(id='float', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Expr(value=Str(s='sets the W matrix standard deviation'))
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_w_matrix_std', ctx=Store())], value=Name(id='value', ctx=Load()))
Attribute(value=Name(id='w_matrix_std', ctx=Load()), attr='setter', ctx=Load())
NameConstant(value=None)
Name(id='logging', ctx=Load())
Load()
Load()
arg(arg='self', annotation=None)
arg(arg='ground_state_solver', annotation=Name(id='GroundStateSolver', ctx=Load()))
arg(arg='excitations', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='int', ctx=Load())), ctx=Load())), ctx=Load())], ctx=Load())), ctx=Load()))
Str(s='sd')
Str(s="\n        Args:\n            ground_state_solver: a GroundStateSolver object. The qEOM algorithm\n                will use this ground state to compute the EOM matrix elements\n            excitations: The excitations to be included in the eom pseudo-eigenvalue problem.\n                If a string ('s', 'd' or 'sd') then all excitations of the given type will be used.\n                Otherwise a list of custom excitations can directly be provided.\n        ")
Attribute(value=Name(id='self', ctx=Load()), attr='_gsc', ctx=Store())
Name(id='ground_state_solver', ctx=Load())
Attribute(value=Name(id='self', ctx=Load()), attr='excitations', ctx=Store())
Name(id='excitations', ctx=Load())
Attribute(value=Name(id='self', ctx=Load()), attr='_untapered_qubit_op_main', ctx=Store())
Name(id='PauliSumOp', ctx=Load())
NameConstant(value=None)
arg(arg='self', annotation=None)
Str(s='Returns the excitations to be included in the eom pseudo-eigenvalue problem.')
Attribute(value=Name(id='self', ctx=Load()), attr='_excitations', ctx=Load())
Load()
Name(id='Union', ctx=Load())
Index(value=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='int', ctx=Load())), ctx=Load())), ctx=Load())], ctx=Load()))
Load()
arg(arg='self', annotation=None)
arg(arg='excitations', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='int', ctx=Load())), ctx=Load())), ctx=Load())], ctx=Load())), ctx=Load()))
Str(s='The excitations to be included in the eom pseudo-eigenvalue problem. If a string then\n        all excitations of given type will be used. Otherwise a list of custom excitations can\n        directly be provided.')
BoolOp(op=And(), values=[Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='excitations', ctx=Load()), Name(id='str', ctx=Load())], keywords=[]), Compare(left=Name(id='excitations', ctx=Load()), ops=[NotIn()], comparators=[List(elts=[Str(s='s'), Str(s='d'), Str(s='sd')], ctx=Load())])])
Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Str(s='Excitation type must be s (singles), d (doubles) or sd (singles and doubles)')], keywords=[]), cause=None)
Attribute(value=Name(id='self', ctx=Load()), attr='_excitations', ctx=Store())
Name(id='excitations', ctx=Load())
Name(id='excitations', ctx=Load())
Load()
arg(arg='self', annotation=None)
Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_gsc', ctx=Load()), attr='solver', ctx=Load())
Load()
arg(arg='self', annotation=None)
arg(arg='problem', annotation=Name(id='BaseProblem', ctx=Load()))
arg(arg='aux_operators', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Subscript(value=Name(id='ListOrDictType', ctx=Load()), slice=Index(value=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='SecondQuantizedOp', ctx=Load()), Name(id='PauliSumOp', ctx=Load())], ctx=Load())), ctx=Load())), ctx=Load())), ctx=Load()))
NameConstant(value=None)
Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_gsc', ctx=Load()), attr='get_qubit_operators', ctx=Load()), args=[Name(id='problem', ctx=Load()), Name(id='aux_operators', ctx=Load())], keywords=[])
Name(id='Tuple', ctx=Load())
Index(value=Tuple(elts=[Name(id='PauliSumOp', ctx=Load()), Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Subscript(value=Name(id='ListOrDictType', ctx=Load()), slice=Index(value=Name(id='PauliSumOp', ctx=Load())), ctx=Load())), ctx=Load())], ctx=Load()))
Load()
arg(arg='self', annotation=None)
arg(arg='problem', annotation=Name(id='BaseProblem', ctx=Load()))
arg(arg='aux_operators', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Subscript(value=Name(id='ListOrDictType', ctx=Load()), slice=Index(value=Name(id='SecondQuantizedOp', ctx=Load())), ctx=Load())), ctx=Load()))
NameConstant(value=None)
Str(s='Run the excited-states calculation.\n\n        Construct and solves the EOM pseudo-eigenvalue problem to obtain the excitation energies\n        and the excitation operators expansion coefficients.\n\n        Args:\n            problem: a class encoding a problem to be solved.\n            aux_operators: Additional auxiliary operators to evaluate.\n\n        Returns:\n            An interpreted :class:`~.EigenstateResult`. For more information see also\n            :meth:`~.BaseProblem.interpret`.\n        ')
Compare(left=Name(id='aux_operators', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)])
Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='warning', ctx=Load()), args=[Str(s='With qEOM the auxiliary operators can currently only be evaluated on the ground state.')], keywords=[]))
Name(id='groundstate_result', ctx=Store())
Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_gsc', ctx=Load()), attr='solve', ctx=Load()), args=[Name(id='problem', ctx=Load()), Name(id='aux_operators', ctx=Load())], keywords=[])
Name(id='second_q_ops', ctx=Store())
Call(func=Attribute(value=Name(id='problem', ctx=Load()), attr='second_q_ops', ctx=Load()), args=[], keywords=[])
Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='second_q_ops', ctx=Load()), Name(id='list', ctx=Load())], keywords=[])
Assign(targets=[Name(id='main_second_q_op', ctx=Store())], value=Subscript(value=Name(id='second_q_ops', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load()))
If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='second_q_ops', ctx=Load()), Name(id='dict', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='main_second_q_op', ctx=Store())], value=Call(func=Attribute(value=Name(id='second_q_ops', ctx=Load()), attr='pop', ctx=Load()), args=[Attribute(value=Name(id='problem', ctx=Load()), attr='main_property_name', ctx=Load())], keywords=[]))], orelse=[])
Attribute(value=Name(id='self', ctx=Load()), attr='_untapered_qubit_op_main', ctx=Store())
Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_gsc', ctx=Load()), attr='qubit_converter', ctx=Load()), attr='convert_only', ctx=Load()), args=[Name(id='main_second_q_op', ctx=Load()), Attribute(value=Name(id='problem', ctx=Load()), attr='num_particles', ctx=Load())], keywords=[])
Tuple(elts=[Name(id='matrix_operators_dict', ctx=Store()), Name(id='size', ctx=Store())], ctx=Store())
Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_prepare_matrix_operators', ctx=Load()), args=[Name(id='problem', ctx=Load())], keywords=[])
Name(id='measurement_results', ctx=Store())
Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_gsc', ctx=Load()), attr='evaluate_operators', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='groundstate_result', ctx=Load()), attr='eigenstates', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load()), Name(id='matrix_operators_dict', ctx=Load())], keywords=[])
Name(id='measurement_results', ctx=Store())
Call(func=Name(id='cast', ctx=Load()), args=[Subscript(value=Name(id='Dict', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='float', ctx=Load())), ctx=Load())], ctx=Load())), ctx=Load()), Name(id='measurement_results', ctx=Load())], keywords=[])
Tuple(elts=[Name(id='m_mat', ctx=Store()), Name(id='v_mat', ctx=Store()), Name(id='q_mat', ctx=Store()), Name(id='w_mat', ctx=Store()), Name(id='m_mat_std', ctx=Store()), Name(id='v_mat_std', ctx=Store()), Name(id='q_mat_std', ctx=Store()), Name(id='w_mat_std', ctx=Store())], ctx=Store())
Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_build_eom_matrices', ctx=Load()), args=[Name(id='measurement_results', ctx=Load()), Name(id='size', ctx=Load())], keywords=[])
Tuple(elts=[Name(id='energy_gaps', ctx=Store()), Name(id='expansion_coefs', ctx=Store())], ctx=Store())
Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_compute_excitation_energies', ctx=Load()), args=[Name(id='m_mat', ctx=Load()), Name(id='v_mat', ctx=Load()), Name(id='q_mat', ctx=Load()), Name(id='w_mat', ctx=Load())], keywords=[])
Name(id='qeom_result', ctx=Store())
Call(func=Name(id='QEOMResult', ctx=Load()), args=[], keywords=[])
Attribute(value=Name(id='qeom_result', ctx=Load()), attr='ground_state_raw_result', ctx=Store())
Attribute(value=Name(id='groundstate_result', ctx=Load()), attr='raw_result', ctx=Load())
Attribute(value=Name(id='qeom_result', ctx=Load()), attr='expansion_coefficients', ctx=Store())
Name(id='expansion_coefs', ctx=Load())
Attribute(value=Name(id='qeom_result', ctx=Load()), attr='excitation_energies', ctx=Store())
Name(id='energy_gaps', ctx=Load())
Attribute(value=Name(id='qeom_result', ctx=Load()), attr='m_matrix', ctx=Store())
Name(id='m_mat', ctx=Load())
Attribute(value=Name(id='qeom_result', ctx=Load()), attr='v_matrix', ctx=Store())
Name(id='v_mat', ctx=Load())
Attribute(value=Name(id='qeom_result', ctx=Load()), attr='q_matrix', ctx=Store())
Name(id='q_mat', ctx=Load())
Attribute(value=Name(id='qeom_result', ctx=Load()), attr='w_matrix', ctx=Store())
Name(id='w_mat', ctx=Load())
Attribute(value=Name(id='qeom_result', ctx=Load()), attr='m_matrix_std', ctx=Store())
Name(id='m_mat_std', ctx=Load())
Attribute(value=Name(id='qeom_result', ctx=Load()), attr='v_matrix_std', ctx=Store())
Name(id='v_mat_std', ctx=Load())
Attribute(value=Name(id='qeom_result', ctx=Load()), attr='q_matrix_std', ctx=Store())
Name(id='q_mat_std', ctx=Load())
Attribute(value=Name(id='qeom_result', ctx=Load()), attr='w_matrix_std', ctx=Store())
Name(id='w_mat_std', ctx=Load())
Name(id='eigenstate_result', ctx=Store())
Call(func=Name(id='EigenstateResult', ctx=Load()), args=[], keywords=[])
Attribute(value=Name(id='eigenstate_result', ctx=Load()), attr='eigenstates', ctx=Store())
Attribute(value=Name(id='groundstate_result', ctx=Load()), attr='eigenstates', ctx=Load())
Attribute(value=Name(id='eigenstate_result', ctx=Load()), attr='aux_operator_eigenvalues', ctx=Store())
Attribute(value=Name(id='groundstate_result', ctx=Load()), attr='aux_operator_eigenvalues', ctx=Load())
Attribute(value=Name(id='eigenstate_result', ctx=Load()), attr='raw_result', ctx=Store())
Name(id='qeom_result', ctx=Load())
Attribute(value=Name(id='eigenstate_result', ctx=Load()), attr='eigenenergies', ctx=Store())
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Attribute(value=Name(id='groundstate_result', ctx=Load()), attr='eigenenergies', ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='asarray', ctx=Load()), args=[ListComp(elt=BinOp(left=Subscript(value=Attribute(value=Name(id='groundstate_result', ctx=Load()), attr='eigenenergies', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load()), op=Add(), right=Name(id='gap', ctx=Load())), generators=[comprehension(target=Name(id='gap', ctx=Store()), iter=Name(id='energy_gaps', ctx=Load()), ifs=[], is_async=0)])], keywords=[])], keywords=[])
Name(id='result', ctx=Store())
Call(func=Attribute(value=Name(id='problem', ctx=Load()), attr='interpret', ctx=Load()), args=[Name(id='eigenstate_result', ctx=Load())], keywords=[])
Name(id='result', ctx=Load())
Load()
arg(arg='self', annotation=None)
arg(arg='problem', annotation=None)
Str(s='Construct the excitation operators for each matrix element.\n\n        Returns:\n            a dictionary of all matrix elements operators and the number of excitations\n            (or the size of the qEOM pseudo-eigenvalue problem)\n        ')
Name(id='data', ctx=Store())
Call(func=Attribute(value=Name(id='problem', ctx=Load()), attr='hopping_qeom_ops', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_gsc', ctx=Load()), attr='qubit_converter', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_excitations', ctx=Load())], keywords=[])
Tuple(elts=[Name(id='hopping_operators', ctx=Store()), Name(id='type_of_commutativities', ctx=Store()), Name(id='excitation_indices', ctx=Store())], ctx=Store())
Name(id='data', ctx=Load())
Name(id='size', ctx=Store())
Call(func=Name(id='int', ctx=Load()), args=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='excitation_indices', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[]), op=FloorDiv(), right=Num(n=2))], keywords=[])
Name(id='eom_matrix_operators', ctx=Store())
Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_build_all_commutators', ctx=Load()), args=[Name(id='hopping_operators', ctx=Load()), Name(id='type_of_commutativities', ctx=Load()), Name(id='size', ctx=Load())], keywords=[])
Tuple(elts=[Name(id='eom_matrix_operators', ctx=Load()), Name(id='size', ctx=Load())], ctx=Load())
Name(id='Tuple', ctx=Load())
Index(value=Tuple(elts=[Name(id='dict', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()))
Load()
arg(arg='self', annotation=None)
arg(arg='hopping_operators', annotation=Name(id='dict', ctx=Load()))
arg(arg='type_of_commutativities', annotation=Name(id='dict', ctx=Load()))
arg(arg='size', annotation=Name(id='int', ctx=Load()))
Str(s='Building all commutators for Q, W, M, V matrices.\n\n        Args:\n            hopping_operators: all hopping operators based on excitations_list,\n                key is the string of single/double excitation;\n                value is corresponding operator.\n            type_of_commutativities: if tapering is used, it records the commutativities of\n                hopping operators with the\n                Z2 symmetries found in the original operator.\n            size: the number of excitations (size of the qEOM pseudo-eigenvalue problem)\n\n        Returns:\n            a dictionary that contains the operators for each matrix element\n        ')
Name(id='all_matrix_operators', ctx=Store())
Dict(keys=[], values=[])
Tuple(elts=[Name(id='mus', ctx=Store()), Name(id='nus', ctx=Store())], ctx=Store())
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='triu_indices', ctx=Load()), args=[Name(id='size', ctx=Load())], keywords=[])
arguments(args=[arg(arg='available_hopping_ops', annotation=None), arg(arg='untapered_op', annotation=None), arg(arg='z2_symmetries', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Assign(targets=[Name(id='to_be_computed_list', ctx=Store())], value=List(elts=[], ctx=Load()))
For(target=Tuple(elts=[Name(id='idx', ctx=Store()), Name(id='m_u', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='mus', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='n_u', ctx=Store())], value=Subscript(value=Name(id='nus', ctx=Load()), slice=Index(value=Name(id='idx', ctx=Load())), ctx=Load())), Assign(targets=[Name(id='left_op', ctx=Store())], value=Call(func=Attribute(value=Name(id='available_hopping_ops', ctx=Load()), attr='get', ctx=Load()), args=[JoinedStr(values=[Str(s='E_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None)])], keywords=[])), Assign(targets=[Name(id='right_op_1', ctx=Store())], value=Call(func=Attribute(value=Name(id='available_hopping_ops', ctx=Load()), attr='get', ctx=Load()), args=[JoinedStr(values=[Str(s='E_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])], keywords=[])), Assign(targets=[Name(id='right_op_2', ctx=Store())], value=Call(func=Attribute(value=Name(id='available_hopping_ops', ctx=Load()), attr='get', ctx=Load()), args=[JoinedStr(values=[Str(s='Edag_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='to_be_computed_list', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Name(id='m_u', ctx=Load()), Name(id='n_u', ctx=Load()), Name(id='left_op', ctx=Load()), Name(id='right_op_1', ctx=Load()), Name(id='right_op_2', ctx=Load())], ctx=Load())], keywords=[]))], orelse=[])
If(test=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='isEnabledFor', ctx=Load()), args=[Attribute(value=Name(id='logging', ctx=Load()), attr='INFO', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='info', ctx=Load()), args=[Str(s='Building all commutators:')], keywords=[])), Expr(value=Call(func=Name(id='TextProgressBar', ctx=Load()), args=[Attribute(value=Name(id='sys', ctx=Load()), attr='stderr', ctx=Load())], keywords=[]))], orelse=[])
Assign(targets=[Name(id='results', ctx=Store())], value=Call(func=Name(id='parallel_map', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_build_commutator_routine', ctx=Load()), Name(id='to_be_computed_list', ctx=Load())], keywords=[keyword(arg='task_args', value=Tuple(elts=[Name(id='untapered_op', ctx=Load()), Name(id='z2_symmetries', ctx=Load())], ctx=Load())), keyword(arg='num_processes', value=Attribute(value=Name(id='algorithm_globals', ctx=Load()), attr='num_processes', ctx=Load()))]))
For(target=Name(id='result', ctx=Store()), iter=Name(id='results', ctx=Load()), body=[Assign(targets=[Tuple(elts=[Name(id='m_u', ctx=Store()), Name(id='n_u', ctx=Store()), Name(id='q_mat_op', ctx=Store()), Name(id='w_mat_op', ctx=Store()), Name(id='m_mat_op', ctx=Store()), Name(id='v_mat_op', ctx=Store())], ctx=Store())], value=Name(id='result', ctx=Load())), If(test=Compare(left=Name(id='q_mat_op', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=[Assign(targets=[Subscript(value=Name(id='all_matrix_operators', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='q_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])), ctx=Store())], value=Name(id='q_mat_op', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='w_mat_op', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=[Assign(targets=[Subscript(value=Name(id='all_matrix_operators', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='w_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])), ctx=Store())], value=Name(id='w_mat_op', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='m_mat_op', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=[Assign(targets=[Subscript(value=Name(id='all_matrix_operators', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='m_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])), ctx=Store())], value=Name(id='m_mat_op', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='v_mat_op', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=[Assign(targets=[Subscript(value=Name(id='all_matrix_operators', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='v_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])), ctx=Store())], value=Name(id='v_mat_op', ctx=Load()))], orelse=[])], orelse=[])
Assign(targets=[Name(id='z2_symmetries', ctx=Store())], value=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_gsc', ctx=Load()), attr='qubit_converter', ctx=Load()), attr='z2symmetries', ctx=Load()))
ExceptHandler(type=Name(id='AttributeError', ctx=Load()), name=None, body=[Assign(targets=[Name(id='z2_symmetries', ctx=Store())], value=Call(func=Name(id='Z2Symmetries', ctx=Load()), args=[List(elts=[], ctx=Load()), List(elts=[], ctx=Load()), List(elts=[], ctx=Load())], keywords=[]))])
UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='z2_symmetries', ctx=Load()), attr='is_empty', ctx=Load()), args=[], keywords=[]))
Assign(targets=[Name(id='combinations', ctx=Store())], value=Call(func=Attribute(value=Name(id='itertools', ctx=Load()), attr='product', ctx=Load()), args=[List(elts=[Num(n=1), UnaryOp(op=USub(), operand=Num(n=1))], ctx=Load())], keywords=[keyword(arg='repeat', value=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='z2_symmetries', ctx=Load()), attr='symmetries', ctx=Load())], keywords=[]))]))
For(target=Name(id='targeted_tapering_values', ctx=Store()), iter=Name(id='combinations', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='info', ctx=Load()), args=[Str(s='In sector: (%s)'), Call(func=Attribute(value=Str(s=','), attr='join', ctx=Load()), args=[ListComp(elt=Call(func=Name(id='str', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='targeted_tapering_values', ctx=Load()), ifs=[], is_async=0)])], keywords=[])], keywords=[])), Assign(targets=[Name(id='available_hopping_ops', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='targeted_sector', ctx=Store())], value=Compare(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='asarray', ctx=Load()), args=[Name(id='targeted_tapering_values', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Num(n=1)])), For(target=Tuple(elts=[Name(id='key', ctx=Store()), Name(id='value', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='type_of_commutativities', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Name(id='value', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='asarray', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[])), If(test=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='all', ctx=Load()), args=[Compare(left=Name(id='value', ctx=Load()), ops=[Eq()], comparators=[Name(id='targeted_sector', ctx=Load())])], keywords=[]), body=[Assign(targets=[Subscript(value=Name(id='available_hopping_ops', ctx=Load()), slice=Index(value=Name(id='key', ctx=Load())), ctx=Store())], value=Subscript(value=Name(id='hopping_operators', ctx=Load()), slice=Index(value=Name(id='key', ctx=Load())), ctx=Load()))], orelse=[])], orelse=[]), Expr(value=Call(func=Name(id='_build_one_sector', ctx=Load()), args=[Name(id='available_hopping_ops', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_untapered_qubit_op_main', ctx=Load()), Name(id='z2_symmetries', ctx=Load())], keywords=[]))], orelse=[])
Expr(value=Call(func=Name(id='_build_one_sector', ctx=Load()), args=[Name(id='hopping_operators', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_untapered_qubit_op_main', ctx=Load()), Name(id='z2_symmetries', ctx=Load())], keywords=[]))
Name(id='all_matrix_operators', ctx=Load())
Load()
arg(arg='params', annotation=Name(id='List', ctx=Load()))
arg(arg='operator', annotation=Name(id='PauliSumOp', ctx=Load()))
arg(arg='z2_symmetries', annotation=Name(id='Z2Symmetries', ctx=Load()))
Str(s='Numerically computes the commutator / double commutator between operators.\n\n        Args:\n            params: list containing the indices of matrix element and the corresponding\n                excitation operators\n            operator: the hamiltonian\n            z2_symmetries: z2_symmetries in case of tapering\n\n        Returns:\n            The indices of the matrix element and the corresponding qubit\n            operator for each of the EOM matrices\n        ')
Tuple(elts=[Name(id='m_u', ctx=Store()), Name(id='n_u', ctx=Store()), Name(id='left_op', ctx=Store()), Name(id='right_op_1', ctx=Store()), Name(id='right_op_2', ctx=Store())], ctx=Store())
Name(id='params', ctx=Load())
BoolOp(op=Or(), values=[Compare(left=Name(id='left_op', ctx=Load()), ops=[Is()], comparators=[NameConstant(value=None)]), BoolOp(op=And(), values=[Compare(left=Name(id='right_op_1', ctx=Load()), ops=[Is()], comparators=[NameConstant(value=None)]), Compare(left=Name(id='right_op_2', ctx=Load()), ops=[Is()], comparators=[NameConstant(value=None)])])])
Assign(targets=[Name(id='q_mat_op', ctx=Store())], value=NameConstant(value=None))
Assign(targets=[Name(id='w_mat_op', ctx=Store())], value=NameConstant(value=None))
Assign(targets=[Name(id='m_mat_op', ctx=Store())], value=NameConstant(value=None))
Assign(targets=[Name(id='v_mat_op', ctx=Store())], value=NameConstant(value=None))
If(test=Compare(left=Name(id='right_op_1', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=[Assign(targets=[Name(id='q_mat_op', ctx=Store())], value=Call(func=Name(id='double_commutator', ctx=Load()), args=[Name(id='left_op', ctx=Load()), Name(id='operator', ctx=Load()), Name(id='right_op_1', ctx=Load())], keywords=[keyword(arg='sign', value=NameConstant(value=False))])), Assign(targets=[Name(id='w_mat_op', ctx=Store())], value=Call(func=Name(id='commutator', ctx=Load()), args=[Name(id='left_op', ctx=Load()), Name(id='right_op_1', ctx=Load())], keywords=[])), Assign(targets=[Name(id='q_mat_op', ctx=Store())], value=IfExp(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='q_mat_op', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Num(n=0)]), body=NameConstant(value=None), orelse=Name(id='q_mat_op', ctx=Load()))), Assign(targets=[Name(id='w_mat_op', ctx=Store())], value=IfExp(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='w_mat_op', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Num(n=0)]), body=NameConstant(value=None), orelse=Name(id='w_mat_op', ctx=Load())))], orelse=[Assign(targets=[Name(id='q_mat_op', ctx=Store())], value=NameConstant(value=None)), Assign(targets=[Name(id='w_mat_op', ctx=Store())], value=NameConstant(value=None))])
If(test=Compare(left=Name(id='right_op_2', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=[Assign(targets=[Name(id='m_mat_op', ctx=Store())], value=Call(func=Name(id='double_commutator', ctx=Load()), args=[Name(id='left_op', ctx=Load()), Name(id='operator', ctx=Load()), Name(id='right_op_2', ctx=Load())], keywords=[keyword(arg='sign', value=NameConstant(value=False))])), Assign(targets=[Name(id='v_mat_op', ctx=Store())], value=Call(func=Name(id='commutator', ctx=Load()), args=[Name(id='left_op', ctx=Load()), Name(id='right_op_2', ctx=Load())], keywords=[])), Assign(targets=[Name(id='m_mat_op', ctx=Store())], value=IfExp(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='m_mat_op', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Num(n=0)]), body=NameConstant(value=None), orelse=Name(id='m_mat_op', ctx=Load()))), Assign(targets=[Name(id='v_mat_op', ctx=Store())], value=IfExp(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='v_mat_op', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Num(n=0)]), body=NameConstant(value=None), orelse=Name(id='v_mat_op', ctx=Load())))], orelse=[Assign(targets=[Name(id='m_mat_op', ctx=Store())], value=NameConstant(value=None)), Assign(targets=[Name(id='v_mat_op', ctx=Store())], value=NameConstant(value=None))])
If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='z2_symmetries', ctx=Load()), attr='is_empty', ctx=Load()), args=[], keywords=[])), body=[If(test=BoolOp(op=And(), values=[Compare(left=Name(id='q_mat_op', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='q_mat_op', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Num(n=0)])]), body=[Assign(targets=[Name(id='q_mat_op', ctx=Store())], value=Call(func=Attribute(value=Name(id='z2_symmetries', ctx=Load()), attr='taper', ctx=Load()), args=[Name(id='q_mat_op', ctx=Load())], keywords=[]))], orelse=[]), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='w_mat_op', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='w_mat_op', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Num(n=0)])]), body=[Assign(targets=[Name(id='w_mat_op', ctx=Store())], value=Call(func=Attribute(value=Name(id='z2_symmetries', ctx=Load()), attr='taper', ctx=Load()), args=[Name(id='w_mat_op', ctx=Load())], keywords=[]))], orelse=[]), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='m_mat_op', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='m_mat_op', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Num(n=0)])]), body=[Assign(targets=[Name(id='m_mat_op', ctx=Store())], value=Call(func=Attribute(value=Name(id='z2_symmetries', ctx=Load()), attr='taper', ctx=Load()), args=[Name(id='m_mat_op', ctx=Load())], keywords=[]))], orelse=[]), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='v_mat_op', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='v_mat_op', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Num(n=0)])]), body=[Assign(targets=[Name(id='v_mat_op', ctx=Store())], value=Call(func=Attribute(value=Name(id='z2_symmetries', ctx=Load()), attr='taper', ctx=Load()), args=[Name(id='v_mat_op', ctx=Load())], keywords=[]))], orelse=[])], orelse=[])
Tuple(elts=[Name(id='m_u', ctx=Load()), Name(id='n_u', ctx=Load()), Name(id='q_mat_op', ctx=Load()), Name(id='w_mat_op', ctx=Load()), Name(id='m_mat_op', ctx=Load()), Name(id='v_mat_op', ctx=Load())], ctx=Load())
Load()
Name(id='Tuple', ctx=Load())
Index(value=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='int', ctx=Load()), Name(id='PauliSumOp', ctx=Load()), Name(id='PauliSumOp', ctx=Load()), Name(id='PauliSumOp', ctx=Load()), Name(id='PauliSumOp', ctx=Load())], ctx=Load()))
Load()
arg(arg='self', annotation=None)
arg(arg='gs_results', annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='float', ctx=Load())), ctx=Load())], ctx=Load())), ctx=Load()))
arg(arg='size', annotation=Name(id='int', ctx=Load()))
Str(s='Constructs the M, V, Q and W matrices from the results on the ground state\n\n        Args:\n            gs_results: a ground state result object\n            size: size of eigenvalue problem\n\n        Returns:\n            the matrices and their standard deviation\n        ')
Tuple(elts=[Name(id='mus', ctx=Store()), Name(id='nus', ctx=Store())], ctx=Store())
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='triu_indices', ctx=Load()), args=[Name(id='size', ctx=Load())], keywords=[])
Name(id='m_mat', ctx=Store())
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='zeros', ctx=Load()), args=[Tuple(elts=[Name(id='size', ctx=Load()), Name(id='size', ctx=Load())], ctx=Load())], keywords=[keyword(arg='dtype', value=Name(id='complex', ctx=Load()))])
Name(id='v_mat', ctx=Store())
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='zeros', ctx=Load()), args=[Tuple(elts=[Name(id='size', ctx=Load()), Name(id='size', ctx=Load())], ctx=Load())], keywords=[keyword(arg='dtype', value=Name(id='complex', ctx=Load()))])
Name(id='q_mat', ctx=Store())
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='zeros', ctx=Load()), args=[Tuple(elts=[Name(id='size', ctx=Load()), Name(id='size', ctx=Load())], ctx=Load())], keywords=[keyword(arg='dtype', value=Name(id='complex', ctx=Load()))])
Name(id='w_mat', ctx=Store())
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='zeros', ctx=Load()), args=[Tuple(elts=[Name(id='size', ctx=Load()), Name(id='size', ctx=Load())], ctx=Load())], keywords=[keyword(arg='dtype', value=Name(id='complex', ctx=Load()))])
Tuple(elts=[Name(id='m_mat_std', ctx=Store()), Name(id='v_mat_std', ctx=Store()), Name(id='q_mat_std', ctx=Store()), Name(id='w_mat_std', ctx=Store())], ctx=Store())
Tuple(elts=[Num(n=0.0), Num(n=0.0), Num(n=0.0), Num(n=0.0)], ctx=Load())
Tuple(elts=[Name(id='idx', ctx=Store()), Name(id='m_u', ctx=Store())], ctx=Store())
Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='mus', ctx=Load())], keywords=[])
Assign(targets=[Name(id='n_u', ctx=Store())], value=Subscript(value=Name(id='nus', ctx=Load()), slice=Index(value=Name(id='idx', ctx=Load())), ctx=Load()))
Assign(targets=[Subscript(value=Subscript(value=Name(id='q_mat', ctx=Load()), slice=Index(value=Name(id='m_u', ctx=Load())), ctx=Load()), slice=Index(value=Name(id='n_u', ctx=Load())), ctx=Store())], value=IfExp(test=Compare(left=Call(func=Attribute(value=Name(id='gs_results', ctx=Load()), attr='get', ctx=Load()), args=[JoinedStr(values=[Str(s='q_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])], keywords=[]), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=Subscript(value=Subscript(value=Name(id='gs_results', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='q_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])), ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load()), orelse=Subscript(value=Subscript(value=Name(id='q_mat', ctx=Load()), slice=Index(value=Name(id='m_u', ctx=Load())), ctx=Load()), slice=Index(value=Name(id='n_u', ctx=Load())), ctx=Load())))
Assign(targets=[Subscript(value=Subscript(value=Name(id='w_mat', ctx=Load()), slice=Index(value=Name(id='m_u', ctx=Load())), ctx=Load()), slice=Index(value=Name(id='n_u', ctx=Load())), ctx=Store())], value=IfExp(test=Compare(left=Call(func=Attribute(value=Name(id='gs_results', ctx=Load()), attr='get', ctx=Load()), args=[JoinedStr(values=[Str(s='w_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])], keywords=[]), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=Subscript(value=Subscript(value=Name(id='gs_results', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='w_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])), ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load()), orelse=Subscript(value=Subscript(value=Name(id='w_mat', ctx=Load()), slice=Index(value=Name(id='m_u', ctx=Load())), ctx=Load()), slice=Index(value=Name(id='n_u', ctx=Load())), ctx=Load())))
Assign(targets=[Subscript(value=Subscript(value=Name(id='m_mat', ctx=Load()), slice=Index(value=Name(id='m_u', ctx=Load())), ctx=Load()), slice=Index(value=Name(id='n_u', ctx=Load())), ctx=Store())], value=IfExp(test=Compare(left=Call(func=Attribute(value=Name(id='gs_results', ctx=Load()), attr='get', ctx=Load()), args=[JoinedStr(values=[Str(s='m_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])], keywords=[]), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=Subscript(value=Subscript(value=Name(id='gs_results', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='m_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])), ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load()), orelse=Subscript(value=Subscript(value=Name(id='m_mat', ctx=Load()), slice=Index(value=Name(id='m_u', ctx=Load())), ctx=Load()), slice=Index(value=Name(id='n_u', ctx=Load())), ctx=Load())))
Assign(targets=[Subscript(value=Subscript(value=Name(id='v_mat', ctx=Load()), slice=Index(value=Name(id='m_u', ctx=Load())), ctx=Load()), slice=Index(value=Name(id='n_u', ctx=Load())), ctx=Store())], value=IfExp(test=Compare(left=Call(func=Attribute(value=Name(id='gs_results', ctx=Load()), attr='get', ctx=Load()), args=[JoinedStr(values=[Str(s='v_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])], keywords=[]), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=Subscript(value=Subscript(value=Name(id='gs_results', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='v_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])), ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load()), orelse=Subscript(value=Subscript(value=Name(id='v_mat', ctx=Load()), slice=Index(value=Name(id='m_u', ctx=Load())), ctx=Load()), slice=Index(value=Name(id='n_u', ctx=Load())), ctx=Load())))
AugAssign(target=Name(id='q_mat_std', ctx=Store()), op=Add(), value=IfExp(test=Compare(left=Call(func=Attribute(value=Name(id='gs_results', ctx=Load()), attr='get', ctx=Load()), args=[JoinedStr(values=[Str(s='q_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_std')])], keywords=[]), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=Subscript(value=Subscript(value=Name(id='gs_results', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='q_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_std')])), ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load()), orelse=Num(n=0)))
AugAssign(target=Name(id='w_mat_std', ctx=Store()), op=Add(), value=IfExp(test=Compare(left=Call(func=Attribute(value=Name(id='gs_results', ctx=Load()), attr='get', ctx=Load()), args=[JoinedStr(values=[Str(s='w_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_std')])], keywords=[]), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=Subscript(value=Subscript(value=Name(id='gs_results', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='w_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_std')])), ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load()), orelse=Num(n=0)))
AugAssign(target=Name(id='m_mat_std', ctx=Store()), op=Add(), value=IfExp(test=Compare(left=Call(func=Attribute(value=Name(id='gs_results', ctx=Load()), attr='get', ctx=Load()), args=[JoinedStr(values=[Str(s='m_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_std')])], keywords=[]), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=Subscript(value=Subscript(value=Name(id='gs_results', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='m_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_std')])), ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load()), orelse=Num(n=0)))
AugAssign(target=Name(id='v_mat_std', ctx=Store()), op=Add(), value=IfExp(test=Compare(left=Call(func=Attribute(value=Name(id='gs_results', ctx=Load()), attr='get', ctx=Load()), args=[JoinedStr(values=[Str(s='v_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_std')])], keywords=[]), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=Subscript(value=Subscript(value=Name(id='gs_results', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='v_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_std')])), ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load()), orelse=Num(n=0)))
Name(id='q_mat', ctx=Store())
BinOp(left=BinOp(left=Name(id='q_mat', ctx=Load()), op=Add(), right=Attribute(value=Name(id='q_mat', ctx=Load()), attr='T', ctx=Load())), op=Sub(), right=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='identity', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='q_mat', ctx=Load()), attr='shape', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())], keywords=[]), op=Mult(), right=Name(id='q_mat', ctx=Load())))
Name(id='w_mat', ctx=Store())
BinOp(left=BinOp(left=Name(id='w_mat', ctx=Load()), op=Add(), right=Attribute(value=Name(id='w_mat', ctx=Load()), attr='T', ctx=Load())), op=Sub(), right=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='identity', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='w_mat', ctx=Load()), attr='shape', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())], keywords=[]), op=Mult(), right=Name(id='w_mat', ctx=Load())))
Name(id='m_mat', ctx=Store())
BinOp(left=BinOp(left=Name(id='m_mat', ctx=Load()), op=Add(), right=Attribute(value=Name(id='m_mat', ctx=Load()), attr='T', ctx=Load())), op=Sub(), right=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='identity', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='m_mat', ctx=Load()), attr='shape', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())], keywords=[]), op=Mult(), right=Name(id='m_mat', ctx=Load())))
Name(id='v_mat', ctx=Store())
BinOp(left=BinOp(left=Name(id='v_mat', ctx=Load()), op=Add(), right=Attribute(value=Name(id='v_mat', ctx=Load()), attr='T', ctx=Load())), op=Sub(), right=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='identity', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='v_mat', ctx=Load()), attr='shape', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())], keywords=[]), op=Mult(), right=Name(id='v_mat', ctx=Load())))
Name(id='q_mat', ctx=Store())
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='real', ctx=Load()), args=[Name(id='q_mat', ctx=Load())], keywords=[])
Name(id='w_mat', ctx=Store())
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='real', ctx=Load()), args=[Name(id='w_mat', ctx=Load())], keywords=[])
Name(id='m_mat', ctx=Store())
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='real', ctx=Load()), args=[Name(id='m_mat', ctx=Load())], keywords=[])
Name(id='v_mat', ctx=Store())
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='real', ctx=Load()), args=[Name(id='v_mat', ctx=Load())], keywords=[])
Name(id='q_mat_std', ctx=Store())
BinOp(left=Name(id='q_mat_std', ctx=Load()), op=Div(), right=Call(func=Name(id='float', ctx=Load()), args=[BinOp(left=Name(id='size', ctx=Load()), op=Pow(), right=Num(n=2))], keywords=[]))
Name(id='w_mat_std', ctx=Store())
BinOp(left=Name(id='w_mat_std', ctx=Load()), op=Div(), right=Call(func=Name(id='float', ctx=Load()), args=[BinOp(left=Name(id='size', ctx=Load()), op=Pow(), right=Num(n=2))], keywords=[]))
Name(id='m_mat_std', ctx=Store())
BinOp(left=Name(id='m_mat_std', ctx=Load()), op=Div(), right=Call(func=Name(id='float', ctx=Load()), args=[BinOp(left=Name(id='size', ctx=Load()), op=Pow(), right=Num(n=2))], keywords=[]))
Name(id='v_mat_std', ctx=Store())
BinOp(left=Name(id='v_mat_std', ctx=Load()), op=Div(), right=Call(func=Name(id='float', ctx=Load()), args=[BinOp(left=Name(id='size', ctx=Load()), op=Pow(), right=Num(n=2))], keywords=[]))
Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Str(s='\nQ:=========================\n%s'), Name(id='q_mat', ctx=Load())], keywords=[])
Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Str(s='\nW:=========================\n%s'), Name(id='w_mat', ctx=Load())], keywords=[])
Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Str(s='\nM:=========================\n%s'), Name(id='m_mat', ctx=Load())], keywords=[])
Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Str(s='\nV:=========================\n%s'), Name(id='v_mat', ctx=Load())], keywords=[])
Tuple(elts=[Name(id='m_mat', ctx=Load()), Name(id='v_mat', ctx=Load()), Name(id='q_mat', ctx=Load()), Name(id='w_mat', ctx=Load()), Name(id='m_mat_std', ctx=Load()), Name(id='v_mat_std', ctx=Load()), Name(id='q_mat_std', ctx=Load()), Name(id='w_mat_std', ctx=Load())], ctx=Load())
Name(id='Tuple', ctx=Load())
Index(value=Tuple(elts=[Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Name(id='float', ctx=Load()), Name(id='float', ctx=Load()), Name(id='float', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load()))
Load()
arg(arg='m_mat', annotation=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()))
arg(arg='v_mat', annotation=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()))
arg(arg='q_mat', annotation=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()))
arg(arg='w_mat', annotation=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()))
Str(s='Diagonalizing M, V, Q, W matrices for excitation energies.\n\n        Args:\n            m_mat : M matrices\n            v_mat : V matrices\n            q_mat : Q matrices\n            w_mat : W matrices\n\n        Returns:\n            1-D vector stores all energy gap to reference state\n            2-D array storing the X and Y expansion coefficients\n        ')
Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Str(s='Diagonalizing qeom matrices for excited states...')], keywords=[])
Name(id='a_mat', ctx=Store())
Call(func=Attribute(value=Attribute(value=Name(id='np', ctx=Load()), attr='matrixlib', ctx=Load()), attr='bmat', ctx=Load()), args=[List(elts=[List(elts=[Name(id='m_mat', ctx=Load()), Name(id='q_mat', ctx=Load())], ctx=Load()), List(elts=[Call(func=Attribute(value=Attribute(value=Name(id='q_mat', ctx=Load()), attr='T', ctx=Load()), attr='conj', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Attribute(value=Name(id='m_mat', ctx=Load()), attr='T', ctx=Load()), attr='conj', ctx=Load()), args=[], keywords=[])], ctx=Load())], ctx=Load())], keywords=[])
Name(id='b_mat', ctx=Store())
Call(func=Attribute(value=Attribute(value=Name(id='np', ctx=Load()), attr='matrixlib', ctx=Load()), attr='bmat', ctx=Load()), args=[List(elts=[List(elts=[Name(id='v_mat', ctx=Load()), Name(id='w_mat', ctx=Load())], ctx=Load()), List(elts=[UnaryOp(op=USub(), operand=Call(func=Attribute(value=Attribute(value=Name(id='w_mat', ctx=Load()), attr='T', ctx=Load()), attr='conj', ctx=Load()), args=[], keywords=[])), UnaryOp(op=USub(), operand=Call(func=Attribute(value=Attribute(value=Name(id='v_mat', ctx=Load()), attr='T', ctx=Load()), attr='conj', ctx=Load()), args=[], keywords=[]))], ctx=Load())], ctx=Load())], keywords=[])
Name(id='res', ctx=Store())
Call(func=Attribute(value=Name(id='linalg', ctx=Load()), attr='eig', ctx=Load()), args=[Name(id='a_mat', ctx=Load()), Name(id='b_mat', ctx=Load())], keywords=[])
Subscript(value=Subscript(value=Name(id='res', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load()), slice=Index(value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='isnan', ctx=Load()), args=[Subscript(value=Name(id='res', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())], keywords=[])], keywords=[])), ctx=Store())
Num(n=0.0)
Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Str(s='... %s'), Subscript(value=Name(id='res', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())], keywords=[])
Name(id='w', ctx=Store())
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sort', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='real', ctx=Load()), args=[Subscript(value=Name(id='res', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())], keywords=[])], keywords=[])
Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Str(s='Sorted real parts %s'), Name(id='w', ctx=Load())], keywords=[])
Name(id='w', ctx=Store())
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='abs', ctx=Load()), args=[Subscript(value=Name(id='w', ctx=Load()), slice=Slice(lower=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='w', ctx=Load())], keywords=[]), op=FloorDiv(), right=Num(n=2)), upper=None, step=None), ctx=Load())], keywords=[])
Subscript(value=Name(id='w', ctx=Load()), slice=Index(value=Compare(left=Name(id='w', ctx=Load()), ops=[Lt()], comparators=[Num(n=1e-06)])), ctx=Store())
Num(n=0)
Name(id='excitation_energies_gap', ctx=Store())
Name(id='w', ctx=Load())
Tuple(elts=[Name(id='excitation_energies_gap', ctx=Load()), Subscript(value=Name(id='res', ctx=Load()), slice=Index(value=Num(n=1)), ctx=Load())], ctx=Load())
Load()
Name(id='Tuple', ctx=Load())
Index(value=Tuple(elts=[Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())], ctx=Load()))
Load()
arg(arg='self', annotation=None)
Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[])
Attribute(value=Name(id='self', ctx=Load()), attr='_ground_state_raw_result', ctx=Store())
NameConstant(value=None)
Attribute(value=Name(id='self', ctx=Load()), attr='_excitation_energies', ctx=Store())
Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), ctx=Load())
NameConstant(value=None)
Attribute(value=Name(id='self', ctx=Load()), attr='_expansion_coefficients', ctx=Store())
Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), ctx=Load())
NameConstant(value=None)
Attribute(value=Name(id='self', ctx=Load()), attr='_m_matrix', ctx=Store())
Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), ctx=Load())
NameConstant(value=None)
Attribute(value=Name(id='self', ctx=Load()), attr='_v_matrix', ctx=Store())
Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), ctx=Load())
NameConstant(value=None)
Attribute(value=Name(id='self', ctx=Load()), attr='_q_matrix', ctx=Store())
Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), ctx=Load())
NameConstant(value=None)
Attribute(value=Name(id='self', ctx=Load()), attr='_w_matrix', ctx=Store())
Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), ctx=Load())
NameConstant(value=None)
Attribute(value=Name(id='self', ctx=Load()), attr='_v_matrix_std', ctx=Store())
Name(id='float', ctx=Load())
Num(n=0.0)
Attribute(value=Name(id='self', ctx=Load()), attr='_q_matrix_std', ctx=Store())
Name(id='float', ctx=Load())
Num(n=0.0)
Attribute(value=Name(id='self', ctx=Load()), attr='_w_matrix_std', ctx=Store())
Name(id='float', ctx=Load())
Num(n=0.0)
arg(arg='self', annotation=None)
Str(s='returns ground state raw result')
Attribute(value=Name(id='self', ctx=Load()), attr='_ground_state_raw_result', ctx=Load())
Load()
arg(arg='self', annotation=None)
arg(arg='value', annotation=None)
Str(s='sets ground state raw result')
Attribute(value=Name(id='self', ctx=Load()), attr='_ground_state_raw_result', ctx=Store())
Name(id='value', ctx=Load())
Name(id='ground_state_raw_result', ctx=Load())
Load()
arg(arg='self', annotation=None)
Str(s='returns the excitation energies (energy gaps)')
Attribute(value=Name(id='self', ctx=Load()), attr='_excitation_energies', ctx=Load())
Load()
Name(id='Optional', ctx=Load())
Index(value=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()))
Load()
arg(arg='self', annotation=None)
arg(arg='value', annotation=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()))
Str(s='sets the excitation energies (energy gaps)')
Attribute(value=Name(id='self', ctx=Load()), attr='_excitation_energies', ctx=Store())
Name(id='value', ctx=Load())
Name(id='excitation_energies', ctx=Load())
Load()
arg(arg='self', annotation=None)
Str(s='returns the X and Y expansion coefficients')
Attribute(value=Name(id='self', ctx=Load()), attr='_expansion_coefficients', ctx=Load())
Load()
Name(id='Optional', ctx=Load())
Index(value=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()))
Load()
arg(arg='self', annotation=None)
arg(arg='value', annotation=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()))
Str(s='sets the X and Y expansion coefficients')
Attribute(value=Name(id='self', ctx=Load()), attr='_expansion_coefficients', ctx=Store())
Name(id='value', ctx=Load())
Name(id='expansion_coefficients', ctx=Load())
Load()
arg(arg='self', annotation=None)
Str(s='returns the M matrix')
Attribute(value=Name(id='self', ctx=Load()), attr='_m_matrix', ctx=Load())
Load()
Name(id='Optional', ctx=Load())
Index(value=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()))
Load()
arg(arg='self', annotation=None)
arg(arg='value', annotation=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()))
Str(s='sets the M matrix')
Attribute(value=Name(id='self', ctx=Load()), attr='_m_matrix', ctx=Store())
Name(id='value', ctx=Load())
Name(id='m_matrix', ctx=Load())
Load()
arg(arg='self', annotation=None)
Str(s='returns the V matrix')
Attribute(value=Name(id='self', ctx=Load()), attr='_v_matrix', ctx=Load())
Load()
Name(id='Optional', ctx=Load())
Index(value=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()))
Load()
arg(arg='self', annotation=None)
arg(arg='value', annotation=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()))
Str(s='sets the V matrix')
Attribute(value=Name(id='self', ctx=Load()), attr='_v_matrix', ctx=Store())
Name(id='value', ctx=Load())
Name(id='v_matrix', ctx=Load())
Load()
arg(arg='self', annotation=None)
Str(s='returns the Q matrix')
Attribute(value=Name(id='self', ctx=Load()), attr='_q_matrix', ctx=Load())
Load()
Name(id='Optional', ctx=Load())
Index(value=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()))
Load()
arg(arg='self', annotation=None)
arg(arg='value', annotation=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()))
Str(s='sets the Q matrix')
Attribute(value=Name(id='self', ctx=Load()), attr='_q_matrix', ctx=Store())
Name(id='value', ctx=Load())
Name(id='q_matrix', ctx=Load())
Load()
arg(arg='self', annotation=None)
Str(s='returns the W matrix')
Attribute(value=Name(id='self', ctx=Load()), attr='_w_matrix', ctx=Load())
Load()
Name(id='Optional', ctx=Load())
Index(value=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()))
Load()
arg(arg='self', annotation=None)
arg(arg='value', annotation=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()))
Str(s='sets the W matrix')
Attribute(value=Name(id='self', ctx=Load()), attr='_w_matrix', ctx=Store())
Name(id='value', ctx=Load())
Name(id='w_matrix', ctx=Load())
Load()
arg(arg='self', annotation=None)
Str(s='returns the M matrix standard deviation')
Attribute(value=Name(id='self', ctx=Load()), attr='_m_matrix_std', ctx=Load())
Load()
Load()
arg(arg='self', annotation=None)
arg(arg='value', annotation=Name(id='float', ctx=Load()))
Str(s='sets the M matrix standard deviation')
Attribute(value=Name(id='self', ctx=Load()), attr='_m_matrix_std', ctx=Store())
Name(id='value', ctx=Load())
Name(id='m_matrix_std', ctx=Load())
Load()
arg(arg='self', annotation=None)
Str(s='returns the V matrix standard deviation')
Attribute(value=Name(id='self', ctx=Load()), attr='_v_matrix_std', ctx=Load())
Load()
Load()
arg(arg='self', annotation=None)
arg(arg='value', annotation=Name(id='float', ctx=Load()))
Str(s='sets the V matrix standard deviation')
Attribute(value=Name(id='self', ctx=Load()), attr='_v_matrix_std', ctx=Store())
Name(id='value', ctx=Load())
Name(id='v_matrix_std', ctx=Load())
Load()
arg(arg='self', annotation=None)
Str(s='returns the Q matrix standard deviation')
Attribute(value=Name(id='self', ctx=Load()), attr='_q_matrix_std', ctx=Load())
Load()
Load()
arg(arg='self', annotation=None)
arg(arg='value', annotation=Name(id='float', ctx=Load()))
Str(s='sets the Q matrix standard deviation')
Attribute(value=Name(id='self', ctx=Load()), attr='_q_matrix_std', ctx=Store())
Name(id='value', ctx=Load())
Name(id='q_matrix_std', ctx=Load())
Load()
arg(arg='self', annotation=None)
Str(s='returns the W matrix standard deviation')
Attribute(value=Name(id='self', ctx=Load()), attr='_w_matrix_std', ctx=Load())
Load()
Load()
arg(arg='self', annotation=None)
arg(arg='value', annotation=Name(id='float', ctx=Load()))
Str(s='sets the W matrix standard deviation')
Attribute(value=Name(id='self', ctx=Load()), attr='_w_matrix_std', ctx=Store())
Name(id='value', ctx=Load())
Name(id='w_matrix_std', ctx=Load())
Load()
Load()
Name(id='GroundStateSolver', ctx=Load())
Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='int', ctx=Load())), ctx=Load())), ctx=Load())], ctx=Load())), ctx=Load())
Name(id='self', ctx=Load())
Store()
Load()
Name(id='self', ctx=Load())
Store()
Load()
Name(id='self', ctx=Load())
Store()
Load()
Name(id='self', ctx=Load())
Load()
Load()
Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='int', ctx=Load())), ctx=Load())), ctx=Load())], ctx=Load())
Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='int', ctx=Load())), ctx=Load())), ctx=Load())], ctx=Load())), ctx=Load())
And()
Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='excitations', ctx=Load()), Name(id='str', ctx=Load())], keywords=[])
Compare(left=Name(id='excitations', ctx=Load()), ops=[NotIn()], comparators=[List(elts=[Str(s='s'), Str(s='d'), Str(s='sd')], ctx=Load())])
Call(func=Name(id='ValueError', ctx=Load()), args=[Str(s='Excitation type must be s (singles), d (doubles) or sd (singles and doubles)')], keywords=[])
Name(id='self', ctx=Load())
Store()
Load()
Load()
Attribute(value=Name(id='self', ctx=Load()), attr='_gsc', ctx=Load())
Load()
Name(id='BaseProblem', ctx=Load())
Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Subscript(value=Name(id='ListOrDictType', ctx=Load()), slice=Index(value=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='SecondQuantizedOp', ctx=Load()), Name(id='PauliSumOp', ctx=Load())], ctx=Load())), ctx=Load())), ctx=Load())), ctx=Load())
Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_gsc', ctx=Load()), attr='get_qubit_operators', ctx=Load())
Name(id='problem', ctx=Load())
Name(id='aux_operators', ctx=Load())
Load()
Tuple(elts=[Name(id='PauliSumOp', ctx=Load()), Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Subscript(value=Name(id='ListOrDictType', ctx=Load()), slice=Index(value=Name(id='PauliSumOp', ctx=Load())), ctx=Load())), ctx=Load())], ctx=Load())
Name(id='BaseProblem', ctx=Load())
Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Subscript(value=Name(id='ListOrDictType', ctx=Load()), slice=Index(value=Name(id='SecondQuantizedOp', ctx=Load())), ctx=Load())), ctx=Load())
Name(id='aux_operators', ctx=Load())
IsNot()
NameConstant(value=None)
Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='warning', ctx=Load()), args=[Str(s='With qEOM the auxiliary operators can currently only be evaluated on the ground state.')], keywords=[])
Store()
Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_gsc', ctx=Load()), attr='solve', ctx=Load())
Name(id='problem', ctx=Load())
Name(id='aux_operators', ctx=Load())
Store()
Attribute(value=Name(id='problem', ctx=Load()), attr='second_q_ops', ctx=Load())
Name(id='isinstance', ctx=Load())
Name(id='second_q_ops', ctx=Load())
Name(id='list', ctx=Load())
Name(id='main_second_q_op', ctx=Store())
Subscript(value=Name(id='second_q_ops', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())
Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='second_q_ops', ctx=Load()), Name(id='dict', ctx=Load())], keywords=[])
Assign(targets=[Name(id='main_second_q_op', ctx=Store())], value=Call(func=Attribute(value=Name(id='second_q_ops', ctx=Load()), attr='pop', ctx=Load()), args=[Attribute(value=Name(id='problem', ctx=Load()), attr='main_property_name', ctx=Load())], keywords=[]))
Name(id='self', ctx=Load())
Store()
Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_gsc', ctx=Load()), attr='qubit_converter', ctx=Load()), attr='convert_only', ctx=Load())
Name(id='main_second_q_op', ctx=Load())
Attribute(value=Name(id='problem', ctx=Load()), attr='num_particles', ctx=Load())
Name(id='matrix_operators_dict', ctx=Store())
Name(id='size', ctx=Store())
Store()
Attribute(value=Name(id='self', ctx=Load()), attr='_prepare_matrix_operators', ctx=Load())
Name(id='problem', ctx=Load())
Store()
Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_gsc', ctx=Load()), attr='evaluate_operators', ctx=Load())
Subscript(value=Attribute(value=Name(id='groundstate_result', ctx=Load()), attr='eigenstates', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())
Name(id='matrix_operators_dict', ctx=Load())
Store()
Name(id='cast', ctx=Load())
Subscript(value=Name(id='Dict', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='float', ctx=Load())), ctx=Load())], ctx=Load())), ctx=Load())
Name(id='measurement_results', ctx=Load())
Name(id='m_mat', ctx=Store())
Name(id='v_mat', ctx=Store())
Name(id='q_mat', ctx=Store())
Name(id='w_mat', ctx=Store())
Name(id='m_mat_std', ctx=Store())
Name(id='v_mat_std', ctx=Store())
Name(id='q_mat_std', ctx=Store())
Name(id='w_mat_std', ctx=Store())
Store()
Attribute(value=Name(id='self', ctx=Load()), attr='_build_eom_matrices', ctx=Load())
Name(id='measurement_results', ctx=Load())
Name(id='size', ctx=Load())
Name(id='energy_gaps', ctx=Store())
Name(id='expansion_coefs', ctx=Store())
Store()
Attribute(value=Name(id='self', ctx=Load()), attr='_compute_excitation_energies', ctx=Load())
Name(id='m_mat', ctx=Load())
Name(id='v_mat', ctx=Load())
Name(id='q_mat', ctx=Load())
Name(id='w_mat', ctx=Load())
Store()
Name(id='QEOMResult', ctx=Load())
Name(id='qeom_result', ctx=Load())
Store()
Name(id='groundstate_result', ctx=Load())
Load()
Name(id='qeom_result', ctx=Load())
Store()
Load()
Name(id='qeom_result', ctx=Load())
Store()
Load()
Name(id='qeom_result', ctx=Load())
Store()
Load()
Name(id='qeom_result', ctx=Load())
Store()
Load()
Name(id='qeom_result', ctx=Load())
Store()
Load()
Name(id='qeom_result', ctx=Load())
Store()
Load()
Name(id='qeom_result', ctx=Load())
Store()
Load()
Name(id='qeom_result', ctx=Load())
Store()
Load()
Name(id='qeom_result', ctx=Load())
Store()
Load()
Name(id='qeom_result', ctx=Load())
Store()
Load()
Store()
Name(id='EigenstateResult', ctx=Load())
Name(id='eigenstate_result', ctx=Load())
Store()
Name(id='groundstate_result', ctx=Load())
Load()
Name(id='eigenstate_result', ctx=Load())
Store()
Name(id='groundstate_result', ctx=Load())
Load()
Name(id='eigenstate_result', ctx=Load())
Store()
Load()
Name(id='eigenstate_result', ctx=Load())
Store()
Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load())
Attribute(value=Name(id='groundstate_result', ctx=Load()), attr='eigenenergies', ctx=Load())
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='asarray', ctx=Load()), args=[ListComp(elt=BinOp(left=Subscript(value=Attribute(value=Name(id='groundstate_result', ctx=Load()), attr='eigenenergies', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load()), op=Add(), right=Name(id='gap', ctx=Load())), generators=[comprehension(target=Name(id='gap', ctx=Store()), iter=Name(id='energy_gaps', ctx=Load()), ifs=[], is_async=0)])], keywords=[])
Store()
Attribute(value=Name(id='problem', ctx=Load()), attr='interpret', ctx=Load())
Name(id='eigenstate_result', ctx=Load())
Load()
Store()
Attribute(value=Name(id='problem', ctx=Load()), attr='hopping_qeom_ops', ctx=Load())
Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_gsc', ctx=Load()), attr='qubit_converter', ctx=Load())
Attribute(value=Name(id='self', ctx=Load()), attr='_excitations', ctx=Load())
Name(id='hopping_operators', ctx=Store())
Name(id='type_of_commutativities', ctx=Store())
Name(id='excitation_indices', ctx=Store())
Store()
Load()
Store()
Name(id='int', ctx=Load())
BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='excitation_indices', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[]), op=FloorDiv(), right=Num(n=2))
Store()
Attribute(value=Name(id='self', ctx=Load()), attr='_build_all_commutators', ctx=Load())
Name(id='hopping_operators', ctx=Load())
Name(id='type_of_commutativities', ctx=Load())
Name(id='size', ctx=Load())
Name(id='eom_matrix_operators', ctx=Load())
Name(id='size', ctx=Load())
Load()
Load()
Tuple(elts=[Name(id='dict', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load())
Name(id='dict', ctx=Load())
Name(id='dict', ctx=Load())
Name(id='int', ctx=Load())
Store()
Name(id='mus', ctx=Store())
Name(id='nus', ctx=Store())
Store()
Attribute(value=Name(id='np', ctx=Load()), attr='triu_indices', ctx=Load())
Name(id='size', ctx=Load())
arg(arg='available_hopping_ops', annotation=None)
arg(arg='untapered_op', annotation=None)
arg(arg='z2_symmetries', annotation=None)
Name(id='to_be_computed_list', ctx=Store())
List(elts=[], ctx=Load())
Tuple(elts=[Name(id='idx', ctx=Store()), Name(id='m_u', ctx=Store())], ctx=Store())
Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='mus', ctx=Load())], keywords=[])
Assign(targets=[Name(id='n_u', ctx=Store())], value=Subscript(value=Name(id='nus', ctx=Load()), slice=Index(value=Name(id='idx', ctx=Load())), ctx=Load()))
Assign(targets=[Name(id='left_op', ctx=Store())], value=Call(func=Attribute(value=Name(id='available_hopping_ops', ctx=Load()), attr='get', ctx=Load()), args=[JoinedStr(values=[Str(s='E_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None)])], keywords=[]))
Assign(targets=[Name(id='right_op_1', ctx=Store())], value=Call(func=Attribute(value=Name(id='available_hopping_ops', ctx=Load()), attr='get', ctx=Load()), args=[JoinedStr(values=[Str(s='E_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])], keywords=[]))
Assign(targets=[Name(id='right_op_2', ctx=Store())], value=Call(func=Attribute(value=Name(id='available_hopping_ops', ctx=Load()), attr='get', ctx=Load()), args=[JoinedStr(values=[Str(s='Edag_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])], keywords=[]))
Expr(value=Call(func=Attribute(value=Name(id='to_be_computed_list', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Name(id='m_u', ctx=Load()), Name(id='n_u', ctx=Load()), Name(id='left_op', ctx=Load()), Name(id='right_op_1', ctx=Load()), Name(id='right_op_2', ctx=Load())], ctx=Load())], keywords=[]))
Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='isEnabledFor', ctx=Load()), args=[Attribute(value=Name(id='logging', ctx=Load()), attr='INFO', ctx=Load())], keywords=[])
Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='info', ctx=Load()), args=[Str(s='Building all commutators:')], keywords=[]))
Expr(value=Call(func=Name(id='TextProgressBar', ctx=Load()), args=[Attribute(value=Name(id='sys', ctx=Load()), attr='stderr', ctx=Load())], keywords=[]))
Name(id='results', ctx=Store())
Call(func=Name(id='parallel_map', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_build_commutator_routine', ctx=Load()), Name(id='to_be_computed_list', ctx=Load())], keywords=[keyword(arg='task_args', value=Tuple(elts=[Name(id='untapered_op', ctx=Load()), Name(id='z2_symmetries', ctx=Load())], ctx=Load())), keyword(arg='num_processes', value=Attribute(value=Name(id='algorithm_globals', ctx=Load()), attr='num_processes', ctx=Load()))])
Name(id='result', ctx=Store())
Name(id='results', ctx=Load())
Assign(targets=[Tuple(elts=[Name(id='m_u', ctx=Store()), Name(id='n_u', ctx=Store()), Name(id='q_mat_op', ctx=Store()), Name(id='w_mat_op', ctx=Store()), Name(id='m_mat_op', ctx=Store()), Name(id='v_mat_op', ctx=Store())], ctx=Store())], value=Name(id='result', ctx=Load()))
If(test=Compare(left=Name(id='q_mat_op', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=[Assign(targets=[Subscript(value=Name(id='all_matrix_operators', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='q_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])), ctx=Store())], value=Name(id='q_mat_op', ctx=Load()))], orelse=[])
If(test=Compare(left=Name(id='w_mat_op', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=[Assign(targets=[Subscript(value=Name(id='all_matrix_operators', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='w_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])), ctx=Store())], value=Name(id='w_mat_op', ctx=Load()))], orelse=[])
If(test=Compare(left=Name(id='m_mat_op', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=[Assign(targets=[Subscript(value=Name(id='all_matrix_operators', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='m_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])), ctx=Store())], value=Name(id='m_mat_op', ctx=Load()))], orelse=[])
If(test=Compare(left=Name(id='v_mat_op', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=[Assign(targets=[Subscript(value=Name(id='all_matrix_operators', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='v_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])), ctx=Store())], value=Name(id='v_mat_op', ctx=Load()))], orelse=[])
Name(id='z2_symmetries', ctx=Store())
Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_gsc', ctx=Load()), attr='qubit_converter', ctx=Load()), attr='z2symmetries', ctx=Load())
Name(id='AttributeError', ctx=Load())
Assign(targets=[Name(id='z2_symmetries', ctx=Store())], value=Call(func=Name(id='Z2Symmetries', ctx=Load()), args=[List(elts=[], ctx=Load()), List(elts=[], ctx=Load()), List(elts=[], ctx=Load())], keywords=[]))
Not()
Call(func=Attribute(value=Name(id='z2_symmetries', ctx=Load()), attr='is_empty', ctx=Load()), args=[], keywords=[])
Name(id='combinations', ctx=Store())
Call(func=Attribute(value=Name(id='itertools', ctx=Load()), attr='product', ctx=Load()), args=[List(elts=[Num(n=1), UnaryOp(op=USub(), operand=Num(n=1))], ctx=Load())], keywords=[keyword(arg='repeat', value=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='z2_symmetries', ctx=Load()), attr='symmetries', ctx=Load())], keywords=[]))])
Name(id='targeted_tapering_values', ctx=Store())
Name(id='combinations', ctx=Load())
Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='info', ctx=Load()), args=[Str(s='In sector: (%s)'), Call(func=Attribute(value=Str(s=','), attr='join', ctx=Load()), args=[ListComp(elt=Call(func=Name(id='str', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='targeted_tapering_values', ctx=Load()), ifs=[], is_async=0)])], keywords=[])], keywords=[]))
Assign(targets=[Name(id='available_hopping_ops', ctx=Store())], value=Dict(keys=[], values=[]))
Assign(targets=[Name(id='targeted_sector', ctx=Store())], value=Compare(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='asarray', ctx=Load()), args=[Name(id='targeted_tapering_values', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Num(n=1)]))
For(target=Tuple(elts=[Name(id='key', ctx=Store()), Name(id='value', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='type_of_commutativities', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Name(id='value', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='asarray', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[])), If(test=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='all', ctx=Load()), args=[Compare(left=Name(id='value', ctx=Load()), ops=[Eq()], comparators=[Name(id='targeted_sector', ctx=Load())])], keywords=[]), body=[Assign(targets=[Subscript(value=Name(id='available_hopping_ops', ctx=Load()), slice=Index(value=Name(id='key', ctx=Load())), ctx=Store())], value=Subscript(value=Name(id='hopping_operators', ctx=Load()), slice=Index(value=Name(id='key', ctx=Load())), ctx=Load()))], orelse=[])], orelse=[])
Expr(value=Call(func=Name(id='_build_one_sector', ctx=Load()), args=[Name(id='available_hopping_ops', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_untapered_qubit_op_main', ctx=Load()), Name(id='z2_symmetries', ctx=Load())], keywords=[]))
Call(func=Name(id='_build_one_sector', ctx=Load()), args=[Name(id='hopping_operators', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_untapered_qubit_op_main', ctx=Load()), Name(id='z2_symmetries', ctx=Load())], keywords=[])
Load()
Name(id='List', ctx=Load())
Name(id='PauliSumOp', ctx=Load())
Name(id='Z2Symmetries', ctx=Load())
Name(id='m_u', ctx=Store())
Name(id='n_u', ctx=Store())
Name(id='left_op', ctx=Store())
Name(id='right_op_1', ctx=Store())
Name(id='right_op_2', ctx=Store())
Store()
Load()
Or()
Compare(left=Name(id='left_op', ctx=Load()), ops=[Is()], comparators=[NameConstant(value=None)])
BoolOp(op=And(), values=[Compare(left=Name(id='right_op_1', ctx=Load()), ops=[Is()], comparators=[NameConstant(value=None)]), Compare(left=Name(id='right_op_2', ctx=Load()), ops=[Is()], comparators=[NameConstant(value=None)])])
Name(id='q_mat_op', ctx=Store())
NameConstant(value=None)
Name(id='w_mat_op', ctx=Store())
NameConstant(value=None)
Name(id='m_mat_op', ctx=Store())
NameConstant(value=None)
Name(id='v_mat_op', ctx=Store())
NameConstant(value=None)
Compare(left=Name(id='right_op_1', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)])
Assign(targets=[Name(id='q_mat_op', ctx=Store())], value=Call(func=Name(id='double_commutator', ctx=Load()), args=[Name(id='left_op', ctx=Load()), Name(id='operator', ctx=Load()), Name(id='right_op_1', ctx=Load())], keywords=[keyword(arg='sign', value=NameConstant(value=False))]))
Assign(targets=[Name(id='w_mat_op', ctx=Store())], value=Call(func=Name(id='commutator', ctx=Load()), args=[Name(id='left_op', ctx=Load()), Name(id='right_op_1', ctx=Load())], keywords=[]))
Assign(targets=[Name(id='q_mat_op', ctx=Store())], value=IfExp(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='q_mat_op', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Num(n=0)]), body=NameConstant(value=None), orelse=Name(id='q_mat_op', ctx=Load())))
Assign(targets=[Name(id='w_mat_op', ctx=Store())], value=IfExp(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='w_mat_op', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Num(n=0)]), body=NameConstant(value=None), orelse=Name(id='w_mat_op', ctx=Load())))
Assign(targets=[Name(id='q_mat_op', ctx=Store())], value=NameConstant(value=None))
Assign(targets=[Name(id='w_mat_op', ctx=Store())], value=NameConstant(value=None))
Compare(left=Name(id='right_op_2', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)])
Assign(targets=[Name(id='m_mat_op', ctx=Store())], value=Call(func=Name(id='double_commutator', ctx=Load()), args=[Name(id='left_op', ctx=Load()), Name(id='operator', ctx=Load()), Name(id='right_op_2', ctx=Load())], keywords=[keyword(arg='sign', value=NameConstant(value=False))]))
Assign(targets=[Name(id='v_mat_op', ctx=Store())], value=Call(func=Name(id='commutator', ctx=Load()), args=[Name(id='left_op', ctx=Load()), Name(id='right_op_2', ctx=Load())], keywords=[]))
Assign(targets=[Name(id='m_mat_op', ctx=Store())], value=IfExp(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='m_mat_op', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Num(n=0)]), body=NameConstant(value=None), orelse=Name(id='m_mat_op', ctx=Load())))
Assign(targets=[Name(id='v_mat_op', ctx=Store())], value=IfExp(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='v_mat_op', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Num(n=0)]), body=NameConstant(value=None), orelse=Name(id='v_mat_op', ctx=Load())))
Assign(targets=[Name(id='m_mat_op', ctx=Store())], value=NameConstant(value=None))
Assign(targets=[Name(id='v_mat_op', ctx=Store())], value=NameConstant(value=None))
UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='z2_symmetries', ctx=Load()), attr='is_empty', ctx=Load()), args=[], keywords=[]))
If(test=BoolOp(op=And(), values=[Compare(left=Name(id='q_mat_op', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='q_mat_op', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Num(n=0)])]), body=[Assign(targets=[Name(id='q_mat_op', ctx=Store())], value=Call(func=Attribute(value=Name(id='z2_symmetries', ctx=Load()), attr='taper', ctx=Load()), args=[Name(id='q_mat_op', ctx=Load())], keywords=[]))], orelse=[])
If(test=BoolOp(op=And(), values=[Compare(left=Name(id='w_mat_op', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='w_mat_op', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Num(n=0)])]), body=[Assign(targets=[Name(id='w_mat_op', ctx=Store())], value=Call(func=Attribute(value=Name(id='z2_symmetries', ctx=Load()), attr='taper', ctx=Load()), args=[Name(id='w_mat_op', ctx=Load())], keywords=[]))], orelse=[])
If(test=BoolOp(op=And(), values=[Compare(left=Name(id='m_mat_op', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='m_mat_op', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Num(n=0)])]), body=[Assign(targets=[Name(id='m_mat_op', ctx=Store())], value=Call(func=Attribute(value=Name(id='z2_symmetries', ctx=Load()), attr='taper', ctx=Load()), args=[Name(id='m_mat_op', ctx=Load())], keywords=[]))], orelse=[])
If(test=BoolOp(op=And(), values=[Compare(left=Name(id='v_mat_op', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='v_mat_op', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Num(n=0)])]), body=[Assign(targets=[Name(id='v_mat_op', ctx=Store())], value=Call(func=Attribute(value=Name(id='z2_symmetries', ctx=Load()), attr='taper', ctx=Load()), args=[Name(id='v_mat_op', ctx=Load())], keywords=[]))], orelse=[])
Name(id='m_u', ctx=Load())
Name(id='n_u', ctx=Load())
Name(id='q_mat_op', ctx=Load())
Name(id='w_mat_op', ctx=Load())
Name(id='m_mat_op', ctx=Load())
Name(id='v_mat_op', ctx=Load())
Load()
Load()
Tuple(elts=[Name(id='int', ctx=Load()), Name(id='int', ctx=Load()), Name(id='PauliSumOp', ctx=Load()), Name(id='PauliSumOp', ctx=Load()), Name(id='PauliSumOp', ctx=Load()), Name(id='PauliSumOp', ctx=Load())], ctx=Load())
Subscript(value=Name(id='Dict', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='float', ctx=Load())), ctx=Load())], ctx=Load())), ctx=Load())
Name(id='int', ctx=Load())
Name(id='mus', ctx=Store())
Name(id='nus', ctx=Store())
Store()
Attribute(value=Name(id='np', ctx=Load()), attr='triu_indices', ctx=Load())
Name(id='size', ctx=Load())
Store()
Attribute(value=Name(id='np', ctx=Load()), attr='zeros', ctx=Load())
Tuple(elts=[Name(id='size', ctx=Load()), Name(id='size', ctx=Load())], ctx=Load())
keyword(arg='dtype', value=Name(id='complex', ctx=Load()))
Store()
Attribute(value=Name(id='np', ctx=Load()), attr='zeros', ctx=Load())
Tuple(elts=[Name(id='size', ctx=Load()), Name(id='size', ctx=Load())], ctx=Load())
keyword(arg='dtype', value=Name(id='complex', ctx=Load()))
Store()
Attribute(value=Name(id='np', ctx=Load()), attr='zeros', ctx=Load())
Tuple(elts=[Name(id='size', ctx=Load()), Name(id='size', ctx=Load())], ctx=Load())
keyword(arg='dtype', value=Name(id='complex', ctx=Load()))
Store()
Attribute(value=Name(id='np', ctx=Load()), attr='zeros', ctx=Load())
Tuple(elts=[Name(id='size', ctx=Load()), Name(id='size', ctx=Load())], ctx=Load())
keyword(arg='dtype', value=Name(id='complex', ctx=Load()))
Name(id='m_mat_std', ctx=Store())
Name(id='v_mat_std', ctx=Store())
Name(id='q_mat_std', ctx=Store())
Name(id='w_mat_std', ctx=Store())
Store()
Num(n=0.0)
Num(n=0.0)
Num(n=0.0)
Num(n=0.0)
Load()
Name(id='idx', ctx=Store())
Name(id='m_u', ctx=Store())
Store()
Name(id='enumerate', ctx=Load())
Name(id='mus', ctx=Load())
Name(id='n_u', ctx=Store())
Subscript(value=Name(id='nus', ctx=Load()), slice=Index(value=Name(id='idx', ctx=Load())), ctx=Load())
Subscript(value=Subscript(value=Name(id='q_mat', ctx=Load()), slice=Index(value=Name(id='m_u', ctx=Load())), ctx=Load()), slice=Index(value=Name(id='n_u', ctx=Load())), ctx=Store())
IfExp(test=Compare(left=Call(func=Attribute(value=Name(id='gs_results', ctx=Load()), attr='get', ctx=Load()), args=[JoinedStr(values=[Str(s='q_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])], keywords=[]), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=Subscript(value=Subscript(value=Name(id='gs_results', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='q_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])), ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load()), orelse=Subscript(value=Subscript(value=Name(id='q_mat', ctx=Load()), slice=Index(value=Name(id='m_u', ctx=Load())), ctx=Load()), slice=Index(value=Name(id='n_u', ctx=Load())), ctx=Load()))
Subscript(value=Subscript(value=Name(id='w_mat', ctx=Load()), slice=Index(value=Name(id='m_u', ctx=Load())), ctx=Load()), slice=Index(value=Name(id='n_u', ctx=Load())), ctx=Store())
IfExp(test=Compare(left=Call(func=Attribute(value=Name(id='gs_results', ctx=Load()), attr='get', ctx=Load()), args=[JoinedStr(values=[Str(s='w_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])], keywords=[]), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=Subscript(value=Subscript(value=Name(id='gs_results', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='w_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])), ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load()), orelse=Subscript(value=Subscript(value=Name(id='w_mat', ctx=Load()), slice=Index(value=Name(id='m_u', ctx=Load())), ctx=Load()), slice=Index(value=Name(id='n_u', ctx=Load())), ctx=Load()))
Subscript(value=Subscript(value=Name(id='m_mat', ctx=Load()), slice=Index(value=Name(id='m_u', ctx=Load())), ctx=Load()), slice=Index(value=Name(id='n_u', ctx=Load())), ctx=Store())
IfExp(test=Compare(left=Call(func=Attribute(value=Name(id='gs_results', ctx=Load()), attr='get', ctx=Load()), args=[JoinedStr(values=[Str(s='m_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])], keywords=[]), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=Subscript(value=Subscript(value=Name(id='gs_results', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='m_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])), ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load()), orelse=Subscript(value=Subscript(value=Name(id='m_mat', ctx=Load()), slice=Index(value=Name(id='m_u', ctx=Load())), ctx=Load()), slice=Index(value=Name(id='n_u', ctx=Load())), ctx=Load()))
Subscript(value=Subscript(value=Name(id='v_mat', ctx=Load()), slice=Index(value=Name(id='m_u', ctx=Load())), ctx=Load()), slice=Index(value=Name(id='n_u', ctx=Load())), ctx=Store())
IfExp(test=Compare(left=Call(func=Attribute(value=Name(id='gs_results', ctx=Load()), attr='get', ctx=Load()), args=[JoinedStr(values=[Str(s='v_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])], keywords=[]), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=Subscript(value=Subscript(value=Name(id='gs_results', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='v_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])), ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load()), orelse=Subscript(value=Subscript(value=Name(id='v_mat', ctx=Load()), slice=Index(value=Name(id='m_u', ctx=Load())), ctx=Load()), slice=Index(value=Name(id='n_u', ctx=Load())), ctx=Load()))
Name(id='q_mat_std', ctx=Store())
Add()
IfExp(test=Compare(left=Call(func=Attribute(value=Name(id='gs_results', ctx=Load()), attr='get', ctx=Load()), args=[JoinedStr(values=[Str(s='q_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_std')])], keywords=[]), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=Subscript(value=Subscript(value=Name(id='gs_results', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='q_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_std')])), ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load()), orelse=Num(n=0))
Name(id='w_mat_std', ctx=Store())
Add()
IfExp(test=Compare(left=Call(func=Attribute(value=Name(id='gs_results', ctx=Load()), attr='get', ctx=Load()), args=[JoinedStr(values=[Str(s='w_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_std')])], keywords=[]), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=Subscript(value=Subscript(value=Name(id='gs_results', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='w_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_std')])), ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load()), orelse=Num(n=0))
Name(id='m_mat_std', ctx=Store())
Add()
IfExp(test=Compare(left=Call(func=Attribute(value=Name(id='gs_results', ctx=Load()), attr='get', ctx=Load()), args=[JoinedStr(values=[Str(s='m_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_std')])], keywords=[]), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=Subscript(value=Subscript(value=Name(id='gs_results', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='m_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_std')])), ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load()), orelse=Num(n=0))
Name(id='v_mat_std', ctx=Store())
Add()
IfExp(test=Compare(left=Call(func=Attribute(value=Name(id='gs_results', ctx=Load()), attr='get', ctx=Load()), args=[JoinedStr(values=[Str(s='v_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_std')])], keywords=[]), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=Subscript(value=Subscript(value=Name(id='gs_results', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='v_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_std')])), ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load()), orelse=Num(n=0))
Store()
BinOp(left=Name(id='q_mat', ctx=Load()), op=Add(), right=Attribute(value=Name(id='q_mat', ctx=Load()), attr='T', ctx=Load()))
Sub()
BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='identity', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='q_mat', ctx=Load()), attr='shape', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())], keywords=[]), op=Mult(), right=Name(id='q_mat', ctx=Load()))
Store()
BinOp(left=Name(id='w_mat', ctx=Load()), op=Add(), right=Attribute(value=Name(id='w_mat', ctx=Load()), attr='T', ctx=Load()))
Sub()
BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='identity', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='w_mat', ctx=Load()), attr='shape', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())], keywords=[]), op=Mult(), right=Name(id='w_mat', ctx=Load()))
Store()
BinOp(left=Name(id='m_mat', ctx=Load()), op=Add(), right=Attribute(value=Name(id='m_mat', ctx=Load()), attr='T', ctx=Load()))
Sub()
BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='identity', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='m_mat', ctx=Load()), attr='shape', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())], keywords=[]), op=Mult(), right=Name(id='m_mat', ctx=Load()))
Store()
BinOp(left=Name(id='v_mat', ctx=Load()), op=Add(), right=Attribute(value=Name(id='v_mat', ctx=Load()), attr='T', ctx=Load()))
Sub()
BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='identity', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='v_mat', ctx=Load()), attr='shape', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())], keywords=[]), op=Mult(), right=Name(id='v_mat', ctx=Load()))
Store()
Attribute(value=Name(id='np', ctx=Load()), attr='real', ctx=Load())
Name(id='q_mat', ctx=Load())
Store()
Attribute(value=Name(id='np', ctx=Load()), attr='real', ctx=Load())
Name(id='w_mat', ctx=Load())
Store()
Attribute(value=Name(id='np', ctx=Load()), attr='real', ctx=Load())
Name(id='m_mat', ctx=Load())
Store()
Attribute(value=Name(id='np', ctx=Load()), attr='real', ctx=Load())
Name(id='v_mat', ctx=Load())
Store()
Name(id='q_mat_std', ctx=Load())
Div()
Call(func=Name(id='float', ctx=Load()), args=[BinOp(left=Name(id='size', ctx=Load()), op=Pow(), right=Num(n=2))], keywords=[])
Store()
Name(id='w_mat_std', ctx=Load())
Div()
Call(func=Name(id='float', ctx=Load()), args=[BinOp(left=Name(id='size', ctx=Load()), op=Pow(), right=Num(n=2))], keywords=[])
Store()
Name(id='m_mat_std', ctx=Load())
Div()
Call(func=Name(id='float', ctx=Load()), args=[BinOp(left=Name(id='size', ctx=Load()), op=Pow(), right=Num(n=2))], keywords=[])
Store()
Name(id='v_mat_std', ctx=Load())
Div()
Call(func=Name(id='float', ctx=Load()), args=[BinOp(left=Name(id='size', ctx=Load()), op=Pow(), right=Num(n=2))], keywords=[])
Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load())
Str(s='\nQ:=========================\n%s')
Name(id='q_mat', ctx=Load())
Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load())
Str(s='\nW:=========================\n%s')
Name(id='w_mat', ctx=Load())
Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load())
Str(s='\nM:=========================\n%s')
Name(id='m_mat', ctx=Load())
Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load())
Str(s='\nV:=========================\n%s')
Name(id='v_mat', ctx=Load())
Name(id='m_mat', ctx=Load())
Name(id='v_mat', ctx=Load())
Name(id='q_mat', ctx=Load())
Name(id='w_mat', ctx=Load())
Name(id='m_mat_std', ctx=Load())
Name(id='v_mat_std', ctx=Load())
Name(id='q_mat_std', ctx=Load())
Name(id='w_mat_std', ctx=Load())
Load()
Load()
Tuple(elts=[Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Name(id='float', ctx=Load()), Name(id='float', ctx=Load()), Name(id='float', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load())
Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())
Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())
Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())
Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())
Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load())
Str(s='Diagonalizing qeom matrices for excited states...')
Store()
Attribute(value=Attribute(value=Name(id='np', ctx=Load()), attr='matrixlib', ctx=Load()), attr='bmat', ctx=Load())
List(elts=[List(elts=[Name(id='m_mat', ctx=Load()), Name(id='q_mat', ctx=Load())], ctx=Load()), List(elts=[Call(func=Attribute(value=Attribute(value=Name(id='q_mat', ctx=Load()), attr='T', ctx=Load()), attr='conj', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Attribute(value=Name(id='m_mat', ctx=Load()), attr='T', ctx=Load()), attr='conj', ctx=Load()), args=[], keywords=[])], ctx=Load())], ctx=Load())
Store()
Attribute(value=Attribute(value=Name(id='np', ctx=Load()), attr='matrixlib', ctx=Load()), attr='bmat', ctx=Load())
List(elts=[List(elts=[Name(id='v_mat', ctx=Load()), Name(id='w_mat', ctx=Load())], ctx=Load()), List(elts=[UnaryOp(op=USub(), operand=Call(func=Attribute(value=Attribute(value=Name(id='w_mat', ctx=Load()), attr='T', ctx=Load()), attr='conj', ctx=Load()), args=[], keywords=[])), UnaryOp(op=USub(), operand=Call(func=Attribute(value=Attribute(value=Name(id='v_mat', ctx=Load()), attr='T', ctx=Load()), attr='conj', ctx=Load()), args=[], keywords=[]))], ctx=Load())], ctx=Load())
Store()
Attribute(value=Name(id='linalg', ctx=Load()), attr='eig', ctx=Load())
Name(id='a_mat', ctx=Load())
Name(id='b_mat', ctx=Load())
Subscript(value=Name(id='res', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())
Index(value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='isnan', ctx=Load()), args=[Subscript(value=Name(id='res', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())], keywords=[])], keywords=[]))
Store()
Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load())
Str(s='... %s')
Subscript(value=Name(id='res', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())
Store()
Attribute(value=Name(id='np', ctx=Load()), attr='sort', ctx=Load())
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='real', ctx=Load()), args=[Subscript(value=Name(id='res', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())], keywords=[])
Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load())
Str(s='Sorted real parts %s')
Name(id='w', ctx=Load())
Store()
Attribute(value=Name(id='np', ctx=Load()), attr='abs', ctx=Load())
Subscript(value=Name(id='w', ctx=Load()), slice=Slice(lower=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='w', ctx=Load())], keywords=[]), op=FloorDiv(), right=Num(n=2)), upper=None, step=None), ctx=Load())
Name(id='w', ctx=Load())
Index(value=Compare(left=Name(id='w', ctx=Load()), ops=[Lt()], comparators=[Num(n=1e-06)]))
Store()
Store()
Load()
Name(id='excitation_energies_gap', ctx=Load())
Subscript(value=Name(id='res', ctx=Load()), slice=Index(value=Num(n=1)), ctx=Load())
Load()
Load()
Tuple(elts=[Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())], ctx=Load())
Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load())
Name(id='self', ctx=Load())
Store()
Name(id='self', ctx=Load())
Store()
Name(id='Optional', ctx=Load())
Index(value=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()))
Load()
Name(id='self', ctx=Load())
Store()
Name(id='Optional', ctx=Load())
Index(value=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()))
Load()
Name(id='self', ctx=Load())
Store()
Name(id='Optional', ctx=Load())
Index(value=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()))
Load()
Name(id='self', ctx=Load())
Store()
Name(id='Optional', ctx=Load())
Index(value=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()))
Load()
Name(id='self', ctx=Load())
Store()
Name(id='Optional', ctx=Load())
Index(value=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()))
Load()
Name(id='self', ctx=Load())
Store()
Name(id='Optional', ctx=Load())
Index(value=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()))
Load()
Name(id='self', ctx=Load())
Store()
Load()
Name(id='self', ctx=Load())
Store()
Load()
Name(id='self', ctx=Load())
Store()
Load()
Name(id='self', ctx=Load())
Load()
Name(id='self', ctx=Load())
Store()
Load()
Load()
Name(id='self', ctx=Load())
Load()
Load()
Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())
Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())
Name(id='self', ctx=Load())
Store()
Load()
Load()
Name(id='self', ctx=Load())
Load()
Load()
Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())
Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())
Name(id='self', ctx=Load())
Store()
Load()
Load()
Name(id='self', ctx=Load())
Load()
Load()
Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())
Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())
Name(id='self', ctx=Load())
Store()
Load()
Load()
Name(id='self', ctx=Load())
Load()
Load()
Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())
Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())
Name(id='self', ctx=Load())
Store()
Load()
Load()
Name(id='self', ctx=Load())
Load()
Load()
Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())
Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())
Name(id='self', ctx=Load())
Store()
Load()
Load()
Name(id='self', ctx=Load())
Load()
Load()
Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())
Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())
Name(id='self', ctx=Load())
Store()
Load()
Load()
Name(id='self', ctx=Load())
Load()
Name(id='float', ctx=Load())
Name(id='self', ctx=Load())
Store()
Load()
Load()
Name(id='self', ctx=Load())
Load()
Name(id='float', ctx=Load())
Name(id='self', ctx=Load())
Store()
Load()
Load()
Name(id='self', ctx=Load())
Load()
Name(id='float', ctx=Load())
Name(id='self', ctx=Load())
Store()
Load()
Load()
Name(id='self', ctx=Load())
Load()
Name(id='float', ctx=Load())
Name(id='self', ctx=Load())
Store()
Load()
Load()
Load()
Name(id='Union', ctx=Load())
Index(value=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='int', ctx=Load())), ctx=Load())), ctx=Load())], ctx=Load()))
Load()
Load()
Load()
Load()
Load()
Name(id='str', ctx=Load())
Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='int', ctx=Load())), ctx=Load())), ctx=Load())
Load()
Name(id='Union', ctx=Load())
Index(value=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='int', ctx=Load())), ctx=Load())), ctx=Load())], ctx=Load()))
Load()
Name(id='isinstance', ctx=Load())
Name(id='excitations', ctx=Load())
Name(id='str', ctx=Load())
Name(id='excitations', ctx=Load())
NotIn()
List(elts=[Str(s='s'), Str(s='d'), Str(s='sd')], ctx=Load())
Name(id='ValueError', ctx=Load())
Str(s='Excitation type must be s (singles), d (doubles) or sd (singles and doubles)')
Load()
Name(id='self', ctx=Load())
Load()
Load()
Name(id='Optional', ctx=Load())
Index(value=Subscript(value=Name(id='ListOrDictType', ctx=Load()), slice=Index(value=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='SecondQuantizedOp', ctx=Load()), Name(id='PauliSumOp', ctx=Load())], ctx=Load())), ctx=Load())), ctx=Load()))
Load()
Attribute(value=Name(id='self', ctx=Load()), attr='_gsc', ctx=Load())
Load()
Load()
Load()
Name(id='PauliSumOp', ctx=Load())
Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Subscript(value=Name(id='ListOrDictType', ctx=Load()), slice=Index(value=Name(id='PauliSumOp', ctx=Load())), ctx=Load())), ctx=Load())
Load()
Load()
Name(id='Optional', ctx=Load())
Index(value=Subscript(value=Name(id='ListOrDictType', ctx=Load()), slice=Index(value=Name(id='SecondQuantizedOp', ctx=Load())), ctx=Load()))
Load()
Load()
Attribute(value=Name(id='logger', ctx=Load()), attr='warning', ctx=Load())
Str(s='With qEOM the auxiliary operators can currently only be evaluated on the ground state.')
Attribute(value=Name(id='self', ctx=Load()), attr='_gsc', ctx=Load())
Load()
Load()
Load()
Name(id='problem', ctx=Load())
Load()
Load()
Load()
Load()
Store()
Name(id='second_q_ops', ctx=Load())
Index(value=Num(n=0))
Load()
Name(id='isinstance', ctx=Load())
Name(id='second_q_ops', ctx=Load())
Name(id='dict', ctx=Load())
Name(id='main_second_q_op', ctx=Store())
Call(func=Attribute(value=Name(id='second_q_ops', ctx=Load()), attr='pop', ctx=Load()), args=[Attribute(value=Name(id='problem', ctx=Load()), attr='main_property_name', ctx=Load())], keywords=[])
Load()
Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_gsc', ctx=Load()), attr='qubit_converter', ctx=Load())
Load()
Load()
Name(id='problem', ctx=Load())
Load()
Store()
Store()
Name(id='self', ctx=Load())
Load()
Load()
Attribute(value=Name(id='self', ctx=Load()), attr='_gsc', ctx=Load())
Load()
Attribute(value=Name(id='groundstate_result', ctx=Load()), attr='eigenstates', ctx=Load())
Index(value=Num(n=0))
Load()
Load()
Load()
Name(id='Dict', ctx=Load())
Index(value=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='float', ctx=Load())), ctx=Load())], ctx=Load()))
Load()
Load()
Store()
Store()
Store()
Store()
Store()
Store()
Store()
Store()
Name(id='self', ctx=Load())
Load()
Load()
Load()
Store()
Store()
Name(id='self', ctx=Load())
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Name(id='np', ctx=Load())
Load()
Name(id='groundstate_result', ctx=Load())
Load()
Attribute(value=Name(id='np', ctx=Load()), attr='asarray', ctx=Load())
ListComp(elt=BinOp(left=Subscript(value=Attribute(value=Name(id='groundstate_result', ctx=Load()), attr='eigenenergies', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load()), op=Add(), right=Name(id='gap', ctx=Load())), generators=[comprehension(target=Name(id='gap', ctx=Store()), iter=Name(id='energy_gaps', ctx=Load()), ifs=[], is_async=0)])
Name(id='problem', ctx=Load())
Load()
Load()
Name(id='problem', ctx=Load())
Load()
Attribute(value=Name(id='self', ctx=Load()), attr='_gsc', ctx=Load())
Load()
Name(id='self', ctx=Load())
Load()
Store()
Store()
Store()
Load()
Call(func=Name(id='len', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='excitation_indices', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[])
FloorDiv()
Num(n=2)
Name(id='self', ctx=Load())
Load()
Load()
Load()
Load()
Load()
Load()
Name(id='dict', ctx=Load())
Name(id='int', ctx=Load())
Load()
Load()
Load()
Load()
Store()
Store()
Name(id='np', ctx=Load())
Load()
Load()
Store()
Load()
Name(id='idx', ctx=Store())
Name(id='m_u', ctx=Store())
Store()
Name(id='enumerate', ctx=Load())
Name(id='mus', ctx=Load())
Name(id='n_u', ctx=Store())
Subscript(value=Name(id='nus', ctx=Load()), slice=Index(value=Name(id='idx', ctx=Load())), ctx=Load())
Name(id='left_op', ctx=Store())
Call(func=Attribute(value=Name(id='available_hopping_ops', ctx=Load()), attr='get', ctx=Load()), args=[JoinedStr(values=[Str(s='E_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None)])], keywords=[])
Name(id='right_op_1', ctx=Store())
Call(func=Attribute(value=Name(id='available_hopping_ops', ctx=Load()), attr='get', ctx=Load()), args=[JoinedStr(values=[Str(s='E_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])], keywords=[])
Name(id='right_op_2', ctx=Store())
Call(func=Attribute(value=Name(id='available_hopping_ops', ctx=Load()), attr='get', ctx=Load()), args=[JoinedStr(values=[Str(s='Edag_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])], keywords=[])
Call(func=Attribute(value=Name(id='to_be_computed_list', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Name(id='m_u', ctx=Load()), Name(id='n_u', ctx=Load()), Name(id='left_op', ctx=Load()), Name(id='right_op_1', ctx=Load()), Name(id='right_op_2', ctx=Load())], ctx=Load())], keywords=[])
Attribute(value=Name(id='logger', ctx=Load()), attr='isEnabledFor', ctx=Load())
Attribute(value=Name(id='logging', ctx=Load()), attr='INFO', ctx=Load())
Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='info', ctx=Load()), args=[Str(s='Building all commutators:')], keywords=[])
Call(func=Name(id='TextProgressBar', ctx=Load()), args=[Attribute(value=Name(id='sys', ctx=Load()), attr='stderr', ctx=Load())], keywords=[])
Store()
Name(id='parallel_map', ctx=Load())
Attribute(value=Name(id='self', ctx=Load()), attr='_build_commutator_routine', ctx=Load())
Name(id='to_be_computed_list', ctx=Load())
keyword(arg='task_args', value=Tuple(elts=[Name(id='untapered_op', ctx=Load()), Name(id='z2_symmetries', ctx=Load())], ctx=Load()))
keyword(arg='num_processes', value=Attribute(value=Name(id='algorithm_globals', ctx=Load()), attr='num_processes', ctx=Load()))
Store()
Load()
Tuple(elts=[Name(id='m_u', ctx=Store()), Name(id='n_u', ctx=Store()), Name(id='q_mat_op', ctx=Store()), Name(id='w_mat_op', ctx=Store()), Name(id='m_mat_op', ctx=Store()), Name(id='v_mat_op', ctx=Store())], ctx=Store())
Name(id='result', ctx=Load())
Compare(left=Name(id='q_mat_op', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)])
Assign(targets=[Subscript(value=Name(id='all_matrix_operators', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='q_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])), ctx=Store())], value=Name(id='q_mat_op', ctx=Load()))
Compare(left=Name(id='w_mat_op', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)])
Assign(targets=[Subscript(value=Name(id='all_matrix_operators', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='w_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])), ctx=Store())], value=Name(id='w_mat_op', ctx=Load()))
Compare(left=Name(id='m_mat_op', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)])
Assign(targets=[Subscript(value=Name(id='all_matrix_operators', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='m_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])), ctx=Store())], value=Name(id='m_mat_op', ctx=Load()))
Compare(left=Name(id='v_mat_op', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)])
Assign(targets=[Subscript(value=Name(id='all_matrix_operators', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='v_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])), ctx=Store())], value=Name(id='v_mat_op', ctx=Load()))
Store()
Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_gsc', ctx=Load()), attr='qubit_converter', ctx=Load())
Load()
Load()
Name(id='z2_symmetries', ctx=Store())
Call(func=Name(id='Z2Symmetries', ctx=Load()), args=[List(elts=[], ctx=Load()), List(elts=[], ctx=Load()), List(elts=[], ctx=Load())], keywords=[])
Attribute(value=Name(id='z2_symmetries', ctx=Load()), attr='is_empty', ctx=Load())
Store()
Attribute(value=Name(id='itertools', ctx=Load()), attr='product', ctx=Load())
List(elts=[Num(n=1), UnaryOp(op=USub(), operand=Num(n=1))], ctx=Load())
keyword(arg='repeat', value=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='z2_symmetries', ctx=Load()), attr='symmetries', ctx=Load())], keywords=[]))
Store()
Load()
Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='info', ctx=Load()), args=[Str(s='In sector: (%s)'), Call(func=Attribute(value=Str(s=','), attr='join', ctx=Load()), args=[ListComp(elt=Call(func=Name(id='str', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='targeted_tapering_values', ctx=Load()), ifs=[], is_async=0)])], keywords=[])], keywords=[])
Name(id='available_hopping_ops', ctx=Store())
Dict(keys=[], values=[])
Name(id='targeted_sector', ctx=Store())
Compare(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='asarray', ctx=Load()), args=[Name(id='targeted_tapering_values', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Num(n=1)])
Tuple(elts=[Name(id='key', ctx=Store()), Name(id='value', ctx=Store())], ctx=Store())
Call(func=Attribute(value=Name(id='type_of_commutativities', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])
Assign(targets=[Name(id='value', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='asarray', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[]))
If(test=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='all', ctx=Load()), args=[Compare(left=Name(id='value', ctx=Load()), ops=[Eq()], comparators=[Name(id='targeted_sector', ctx=Load())])], keywords=[]), body=[Assign(targets=[Subscript(value=Name(id='available_hopping_ops', ctx=Load()), slice=Index(value=Name(id='key', ctx=Load())), ctx=Store())], value=Subscript(value=Name(id='hopping_operators', ctx=Load()), slice=Index(value=Name(id='key', ctx=Load())), ctx=Load()))], orelse=[])
Call(func=Name(id='_build_one_sector', ctx=Load()), args=[Name(id='available_hopping_ops', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_untapered_qubit_op_main', ctx=Load()), Name(id='z2_symmetries', ctx=Load())], keywords=[])
Name(id='_build_one_sector', ctx=Load())
Name(id='hopping_operators', ctx=Load())
Attribute(value=Name(id='self', ctx=Load()), attr='_untapered_qubit_op_main', ctx=Load())
Name(id='z2_symmetries', ctx=Load())
Load()
Load()
Load()
Store()
Store()
Store()
Store()
Store()
Name(id='left_op', ctx=Load())
Is()
NameConstant(value=None)
And()
Compare(left=Name(id='right_op_1', ctx=Load()), ops=[Is()], comparators=[NameConstant(value=None)])
Compare(left=Name(id='right_op_2', ctx=Load()), ops=[Is()], comparators=[NameConstant(value=None)])
Store()
Store()
Store()
Store()
Name(id='right_op_1', ctx=Load())
IsNot()
NameConstant(value=None)
Name(id='q_mat_op', ctx=Store())
Call(func=Name(id='double_commutator', ctx=Load()), args=[Name(id='left_op', ctx=Load()), Name(id='operator', ctx=Load()), Name(id='right_op_1', ctx=Load())], keywords=[keyword(arg='sign', value=NameConstant(value=False))])
Name(id='w_mat_op', ctx=Store())
Call(func=Name(id='commutator', ctx=Load()), args=[Name(id='left_op', ctx=Load()), Name(id='right_op_1', ctx=Load())], keywords=[])
Name(id='q_mat_op', ctx=Store())
IfExp(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='q_mat_op', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Num(n=0)]), body=NameConstant(value=None), orelse=Name(id='q_mat_op', ctx=Load()))
Name(id='w_mat_op', ctx=Store())
IfExp(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='w_mat_op', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Num(n=0)]), body=NameConstant(value=None), orelse=Name(id='w_mat_op', ctx=Load()))
Name(id='q_mat_op', ctx=Store())
NameConstant(value=None)
Name(id='w_mat_op', ctx=Store())
NameConstant(value=None)
Name(id='right_op_2', ctx=Load())
IsNot()
NameConstant(value=None)
Name(id='m_mat_op', ctx=Store())
Call(func=Name(id='double_commutator', ctx=Load()), args=[Name(id='left_op', ctx=Load()), Name(id='operator', ctx=Load()), Name(id='right_op_2', ctx=Load())], keywords=[keyword(arg='sign', value=NameConstant(value=False))])
Name(id='v_mat_op', ctx=Store())
Call(func=Name(id='commutator', ctx=Load()), args=[Name(id='left_op', ctx=Load()), Name(id='right_op_2', ctx=Load())], keywords=[])
Name(id='m_mat_op', ctx=Store())
IfExp(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='m_mat_op', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Num(n=0)]), body=NameConstant(value=None), orelse=Name(id='m_mat_op', ctx=Load()))
Name(id='v_mat_op', ctx=Store())
IfExp(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='v_mat_op', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Num(n=0)]), body=NameConstant(value=None), orelse=Name(id='v_mat_op', ctx=Load()))
Name(id='m_mat_op', ctx=Store())
NameConstant(value=None)
Name(id='v_mat_op', ctx=Store())
NameConstant(value=None)
Not()
Call(func=Attribute(value=Name(id='z2_symmetries', ctx=Load()), attr='is_empty', ctx=Load()), args=[], keywords=[])
BoolOp(op=And(), values=[Compare(left=Name(id='q_mat_op', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='q_mat_op', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Num(n=0)])])
Assign(targets=[Name(id='q_mat_op', ctx=Store())], value=Call(func=Attribute(value=Name(id='z2_symmetries', ctx=Load()), attr='taper', ctx=Load()), args=[Name(id='q_mat_op', ctx=Load())], keywords=[]))
BoolOp(op=And(), values=[Compare(left=Name(id='w_mat_op', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='w_mat_op', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Num(n=0)])])
Assign(targets=[Name(id='w_mat_op', ctx=Store())], value=Call(func=Attribute(value=Name(id='z2_symmetries', ctx=Load()), attr='taper', ctx=Load()), args=[Name(id='w_mat_op', ctx=Load())], keywords=[]))
BoolOp(op=And(), values=[Compare(left=Name(id='m_mat_op', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='m_mat_op', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Num(n=0)])])
Assign(targets=[Name(id='m_mat_op', ctx=Store())], value=Call(func=Attribute(value=Name(id='z2_symmetries', ctx=Load()), attr='taper', ctx=Load()), args=[Name(id='m_mat_op', ctx=Load())], keywords=[]))
BoolOp(op=And(), values=[Compare(left=Name(id='v_mat_op', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='v_mat_op', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Num(n=0)])])
Assign(targets=[Name(id='v_mat_op', ctx=Store())], value=Call(func=Attribute(value=Name(id='z2_symmetries', ctx=Load()), attr='taper', ctx=Load()), args=[Name(id='v_mat_op', ctx=Load())], keywords=[]))
Load()
Load()
Load()
Load()
Load()
Load()
Name(id='int', ctx=Load())
Name(id='int', ctx=Load())
Name(id='PauliSumOp', ctx=Load())
Name(id='PauliSumOp', ctx=Load())
Name(id='PauliSumOp', ctx=Load())
Name(id='PauliSumOp', ctx=Load())
Load()
Name(id='Dict', ctx=Load())
Index(value=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='float', ctx=Load())), ctx=Load())], ctx=Load()))
Load()
Load()
Store()
Store()
Name(id='np', ctx=Load())
Load()
Load()
Name(id='np', ctx=Load())
Load()
Name(id='size', ctx=Load())
Name(id='size', ctx=Load())
Load()
Name(id='complex', ctx=Load())
Name(id='np', ctx=Load())
Load()
Name(id='size', ctx=Load())
Name(id='size', ctx=Load())
Load()
Name(id='complex', ctx=Load())
Name(id='np', ctx=Load())
Load()
Name(id='size', ctx=Load())
Name(id='size', ctx=Load())
Load()
Name(id='complex', ctx=Load())
Name(id='np', ctx=Load())
Load()
Name(id='size', ctx=Load())
Name(id='size', ctx=Load())
Load()
Name(id='complex', ctx=Load())
Store()
Store()
Store()
Store()
Store()
Store()
Load()
Load()
Store()
Name(id='nus', ctx=Load())
Index(value=Name(id='idx', ctx=Load()))
Load()
Subscript(value=Name(id='q_mat', ctx=Load()), slice=Index(value=Name(id='m_u', ctx=Load())), ctx=Load())
Index(value=Name(id='n_u', ctx=Load()))
Store()
Compare(left=Call(func=Attribute(value=Name(id='gs_results', ctx=Load()), attr='get', ctx=Load()), args=[JoinedStr(values=[Str(s='q_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])], keywords=[]), ops=[IsNot()], comparators=[NameConstant(value=None)])
Subscript(value=Subscript(value=Name(id='gs_results', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='q_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])), ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())
Subscript(value=Subscript(value=Name(id='q_mat', ctx=Load()), slice=Index(value=Name(id='m_u', ctx=Load())), ctx=Load()), slice=Index(value=Name(id='n_u', ctx=Load())), ctx=Load())
Subscript(value=Name(id='w_mat', ctx=Load()), slice=Index(value=Name(id='m_u', ctx=Load())), ctx=Load())
Index(value=Name(id='n_u', ctx=Load()))
Store()
Compare(left=Call(func=Attribute(value=Name(id='gs_results', ctx=Load()), attr='get', ctx=Load()), args=[JoinedStr(values=[Str(s='w_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])], keywords=[]), ops=[IsNot()], comparators=[NameConstant(value=None)])
Subscript(value=Subscript(value=Name(id='gs_results', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='w_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])), ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())
Subscript(value=Subscript(value=Name(id='w_mat', ctx=Load()), slice=Index(value=Name(id='m_u', ctx=Load())), ctx=Load()), slice=Index(value=Name(id='n_u', ctx=Load())), ctx=Load())
Subscript(value=Name(id='m_mat', ctx=Load()), slice=Index(value=Name(id='m_u', ctx=Load())), ctx=Load())
Index(value=Name(id='n_u', ctx=Load()))
Store()
Compare(left=Call(func=Attribute(value=Name(id='gs_results', ctx=Load()), attr='get', ctx=Load()), args=[JoinedStr(values=[Str(s='m_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])], keywords=[]), ops=[IsNot()], comparators=[NameConstant(value=None)])
Subscript(value=Subscript(value=Name(id='gs_results', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='m_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])), ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())
Subscript(value=Subscript(value=Name(id='m_mat', ctx=Load()), slice=Index(value=Name(id='m_u', ctx=Load())), ctx=Load()), slice=Index(value=Name(id='n_u', ctx=Load())), ctx=Load())
Subscript(value=Name(id='v_mat', ctx=Load()), slice=Index(value=Name(id='m_u', ctx=Load())), ctx=Load())
Index(value=Name(id='n_u', ctx=Load()))
Store()
Compare(left=Call(func=Attribute(value=Name(id='gs_results', ctx=Load()), attr='get', ctx=Load()), args=[JoinedStr(values=[Str(s='v_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])], keywords=[]), ops=[IsNot()], comparators=[NameConstant(value=None)])
Subscript(value=Subscript(value=Name(id='gs_results', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='v_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])), ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())
Subscript(value=Subscript(value=Name(id='v_mat', ctx=Load()), slice=Index(value=Name(id='m_u', ctx=Load())), ctx=Load()), slice=Index(value=Name(id='n_u', ctx=Load())), ctx=Load())
Store()
Compare(left=Call(func=Attribute(value=Name(id='gs_results', ctx=Load()), attr='get', ctx=Load()), args=[JoinedStr(values=[Str(s='q_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_std')])], keywords=[]), ops=[IsNot()], comparators=[NameConstant(value=None)])
Subscript(value=Subscript(value=Name(id='gs_results', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='q_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_std')])), ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())
Num(n=0)
Store()
Compare(left=Call(func=Attribute(value=Name(id='gs_results', ctx=Load()), attr='get', ctx=Load()), args=[JoinedStr(values=[Str(s='w_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_std')])], keywords=[]), ops=[IsNot()], comparators=[NameConstant(value=None)])
Subscript(value=Subscript(value=Name(id='gs_results', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='w_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_std')])), ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())
Num(n=0)
Store()
Compare(left=Call(func=Attribute(value=Name(id='gs_results', ctx=Load()), attr='get', ctx=Load()), args=[JoinedStr(values=[Str(s='m_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_std')])], keywords=[]), ops=[IsNot()], comparators=[NameConstant(value=None)])
Subscript(value=Subscript(value=Name(id='gs_results', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='m_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_std')])), ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())
Num(n=0)
Store()
Compare(left=Call(func=Attribute(value=Name(id='gs_results', ctx=Load()), attr='get', ctx=Load()), args=[JoinedStr(values=[Str(s='v_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_std')])], keywords=[]), ops=[IsNot()], comparators=[NameConstant(value=None)])
Subscript(value=Subscript(value=Name(id='gs_results', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='v_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_std')])), ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())
Num(n=0)
Name(id='q_mat', ctx=Load())
Add()
Attribute(value=Name(id='q_mat', ctx=Load()), attr='T', ctx=Load())
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='identity', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='q_mat', ctx=Load()), attr='shape', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())], keywords=[])
Mult()
Name(id='q_mat', ctx=Load())
Name(id='w_mat', ctx=Load())
Add()
Attribute(value=Name(id='w_mat', ctx=Load()), attr='T', ctx=Load())
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='identity', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='w_mat', ctx=Load()), attr='shape', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())], keywords=[])
Mult()
Name(id='w_mat', ctx=Load())
Name(id='m_mat', ctx=Load())
Add()
Attribute(value=Name(id='m_mat', ctx=Load()), attr='T', ctx=Load())
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='identity', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='m_mat', ctx=Load()), attr='shape', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())], keywords=[])
Mult()
Name(id='m_mat', ctx=Load())
Name(id='v_mat', ctx=Load())
Add()
Attribute(value=Name(id='v_mat', ctx=Load()), attr='T', ctx=Load())
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='identity', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='v_mat', ctx=Load()), attr='shape', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())], keywords=[])
Mult()
Name(id='v_mat', ctx=Load())
Name(id='np', ctx=Load())
Load()
Load()
Name(id='np', ctx=Load())
Load()
Load()
Name(id='np', ctx=Load())
Load()
Load()
Name(id='np', ctx=Load())
Load()
Load()
Load()
Name(id='float', ctx=Load())
BinOp(left=Name(id='size', ctx=Load()), op=Pow(), right=Num(n=2))
Load()
Name(id='float', ctx=Load())
BinOp(left=Name(id='size', ctx=Load()), op=Pow(), right=Num(n=2))
Load()
Name(id='float', ctx=Load())
BinOp(left=Name(id='size', ctx=Load()), op=Pow(), right=Num(n=2))
Load()
Name(id='float', ctx=Load())
BinOp(left=Name(id='size', ctx=Load()), op=Pow(), right=Num(n=2))
Name(id='logger', ctx=Load())
Load()
Load()
Name(id='logger', ctx=Load())
Load()
Load()
Name(id='logger', ctx=Load())
Load()
Load()
Name(id='logger', ctx=Load())
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())
Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())
Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())
Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())
Name(id='float', ctx=Load())
Name(id='float', ctx=Load())
Name(id='float', ctx=Load())
Name(id='float', ctx=Load())
Load()
Name(id='np', ctx=Load())
Load()
Name(id='np', ctx=Load())
Load()
Name(id='np', ctx=Load())
Load()
Name(id='np', ctx=Load())
Load()
Name(id='logger', ctx=Load())
Load()
Attribute(value=Name(id='np', ctx=Load()), attr='matrixlib', ctx=Load())
Load()
List(elts=[Name(id='m_mat', ctx=Load()), Name(id='q_mat', ctx=Load())], ctx=Load())
List(elts=[Call(func=Attribute(value=Attribute(value=Name(id='q_mat', ctx=Load()), attr='T', ctx=Load()), attr='conj', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Attribute(value=Name(id='m_mat', ctx=Load()), attr='T', ctx=Load()), attr='conj', ctx=Load()), args=[], keywords=[])], ctx=Load())
Load()
Attribute(value=Name(id='np', ctx=Load()), attr='matrixlib', ctx=Load())
Load()
List(elts=[Name(id='v_mat', ctx=Load()), Name(id='w_mat', ctx=Load())], ctx=Load())
List(elts=[UnaryOp(op=USub(), operand=Call(func=Attribute(value=Attribute(value=Name(id='w_mat', ctx=Load()), attr='T', ctx=Load()), attr='conj', ctx=Load()), args=[], keywords=[])), UnaryOp(op=USub(), operand=Call(func=Attribute(value=Attribute(value=Name(id='v_mat', ctx=Load()), attr='T', ctx=Load()), attr='conj', ctx=Load()), args=[], keywords=[]))], ctx=Load())
Load()
Name(id='linalg', ctx=Load())
Load()
Load()
Load()
Name(id='res', ctx=Load())
Index(value=Num(n=0))
Load()
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='isnan', ctx=Load()), args=[Subscript(value=Name(id='res', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())], keywords=[])], keywords=[])
Name(id='logger', ctx=Load())
Load()
Name(id='res', ctx=Load())
Index(value=Num(n=0))
Load()
Name(id='np', ctx=Load())
Load()
Attribute(value=Name(id='np', ctx=Load()), attr='real', ctx=Load())
Subscript(value=Name(id='res', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())
Name(id='logger', ctx=Load())
Load()
Load()
Name(id='np', ctx=Load())
Load()
Name(id='w', ctx=Load())
Slice(lower=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='w', ctx=Load())], keywords=[]), op=FloorDiv(), right=Num(n=2)), upper=None, step=None)
Load()
Load()
Compare(left=Name(id='w', ctx=Load()), ops=[Lt()], comparators=[Num(n=1e-06)])
Load()
Name(id='res', ctx=Load())
Index(value=Num(n=1))
Load()
Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())
Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())
Load()
Call(func=Name(id='super', ctx=Load()), args=[], keywords=[])
Load()
Load()
Load()
Load()
Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())
Load()
Load()
Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())
Load()
Load()
Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())
Load()
Load()
Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())
Load()
Load()
Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())
Load()
Load()
Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())
Load()
Load()
Load()
Load()
Load()
Load()
Name(id='np', ctx=Load())
Load()
Name(id='np', ctx=Load())
Load()
Load()
Load()
Name(id='np', ctx=Load())
Load()
Name(id='np', ctx=Load())
Load()
Load()
Load()
Name(id='np', ctx=Load())
Load()
Name(id='np', ctx=Load())
Load()
Load()
Load()
Name(id='np', ctx=Load())
Load()
Name(id='np', ctx=Load())
Load()
Load()
Load()
Name(id='np', ctx=Load())
Load()
Name(id='np', ctx=Load())
Load()
Load()
Load()
Name(id='np', ctx=Load())
Load()
Name(id='np', ctx=Load())
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='int', ctx=Load())), ctx=Load())), ctx=Load())], ctx=Load())
Load()
Name(id='List', ctx=Load())
Index(value=Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='int', ctx=Load())), ctx=Load()))
Load()
Load()
Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='int', ctx=Load())), ctx=Load())), ctx=Load())], ctx=Load())
Load()
Load()
Load()
Load()
Str(s='s')
Str(s='d')
Str(s='sd')
Load()
Load()
Load()
Load()
Subscript(value=Name(id='ListOrDictType', ctx=Load()), slice=Index(value=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='SecondQuantizedOp', ctx=Load()), Name(id='PauliSumOp', ctx=Load())], ctx=Load())), ctx=Load())), ctx=Load())
Name(id='self', ctx=Load())
Load()
Load()
Name(id='Optional', ctx=Load())
Index(value=Subscript(value=Name(id='ListOrDictType', ctx=Load()), slice=Index(value=Name(id='PauliSumOp', ctx=Load())), ctx=Load()))
Load()
Load()
Subscript(value=Name(id='ListOrDictType', ctx=Load()), slice=Index(value=Name(id='SecondQuantizedOp', ctx=Load())), ctx=Load())
Name(id='logger', ctx=Load())
Load()
Name(id='self', ctx=Load())
Load()
Load()
Load()
Num(n=0)
Load()
Load()
Load()
Store()
Attribute(value=Name(id='second_q_ops', ctx=Load()), attr='pop', ctx=Load())
Attribute(value=Name(id='problem', ctx=Load()), attr='main_property_name', ctx=Load())
Attribute(value=Name(id='self', ctx=Load()), attr='_gsc', ctx=Load())
Load()
Load()
Load()
Name(id='self', ctx=Load())
Load()
Name(id='groundstate_result', ctx=Load())
Load()
Num(n=0)
Load()
Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='float', ctx=Load())), ctx=Load())], ctx=Load())
Load()
Load()
Load()
Load()
Name(id='np', ctx=Load())
Load()
BinOp(left=Subscript(value=Attribute(value=Name(id='groundstate_result', ctx=Load()), attr='eigenenergies', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load()), op=Add(), right=Name(id='gap', ctx=Load()))
comprehension(target=Name(id='gap', ctx=Store()), iter=Name(id='energy_gaps', ctx=Load()), ifs=[], is_async=0)
Load()
Load()
Name(id='self', ctx=Load())
Load()
Load()
Name(id='len', ctx=Load())
Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='excitation_indices', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])], keywords=[])
Load()
Load()
Load()
Load()
Store()
Store()
Load()
Load()
Store()
Name(id='nus', ctx=Load())
Index(value=Name(id='idx', ctx=Load()))
Load()
Store()
Attribute(value=Name(id='available_hopping_ops', ctx=Load()), attr='get', ctx=Load())
JoinedStr(values=[Str(s='E_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None)])
Store()
Attribute(value=Name(id='available_hopping_ops', ctx=Load()), attr='get', ctx=Load())
JoinedStr(values=[Str(s='E_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])
Store()
Attribute(value=Name(id='available_hopping_ops', ctx=Load()), attr='get', ctx=Load())
JoinedStr(values=[Str(s='Edag_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])
Attribute(value=Name(id='to_be_computed_list', ctx=Load()), attr='append', ctx=Load())
Tuple(elts=[Name(id='m_u', ctx=Load()), Name(id='n_u', ctx=Load()), Name(id='left_op', ctx=Load()), Name(id='right_op_1', ctx=Load()), Name(id='right_op_2', ctx=Load())], ctx=Load())
Name(id='logger', ctx=Load())
Load()
Name(id='logging', ctx=Load())
Load()
Attribute(value=Name(id='logger', ctx=Load()), attr='info', ctx=Load())
Str(s='Building all commutators:')
Name(id='TextProgressBar', ctx=Load())
Attribute(value=Name(id='sys', ctx=Load()), attr='stderr', ctx=Load())
Load()
Name(id='self', ctx=Load())
Load()
Load()
Tuple(elts=[Name(id='untapered_op', ctx=Load()), Name(id='z2_symmetries', ctx=Load())], ctx=Load())
Attribute(value=Name(id='algorithm_globals', ctx=Load()), attr='num_processes', ctx=Load())
Name(id='m_u', ctx=Store())
Name(id='n_u', ctx=Store())
Name(id='q_mat_op', ctx=Store())
Name(id='w_mat_op', ctx=Store())
Name(id='m_mat_op', ctx=Store())
Name(id='v_mat_op', ctx=Store())
Store()
Load()
Name(id='q_mat_op', ctx=Load())
IsNot()
NameConstant(value=None)
Subscript(value=Name(id='all_matrix_operators', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='q_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])), ctx=Store())
Name(id='q_mat_op', ctx=Load())
Name(id='w_mat_op', ctx=Load())
IsNot()
NameConstant(value=None)
Subscript(value=Name(id='all_matrix_operators', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='w_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])), ctx=Store())
Name(id='w_mat_op', ctx=Load())
Name(id='m_mat_op', ctx=Load())
IsNot()
NameConstant(value=None)
Subscript(value=Name(id='all_matrix_operators', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='m_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])), ctx=Store())
Name(id='m_mat_op', ctx=Load())
Name(id='v_mat_op', ctx=Load())
IsNot()
NameConstant(value=None)
Subscript(value=Name(id='all_matrix_operators', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='v_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])), ctx=Store())
Name(id='v_mat_op', ctx=Load())
Attribute(value=Name(id='self', ctx=Load()), attr='_gsc', ctx=Load())
Load()
Store()
Name(id='Z2Symmetries', ctx=Load())
List(elts=[], ctx=Load())
List(elts=[], ctx=Load())
List(elts=[], ctx=Load())
Name(id='z2_symmetries', ctx=Load())
Load()
Name(id='itertools', ctx=Load())
Load()
Num(n=1)
UnaryOp(op=USub(), operand=Num(n=1))
Load()
Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='z2_symmetries', ctx=Load()), attr='symmetries', ctx=Load())], keywords=[])
Attribute(value=Name(id='logger', ctx=Load()), attr='info', ctx=Load())
Str(s='In sector: (%s)')
Call(func=Attribute(value=Str(s=','), attr='join', ctx=Load()), args=[ListComp(elt=Call(func=Name(id='str', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='targeted_tapering_values', ctx=Load()), ifs=[], is_async=0)])], keywords=[])
Store()
Store()
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='asarray', ctx=Load()), args=[Name(id='targeted_tapering_values', ctx=Load())], keywords=[])
Eq()
Num(n=1)
Name(id='key', ctx=Store())
Name(id='value', ctx=Store())
Store()
Attribute(value=Name(id='type_of_commutativities', ctx=Load()), attr='items', ctx=Load())
Name(id='value', ctx=Store())
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='asarray', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[])
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='all', ctx=Load()), args=[Compare(left=Name(id='value', ctx=Load()), ops=[Eq()], comparators=[Name(id='targeted_sector', ctx=Load())])], keywords=[])
Assign(targets=[Subscript(value=Name(id='available_hopping_ops', ctx=Load()), slice=Index(value=Name(id='key', ctx=Load())), ctx=Store())], value=Subscript(value=Name(id='hopping_operators', ctx=Load()), slice=Index(value=Name(id='key', ctx=Load())), ctx=Load()))
Name(id='_build_one_sector', ctx=Load())
Name(id='available_hopping_ops', ctx=Load())
Attribute(value=Name(id='self', ctx=Load()), attr='_untapered_qubit_op_main', ctx=Load())
Name(id='z2_symmetries', ctx=Load())
Load()
Load()
Name(id='self', ctx=Load())
Load()
Load()
Load()
Name(id='right_op_1', ctx=Load())
Is()
NameConstant(value=None)
Name(id='right_op_2', ctx=Load())
Is()
NameConstant(value=None)
Load()
Store()
Name(id='double_commutator', ctx=Load())
Name(id='left_op', ctx=Load())
Name(id='operator', ctx=Load())
Name(id='right_op_1', ctx=Load())
keyword(arg='sign', value=NameConstant(value=False))
Store()
Name(id='commutator', ctx=Load())
Name(id='left_op', ctx=Load())
Name(id='right_op_1', ctx=Load())
Store()
Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='q_mat_op', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Num(n=0)])
NameConstant(value=None)
Name(id='q_mat_op', ctx=Load())
Store()
Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='w_mat_op', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Num(n=0)])
NameConstant(value=None)
Name(id='w_mat_op', ctx=Load())
Store()
Store()
Load()
Store()
Name(id='double_commutator', ctx=Load())
Name(id='left_op', ctx=Load())
Name(id='operator', ctx=Load())
Name(id='right_op_2', ctx=Load())
keyword(arg='sign', value=NameConstant(value=False))
Store()
Name(id='commutator', ctx=Load())
Name(id='left_op', ctx=Load())
Name(id='right_op_2', ctx=Load())
Store()
Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='m_mat_op', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Num(n=0)])
NameConstant(value=None)
Name(id='m_mat_op', ctx=Load())
Store()
Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='v_mat_op', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Num(n=0)])
NameConstant(value=None)
Name(id='v_mat_op', ctx=Load())
Store()
Store()
Attribute(value=Name(id='z2_symmetries', ctx=Load()), attr='is_empty', ctx=Load())
And()
Compare(left=Name(id='q_mat_op', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)])
Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='q_mat_op', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Num(n=0)])
Name(id='q_mat_op', ctx=Store())
Call(func=Attribute(value=Name(id='z2_symmetries', ctx=Load()), attr='taper', ctx=Load()), args=[Name(id='q_mat_op', ctx=Load())], keywords=[])
And()
Compare(left=Name(id='w_mat_op', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)])
Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='w_mat_op', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Num(n=0)])
Name(id='w_mat_op', ctx=Store())
Call(func=Attribute(value=Name(id='z2_symmetries', ctx=Load()), attr='taper', ctx=Load()), args=[Name(id='w_mat_op', ctx=Load())], keywords=[])
And()
Compare(left=Name(id='m_mat_op', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)])
Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='m_mat_op', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Num(n=0)])
Name(id='m_mat_op', ctx=Store())
Call(func=Attribute(value=Name(id='z2_symmetries', ctx=Load()), attr='taper', ctx=Load()), args=[Name(id='m_mat_op', ctx=Load())], keywords=[])
And()
Compare(left=Name(id='v_mat_op', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)])
Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='v_mat_op', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Num(n=0)])
Name(id='v_mat_op', ctx=Store())
Call(func=Attribute(value=Name(id='z2_symmetries', ctx=Load()), attr='taper', ctx=Load()), args=[Name(id='v_mat_op', ctx=Load())], keywords=[])
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='float', ctx=Load())), ctx=Load())], ctx=Load())
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Name(id='idx', ctx=Load())
Name(id='q_mat', ctx=Load())
Index(value=Name(id='m_u', ctx=Load()))
Load()
Name(id='n_u', ctx=Load())
Call(func=Attribute(value=Name(id='gs_results', ctx=Load()), attr='get', ctx=Load()), args=[JoinedStr(values=[Str(s='q_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])], keywords=[])
IsNot()
NameConstant(value=None)
Subscript(value=Name(id='gs_results', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='q_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])), ctx=Load())
Index(value=Num(n=0))
Load()
Subscript(value=Name(id='q_mat', ctx=Load()), slice=Index(value=Name(id='m_u', ctx=Load())), ctx=Load())
Index(value=Name(id='n_u', ctx=Load()))
Load()
Name(id='w_mat', ctx=Load())
Index(value=Name(id='m_u', ctx=Load()))
Load()
Name(id='n_u', ctx=Load())
Call(func=Attribute(value=Name(id='gs_results', ctx=Load()), attr='get', ctx=Load()), args=[JoinedStr(values=[Str(s='w_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])], keywords=[])
IsNot()
NameConstant(value=None)
Subscript(value=Name(id='gs_results', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='w_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])), ctx=Load())
Index(value=Num(n=0))
Load()
Subscript(value=Name(id='w_mat', ctx=Load()), slice=Index(value=Name(id='m_u', ctx=Load())), ctx=Load())
Index(value=Name(id='n_u', ctx=Load()))
Load()
Name(id='m_mat', ctx=Load())
Index(value=Name(id='m_u', ctx=Load()))
Load()
Name(id='n_u', ctx=Load())
Call(func=Attribute(value=Name(id='gs_results', ctx=Load()), attr='get', ctx=Load()), args=[JoinedStr(values=[Str(s='m_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])], keywords=[])
IsNot()
NameConstant(value=None)
Subscript(value=Name(id='gs_results', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='m_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])), ctx=Load())
Index(value=Num(n=0))
Load()
Subscript(value=Name(id='m_mat', ctx=Load()), slice=Index(value=Name(id='m_u', ctx=Load())), ctx=Load())
Index(value=Name(id='n_u', ctx=Load()))
Load()
Name(id='v_mat', ctx=Load())
Index(value=Name(id='m_u', ctx=Load()))
Load()
Name(id='n_u', ctx=Load())
Call(func=Attribute(value=Name(id='gs_results', ctx=Load()), attr='get', ctx=Load()), args=[JoinedStr(values=[Str(s='v_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])], keywords=[])
IsNot()
NameConstant(value=None)
Subscript(value=Name(id='gs_results', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='v_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])), ctx=Load())
Index(value=Num(n=0))
Load()
Subscript(value=Name(id='v_mat', ctx=Load()), slice=Index(value=Name(id='m_u', ctx=Load())), ctx=Load())
Index(value=Name(id='n_u', ctx=Load()))
Load()
Call(func=Attribute(value=Name(id='gs_results', ctx=Load()), attr='get', ctx=Load()), args=[JoinedStr(values=[Str(s='q_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_std')])], keywords=[])
IsNot()
NameConstant(value=None)
Subscript(value=Name(id='gs_results', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='q_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_std')])), ctx=Load())
Index(value=Num(n=0))
Load()
Call(func=Attribute(value=Name(id='gs_results', ctx=Load()), attr='get', ctx=Load()), args=[JoinedStr(values=[Str(s='w_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_std')])], keywords=[])
IsNot()
NameConstant(value=None)
Subscript(value=Name(id='gs_results', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='w_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_std')])), ctx=Load())
Index(value=Num(n=0))
Load()
Call(func=Attribute(value=Name(id='gs_results', ctx=Load()), attr='get', ctx=Load()), args=[JoinedStr(values=[Str(s='m_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_std')])], keywords=[])
IsNot()
NameConstant(value=None)
Subscript(value=Name(id='gs_results', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='m_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_std')])), ctx=Load())
Index(value=Num(n=0))
Load()
Call(func=Attribute(value=Name(id='gs_results', ctx=Load()), attr='get', ctx=Load()), args=[JoinedStr(values=[Str(s='v_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_std')])], keywords=[])
IsNot()
NameConstant(value=None)
Subscript(value=Name(id='gs_results', ctx=Load()), slice=Index(value=JoinedStr(values=[Str(s='v_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_std')])), ctx=Load())
Index(value=Num(n=0))
Load()
Load()
Name(id='q_mat', ctx=Load())
Load()
Attribute(value=Name(id='np', ctx=Load()), attr='identity', ctx=Load())
Subscript(value=Attribute(value=Name(id='q_mat', ctx=Load()), attr='shape', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())
Load()
Load()
Name(id='w_mat', ctx=Load())
Load()
Attribute(value=Name(id='np', ctx=Load()), attr='identity', ctx=Load())
Subscript(value=Attribute(value=Name(id='w_mat', ctx=Load()), attr='shape', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())
Load()
Load()
Name(id='m_mat', ctx=Load())
Load()
Attribute(value=Name(id='np', ctx=Load()), attr='identity', ctx=Load())
Subscript(value=Attribute(value=Name(id='m_mat', ctx=Load()), attr='shape', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())
Load()
Load()
Name(id='v_mat', ctx=Load())
Load()
Attribute(value=Name(id='np', ctx=Load()), attr='identity', ctx=Load())
Subscript(value=Attribute(value=Name(id='v_mat', ctx=Load()), attr='shape', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())
Load()
Load()
Load()
Load()
Load()
Load()
Name(id='size', ctx=Load())
Pow()
Num(n=2)
Load()
Name(id='size', ctx=Load())
Pow()
Num(n=2)
Load()
Name(id='size', ctx=Load())
Pow()
Num(n=2)
Load()
Name(id='size', ctx=Load())
Pow()
Num(n=2)
Load()
Load()
Load()
Load()
Name(id='np', ctx=Load())
Load()
Name(id='np', ctx=Load())
Load()
Name(id='np', ctx=Load())
Load()
Name(id='np', ctx=Load())
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Name(id='np', ctx=Load())
Load()
Name(id='m_mat', ctx=Load())
Name(id='q_mat', ctx=Load())
Load()
Call(func=Attribute(value=Attribute(value=Name(id='q_mat', ctx=Load()), attr='T', ctx=Load()), attr='conj', ctx=Load()), args=[], keywords=[])
Call(func=Attribute(value=Attribute(value=Name(id='m_mat', ctx=Load()), attr='T', ctx=Load()), attr='conj', ctx=Load()), args=[], keywords=[])
Load()
Name(id='np', ctx=Load())
Load()
Name(id='v_mat', ctx=Load())
Name(id='w_mat', ctx=Load())
Load()
UnaryOp(op=USub(), operand=Call(func=Attribute(value=Attribute(value=Name(id='w_mat', ctx=Load()), attr='T', ctx=Load()), attr='conj', ctx=Load()), args=[], keywords=[]))
UnaryOp(op=USub(), operand=Call(func=Attribute(value=Attribute(value=Name(id='v_mat', ctx=Load()), attr='T', ctx=Load()), attr='conj', ctx=Load()), args=[], keywords=[]))
Load()
Load()
Load()
Num(n=0)
Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load())
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='isnan', ctx=Load()), args=[Subscript(value=Name(id='res', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())], keywords=[])
Load()
Load()
Num(n=0)
Load()
Name(id='np', ctx=Load())
Load()
Name(id='res', ctx=Load())
Index(value=Num(n=0))
Load()
Load()
Load()
Load()
BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='w', ctx=Load())], keywords=[]), op=FloorDiv(), right=Num(n=2))
Name(id='w', ctx=Load())
Lt()
Num(n=1e-06)
Load()
Num(n=1)
Name(id='np', ctx=Load())
Load()
Name(id='np', ctx=Load())
Load()
Name(id='super', ctx=Load())
Name(id='np', ctx=Load())
Load()
Name(id='np', ctx=Load())
Load()
Name(id='np', ctx=Load())
Load()
Name(id='np', ctx=Load())
Load()
Name(id='np', ctx=Load())
Load()
Name(id='np', ctx=Load())
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Name(id='str', ctx=Load())
Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='int', ctx=Load())), ctx=Load())), ctx=Load())
Load()
Load()
Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='int', ctx=Load())), ctx=Load())
Name(id='str', ctx=Load())
Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='int', ctx=Load())), ctx=Load())), ctx=Load())
Load()
Name(id='ListOrDictType', ctx=Load())
Index(value=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='SecondQuantizedOp', ctx=Load()), Name(id='PauliSumOp', ctx=Load())], ctx=Load())), ctx=Load()))
Load()
Load()
Load()
Subscript(value=Name(id='ListOrDictType', ctx=Load()), slice=Index(value=Name(id='PauliSumOp', ctx=Load())), ctx=Load())
Name(id='ListOrDictType', ctx=Load())
Index(value=Name(id='SecondQuantizedOp', ctx=Load()))
Load()
Load()
Load()
Name(id='second_q_ops', ctx=Load())
Load()
Name(id='problem', ctx=Load())
Load()
Name(id='self', ctx=Load())
Load()
Load()
Load()
Name(id='str', ctx=Load())
Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='float', ctx=Load())), ctx=Load())
Load()
Load()
Subscript(value=Attribute(value=Name(id='groundstate_result', ctx=Load()), attr='eigenenergies', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())
Add()
Name(id='gap', ctx=Load())
Name(id='gap', ctx=Store())
Name(id='energy_gaps', ctx=Load())
Load()
Load()
Name(id='list', ctx=Load())
Call(func=Attribute(value=Name(id='excitation_indices', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])
Load()
Name(id='idx', ctx=Load())
Name(id='available_hopping_ops', ctx=Load())
Load()
Str(s='E_')
FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None)
Name(id='available_hopping_ops', ctx=Load())
Load()
Str(s='E_')
FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)
Name(id='available_hopping_ops', ctx=Load())
Load()
Str(s='Edag_')
FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)
Name(id='to_be_computed_list', ctx=Load())
Load()
Name(id='m_u', ctx=Load())
Name(id='n_u', ctx=Load())
Name(id='left_op', ctx=Load())
Name(id='right_op_1', ctx=Load())
Name(id='right_op_2', ctx=Load())
Load()
Load()
Load()
Name(id='logger', ctx=Load())
Load()
Load()
Name(id='sys', ctx=Load())
Load()
Load()
Name(id='untapered_op', ctx=Load())
Name(id='z2_symmetries', ctx=Load())
Load()
Name(id='algorithm_globals', ctx=Load())
Load()
Store()
Store()
Store()
Store()
Store()
Store()
Load()
Name(id='all_matrix_operators', ctx=Load())
Index(value=JoinedStr(values=[Str(s='q_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)]))
Store()
Load()
Load()
Name(id='all_matrix_operators', ctx=Load())
Index(value=JoinedStr(values=[Str(s='w_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)]))
Store()
Load()
Load()
Name(id='all_matrix_operators', ctx=Load())
Index(value=JoinedStr(values=[Str(s='m_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)]))
Store()
Load()
Load()
Name(id='all_matrix_operators', ctx=Load())
Index(value=JoinedStr(values=[Str(s='v_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)]))
Store()
Load()
Name(id='self', ctx=Load())
Load()
Load()
Load()
Load()
Load()
Load()
Load()
USub()
Num(n=1)
Name(id='len', ctx=Load())
Attribute(value=Name(id='z2_symmetries', ctx=Load()), attr='symmetries', ctx=Load())
Name(id='logger', ctx=Load())
Load()
Attribute(value=Str(s=','), attr='join', ctx=Load())
ListComp(elt=Call(func=Name(id='str', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='targeted_tapering_values', ctx=Load()), ifs=[], is_async=0)])
Attribute(value=Name(id='np', ctx=Load()), attr='asarray', ctx=Load())
Name(id='targeted_tapering_values', ctx=Load())
Store()
Store()
Name(id='type_of_commutativities', ctx=Load())
Load()
Store()
Attribute(value=Name(id='np', ctx=Load()), attr='asarray', ctx=Load())
Name(id='value', ctx=Load())
Attribute(value=Name(id='np', ctx=Load()), attr='all', ctx=Load())
Compare(left=Name(id='value', ctx=Load()), ops=[Eq()], comparators=[Name(id='targeted_sector', ctx=Load())])
Subscript(value=Name(id='available_hopping_ops', ctx=Load()), slice=Index(value=Name(id='key', ctx=Load())), ctx=Store())
Subscript(value=Name(id='hopping_operators', ctx=Load()), slice=Index(value=Name(id='key', ctx=Load())), ctx=Load())
Load()
Load()
Name(id='self', ctx=Load())
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
NameConstant(value=False)
Load()
Load()
Load()
Call(func=Name(id='len', ctx=Load()), args=[Name(id='q_mat_op', ctx=Load())], keywords=[])
Eq()
Num(n=0)
Load()
Call(func=Name(id='len', ctx=Load()), args=[Name(id='w_mat_op', ctx=Load())], keywords=[])
Eq()
Num(n=0)
Load()
Load()
Load()
Load()
Load()
NameConstant(value=False)
Load()
Load()
Load()
Call(func=Name(id='len', ctx=Load()), args=[Name(id='m_mat_op', ctx=Load())], keywords=[])
Eq()
Num(n=0)
Load()
Call(func=Name(id='len', ctx=Load()), args=[Name(id='v_mat_op', ctx=Load())], keywords=[])
Eq()
Num(n=0)
Load()
Name(id='z2_symmetries', ctx=Load())
Load()
Name(id='q_mat_op', ctx=Load())
IsNot()
NameConstant(value=None)
Call(func=Name(id='len', ctx=Load()), args=[Name(id='q_mat_op', ctx=Load())], keywords=[])
Gt()
Num(n=0)
Store()
Attribute(value=Name(id='z2_symmetries', ctx=Load()), attr='taper', ctx=Load())
Name(id='q_mat_op', ctx=Load())
Name(id='w_mat_op', ctx=Load())
IsNot()
NameConstant(value=None)
Call(func=Name(id='len', ctx=Load()), args=[Name(id='w_mat_op', ctx=Load())], keywords=[])
Gt()
Num(n=0)
Store()
Attribute(value=Name(id='z2_symmetries', ctx=Load()), attr='taper', ctx=Load())
Name(id='w_mat_op', ctx=Load())
Name(id='m_mat_op', ctx=Load())
IsNot()
NameConstant(value=None)
Call(func=Name(id='len', ctx=Load()), args=[Name(id='m_mat_op', ctx=Load())], keywords=[])
Gt()
Num(n=0)
Store()
Attribute(value=Name(id='z2_symmetries', ctx=Load()), attr='taper', ctx=Load())
Name(id='m_mat_op', ctx=Load())
Name(id='v_mat_op', ctx=Load())
IsNot()
NameConstant(value=None)
Call(func=Name(id='len', ctx=Load()), args=[Name(id='v_mat_op', ctx=Load())], keywords=[])
Gt()
Num(n=0)
Store()
Attribute(value=Name(id='z2_symmetries', ctx=Load()), attr='taper', ctx=Load())
Name(id='v_mat_op', ctx=Load())
Name(id='str', ctx=Load())
Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='float', ctx=Load())), ctx=Load())
Load()
Load()
Load()
Name(id='m_u', ctx=Load())
Load()
Attribute(value=Name(id='gs_results', ctx=Load()), attr='get', ctx=Load())
JoinedStr(values=[Str(s='q_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])
Name(id='gs_results', ctx=Load())
Index(value=JoinedStr(values=[Str(s='q_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)]))
Load()
Num(n=0)
Name(id='q_mat', ctx=Load())
Index(value=Name(id='m_u', ctx=Load()))
Load()
Name(id='n_u', ctx=Load())
Load()
Name(id='m_u', ctx=Load())
Load()
Attribute(value=Name(id='gs_results', ctx=Load()), attr='get', ctx=Load())
JoinedStr(values=[Str(s='w_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])
Name(id='gs_results', ctx=Load())
Index(value=JoinedStr(values=[Str(s='w_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)]))
Load()
Num(n=0)
Name(id='w_mat', ctx=Load())
Index(value=Name(id='m_u', ctx=Load()))
Load()
Name(id='n_u', ctx=Load())
Load()
Name(id='m_u', ctx=Load())
Load()
Attribute(value=Name(id='gs_results', ctx=Load()), attr='get', ctx=Load())
JoinedStr(values=[Str(s='m_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])
Name(id='gs_results', ctx=Load())
Index(value=JoinedStr(values=[Str(s='m_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)]))
Load()
Num(n=0)
Name(id='m_mat', ctx=Load())
Index(value=Name(id='m_u', ctx=Load()))
Load()
Name(id='n_u', ctx=Load())
Load()
Name(id='m_u', ctx=Load())
Load()
Attribute(value=Name(id='gs_results', ctx=Load()), attr='get', ctx=Load())
JoinedStr(values=[Str(s='v_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])
Name(id='gs_results', ctx=Load())
Index(value=JoinedStr(values=[Str(s='v_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)]))
Load()
Num(n=0)
Name(id='v_mat', ctx=Load())
Index(value=Name(id='m_u', ctx=Load()))
Load()
Name(id='n_u', ctx=Load())
Attribute(value=Name(id='gs_results', ctx=Load()), attr='get', ctx=Load())
JoinedStr(values=[Str(s='q_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_std')])
Name(id='gs_results', ctx=Load())
Index(value=JoinedStr(values=[Str(s='q_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_std')]))
Load()
Num(n=0)
Attribute(value=Name(id='gs_results', ctx=Load()), attr='get', ctx=Load())
JoinedStr(values=[Str(s='w_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_std')])
Name(id='gs_results', ctx=Load())
Index(value=JoinedStr(values=[Str(s='w_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_std')]))
Load()
Num(n=0)
Attribute(value=Name(id='gs_results', ctx=Load()), attr='get', ctx=Load())
JoinedStr(values=[Str(s='m_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_std')])
Name(id='gs_results', ctx=Load())
Index(value=JoinedStr(values=[Str(s='m_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_std')]))
Load()
Num(n=0)
Attribute(value=Name(id='gs_results', ctx=Load()), attr='get', ctx=Load())
JoinedStr(values=[Str(s='v_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_std')])
Name(id='gs_results', ctx=Load())
Index(value=JoinedStr(values=[Str(s='v_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_std')]))
Load()
Num(n=0)
Load()
Name(id='np', ctx=Load())
Load()
Attribute(value=Name(id='q_mat', ctx=Load()), attr='shape', ctx=Load())
Index(value=Num(n=0))
Load()
Load()
Name(id='np', ctx=Load())
Load()
Attribute(value=Name(id='w_mat', ctx=Load()), attr='shape', ctx=Load())
Index(value=Num(n=0))
Load()
Load()
Name(id='np', ctx=Load())
Load()
Attribute(value=Name(id='m_mat', ctx=Load()), attr='shape', ctx=Load())
Index(value=Num(n=0))
Load()
Load()
Name(id='np', ctx=Load())
Load()
Attribute(value=Name(id='v_mat', ctx=Load()), attr='shape', ctx=Load())
Index(value=Num(n=0))
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Attribute(value=Attribute(value=Name(id='q_mat', ctx=Load()), attr='T', ctx=Load()), attr='conj', ctx=Load())
Attribute(value=Attribute(value=Name(id='m_mat', ctx=Load()), attr='T', ctx=Load()), attr='conj', ctx=Load())
Load()
Load()
Load()
USub()
Call(func=Attribute(value=Attribute(value=Name(id='w_mat', ctx=Load()), attr='T', ctx=Load()), attr='conj', ctx=Load()), args=[], keywords=[])
USub()
Call(func=Attribute(value=Attribute(value=Name(id='v_mat', ctx=Load()), attr='T', ctx=Load()), attr='conj', ctx=Load()), args=[], keywords=[])
Name(id='np', ctx=Load())
Load()
Attribute(value=Name(id='np', ctx=Load()), attr='isnan', ctx=Load())
Subscript(value=Name(id='res', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())
Load()
Load()
Num(n=0)
Call(func=Name(id='len', ctx=Load()), args=[Name(id='w', ctx=Load())], keywords=[])
FloorDiv()
Num(n=2)
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Name(id='List', ctx=Load())
Index(value=Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='int', ctx=Load())), ctx=Load()))
Load()
Name(id='List', ctx=Load())
Index(value=Name(id='int', ctx=Load()))
Load()
Load()
Name(id='List', ctx=Load())
Index(value=Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='int', ctx=Load())), ctx=Load()))
Load()
Load()
Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='SecondQuantizedOp', ctx=Load()), Name(id='PauliSumOp', ctx=Load())], ctx=Load())), ctx=Load())
Name(id='ListOrDictType', ctx=Load())
Index(value=Name(id='PauliSumOp', ctx=Load()))
Load()
Load()
Name(id='SecondQuantizedOp', ctx=Load())
Load()
Load()
Load()
Load()
Name(id='List', ctx=Load())
Index(value=Name(id='float', ctx=Load()))
Load()
Attribute(value=Name(id='groundstate_result', ctx=Load()), attr='eigenenergies', ctx=Load())
Index(value=Num(n=0))
Load()
Load()
Store()
Load()
Load()
Attribute(value=Name(id='excitation_indices', ctx=Load()), attr='keys', ctx=Load())
Load()
Load()
Name(id='m_u', ctx=Load())
Load()
Name(id='n_u', ctx=Load())
Load()
Name(id='n_u', ctx=Load())
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
JoinedStr(values=[Str(s='q_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])
Load()
JoinedStr(values=[Str(s='w_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])
Load()
JoinedStr(values=[Str(s='m_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])
Load()
JoinedStr(values=[Str(s='v_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])
Load()
Load()
Name(id='z2_symmetries', ctx=Load())
Load()
Load()
Str(s=',')
Load()
Call(func=Name(id='str', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[])
comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='targeted_tapering_values', ctx=Load()), ifs=[], is_async=0)
Name(id='np', ctx=Load())
Load()
Load()
Load()
Name(id='np', ctx=Load())
Load()
Load()
Name(id='np', ctx=Load())
Load()
Name(id='value', ctx=Load())
Eq()
Name(id='targeted_sector', ctx=Load())
Name(id='available_hopping_ops', ctx=Load())
Index(value=Name(id='key', ctx=Load()))
Store()
Name(id='hopping_operators', ctx=Load())
Index(value=Name(id='key', ctx=Load()))
Load()
Load()
Name(id='len', ctx=Load())
Name(id='q_mat_op', ctx=Load())
Name(id='len', ctx=Load())
Name(id='w_mat_op', ctx=Load())
Name(id='len', ctx=Load())
Name(id='m_mat_op', ctx=Load())
Name(id='len', ctx=Load())
Name(id='v_mat_op', ctx=Load())
Load()
Load()
Name(id='len', ctx=Load())
Name(id='q_mat_op', ctx=Load())
Name(id='z2_symmetries', ctx=Load())
Load()
Load()
Load()
Name(id='len', ctx=Load())
Name(id='w_mat_op', ctx=Load())
Name(id='z2_symmetries', ctx=Load())
Load()
Load()
Load()
Name(id='len', ctx=Load())
Name(id='m_mat_op', ctx=Load())
Name(id='z2_symmetries', ctx=Load())
Load()
Load()
Load()
Name(id='len', ctx=Load())
Name(id='v_mat_op', ctx=Load())
Name(id='z2_symmetries', ctx=Load())
Load()
Load()
Load()
Name(id='List', ctx=Load())
Index(value=Name(id='float', ctx=Load()))
Load()
Load()
Name(id='gs_results', ctx=Load())
Load()
Str(s='q_')
FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None)
Str(s='_')
FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)
Load()
JoinedStr(values=[Str(s='q_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])
Load()
Name(id='m_u', ctx=Load())
Load()
Load()
Name(id='gs_results', ctx=Load())
Load()
Str(s='w_')
FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None)
Str(s='_')
FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)
Load()
JoinedStr(values=[Str(s='w_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])
Load()
Name(id='m_u', ctx=Load())
Load()
Load()
Name(id='gs_results', ctx=Load())
Load()
Str(s='m_')
FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None)
Str(s='_')
FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)
Load()
JoinedStr(values=[Str(s='m_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])
Load()
Name(id='m_u', ctx=Load())
Load()
Load()
Name(id='gs_results', ctx=Load())
Load()
Str(s='v_')
FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None)
Str(s='_')
FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)
Load()
JoinedStr(values=[Str(s='v_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)])
Load()
Name(id='m_u', ctx=Load())
Load()
Name(id='gs_results', ctx=Load())
Load()
Str(s='q_')
FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None)
Str(s='_')
FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)
Str(s='_std')
Load()
JoinedStr(values=[Str(s='q_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_std')])
Name(id='gs_results', ctx=Load())
Load()
Str(s='w_')
FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None)
Str(s='_')
FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)
Str(s='_std')
Load()
JoinedStr(values=[Str(s='w_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_std')])
Name(id='gs_results', ctx=Load())
Load()
Str(s='m_')
FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None)
Str(s='_')
FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)
Str(s='_std')
Load()
JoinedStr(values=[Str(s='m_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_std')])
Name(id='gs_results', ctx=Load())
Load()
Str(s='v_')
FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None)
Str(s='_')
FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)
Str(s='_std')
Load()
JoinedStr(values=[Str(s='v_'), FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_'), FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None), Str(s='_std')])
Load()
Name(id='q_mat', ctx=Load())
Load()
Num(n=0)
Load()
Name(id='w_mat', ctx=Load())
Load()
Num(n=0)
Load()
Name(id='m_mat', ctx=Load())
Load()
Num(n=0)
Load()
Name(id='v_mat', ctx=Load())
Load()
Num(n=0)
Attribute(value=Name(id='q_mat', ctx=Load()), attr='T', ctx=Load())
Load()
Attribute(value=Name(id='m_mat', ctx=Load()), attr='T', ctx=Load())
Load()
Attribute(value=Attribute(value=Name(id='w_mat', ctx=Load()), attr='T', ctx=Load()), attr='conj', ctx=Load())
Attribute(value=Attribute(value=Name(id='v_mat', ctx=Load()), attr='T', ctx=Load()), attr='conj', ctx=Load())
Load()
Name(id='np', ctx=Load())
Load()
Name(id='res', ctx=Load())
Index(value=Num(n=0))
Load()
Name(id='len', ctx=Load())
Name(id='w', ctx=Load())
Load()
Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='int', ctx=Load())), ctx=Load())
Load()
Name(id='int', ctx=Load())
Load()
Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='int', ctx=Load())), ctx=Load())
Name(id='Union', ctx=Load())
Index(value=Tuple(elts=[Name(id='SecondQuantizedOp', ctx=Load()), Name(id='PauliSumOp', ctx=Load())], ctx=Load()))
Load()
Load()
Name(id='PauliSumOp', ctx=Load())
Load()
Load()
Name(id='float', ctx=Load())
Name(id='groundstate_result', ctx=Load())
Load()
Num(n=0)
Name(id='excitation_indices', ctx=Load())
Load()
Load()
Load()
Load()
Str(s='q_')
FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None)
Str(s='_')
FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)
Str(s='w_')
FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None)
Str(s='_')
FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)
Str(s='m_')
FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None)
Str(s='_')
FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)
Str(s='v_')
FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None)
Str(s='_')
FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)
Load()
Name(id='str', ctx=Load())
Name(id='x', ctx=Load())
Name(id='x', ctx=Store())
Name(id='targeted_tapering_values', ctx=Load())
Load()
Load()
Load()
Load()
Load()
Load()
Name(id='key', ctx=Load())
Load()
Name(id='key', ctx=Load())
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Name(id='float', ctx=Load())
Load()
Name(id='m_u', ctx=Load())
Name(id='n_u', ctx=Load())
Str(s='q_')
FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None)
Str(s='_')
FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)
Load()
Load()
Name(id='m_u', ctx=Load())
Name(id='n_u', ctx=Load())
Str(s='w_')
FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None)
Str(s='_')
FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)
Load()
Load()
Name(id='m_u', ctx=Load())
Name(id='n_u', ctx=Load())
Str(s='m_')
FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None)
Str(s='_')
FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)
Load()
Load()
Name(id='m_u', ctx=Load())
Name(id='n_u', ctx=Load())
Str(s='v_')
FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None)
Str(s='_')
FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)
Load()
Load()
Name(id='m_u', ctx=Load())
Name(id='n_u', ctx=Load())
Str(s='q_')
FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None)
Str(s='_')
FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)
Str(s='_std')
Load()
Name(id='m_u', ctx=Load())
Name(id='n_u', ctx=Load())
Str(s='w_')
FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None)
Str(s='_')
FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)
Str(s='_std')
Load()
Name(id='m_u', ctx=Load())
Name(id='n_u', ctx=Load())
Str(s='m_')
FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None)
Str(s='_')
FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)
Str(s='_std')
Load()
Name(id='m_u', ctx=Load())
Name(id='n_u', ctx=Load())
Str(s='v_')
FormattedValue(value=Name(id='m_u', ctx=Load()), conversion=-1, format_spec=None)
Str(s='_')
FormattedValue(value=Name(id='n_u', ctx=Load()), conversion=-1, format_spec=None)
Str(s='_std')
Load()
Load()
Load()
Load()
Name(id='q_mat', ctx=Load())
Load()
Name(id='m_mat', ctx=Load())
Load()
Attribute(value=Name(id='w_mat', ctx=Load()), attr='T', ctx=Load())
Load()
Attribute(value=Name(id='v_mat', ctx=Load()), attr='T', ctx=Load())
Load()
Load()
Load()
Num(n=0)
Load()
Load()
Name(id='List', ctx=Load())
Index(value=Name(id='int', ctx=Load()))
Load()
Load()
Name(id='List', ctx=Load())
Index(value=Name(id='int', ctx=Load()))
Load()
Load()
Tuple(elts=[Name(id='SecondQuantizedOp', ctx=Load()), Name(id='PauliSumOp', ctx=Load())], ctx=Load())
Load()
Load()
Load()
Load()
Name(id='m_u', ctx=Load())
Name(id='n_u', ctx=Load())
Name(id='m_u', ctx=Load())
Name(id='n_u', ctx=Load())
Name(id='m_u', ctx=Load())
Name(id='n_u', ctx=Load())
Name(id='m_u', ctx=Load())
Name(id='n_u', ctx=Load())
Load()
Load()
Store()
Load()
Load()
Load()
Load()
Load()
Load()
Name(id='m_u', ctx=Load())
Name(id='n_u', ctx=Load())
Load()
Load()
Name(id='m_u', ctx=Load())
Name(id='n_u', ctx=Load())
Load()
Load()
Name(id='m_u', ctx=Load())
Name(id='n_u', ctx=Load())
Load()
Load()
Name(id='m_u', ctx=Load())
Name(id='n_u', ctx=Load())
Load()
Load()
Name(id='m_u', ctx=Load())
Name(id='n_u', ctx=Load())
Load()
Load()
Name(id='m_u', ctx=Load())
Name(id='n_u', ctx=Load())
Load()
Load()
Name(id='m_u', ctx=Load())
Name(id='n_u', ctx=Load())
Load()
Load()
Name(id='m_u', ctx=Load())
Name(id='n_u', ctx=Load())
Load()
Load()
Name(id='w_mat', ctx=Load())
Load()
Name(id='v_mat', ctx=Load())
Load()
Load()
Name(id='int', ctx=Load())
Load()
Name(id='int', ctx=Load())
Name(id='SecondQuantizedOp', ctx=Load())
Name(id='PauliSumOp', ctx=Load())
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
  metric  value
0     NC      0
DONE!
