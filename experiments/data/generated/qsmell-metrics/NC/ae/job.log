Python 3.7.8
Module(body=[Expr(value=Str(s='The Quantum Phase Estimation-based Amplitude Estimation algorithm.')), ImportFrom(module='typing', names=[alias(name='Optional', asname=None), alias(name='Union', asname=None), alias(name='List', asname=None), alias(name='Tuple', asname=None), alias(name='Dict', asname=None)], level=0), ImportFrom(module='collections', names=[alias(name='OrderedDict', asname=None)], level=0), Import(names=[alias(name='numpy', asname='np')]), ImportFrom(module='scipy.stats', names=[alias(name='chi2', asname=None), alias(name='norm', asname=None)], level=0), ImportFrom(module='scipy.optimize', names=[alias(name='bisect', asname=None)], level=0), ImportFrom(module='qiskit', names=[alias(name='QuantumCircuit', asname=None), alias(name='ClassicalRegister', asname=None)], level=0), ImportFrom(module='qiskit.providers', names=[alias(name='Backend', asname=None)], level=0), ImportFrom(module='qiskit.utils', names=[alias(name='QuantumInstance', asname=None)], level=0), ImportFrom(module='amplitude_estimator', names=[alias(name='AmplitudeEstimator', asname=None), alias(name='AmplitudeEstimatorResult', asname=None)], level=1), ImportFrom(module='ae_utils', names=[alias(name='pdf_a', asname=None), alias(name='derivative_log_pdf_a', asname=None), alias(name='bisect_max', asname=None)], level=1), ImportFrom(module='estimation_problem', names=[alias(name='EstimationProblem', asname=None)], level=1), ClassDef(name='AmplitudeEstimation', bases=[Name(id='AmplitudeEstimator', ctx=Load())], keywords=[], body=[Expr(value=Str(s='The Quantum Phase Estimation-based Amplitude Estimation algorithm.\n\n    This class implements the original Quantum Amplitude Estimation (QAE) algorithm, introduced by\n    [1]. This canonical version uses quantum phase estimation along with a set of :math:`m`\n    additional evaluation qubits to find an estimate :math:`\\tilde{a}`, that is restricted to the\n    grid\n\n    .. math::\n\n        \\tilde{a} \\in \\{\\sin^2(\\pi  y / 2^m) : y = 0, ..., 2^{m-1}\\}\n\n    More evaluation qubits produce a finer sampling grid, therefore the accuracy of the algorithm\n    increases with :math:`m`.\n\n    Using a maximum likelihood post processing, this grid constraint can be circumvented.\n    This improved estimator is implemented as well, see [2] Appendix A for more detail.\n\n    References:\n        [1]: Brassard, G., Hoyer, P., Mosca, M., & Tapp, A. (2000).\n             Quantum Amplitude Amplification and Estimation.\n             `arXiv:quant-ph/0005055 <http://arxiv.org/abs/quant-ph/0005055>`_.\n        [2]: Grinko, D., Gacon, J., Zoufal, C., & Woerner, S. (2019).\n             Iterative Quantum Amplitude Estimation.\n             `arXiv:1912.05559 <https://arxiv.org/abs/1912.05559>`_.\n    ')), FunctionDef(name='__init__', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='num_eval_qubits', annotation=Name(id='int', ctx=Load())), arg(arg='phase_estimation_circuit', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Name(id='QuantumCircuit', ctx=Load())), ctx=Load())), arg(arg='iqft', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Name(id='QuantumCircuit', ctx=Load())), ctx=Load())), arg(arg='quantum_instance', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='QuantumInstance', ctx=Load()), Name(id='Backend', ctx=Load())], ctx=Load())), ctx=Load())), ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[NameConstant(value=None), NameConstant(value=None), NameConstant(value=None)]), body=[Expr(value=Str(s='\n        Args:\n            num_eval_qubits: The number of evaluation qubits.\n            phase_estimation_circuit: The phase estimation circuit used to run the algorithm.\n                Defaults to the standard phase estimation circuit from the circuit library,\n                `qiskit.circuit.library.PhaseEstimation` when None.\n            iqft: The inverse quantum Fourier transform component, defaults to using a standard\n                implementation from `qiskit.circuit.library.QFT` when None.\n            quantum_instance: The backend (or `QuantumInstance`) to execute the circuits on.\n\n        Raises:\n            ValueError: If the number of evaluation qubits is smaller than 1.\n        ')), If(test=Compare(left=Name(id='num_eval_qubits', ctx=Load()), ops=[Lt()], comparators=[Num(n=1)]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Str(s='The number of evaluation qubits must at least be 1.')], keywords=[]), cause=None)], orelse=[]), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='quantum_instance', ctx=Store())], value=Name(id='quantum_instance', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Store())], value=Name(id='num_eval_qubits', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_M', ctx=Store())], value=BinOp(left=Num(n=2), op=Pow(), right=Name(id='num_eval_qubits', ctx=Load()))), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_iqft', ctx=Store())], value=Name(id='iqft', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_pec', ctx=Store())], value=Name(id='phase_estimation_circuit', ctx=Load()))], decorator_list=[], returns=NameConstant(value=None)), FunctionDef(name='quantum_instance', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Get the quantum instance.\n\n        Returns:\n            The quantum instance used to run this algorithm.\n        ')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Name(id='QuantumInstance', ctx=Load())), ctx=Load())), FunctionDef(name='quantum_instance', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='quantum_instance', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='QuantumInstance', ctx=Load()), Name(id='Backend', ctx=Load())], ctx=Load())), ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Set quantum instance.\n\n        Args:\n            quantum_instance: The quantum instance used to run this algorithm.\n        ')), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='quantum_instance', ctx=Load()), Name(id='Backend', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='quantum_instance', ctx=Store())], value=Call(func=Name(id='QuantumInstance', ctx=Load()), args=[Name(id='quantum_instance', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Store())], value=Name(id='quantum_instance', ctx=Load()))], decorator_list=[Attribute(value=Name(id='quantum_instance', ctx=Load()), attr='setter', ctx=Load())], returns=NameConstant(value=None)), FunctionDef(name='construct_circuit', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='estimation_problem', annotation=Name(id='EstimationProblem', ctx=Load())), arg(arg='measurement', annotation=Name(id='bool', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[NameConstant(value=False)]), body=[Expr(value=Str(s='Construct the Amplitude Estimation quantum circuit.\n\n        Args:\n            estimation_problem: The estimation problem for which to construct the QAE circuit.\n            measurement: Boolean flag to indicate if measurements should be included in the circuit.\n\n        Returns:\n            The QuantumCircuit object for the constructed circuit.\n        ')), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_pec', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=[Assign(targets=[Name(id='pec', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_pec', ctx=Load()))], orelse=[ImportFrom(module='qiskit.circuit.library', names=[alias(name='PhaseEstimation', asname=None)], level=0), Assign(targets=[Name(id='pec', ctx=Store())], value=Call(func=Name(id='PhaseEstimation', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Load()), Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='grover_operator', ctx=Load())], keywords=[keyword(arg='iqft', value=Attribute(value=Name(id='self', ctx=Load()), attr='_iqft', ctx=Load()))]))]), Assign(targets=[Name(id='circuit', ctx=Store())], value=Call(func=Name(id='QuantumCircuit', ctx=Load()), args=[Starred(value=Attribute(value=Name(id='pec', ctx=Load()), attr='qregs', ctx=Load()), ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='circuit', ctx=Load()), attr='compose', ctx=Load()), args=[Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='state_preparation', ctx=Load()), Call(func=Name(id='list', ctx=Load()), args=[Call(func=Name(id='range', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Load()), Attribute(value=Name(id='circuit', ctx=Load()), attr='num_qubits', ctx=Load())], keywords=[])], keywords=[])], keywords=[keyword(arg='inplace', value=NameConstant(value=True))])), Expr(value=Call(func=Attribute(value=Name(id='circuit', ctx=Load()), attr='compose', ctx=Load()), args=[Name(id='pec', ctx=Load())], keywords=[keyword(arg='inplace', value=NameConstant(value=True))])), If(test=Name(id='measurement', ctx=Load()), body=[Assign(targets=[Name(id='cr', ctx=Store())], value=Call(func=Name(id='ClassicalRegister', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='circuit', ctx=Load()), attr='add_register', ctx=Load()), args=[Name(id='cr', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='circuit', ctx=Load()), attr='measure', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Name(id='range', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Load())], keywords=[])], keywords=[]), Call(func=Name(id='list', ctx=Load()), args=[Call(func=Name(id='range', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Load())], keywords=[])], keywords=[])], keywords=[]))], orelse=[]), Return(value=Name(id='circuit', ctx=Load()))], decorator_list=[], returns=Name(id='QuantumCircuit', ctx=Load())), FunctionDef(name='evaluate_measurements', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='circuit_results', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Subscript(value=Name(id='Dict', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load())), ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())], ctx=Load())), ctx=Load())), arg(arg='threshold', annotation=Name(id='float', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[Num(n=1e-06)]), body=[Expr(value=Str(s='Evaluate the results from the circuit simulation.\n\n        Given the probabilities from statevector simulation of the QAE circuit, compute the\n        probabilities that the measurements y/gridpoints a are the best estimate.\n\n        Args:\n            circuit_results: The circuit result from the QAE circuit. Can be either a counts dict\n                or a statevector.\n            threshold: Measurements with probabilities below the threshold are discarded.\n\n        Returns:\n            Dictionaries containing the a gridpoints with respective probabilities and\n                y measurements with respective probabilities, in this order.\n        ')), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='circuit_results', ctx=Load()), Name(id='dict', ctx=Load())], keywords=[]), body=[Assign(targets=[Tuple(elts=[Name(id='samples', ctx=Store()), Name(id='measurements', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_evaluate_count_results', ctx=Load()), args=[Name(id='circuit_results', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Tuple(elts=[Name(id='samples', ctx=Store()), Name(id='measurements', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_evaluate_statevector_results', ctx=Load()), args=[Name(id='circuit_results', ctx=Load())], keywords=[]))]), Assign(targets=[Name(id='samples', ctx=Store())], value=DictComp(key=Name(id='a', ctx=Load()), value=Name(id='p', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='a', ctx=Store()), Name(id='p', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='samples', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), ifs=[Compare(left=Name(id='p', ctx=Load()), ops=[Gt()], comparators=[Name(id='threshold', ctx=Load())])], is_async=0)])), Assign(targets=[Name(id='measurements', ctx=Store())], value=DictComp(key=Name(id='y', ctx=Load()), value=Name(id='p', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='y', ctx=Store()), Name(id='p', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='measurements', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), ifs=[Compare(left=Name(id='p', ctx=Load()), ops=[Gt()], comparators=[Name(id='threshold', ctx=Load())])], is_async=0)])), Return(value=Tuple(elts=[Name(id='samples', ctx=Load()), Name(id='measurements', ctx=Load())], ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Index(value=Tuple(elts=[Subscript(value=Name(id='Dict', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load())), ctx=Load()), Subscript(value=Name(id='Dict', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='float', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load())), ctx=Load())], ctx=Load())), ctx=Load())), FunctionDef(name='_evaluate_statevector_results', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='statevector', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Assign(targets=[Name(id='measurements', ctx=Store())], value=Call(func=Name(id='OrderedDict', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='num_qubits', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='log2', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='statevector', ctx=Load())], keywords=[])], keywords=[])], keywords=[])), For(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='amplitude', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='statevector', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='b', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Subscript(value=Call(func=Name(id='bin', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]), slice=Slice(lower=Num(n=2), upper=None, step=None), ctx=Load()), attr='zfill', ctx=Load()), args=[Name(id='num_qubits', ctx=Load())], keywords=[]), slice=Slice(lower=None, upper=None, step=UnaryOp(op=USub(), operand=Num(n=1))), ctx=Load())), Assign(targets=[Name(id='y', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='b', ctx=Load()), slice=Slice(lower=None, upper=Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Load()), step=None), ctx=Load()), Num(n=2)], keywords=[])), Assign(targets=[Subscript(value=Name(id='measurements', ctx=Load()), slice=Index(value=Name(id='y', ctx=Load())), ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='measurements', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='y', ctx=Load()), Num(n=0)], keywords=[]), op=Add(), right=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='abs', ctx=Load()), args=[Name(id='amplitude', ctx=Load())], keywords=[]), op=Pow(), right=Num(n=2))))], orelse=[]), Assign(targets=[Name(id='samples', ctx=Store())], value=Call(func=Name(id='OrderedDict', ctx=Load()), args=[], keywords=[])), For(target=Tuple(elts=[Name(id='y', ctx=Store()), Name(id='probability', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='measurements', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[If(test=Compare(left=Name(id='y', ctx=Load()), ops=[GtE()], comparators=[Call(func=Name(id='int', ctx=Load()), args=[BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='_M', ctx=Load()), op=Div(), right=Num(n=2))], keywords=[])]), body=[Assign(targets=[Name(id='y', ctx=Store())], value=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='_M', ctx=Load()), op=Sub(), right=Name(id='y', ctx=Load())))], orelse=[]), Assign(targets=[Name(id='a', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='round', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='power', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[BinOp(left=BinOp(left=Name(id='y', ctx=Load()), op=Mult(), right=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load())), op=Div(), right=BinOp(left=Num(n=2), op=Pow(), right=Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Load())))], keywords=[]), Num(n=2)], keywords=[])], keywords=[keyword(arg='decimals', value=Num(n=7))])), Assign(targets=[Subscript(value=Name(id='samples', ctx=Load()), slice=Index(value=Name(id='a', ctx=Load())), ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='samples', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='a', ctx=Load()), Num(n=0)], keywords=[]), op=Add(), right=Name(id='probability', ctx=Load())))], orelse=[]), Return(value=Tuple(elts=[Name(id='samples', ctx=Load()), Name(id='measurements', ctx=Load())], ctx=Load()))], decorator_list=[], returns=None), FunctionDef(name='_evaluate_count_results', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='counts', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Assign(targets=[Name(id='measurements', ctx=Store())], value=Call(func=Name(id='OrderedDict', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='samples', ctx=Store())], value=Call(func=Name(id='OrderedDict', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='shots', ctx=Store())], value=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()), attr='_run_config', ctx=Load()), attr='shots', ctx=Load())), For(target=Tuple(elts=[Name(id='state', ctx=Store()), Name(id='count', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='counts', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Name(id='y', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Subscript(value=Call(func=Attribute(value=Name(id='state', ctx=Load()), attr='replace', ctx=Load()), args=[Str(s=' '), Str(s='')], keywords=[]), slice=Slice(lower=None, upper=Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Load()), step=None), ctx=Load()), slice=Slice(lower=None, upper=None, step=UnaryOp(op=USub(), operand=Num(n=1))), ctx=Load()), Num(n=2)], keywords=[])), Assign(targets=[Name(id='probability', ctx=Store())], value=BinOp(left=Name(id='count', ctx=Load()), op=Div(), right=Name(id='shots', ctx=Load()))), Assign(targets=[Subscript(value=Name(id='measurements', ctx=Load()), slice=Index(value=Name(id='y', ctx=Load())), ctx=Store())], value=Name(id='probability', ctx=Load())), Assign(targets=[Name(id='a', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='round', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='power', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[BinOp(left=BinOp(left=Name(id='y', ctx=Load()), op=Mult(), right=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load())), op=Div(), right=BinOp(left=Num(n=2), op=Pow(), right=Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Load())))], keywords=[]), Num(n=2)], keywords=[])], keywords=[keyword(arg='decimals', value=Num(n=7))])), Assign(targets=[Subscript(value=Name(id='samples', ctx=Load()), slice=Index(value=Name(id='a', ctx=Load())), ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='samples', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='a', ctx=Load()), Num(n=0.0)], keywords=[]), op=Add(), right=Name(id='probability', ctx=Load())))], orelse=[]), Return(value=Tuple(elts=[Name(id='samples', ctx=Load()), Name(id='measurements', ctx=Load())], ctx=Load()))], decorator_list=[], returns=None), FunctionDef(name='compute_mle', args=arguments(args=[arg(arg='result', annotation=Str(s='AmplitudeEstimationResult')), arg(arg='apply_post_processing', annotation=Name(id='bool', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[NameConstant(value=False)]), body=[Expr(value=Str(s='Compute the Maximum Likelihood Estimator (MLE).\n\n        Args:\n            result: An amplitude estimation result object.\n            apply_post_processing: If True, apply the post processing to the MLE before returning\n                it.\n\n        Returns:\n            The MLE for the provided result object.\n        ')), Assign(targets=[Name(id='m', ctx=Store())], value=Attribute(value=Name(id='result', ctx=Load()), attr='num_evaluation_qubits', ctx=Load())), Assign(targets=[Name(id='M', ctx=Store())], value=BinOp(left=Num(n=2), op=Pow(), right=Name(id='m', ctx=Load()))), Assign(targets=[Name(id='qae', ctx=Store())], value=Attribute(value=Name(id='result', ctx=Load()), attr='estimation', ctx=Load())), Assign(targets=[Name(id='a_i', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='asarray', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='result', ctx=Load()), attr='samples', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[])), Assign(targets=[Name(id='p_i', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='asarray', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='result', ctx=Load()), attr='samples', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[])), FunctionDef(name='loglikelihood', args=arguments(args=[arg(arg='a', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sum', ctx=Load()), args=[BinOp(left=BinOp(left=Attribute(value=Name(id='result', ctx=Load()), attr='shots', ctx=Load()), op=Mult(), right=Name(id='p_i', ctx=Load())), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='log', ctx=Load()), args=[Call(func=Name(id='pdf_a', ctx=Load()), args=[Name(id='a_i', ctx=Load()), Name(id='a', ctx=Load()), Name(id='m', ctx=Load())], keywords=[])], keywords=[]))], keywords=[]))], decorator_list=[], returns=None), Assign(targets=[Name(id='y', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='round', ctx=Load()), args=[BinOp(left=BinOp(left=Name(id='M', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='arcsin', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sqrt', ctx=Load()), args=[Name(id='qae', ctx=Load())], keywords=[])], keywords=[])), op=Div(), right=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()))], keywords=[])], keywords=[])), If(test=Compare(left=Name(id='y', ctx=Load()), ops=[Eq()], comparators=[Num(n=0)]), body=[Assign(targets=[Name(id='right_of_qae', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[BinOp(left=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Mult(), right=BinOp(left=Name(id='y', ctx=Load()), op=Add(), right=Num(n=1))), op=Div(), right=Name(id='M', ctx=Load()))], keywords=[]), op=Pow(), right=Num(n=2))), Assign(targets=[Name(id='bubbles', ctx=Store())], value=List(elts=[Name(id='qae', ctx=Load()), Name(id='right_of_qae', ctx=Load())], ctx=Load()))], orelse=[If(test=Compare(left=Name(id='y', ctx=Load()), ops=[Eq()], comparators=[Call(func=Name(id='int', ctx=Load()), args=[BinOp(left=Name(id='M', ctx=Load()), op=Div(), right=Num(n=2))], keywords=[])]), body=[Assign(targets=[Name(id='left_of_qae', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[BinOp(left=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Mult(), right=BinOp(left=Name(id='y', ctx=Load()), op=Sub(), right=Num(n=1))), op=Div(), right=Name(id='M', ctx=Load()))], keywords=[]), op=Pow(), right=Num(n=2))), Assign(targets=[Name(id='bubbles', ctx=Store())], value=List(elts=[Name(id='left_of_qae', ctx=Load()), Name(id='qae', ctx=Load())], ctx=Load()))], orelse=[Assign(targets=[Name(id='left_of_qae', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[BinOp(left=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Mult(), right=BinOp(left=Name(id='y', ctx=Load()), op=Sub(), right=Num(n=1))), op=Div(), right=Name(id='M', ctx=Load()))], keywords=[]), op=Pow(), right=Num(n=2))), Assign(targets=[Name(id='right_of_qae', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[BinOp(left=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Mult(), right=BinOp(left=Name(id='y', ctx=Load()), op=Add(), right=Num(n=1))), op=Div(), right=Name(id='M', ctx=Load()))], keywords=[]), op=Pow(), right=Num(n=2))), Assign(targets=[Name(id='bubbles', ctx=Store())], value=List(elts=[Name(id='left_of_qae', ctx=Load()), Name(id='qae', ctx=Load()), Name(id='right_of_qae', ctx=Load())], ctx=Load()))])]), Assign(targets=[Name(id='a_opt', ctx=Store())], value=Name(id='qae', ctx=Load())), Assign(targets=[Name(id='loglik_opt', ctx=Store())], value=Call(func=Name(id='loglikelihood', ctx=Load()), args=[Name(id='a_opt', ctx=Load())], keywords=[])), For(target=Tuple(elts=[Name(id='a', ctx=Store()), Name(id='b', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='zip', ctx=Load()), args=[Subscript(value=Name(id='bubbles', ctx=Load()), slice=Slice(lower=None, upper=UnaryOp(op=USub(), operand=Num(n=1)), step=None), ctx=Load()), Subscript(value=Name(id='bubbles', ctx=Load()), slice=Slice(lower=Num(n=1), upper=None, step=None), ctx=Load())], keywords=[]), body=[Assign(targets=[Tuple(elts=[Name(id='locmax', ctx=Store()), Name(id='val', ctx=Store())], ctx=Store())], value=Call(func=Name(id='bisect_max', ctx=Load()), args=[Name(id='loglikelihood', ctx=Load()), Name(id='a', ctx=Load()), Name(id='b', ctx=Load())], keywords=[keyword(arg='retval', value=NameConstant(value=True))])), If(test=Compare(left=Name(id='val', ctx=Load()), ops=[Gt()], comparators=[Name(id='loglik_opt', ctx=Load())]), body=[Assign(targets=[Name(id='a_opt', ctx=Store())], value=Name(id='locmax', ctx=Load())), Assign(targets=[Name(id='loglik_opt', ctx=Store())], value=Name(id='val', ctx=Load()))], orelse=[])], orelse=[]), If(test=Name(id='apply_post_processing', ctx=Load()), body=[Return(value=Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='post_processing', ctx=Load()), args=[Name(id='a_opt', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='a_opt', ctx=Load()))], decorator_list=[Name(id='staticmethod', ctx=Load())], returns=Name(id='float', ctx=Load())), FunctionDef(name='estimate', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='estimation_problem', annotation=Name(id='EstimationProblem', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Run the amplitude estimation algorithm on provided estimation problem.\n\n        Args:\n            estimation_problem: The estimation problem.\n\n        Returns:\n            An amplitude estimation results object.\n\n        Raises:\n            ValueError: If `state_preparation` or `objective_qubits` are not set in the\n                `estimation_problem`.\n        ')), If(test=Compare(left=Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='state_preparation', ctx=Load()), ops=[Is()], comparators=[NameConstant(value=None)]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Str(s='The state_preparation property of the estimation problem must be set.')], keywords=[]), cause=None)], orelse=[]), If(test=Compare(left=Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='objective_qubits', ctx=Load()), ops=[Is()], comparators=[NameConstant(value=None)]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Str(s='The objective_qubits property of the estimation problem must be set.')], keywords=[]), cause=None)], orelse=[]), Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Name(id='AmplitudeEstimationResult', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='num_evaluation_qubits', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Load())), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='post_processing', ctx=Store())], value=Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='post_processing', ctx=Load())), If(test=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()), attr='is_statevector', ctx=Load()), body=[Assign(targets=[Name(id='circuit', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='construct_circuit', ctx=Load()), args=[Name(id='estimation_problem', ctx=Load())], keywords=[keyword(arg='measurement', value=NameConstant(value=False))])), Assign(targets=[Name(id='statevector', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()), attr='execute', ctx=Load()), args=[Name(id='circuit', ctx=Load())], keywords=[]), attr='get_statevector', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='circuit_results', ctx=Store())], value=Name(id='statevector', ctx=Load())), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='shots', ctx=Store())], value=Num(n=1))], orelse=[Assign(targets=[Name(id='circuit', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='construct_circuit', ctx=Load()), args=[Name(id='estimation_problem', ctx=Load())], keywords=[keyword(arg='measurement', value=NameConstant(value=True))])), Assign(targets=[Name(id='counts', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()), attr='execute', ctx=Load()), args=[Name(id='circuit', ctx=Load())], keywords=[]), attr='get_counts', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='circuit_results', ctx=Store())], value=Name(id='counts', ctx=Load())), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='shots', ctx=Store())], value=Call(func=Name(id='sum', ctx=Load()), args=[Call(func=Attribute(value=Name(id='counts', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[]))]), Assign(targets=[Tuple(elts=[Name(id='samples', ctx=Store()), Name(id='measurements', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='evaluate_measurements', ctx=Load()), args=[Attribute(value=Name(id='result', ctx=Load()), attr='circuit_results', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='samples', ctx=Store())], value=Name(id='samples', ctx=Load())), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='samples_processed', ctx=Store())], value=DictComp(key=Call(func=Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='post_processing', ctx=Load()), args=[Name(id='a', ctx=Load())], keywords=[]), value=Name(id='p', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='a', ctx=Store()), Name(id='p', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='samples', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), ifs=[], is_async=0)])), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='measurements', ctx=Store())], value=Name(id='measurements', ctx=Load())), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='max_probability', ctx=Store())], value=Num(n=0)), For(target=Tuple(elts=[Name(id='amplitude', ctx=Store()), Tuple(elts=[Name(id='mapped', ctx=Store()), Name(id='prob', ctx=Store())], ctx=Store())], ctx=Store()), iter=Call(func=Name(id='zip', ctx=Load()), args=[Call(func=Attribute(value=Name(id='samples', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Attribute(value=Name(id='result', ctx=Load()), attr='samples_processed', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='prob', ctx=Load()), ops=[Gt()], comparators=[Attribute(value=Name(id='result', ctx=Load()), attr='max_probability', ctx=Load())]), body=[Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='max_probability', ctx=Store())], value=Name(id='prob', ctx=Load())), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='estimation', ctx=Store())], value=Name(id='amplitude', ctx=Load())), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='estimation_processed', ctx=Store())], value=Name(id='mapped', ctx=Load()))], orelse=[])], orelse=[]), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='num_oracle_queries', ctx=Store())], value=BinOp(left=Attribute(value=Name(id='result', ctx=Load()), attr='shots', ctx=Load()), op=Mult(), right=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='_M', ctx=Load()), op=Sub(), right=Num(n=1)))), Assign(targets=[Name(id='mle', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='compute_mle', ctx=Load()), args=[Name(id='result', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='mle', ctx=Store())], value=Name(id='mle', ctx=Load())), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='mle_processed', ctx=Store())], value=Call(func=Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='post_processing', ctx=Load()), args=[Name(id='mle', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='confidence_interval', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='compute_confidence_interval', ctx=Load()), args=[Name(id='result', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='confidence_interval_processed', ctx=Store())], value=Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='post_processing', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='value', ctx=Store()), iter=Attribute(value=Name(id='result', ctx=Load()), attr='confidence_interval', ctx=Load()), ifs=[], is_async=0)])], keywords=[])), Return(value=Name(id='result', ctx=Load()))], decorator_list=[], returns=Str(s='AmplitudeEstimationResult')), FunctionDef(name='compute_confidence_interval', args=arguments(args=[arg(arg='result', annotation=Str(s='AmplitudeEstimationResult')), arg(arg='alpha', annotation=Name(id='float', ctx=Load())), arg(arg='kind', annotation=Name(id='str', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[Num(n=0.05), Str(s='likelihood_ratio')]), body=[Expr(value=Str(s="Compute the (1 - alpha) confidence interval.\n\n        Args:\n            result: An amplitude estimation result for which to compute the confidence interval.\n            alpha: Confidence level: compute the (1 - alpha) confidence interval.\n            kind: The method to compute the confidence interval, can be 'fisher', 'observed_fisher'\n                or 'likelihood_ratio' (default)\n\n        Returns:\n            The (1 - alpha) confidence interval of the specified kind.\n\n        Raises:\n            AquaError: If 'mle' is not in self._ret.keys() (i.e. `run` was not called yet).\n            NotImplementedError: If the confidence interval method `kind` is not implemented.\n        ")), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Attribute(value=Name(id='result', ctx=Load()), attr='circuit_results', ctx=Load()), Tuple(elts=[Name(id='list', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())], ctx=Load())], keywords=[]), body=[Return(value=Tuple(elts=[Attribute(value=Name(id='result', ctx=Load()), attr='mle', ctx=Load()), Attribute(value=Name(id='result', ctx=Load()), attr='mle', ctx=Load())], ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='kind', ctx=Load()), ops=[In()], comparators=[List(elts=[Str(s='likelihood_ratio'), Str(s='lr')], ctx=Load())]), body=[Return(value=Call(func=Name(id='_likelihood_ratio_confint', ctx=Load()), args=[Name(id='result', ctx=Load()), Name(id='alpha', ctx=Load())], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='kind', ctx=Load()), ops=[In()], comparators=[List(elts=[Str(s='fisher'), Str(s='fi')], ctx=Load())]), body=[Return(value=Call(func=Name(id='_fisher_confint', ctx=Load()), args=[Name(id='result', ctx=Load()), Name(id='alpha', ctx=Load())], keywords=[keyword(arg='observed', value=NameConstant(value=False))]))], orelse=[]), If(test=Compare(left=Name(id='kind', ctx=Load()), ops=[In()], comparators=[List(elts=[Str(s='observed_fisher'), Str(s='observed_information'), Str(s='oi')], ctx=Load())]), body=[Return(value=Call(func=Name(id='_fisher_confint', ctx=Load()), args=[Name(id='result', ctx=Load()), Name(id='alpha', ctx=Load())], keywords=[keyword(arg='observed', value=NameConstant(value=True))]))], orelse=[]), Raise(exc=Call(func=Name(id='NotImplementedError', ctx=Load()), args=[JoinedStr(values=[Str(s='CI `'), FormattedValue(value=Name(id='kind', ctx=Load()), conversion=-1, format_spec=None), Str(s='` is not implemented.')])], keywords=[]), cause=None)], decorator_list=[Name(id='staticmethod', ctx=Load())], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='float', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load())), ctx=Load()))], decorator_list=[]), ClassDef(name='AmplitudeEstimationResult', bases=[Name(id='AmplitudeEstimatorResult', ctx=Load())], keywords=[], body=[Expr(value=Str(s='The ``AmplitudeEstimation`` result object.')), FunctionDef(name='__init__', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_num_evaluation_qubits', ctx=Store())], value=NameConstant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_mle', ctx=Store())], value=NameConstant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_mle_processed', ctx=Store())], value=NameConstant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_samples', ctx=Store())], value=NameConstant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_samples_processed', ctx=Store())], value=NameConstant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_y_measurements', ctx=Store())], value=NameConstant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_max_probability', ctx=Store())], value=NameConstant(value=None))], decorator_list=[], returns=NameConstant(value=None)), FunctionDef(name='num_evaluation_qubits', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Returns the number of evaluation qubits.')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_num_evaluation_qubits', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='int', ctx=Load())), FunctionDef(name='num_evaluation_qubits', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='num_evaluation_qubits', annotation=Name(id='int', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Set the number of evaluation qubits.')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_num_evaluation_qubits', ctx=Store())], value=Name(id='num_evaluation_qubits', ctx=Load()))], decorator_list=[Attribute(value=Name(id='num_evaluation_qubits', ctx=Load()), attr='setter', ctx=Load())], returns=NameConstant(value=None)), FunctionDef(name='mle_processed', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Return the post-processed MLE for the amplitude.')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_mle_processed', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='float', ctx=Load())), FunctionDef(name='mle_processed', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='value', annotation=Name(id='float', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Set the post-processed MLE for the amplitude.')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_mle_processed', ctx=Store())], value=Name(id='value', ctx=Load()))], decorator_list=[Attribute(value=Name(id='mle_processed', ctx=Load()), attr='setter', ctx=Load())], returns=NameConstant(value=None)), FunctionDef(name='samples_processed', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Return the post-processed measurement samples with their measurement probability.')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_samples_processed', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='Dict', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='float', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load())), ctx=Load())), FunctionDef(name='samples_processed', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='value', annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='float', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load())), ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Set the post-processed measurement samples.')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_samples_processed', ctx=Store())], value=Name(id='value', ctx=Load()))], decorator_list=[Attribute(value=Name(id='samples_processed', ctx=Load()), attr='setter', ctx=Load())], returns=NameConstant(value=None)), FunctionDef(name='mle', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Return the MLE for the amplitude, in $[0, 1]$.')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_mle', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='float', ctx=Load())), FunctionDef(name='mle', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='value', annotation=Name(id='float', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Set the MLE for the amplitude, in $[0, 1]$.')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_mle', ctx=Store())], value=Name(id='value', ctx=Load()))], decorator_list=[Attribute(value=Name(id='mle', ctx=Load()), attr='setter', ctx=Load())], returns=NameConstant(value=None)), FunctionDef(name='samples', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Return the measurement samples with their measurement probability.')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_samples', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='Dict', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='float', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load())), ctx=Load())), FunctionDef(name='samples', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='value', annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='float', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load())), ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Set the measurement samples with their measurement probability.')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_samples', ctx=Store())], value=Name(id='value', ctx=Load()))], decorator_list=[Attribute(value=Name(id='samples', ctx=Load()), attr='setter', ctx=Load())], returns=NameConstant(value=None)), FunctionDef(name='measurements', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Return the measurements as integers with their measurement probability.')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_y_measurements', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='Dict', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load())), ctx=Load())), FunctionDef(name='measurements', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='value', annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load())), ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Set the measurements as integers with their measurement probability.')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_y_measurements', ctx=Store())], value=Name(id='value', ctx=Load()))], decorator_list=[Attribute(value=Name(id='measurements', ctx=Load()), attr='setter', ctx=Load())], returns=NameConstant(value=None)), FunctionDef(name='max_probability', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Return the maximum sampling probability.')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_max_probability', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='float', ctx=Load())), FunctionDef(name='max_probability', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='value', annotation=Name(id='float', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Set the maximum sampling probability.')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_max_probability', ctx=Store())], value=Name(id='value', ctx=Load()))], decorator_list=[Attribute(value=Name(id='max_probability', ctx=Load()), attr='setter', ctx=Load())], returns=NameConstant(value=None))], decorator_list=[]), FunctionDef(name='_compute_fisher_information', args=arguments(args=[arg(arg='result', annotation=Name(id='AmplitudeEstimationResult', ctx=Load())), arg(arg='observed', annotation=Name(id='bool', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[NameConstant(value=False)]), body=[Expr(value=Str(s='Computes the Fisher information for the output of the previous run.\n\n    Args:\n        result: An amplitude estimation result for which to compute the confidence interval.\n        observed: If True, the observed Fisher information is returned, otherwise\n            the expected Fisher information.\n\n    Returns:\n        The Fisher information.\n    ')), Assign(targets=[Name(id='fisher_information', ctx=Store())], value=NameConstant(value=None)), Assign(targets=[Name(id='mlv', ctx=Store())], value=Attribute(value=Name(id='result', ctx=Load()), attr='mle', ctx=Load())), Assign(targets=[Name(id='m', ctx=Store())], value=Attribute(value=Name(id='result', ctx=Load()), attr='num_evaluation_qubits', ctx=Load())), Assign(targets=[Name(id='M', ctx=Store())], value=BinOp(left=Num(n=2), op=Pow(), right=Name(id='m', ctx=Load()))), If(test=Name(id='observed', ctx=Load()), body=[Assign(targets=[Name(id='a_i', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='asarray', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='result', ctx=Load()), attr='samples', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[])), Assign(targets=[Name(id='p_i', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='asarray', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='result', ctx=Load()), attr='samples', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[])), Assign(targets=[Name(id='fisher_information', ctx=Store())], value=Call(func=Name(id='sum', ctx=Load()), args=[GeneratorExp(elt=BinOp(left=Name(id='p', ctx=Load()), op=Mult(), right=BinOp(left=Call(func=Name(id='derivative_log_pdf_a', ctx=Load()), args=[Name(id='a', ctx=Load()), Name(id='mlv', ctx=Load()), Name(id='m', ctx=Load())], keywords=[]), op=Pow(), right=Num(n=2))), generators=[comprehension(target=Tuple(elts=[Name(id='p', ctx=Store()), Name(id='a', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='zip', ctx=Load()), args=[Name(id='p_i', ctx=Load()), Name(id='a_i', ctx=Load())], keywords=[]), ifs=[], is_async=0)])], keywords=[]))], orelse=[FunctionDef(name='integrand', args=arguments(args=[arg(arg='x', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Return(value=BinOp(left=BinOp(left=Call(func=Name(id='derivative_log_pdf_a', ctx=Load()), args=[Name(id='x', ctx=Load()), Name(id='mlv', ctx=Load()), Name(id='m', ctx=Load())], keywords=[]), op=Pow(), right=Num(n=2)), op=Mult(), right=Call(func=Name(id='pdf_a', ctx=Load()), args=[Name(id='x', ctx=Load()), Name(id='mlv', ctx=Load()), Name(id='m', ctx=Load())], keywords=[])))], decorator_list=[], returns=None), Assign(targets=[Name(id='grid', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[BinOp(left=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='arange', ctx=Load()), args=[BinOp(left=BinOp(left=Name(id='M', ctx=Load()), op=Div(), right=Num(n=2)), op=Add(), right=Num(n=1))], keywords=[])), op=Div(), right=Name(id='M', ctx=Load()))], keywords=[]), op=Pow(), right=Num(n=2))), Assign(targets=[Name(id='fisher_information', ctx=Store())], value=Call(func=Name(id='sum', ctx=Load()), args=[GeneratorExp(elt=Call(func=Name(id='integrand', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='grid', ctx=Load()), ifs=[], is_async=0)])], keywords=[]))]), Return(value=Name(id='fisher_information', ctx=Load()))], decorator_list=[], returns=Name(id='float', ctx=Load())), FunctionDef(name='_fisher_confint', args=arguments(args=[arg(arg='result', annotation=Name(id='AmplitudeEstimationResult', ctx=Load())), arg(arg='alpha', annotation=Name(id='float', ctx=Load())), arg(arg='observed', annotation=Name(id='bool', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[NameConstant(value=False)]), body=[Expr(value=Str(s='Compute the Fisher information confidence interval for the MLE of the previous run.\n\n    Args:\n        result: An amplitude estimation result for which to compute the confidence interval.\n        alpha: Specifies the (1 - alpha) confidence level (0 < alpha < 1).\n        observed: If True, the observed Fisher information is used to construct the\n            confidence interval, otherwise the expected Fisher information.\n\n    Returns:\n        The Fisher information confidence interval.\n    ')), Assign(targets=[Name(id='std', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sqrt', ctx=Load()), args=[BinOp(left=Attribute(value=Name(id='result', ctx=Load()), attr='shots', ctx=Load()), op=Mult(), right=Call(func=Name(id='_compute_fisher_information', ctx=Load()), args=[Name(id='result', ctx=Load()), Name(id='observed', ctx=Load())], keywords=[]))], keywords=[])), Assign(targets=[Name(id='confint', ctx=Store())], value=BinOp(left=Attribute(value=Name(id='result', ctx=Load()), attr='mle', ctx=Load()), op=Add(), right=BinOp(left=BinOp(left=Call(func=Attribute(value=Name(id='norm', ctx=Load()), attr='ppf', ctx=Load()), args=[BinOp(left=Num(n=1), op=Sub(), right=BinOp(left=Name(id='alpha', ctx=Load()), op=Div(), right=Num(n=2)))], keywords=[]), op=Div(), right=Name(id='std', ctx=Load())), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='array', ctx=Load()), args=[List(elts=[UnaryOp(op=USub(), operand=Num(n=1)), Num(n=1)], ctx=Load())], keywords=[])))), Return(value=Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='post_processing', ctx=Load()), args=[Name(id='bound', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='bound', ctx=Store()), iter=Name(id='confint', ctx=Load()), ifs=[], is_async=0)])], keywords=[]))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='float', ctx=Load())), ctx=Load())), FunctionDef(name='_likelihood_ratio_confint', args=arguments(args=[arg(arg='result', annotation=Name(id='AmplitudeEstimationResult', ctx=Load())), arg(arg='alpha', annotation=Name(id='float', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Compute the likelihood ratio confidence interval for the MLE of the previous run.\n\n    Args:\n        result: An amplitude estimation result for which to compute the confidence interval.\n        alpha: Specifies the (1 - alpha) confidence level (0 < alpha < 1).\n\n    Returns:\n        The likelihood ratio confidence interval.\n    ')), Assign(targets=[Name(id='m', ctx=Store())], value=Attribute(value=Name(id='result', ctx=Load()), attr='num_evaluation_qubits', ctx=Load())), Assign(targets=[Name(id='M', ctx=Store())], value=BinOp(left=Num(n=2), op=Pow(), right=Name(id='m', ctx=Load()))), Assign(targets=[Name(id='qae', ctx=Store())], value=Attribute(value=Name(id='result', ctx=Load()), attr='estimation', ctx=Load())), Assign(targets=[Name(id='y', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='round', ctx=Load()), args=[BinOp(left=BinOp(left=Name(id='M', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='arcsin', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sqrt', ctx=Load()), args=[Name(id='qae', ctx=Load())], keywords=[])], keywords=[])), op=Div(), right=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()))], keywords=[])], keywords=[])), If(test=Compare(left=Name(id='y', ctx=Load()), ops=[Eq()], comparators=[Num(n=0)]), body=[Assign(targets=[Name(id='right_of_qae', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[BinOp(left=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Mult(), right=BinOp(left=Name(id='y', ctx=Load()), op=Add(), right=Num(n=1))), op=Div(), right=Name(id='M', ctx=Load()))], keywords=[]), op=Pow(), right=Num(n=2))), Assign(targets=[Name(id='bubbles', ctx=Store())], value=List(elts=[Name(id='qae', ctx=Load()), Name(id='right_of_qae', ctx=Load())], ctx=Load()))], orelse=[If(test=Compare(left=Name(id='y', ctx=Load()), ops=[Eq()], comparators=[Call(func=Name(id='int', ctx=Load()), args=[BinOp(left=Name(id='M', ctx=Load()), op=Div(), right=Num(n=2))], keywords=[])]), body=[Assign(targets=[Name(id='left_of_qae', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[BinOp(left=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Mult(), right=BinOp(left=Name(id='y', ctx=Load()), op=Sub(), right=Num(n=1))), op=Div(), right=Name(id='M', ctx=Load()))], keywords=[]), op=Pow(), right=Num(n=2))), Assign(targets=[Name(id='bubbles', ctx=Store())], value=List(elts=[Name(id='left_of_qae', ctx=Load()), Name(id='qae', ctx=Load())], ctx=Load()))], orelse=[Assign(targets=[Name(id='left_of_qae', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[BinOp(left=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Mult(), right=BinOp(left=Name(id='y', ctx=Load()), op=Sub(), right=Num(n=1))), op=Div(), right=Name(id='M', ctx=Load()))], keywords=[]), op=Pow(), right=Num(n=2))), Assign(targets=[Name(id='right_of_qae', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[BinOp(left=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Mult(), right=BinOp(left=Name(id='y', ctx=Load()), op=Add(), right=Num(n=1))), op=Div(), right=Name(id='M', ctx=Load()))], keywords=[]), op=Pow(), right=Num(n=2))), Assign(targets=[Name(id='bubbles', ctx=Store())], value=List(elts=[Name(id='left_of_qae', ctx=Load()), Name(id='qae', ctx=Load()), Name(id='right_of_qae', ctx=Load())], ctx=Load()))])]), Assign(targets=[Name(id='a_i', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='asarray', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='result', ctx=Load()), attr='samples', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[])), Assign(targets=[Name(id='p_i', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='asarray', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='result', ctx=Load()), attr='samples', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[])), FunctionDef(name='loglikelihood', args=arguments(args=[arg(arg='a', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sum', ctx=Load()), args=[BinOp(left=BinOp(left=Attribute(value=Name(id='result', ctx=Load()), attr='shots', ctx=Load()), op=Mult(), right=Name(id='p_i', ctx=Load())), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='log', ctx=Load()), args=[Call(func=Name(id='pdf_a', ctx=Load()), args=[Name(id='a_i', ctx=Load()), Name(id='a', ctx=Load()), Name(id='m', ctx=Load())], keywords=[])], keywords=[]))], keywords=[]))], decorator_list=[], returns=None), Assign(targets=[Name(id='loglik_mle', ctx=Store())], value=Call(func=Name(id='loglikelihood', ctx=Load()), args=[Attribute(value=Name(id='result', ctx=Load()), attr='mle', ctx=Load())], keywords=[])), Assign(targets=[Name(id='thres', ctx=Store())], value=BinOp(left=Name(id='loglik_mle', ctx=Load()), op=Sub(), right=BinOp(left=Call(func=Attribute(value=Name(id='chi2', ctx=Load()), attr='ppf', ctx=Load()), args=[BinOp(left=Num(n=1), op=Sub(), right=Name(id='alpha', ctx=Load()))], keywords=[keyword(arg='df', value=Num(n=1))]), op=Div(), right=Num(n=2)))), FunctionDef(name='cut', args=arguments(args=[arg(arg='x', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Return(value=BinOp(left=Call(func=Name(id='loglikelihood', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), op=Sub(), right=Name(id='thres', ctx=Load())))], decorator_list=[], returns=None), Assign(targets=[Name(id='lower', ctx=Store()), Name(id='upper', ctx=Store())], value=Attribute(value=Name(id='result', ctx=Load()), attr='mle', ctx=Load())), For(target=Tuple(elts=[Name(id='a', ctx=Store()), Name(id='b', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='zip', ctx=Load()), args=[Subscript(value=Name(id='bubbles', ctx=Load()), slice=Slice(lower=None, upper=UnaryOp(op=USub(), operand=Num(n=1)), step=None), ctx=Load()), Subscript(value=Name(id='bubbles', ctx=Load()), slice=Slice(lower=Num(n=1), upper=None, step=None), ctx=Load())], keywords=[]), body=[Assign(targets=[Tuple(elts=[Name(id='locmax', ctx=Store()), Name(id='val', ctx=Store())], ctx=Store())], value=Call(func=Name(id='bisect_max', ctx=Load()), args=[Name(id='loglikelihood', ctx=Load()), Name(id='a', ctx=Load()), Name(id='b', ctx=Load())], keywords=[keyword(arg='retval', value=NameConstant(value=True))])), If(test=Compare(left=Name(id='val', ctx=Load()), ops=[GtE()], comparators=[Name(id='thres', ctx=Load())]), body=[If(test=Compare(left=BinOp(left=Call(func=Name(id='cut', ctx=Load()), args=[Name(id='a', ctx=Load())], keywords=[]), op=Mult(), right=Call(func=Name(id='cut', ctx=Load()), args=[Name(id='locmax', ctx=Load())], keywords=[])), ops=[Lt()], comparators=[Num(n=0)]), body=[Assign(targets=[Name(id='left', ctx=Store())], value=Call(func=Name(id='bisect', ctx=Load()), args=[Name(id='cut', ctx=Load()), Name(id='a', ctx=Load()), Name(id='locmax', ctx=Load())], keywords=[])), Assign(targets=[Name(id='lower', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='minimum', ctx=Load()), args=[Name(id='lower', ctx=Load()), Name(id='left', ctx=Load())], keywords=[]))], orelse=[]), If(test=Compare(left=BinOp(left=Call(func=Name(id='cut', ctx=Load()), args=[Name(id='locmax', ctx=Load())], keywords=[]), op=Mult(), right=Call(func=Name(id='cut', ctx=Load()), args=[Name(id='b', ctx=Load())], keywords=[])), ops=[Lt()], comparators=[Num(n=0)]), body=[Assign(targets=[Name(id='right', ctx=Store())], value=Call(func=Name(id='bisect', ctx=Load()), args=[Name(id='cut', ctx=Load()), Name(id='locmax', ctx=Load()), Name(id='b', ctx=Load())], keywords=[])), Assign(targets=[Name(id='upper', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='maximum', ctx=Load()), args=[Name(id='upper', ctx=Load()), Name(id='right', ctx=Load())], keywords=[]))], orelse=[])], orelse=[])], orelse=[]), Assign(targets=[Name(id='confint', ctx=Store())], value=List(elts=[Name(id='lower', ctx=Load()), Name(id='upper', ctx=Load())], ctx=Load())), Return(value=Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='post_processing', ctx=Load()), args=[Name(id='bound', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='bound', ctx=Store()), iter=Name(id='confint', ctx=Load()), ifs=[], is_async=0)])], keywords=[]))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='float', ctx=Load())), ctx=Load()))])
Expr(value=Str(s='The Quantum Phase Estimation-based Amplitude Estimation algorithm.'))
ImportFrom(module='typing', names=[alias(name='Optional', asname=None), alias(name='Union', asname=None), alias(name='List', asname=None), alias(name='Tuple', asname=None), alias(name='Dict', asname=None)], level=0)
ImportFrom(module='collections', names=[alias(name='OrderedDict', asname=None)], level=0)
Import(names=[alias(name='numpy', asname='np')])
ImportFrom(module='scipy.stats', names=[alias(name='chi2', asname=None), alias(name='norm', asname=None)], level=0)
ImportFrom(module='scipy.optimize', names=[alias(name='bisect', asname=None)], level=0)
ImportFrom(module='qiskit', names=[alias(name='QuantumCircuit', asname=None), alias(name='ClassicalRegister', asname=None)], level=0)
ImportFrom(module='qiskit.providers', names=[alias(name='Backend', asname=None)], level=0)
ImportFrom(module='qiskit.utils', names=[alias(name='QuantumInstance', asname=None)], level=0)
ImportFrom(module='amplitude_estimator', names=[alias(name='AmplitudeEstimator', asname=None), alias(name='AmplitudeEstimatorResult', asname=None)], level=1)
ImportFrom(module='ae_utils', names=[alias(name='pdf_a', asname=None), alias(name='derivative_log_pdf_a', asname=None), alias(name='bisect_max', asname=None)], level=1)
ImportFrom(module='estimation_problem', names=[alias(name='EstimationProblem', asname=None)], level=1)
ClassDef(name='AmplitudeEstimation', bases=[Name(id='AmplitudeEstimator', ctx=Load())], keywords=[], body=[Expr(value=Str(s='The Quantum Phase Estimation-based Amplitude Estimation algorithm.\n\n    This class implements the original Quantum Amplitude Estimation (QAE) algorithm, introduced by\n    [1]. This canonical version uses quantum phase estimation along with a set of :math:`m`\n    additional evaluation qubits to find an estimate :math:`\\tilde{a}`, that is restricted to the\n    grid\n\n    .. math::\n\n        \\tilde{a} \\in \\{\\sin^2(\\pi  y / 2^m) : y = 0, ..., 2^{m-1}\\}\n\n    More evaluation qubits produce a finer sampling grid, therefore the accuracy of the algorithm\n    increases with :math:`m`.\n\n    Using a maximum likelihood post processing, this grid constraint can be circumvented.\n    This improved estimator is implemented as well, see [2] Appendix A for more detail.\n\n    References:\n        [1]: Brassard, G., Hoyer, P., Mosca, M., & Tapp, A. (2000).\n             Quantum Amplitude Amplification and Estimation.\n             `arXiv:quant-ph/0005055 <http://arxiv.org/abs/quant-ph/0005055>`_.\n        [2]: Grinko, D., Gacon, J., Zoufal, C., & Woerner, S. (2019).\n             Iterative Quantum Amplitude Estimation.\n             `arXiv:1912.05559 <https://arxiv.org/abs/1912.05559>`_.\n    ')), FunctionDef(name='__init__', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='num_eval_qubits', annotation=Name(id='int', ctx=Load())), arg(arg='phase_estimation_circuit', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Name(id='QuantumCircuit', ctx=Load())), ctx=Load())), arg(arg='iqft', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Name(id='QuantumCircuit', ctx=Load())), ctx=Load())), arg(arg='quantum_instance', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='QuantumInstance', ctx=Load()), Name(id='Backend', ctx=Load())], ctx=Load())), ctx=Load())), ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[NameConstant(value=None), NameConstant(value=None), NameConstant(value=None)]), body=[Expr(value=Str(s='\n        Args:\n            num_eval_qubits: The number of evaluation qubits.\n            phase_estimation_circuit: The phase estimation circuit used to run the algorithm.\n                Defaults to the standard phase estimation circuit from the circuit library,\n                `qiskit.circuit.library.PhaseEstimation` when None.\n            iqft: The inverse quantum Fourier transform component, defaults to using a standard\n                implementation from `qiskit.circuit.library.QFT` when None.\n            quantum_instance: The backend (or `QuantumInstance`) to execute the circuits on.\n\n        Raises:\n            ValueError: If the number of evaluation qubits is smaller than 1.\n        ')), If(test=Compare(left=Name(id='num_eval_qubits', ctx=Load()), ops=[Lt()], comparators=[Num(n=1)]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Str(s='The number of evaluation qubits must at least be 1.')], keywords=[]), cause=None)], orelse=[]), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='quantum_instance', ctx=Store())], value=Name(id='quantum_instance', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Store())], value=Name(id='num_eval_qubits', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_M', ctx=Store())], value=BinOp(left=Num(n=2), op=Pow(), right=Name(id='num_eval_qubits', ctx=Load()))), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_iqft', ctx=Store())], value=Name(id='iqft', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_pec', ctx=Store())], value=Name(id='phase_estimation_circuit', ctx=Load()))], decorator_list=[], returns=NameConstant(value=None)), FunctionDef(name='quantum_instance', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Get the quantum instance.\n\n        Returns:\n            The quantum instance used to run this algorithm.\n        ')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Name(id='QuantumInstance', ctx=Load())), ctx=Load())), FunctionDef(name='quantum_instance', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='quantum_instance', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='QuantumInstance', ctx=Load()), Name(id='Backend', ctx=Load())], ctx=Load())), ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Set quantum instance.\n\n        Args:\n            quantum_instance: The quantum instance used to run this algorithm.\n        ')), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='quantum_instance', ctx=Load()), Name(id='Backend', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='quantum_instance', ctx=Store())], value=Call(func=Name(id='QuantumInstance', ctx=Load()), args=[Name(id='quantum_instance', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Store())], value=Name(id='quantum_instance', ctx=Load()))], decorator_list=[Attribute(value=Name(id='quantum_instance', ctx=Load()), attr='setter', ctx=Load())], returns=NameConstant(value=None)), FunctionDef(name='construct_circuit', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='estimation_problem', annotation=Name(id='EstimationProblem', ctx=Load())), arg(arg='measurement', annotation=Name(id='bool', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[NameConstant(value=False)]), body=[Expr(value=Str(s='Construct the Amplitude Estimation quantum circuit.\n\n        Args:\n            estimation_problem: The estimation problem for which to construct the QAE circuit.\n            measurement: Boolean flag to indicate if measurements should be included in the circuit.\n\n        Returns:\n            The QuantumCircuit object for the constructed circuit.\n        ')), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_pec', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=[Assign(targets=[Name(id='pec', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_pec', ctx=Load()))], orelse=[ImportFrom(module='qiskit.circuit.library', names=[alias(name='PhaseEstimation', asname=None)], level=0), Assign(targets=[Name(id='pec', ctx=Store())], value=Call(func=Name(id='PhaseEstimation', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Load()), Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='grover_operator', ctx=Load())], keywords=[keyword(arg='iqft', value=Attribute(value=Name(id='self', ctx=Load()), attr='_iqft', ctx=Load()))]))]), Assign(targets=[Name(id='circuit', ctx=Store())], value=Call(func=Name(id='QuantumCircuit', ctx=Load()), args=[Starred(value=Attribute(value=Name(id='pec', ctx=Load()), attr='qregs', ctx=Load()), ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='circuit', ctx=Load()), attr='compose', ctx=Load()), args=[Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='state_preparation', ctx=Load()), Call(func=Name(id='list', ctx=Load()), args=[Call(func=Name(id='range', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Load()), Attribute(value=Name(id='circuit', ctx=Load()), attr='num_qubits', ctx=Load())], keywords=[])], keywords=[])], keywords=[keyword(arg='inplace', value=NameConstant(value=True))])), Expr(value=Call(func=Attribute(value=Name(id='circuit', ctx=Load()), attr='compose', ctx=Load()), args=[Name(id='pec', ctx=Load())], keywords=[keyword(arg='inplace', value=NameConstant(value=True))])), If(test=Name(id='measurement', ctx=Load()), body=[Assign(targets=[Name(id='cr', ctx=Store())], value=Call(func=Name(id='ClassicalRegister', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='circuit', ctx=Load()), attr='add_register', ctx=Load()), args=[Name(id='cr', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='circuit', ctx=Load()), attr='measure', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Name(id='range', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Load())], keywords=[])], keywords=[]), Call(func=Name(id='list', ctx=Load()), args=[Call(func=Name(id='range', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Load())], keywords=[])], keywords=[])], keywords=[]))], orelse=[]), Return(value=Name(id='circuit', ctx=Load()))], decorator_list=[], returns=Name(id='QuantumCircuit', ctx=Load())), FunctionDef(name='evaluate_measurements', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='circuit_results', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Subscript(value=Name(id='Dict', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load())), ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())], ctx=Load())), ctx=Load())), arg(arg='threshold', annotation=Name(id='float', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[Num(n=1e-06)]), body=[Expr(value=Str(s='Evaluate the results from the circuit simulation.\n\n        Given the probabilities from statevector simulation of the QAE circuit, compute the\n        probabilities that the measurements y/gridpoints a are the best estimate.\n\n        Args:\n            circuit_results: The circuit result from the QAE circuit. Can be either a counts dict\n                or a statevector.\n            threshold: Measurements with probabilities below the threshold are discarded.\n\n        Returns:\n            Dictionaries containing the a gridpoints with respective probabilities and\n                y measurements with respective probabilities, in this order.\n        ')), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='circuit_results', ctx=Load()), Name(id='dict', ctx=Load())], keywords=[]), body=[Assign(targets=[Tuple(elts=[Name(id='samples', ctx=Store()), Name(id='measurements', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_evaluate_count_results', ctx=Load()), args=[Name(id='circuit_results', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Tuple(elts=[Name(id='samples', ctx=Store()), Name(id='measurements', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_evaluate_statevector_results', ctx=Load()), args=[Name(id='circuit_results', ctx=Load())], keywords=[]))]), Assign(targets=[Name(id='samples', ctx=Store())], value=DictComp(key=Name(id='a', ctx=Load()), value=Name(id='p', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='a', ctx=Store()), Name(id='p', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='samples', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), ifs=[Compare(left=Name(id='p', ctx=Load()), ops=[Gt()], comparators=[Name(id='threshold', ctx=Load())])], is_async=0)])), Assign(targets=[Name(id='measurements', ctx=Store())], value=DictComp(key=Name(id='y', ctx=Load()), value=Name(id='p', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='y', ctx=Store()), Name(id='p', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='measurements', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), ifs=[Compare(left=Name(id='p', ctx=Load()), ops=[Gt()], comparators=[Name(id='threshold', ctx=Load())])], is_async=0)])), Return(value=Tuple(elts=[Name(id='samples', ctx=Load()), Name(id='measurements', ctx=Load())], ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Index(value=Tuple(elts=[Subscript(value=Name(id='Dict', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load())), ctx=Load()), Subscript(value=Name(id='Dict', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='float', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load())), ctx=Load())], ctx=Load())), ctx=Load())), FunctionDef(name='_evaluate_statevector_results', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='statevector', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Assign(targets=[Name(id='measurements', ctx=Store())], value=Call(func=Name(id='OrderedDict', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='num_qubits', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='log2', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='statevector', ctx=Load())], keywords=[])], keywords=[])], keywords=[])), For(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='amplitude', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='statevector', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='b', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Subscript(value=Call(func=Name(id='bin', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]), slice=Slice(lower=Num(n=2), upper=None, step=None), ctx=Load()), attr='zfill', ctx=Load()), args=[Name(id='num_qubits', ctx=Load())], keywords=[]), slice=Slice(lower=None, upper=None, step=UnaryOp(op=USub(), operand=Num(n=1))), ctx=Load())), Assign(targets=[Name(id='y', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='b', ctx=Load()), slice=Slice(lower=None, upper=Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Load()), step=None), ctx=Load()), Num(n=2)], keywords=[])), Assign(targets=[Subscript(value=Name(id='measurements', ctx=Load()), slice=Index(value=Name(id='y', ctx=Load())), ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='measurements', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='y', ctx=Load()), Num(n=0)], keywords=[]), op=Add(), right=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='abs', ctx=Load()), args=[Name(id='amplitude', ctx=Load())], keywords=[]), op=Pow(), right=Num(n=2))))], orelse=[]), Assign(targets=[Name(id='samples', ctx=Store())], value=Call(func=Name(id='OrderedDict', ctx=Load()), args=[], keywords=[])), For(target=Tuple(elts=[Name(id='y', ctx=Store()), Name(id='probability', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='measurements', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[If(test=Compare(left=Name(id='y', ctx=Load()), ops=[GtE()], comparators=[Call(func=Name(id='int', ctx=Load()), args=[BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='_M', ctx=Load()), op=Div(), right=Num(n=2))], keywords=[])]), body=[Assign(targets=[Name(id='y', ctx=Store())], value=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='_M', ctx=Load()), op=Sub(), right=Name(id='y', ctx=Load())))], orelse=[]), Assign(targets=[Name(id='a', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='round', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='power', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[BinOp(left=BinOp(left=Name(id='y', ctx=Load()), op=Mult(), right=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load())), op=Div(), right=BinOp(left=Num(n=2), op=Pow(), right=Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Load())))], keywords=[]), Num(n=2)], keywords=[])], keywords=[keyword(arg='decimals', value=Num(n=7))])), Assign(targets=[Subscript(value=Name(id='samples', ctx=Load()), slice=Index(value=Name(id='a', ctx=Load())), ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='samples', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='a', ctx=Load()), Num(n=0)], keywords=[]), op=Add(), right=Name(id='probability', ctx=Load())))], orelse=[]), Return(value=Tuple(elts=[Name(id='samples', ctx=Load()), Name(id='measurements', ctx=Load())], ctx=Load()))], decorator_list=[], returns=None), FunctionDef(name='_evaluate_count_results', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='counts', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Assign(targets=[Name(id='measurements', ctx=Store())], value=Call(func=Name(id='OrderedDict', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='samples', ctx=Store())], value=Call(func=Name(id='OrderedDict', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='shots', ctx=Store())], value=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()), attr='_run_config', ctx=Load()), attr='shots', ctx=Load())), For(target=Tuple(elts=[Name(id='state', ctx=Store()), Name(id='count', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='counts', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Name(id='y', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Subscript(value=Call(func=Attribute(value=Name(id='state', ctx=Load()), attr='replace', ctx=Load()), args=[Str(s=' '), Str(s='')], keywords=[]), slice=Slice(lower=None, upper=Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Load()), step=None), ctx=Load()), slice=Slice(lower=None, upper=None, step=UnaryOp(op=USub(), operand=Num(n=1))), ctx=Load()), Num(n=2)], keywords=[])), Assign(targets=[Name(id='probability', ctx=Store())], value=BinOp(left=Name(id='count', ctx=Load()), op=Div(), right=Name(id='shots', ctx=Load()))), Assign(targets=[Subscript(value=Name(id='measurements', ctx=Load()), slice=Index(value=Name(id='y', ctx=Load())), ctx=Store())], value=Name(id='probability', ctx=Load())), Assign(targets=[Name(id='a', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='round', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='power', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[BinOp(left=BinOp(left=Name(id='y', ctx=Load()), op=Mult(), right=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load())), op=Div(), right=BinOp(left=Num(n=2), op=Pow(), right=Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Load())))], keywords=[]), Num(n=2)], keywords=[])], keywords=[keyword(arg='decimals', value=Num(n=7))])), Assign(targets=[Subscript(value=Name(id='samples', ctx=Load()), slice=Index(value=Name(id='a', ctx=Load())), ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='samples', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='a', ctx=Load()), Num(n=0.0)], keywords=[]), op=Add(), right=Name(id='probability', ctx=Load())))], orelse=[]), Return(value=Tuple(elts=[Name(id='samples', ctx=Load()), Name(id='measurements', ctx=Load())], ctx=Load()))], decorator_list=[], returns=None), FunctionDef(name='compute_mle', args=arguments(args=[arg(arg='result', annotation=Str(s='AmplitudeEstimationResult')), arg(arg='apply_post_processing', annotation=Name(id='bool', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[NameConstant(value=False)]), body=[Expr(value=Str(s='Compute the Maximum Likelihood Estimator (MLE).\n\n        Args:\n            result: An amplitude estimation result object.\n            apply_post_processing: If True, apply the post processing to the MLE before returning\n                it.\n\n        Returns:\n            The MLE for the provided result object.\n        ')), Assign(targets=[Name(id='m', ctx=Store())], value=Attribute(value=Name(id='result', ctx=Load()), attr='num_evaluation_qubits', ctx=Load())), Assign(targets=[Name(id='M', ctx=Store())], value=BinOp(left=Num(n=2), op=Pow(), right=Name(id='m', ctx=Load()))), Assign(targets=[Name(id='qae', ctx=Store())], value=Attribute(value=Name(id='result', ctx=Load()), attr='estimation', ctx=Load())), Assign(targets=[Name(id='a_i', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='asarray', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='result', ctx=Load()), attr='samples', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[])), Assign(targets=[Name(id='p_i', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='asarray', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='result', ctx=Load()), attr='samples', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[])), FunctionDef(name='loglikelihood', args=arguments(args=[arg(arg='a', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sum', ctx=Load()), args=[BinOp(left=BinOp(left=Attribute(value=Name(id='result', ctx=Load()), attr='shots', ctx=Load()), op=Mult(), right=Name(id='p_i', ctx=Load())), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='log', ctx=Load()), args=[Call(func=Name(id='pdf_a', ctx=Load()), args=[Name(id='a_i', ctx=Load()), Name(id='a', ctx=Load()), Name(id='m', ctx=Load())], keywords=[])], keywords=[]))], keywords=[]))], decorator_list=[], returns=None), Assign(targets=[Name(id='y', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='round', ctx=Load()), args=[BinOp(left=BinOp(left=Name(id='M', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='arcsin', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sqrt', ctx=Load()), args=[Name(id='qae', ctx=Load())], keywords=[])], keywords=[])), op=Div(), right=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()))], keywords=[])], keywords=[])), If(test=Compare(left=Name(id='y', ctx=Load()), ops=[Eq()], comparators=[Num(n=0)]), body=[Assign(targets=[Name(id='right_of_qae', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[BinOp(left=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Mult(), right=BinOp(left=Name(id='y', ctx=Load()), op=Add(), right=Num(n=1))), op=Div(), right=Name(id='M', ctx=Load()))], keywords=[]), op=Pow(), right=Num(n=2))), Assign(targets=[Name(id='bubbles', ctx=Store())], value=List(elts=[Name(id='qae', ctx=Load()), Name(id='right_of_qae', ctx=Load())], ctx=Load()))], orelse=[If(test=Compare(left=Name(id='y', ctx=Load()), ops=[Eq()], comparators=[Call(func=Name(id='int', ctx=Load()), args=[BinOp(left=Name(id='M', ctx=Load()), op=Div(), right=Num(n=2))], keywords=[])]), body=[Assign(targets=[Name(id='left_of_qae', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[BinOp(left=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Mult(), right=BinOp(left=Name(id='y', ctx=Load()), op=Sub(), right=Num(n=1))), op=Div(), right=Name(id='M', ctx=Load()))], keywords=[]), op=Pow(), right=Num(n=2))), Assign(targets=[Name(id='bubbles', ctx=Store())], value=List(elts=[Name(id='left_of_qae', ctx=Load()), Name(id='qae', ctx=Load())], ctx=Load()))], orelse=[Assign(targets=[Name(id='left_of_qae', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[BinOp(left=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Mult(), right=BinOp(left=Name(id='y', ctx=Load()), op=Sub(), right=Num(n=1))), op=Div(), right=Name(id='M', ctx=Load()))], keywords=[]), op=Pow(), right=Num(n=2))), Assign(targets=[Name(id='right_of_qae', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[BinOp(left=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Mult(), right=BinOp(left=Name(id='y', ctx=Load()), op=Add(), right=Num(n=1))), op=Div(), right=Name(id='M', ctx=Load()))], keywords=[]), op=Pow(), right=Num(n=2))), Assign(targets=[Name(id='bubbles', ctx=Store())], value=List(elts=[Name(id='left_of_qae', ctx=Load()), Name(id='qae', ctx=Load()), Name(id='right_of_qae', ctx=Load())], ctx=Load()))])]), Assign(targets=[Name(id='a_opt', ctx=Store())], value=Name(id='qae', ctx=Load())), Assign(targets=[Name(id='loglik_opt', ctx=Store())], value=Call(func=Name(id='loglikelihood', ctx=Load()), args=[Name(id='a_opt', ctx=Load())], keywords=[])), For(target=Tuple(elts=[Name(id='a', ctx=Store()), Name(id='b', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='zip', ctx=Load()), args=[Subscript(value=Name(id='bubbles', ctx=Load()), slice=Slice(lower=None, upper=UnaryOp(op=USub(), operand=Num(n=1)), step=None), ctx=Load()), Subscript(value=Name(id='bubbles', ctx=Load()), slice=Slice(lower=Num(n=1), upper=None, step=None), ctx=Load())], keywords=[]), body=[Assign(targets=[Tuple(elts=[Name(id='locmax', ctx=Store()), Name(id='val', ctx=Store())], ctx=Store())], value=Call(func=Name(id='bisect_max', ctx=Load()), args=[Name(id='loglikelihood', ctx=Load()), Name(id='a', ctx=Load()), Name(id='b', ctx=Load())], keywords=[keyword(arg='retval', value=NameConstant(value=True))])), If(test=Compare(left=Name(id='val', ctx=Load()), ops=[Gt()], comparators=[Name(id='loglik_opt', ctx=Load())]), body=[Assign(targets=[Name(id='a_opt', ctx=Store())], value=Name(id='locmax', ctx=Load())), Assign(targets=[Name(id='loglik_opt', ctx=Store())], value=Name(id='val', ctx=Load()))], orelse=[])], orelse=[]), If(test=Name(id='apply_post_processing', ctx=Load()), body=[Return(value=Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='post_processing', ctx=Load()), args=[Name(id='a_opt', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='a_opt', ctx=Load()))], decorator_list=[Name(id='staticmethod', ctx=Load())], returns=Name(id='float', ctx=Load())), FunctionDef(name='estimate', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='estimation_problem', annotation=Name(id='EstimationProblem', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Run the amplitude estimation algorithm on provided estimation problem.\n\n        Args:\n            estimation_problem: The estimation problem.\n\n        Returns:\n            An amplitude estimation results object.\n\n        Raises:\n            ValueError: If `state_preparation` or `objective_qubits` are not set in the\n                `estimation_problem`.\n        ')), If(test=Compare(left=Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='state_preparation', ctx=Load()), ops=[Is()], comparators=[NameConstant(value=None)]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Str(s='The state_preparation property of the estimation problem must be set.')], keywords=[]), cause=None)], orelse=[]), If(test=Compare(left=Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='objective_qubits', ctx=Load()), ops=[Is()], comparators=[NameConstant(value=None)]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Str(s='The objective_qubits property of the estimation problem must be set.')], keywords=[]), cause=None)], orelse=[]), Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Name(id='AmplitudeEstimationResult', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='num_evaluation_qubits', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Load())), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='post_processing', ctx=Store())], value=Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='post_processing', ctx=Load())), If(test=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()), attr='is_statevector', ctx=Load()), body=[Assign(targets=[Name(id='circuit', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='construct_circuit', ctx=Load()), args=[Name(id='estimation_problem', ctx=Load())], keywords=[keyword(arg='measurement', value=NameConstant(value=False))])), Assign(targets=[Name(id='statevector', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()), attr='execute', ctx=Load()), args=[Name(id='circuit', ctx=Load())], keywords=[]), attr='get_statevector', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='circuit_results', ctx=Store())], value=Name(id='statevector', ctx=Load())), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='shots', ctx=Store())], value=Num(n=1))], orelse=[Assign(targets=[Name(id='circuit', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='construct_circuit', ctx=Load()), args=[Name(id='estimation_problem', ctx=Load())], keywords=[keyword(arg='measurement', value=NameConstant(value=True))])), Assign(targets=[Name(id='counts', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()), attr='execute', ctx=Load()), args=[Name(id='circuit', ctx=Load())], keywords=[]), attr='get_counts', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='circuit_results', ctx=Store())], value=Name(id='counts', ctx=Load())), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='shots', ctx=Store())], value=Call(func=Name(id='sum', ctx=Load()), args=[Call(func=Attribute(value=Name(id='counts', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[]))]), Assign(targets=[Tuple(elts=[Name(id='samples', ctx=Store()), Name(id='measurements', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='evaluate_measurements', ctx=Load()), args=[Attribute(value=Name(id='result', ctx=Load()), attr='circuit_results', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='samples', ctx=Store())], value=Name(id='samples', ctx=Load())), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='samples_processed', ctx=Store())], value=DictComp(key=Call(func=Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='post_processing', ctx=Load()), args=[Name(id='a', ctx=Load())], keywords=[]), value=Name(id='p', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='a', ctx=Store()), Name(id='p', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='samples', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), ifs=[], is_async=0)])), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='measurements', ctx=Store())], value=Name(id='measurements', ctx=Load())), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='max_probability', ctx=Store())], value=Num(n=0)), For(target=Tuple(elts=[Name(id='amplitude', ctx=Store()), Tuple(elts=[Name(id='mapped', ctx=Store()), Name(id='prob', ctx=Store())], ctx=Store())], ctx=Store()), iter=Call(func=Name(id='zip', ctx=Load()), args=[Call(func=Attribute(value=Name(id='samples', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Attribute(value=Name(id='result', ctx=Load()), attr='samples_processed', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='prob', ctx=Load()), ops=[Gt()], comparators=[Attribute(value=Name(id='result', ctx=Load()), attr='max_probability', ctx=Load())]), body=[Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='max_probability', ctx=Store())], value=Name(id='prob', ctx=Load())), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='estimation', ctx=Store())], value=Name(id='amplitude', ctx=Load())), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='estimation_processed', ctx=Store())], value=Name(id='mapped', ctx=Load()))], orelse=[])], orelse=[]), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='num_oracle_queries', ctx=Store())], value=BinOp(left=Attribute(value=Name(id='result', ctx=Load()), attr='shots', ctx=Load()), op=Mult(), right=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='_M', ctx=Load()), op=Sub(), right=Num(n=1)))), Assign(targets=[Name(id='mle', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='compute_mle', ctx=Load()), args=[Name(id='result', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='mle', ctx=Store())], value=Name(id='mle', ctx=Load())), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='mle_processed', ctx=Store())], value=Call(func=Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='post_processing', ctx=Load()), args=[Name(id='mle', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='confidence_interval', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='compute_confidence_interval', ctx=Load()), args=[Name(id='result', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='confidence_interval_processed', ctx=Store())], value=Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='post_processing', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='value', ctx=Store()), iter=Attribute(value=Name(id='result', ctx=Load()), attr='confidence_interval', ctx=Load()), ifs=[], is_async=0)])], keywords=[])), Return(value=Name(id='result', ctx=Load()))], decorator_list=[], returns=Str(s='AmplitudeEstimationResult')), FunctionDef(name='compute_confidence_interval', args=arguments(args=[arg(arg='result', annotation=Str(s='AmplitudeEstimationResult')), arg(arg='alpha', annotation=Name(id='float', ctx=Load())), arg(arg='kind', annotation=Name(id='str', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[Num(n=0.05), Str(s='likelihood_ratio')]), body=[Expr(value=Str(s="Compute the (1 - alpha) confidence interval.\n\n        Args:\n            result: An amplitude estimation result for which to compute the confidence interval.\n            alpha: Confidence level: compute the (1 - alpha) confidence interval.\n            kind: The method to compute the confidence interval, can be 'fisher', 'observed_fisher'\n                or 'likelihood_ratio' (default)\n\n        Returns:\n            The (1 - alpha) confidence interval of the specified kind.\n\n        Raises:\n            AquaError: If 'mle' is not in self._ret.keys() (i.e. `run` was not called yet).\n            NotImplementedError: If the confidence interval method `kind` is not implemented.\n        ")), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Attribute(value=Name(id='result', ctx=Load()), attr='circuit_results', ctx=Load()), Tuple(elts=[Name(id='list', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())], ctx=Load())], keywords=[]), body=[Return(value=Tuple(elts=[Attribute(value=Name(id='result', ctx=Load()), attr='mle', ctx=Load()), Attribute(value=Name(id='result', ctx=Load()), attr='mle', ctx=Load())], ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='kind', ctx=Load()), ops=[In()], comparators=[List(elts=[Str(s='likelihood_ratio'), Str(s='lr')], ctx=Load())]), body=[Return(value=Call(func=Name(id='_likelihood_ratio_confint', ctx=Load()), args=[Name(id='result', ctx=Load()), Name(id='alpha', ctx=Load())], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='kind', ctx=Load()), ops=[In()], comparators=[List(elts=[Str(s='fisher'), Str(s='fi')], ctx=Load())]), body=[Return(value=Call(func=Name(id='_fisher_confint', ctx=Load()), args=[Name(id='result', ctx=Load()), Name(id='alpha', ctx=Load())], keywords=[keyword(arg='observed', value=NameConstant(value=False))]))], orelse=[]), If(test=Compare(left=Name(id='kind', ctx=Load()), ops=[In()], comparators=[List(elts=[Str(s='observed_fisher'), Str(s='observed_information'), Str(s='oi')], ctx=Load())]), body=[Return(value=Call(func=Name(id='_fisher_confint', ctx=Load()), args=[Name(id='result', ctx=Load()), Name(id='alpha', ctx=Load())], keywords=[keyword(arg='observed', value=NameConstant(value=True))]))], orelse=[]), Raise(exc=Call(func=Name(id='NotImplementedError', ctx=Load()), args=[JoinedStr(values=[Str(s='CI `'), FormattedValue(value=Name(id='kind', ctx=Load()), conversion=-1, format_spec=None), Str(s='` is not implemented.')])], keywords=[]), cause=None)], decorator_list=[Name(id='staticmethod', ctx=Load())], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='float', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load())), ctx=Load()))], decorator_list=[])
ClassDef(name='AmplitudeEstimationResult', bases=[Name(id='AmplitudeEstimatorResult', ctx=Load())], keywords=[], body=[Expr(value=Str(s='The ``AmplitudeEstimation`` result object.')), FunctionDef(name='__init__', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_num_evaluation_qubits', ctx=Store())], value=NameConstant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_mle', ctx=Store())], value=NameConstant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_mle_processed', ctx=Store())], value=NameConstant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_samples', ctx=Store())], value=NameConstant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_samples_processed', ctx=Store())], value=NameConstant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_y_measurements', ctx=Store())], value=NameConstant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_max_probability', ctx=Store())], value=NameConstant(value=None))], decorator_list=[], returns=NameConstant(value=None)), FunctionDef(name='num_evaluation_qubits', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Returns the number of evaluation qubits.')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_num_evaluation_qubits', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='int', ctx=Load())), FunctionDef(name='num_evaluation_qubits', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='num_evaluation_qubits', annotation=Name(id='int', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Set the number of evaluation qubits.')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_num_evaluation_qubits', ctx=Store())], value=Name(id='num_evaluation_qubits', ctx=Load()))], decorator_list=[Attribute(value=Name(id='num_evaluation_qubits', ctx=Load()), attr='setter', ctx=Load())], returns=NameConstant(value=None)), FunctionDef(name='mle_processed', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Return the post-processed MLE for the amplitude.')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_mle_processed', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='float', ctx=Load())), FunctionDef(name='mle_processed', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='value', annotation=Name(id='float', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Set the post-processed MLE for the amplitude.')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_mle_processed', ctx=Store())], value=Name(id='value', ctx=Load()))], decorator_list=[Attribute(value=Name(id='mle_processed', ctx=Load()), attr='setter', ctx=Load())], returns=NameConstant(value=None)), FunctionDef(name='samples_processed', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Return the post-processed measurement samples with their measurement probability.')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_samples_processed', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='Dict', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='float', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load())), ctx=Load())), FunctionDef(name='samples_processed', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='value', annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='float', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load())), ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Set the post-processed measurement samples.')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_samples_processed', ctx=Store())], value=Name(id='value', ctx=Load()))], decorator_list=[Attribute(value=Name(id='samples_processed', ctx=Load()), attr='setter', ctx=Load())], returns=NameConstant(value=None)), FunctionDef(name='mle', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Return the MLE for the amplitude, in $[0, 1]$.')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_mle', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='float', ctx=Load())), FunctionDef(name='mle', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='value', annotation=Name(id='float', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Set the MLE for the amplitude, in $[0, 1]$.')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_mle', ctx=Store())], value=Name(id='value', ctx=Load()))], decorator_list=[Attribute(value=Name(id='mle', ctx=Load()), attr='setter', ctx=Load())], returns=NameConstant(value=None)), FunctionDef(name='samples', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Return the measurement samples with their measurement probability.')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_samples', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='Dict', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='float', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load())), ctx=Load())), FunctionDef(name='samples', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='value', annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='float', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load())), ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Set the measurement samples with their measurement probability.')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_samples', ctx=Store())], value=Name(id='value', ctx=Load()))], decorator_list=[Attribute(value=Name(id='samples', ctx=Load()), attr='setter', ctx=Load())], returns=NameConstant(value=None)), FunctionDef(name='measurements', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Return the measurements as integers with their measurement probability.')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_y_measurements', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='Dict', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load())), ctx=Load())), FunctionDef(name='measurements', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='value', annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load())), ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Set the measurements as integers with their measurement probability.')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_y_measurements', ctx=Store())], value=Name(id='value', ctx=Load()))], decorator_list=[Attribute(value=Name(id='measurements', ctx=Load()), attr='setter', ctx=Load())], returns=NameConstant(value=None)), FunctionDef(name='max_probability', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Return the maximum sampling probability.')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_max_probability', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='float', ctx=Load())), FunctionDef(name='max_probability', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='value', annotation=Name(id='float', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Set the maximum sampling probability.')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_max_probability', ctx=Store())], value=Name(id='value', ctx=Load()))], decorator_list=[Attribute(value=Name(id='max_probability', ctx=Load()), attr='setter', ctx=Load())], returns=NameConstant(value=None))], decorator_list=[])
FunctionDef(name='_compute_fisher_information', args=arguments(args=[arg(arg='result', annotation=Name(id='AmplitudeEstimationResult', ctx=Load())), arg(arg='observed', annotation=Name(id='bool', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[NameConstant(value=False)]), body=[Expr(value=Str(s='Computes the Fisher information for the output of the previous run.\n\n    Args:\n        result: An amplitude estimation result for which to compute the confidence interval.\n        observed: If True, the observed Fisher information is returned, otherwise\n            the expected Fisher information.\n\n    Returns:\n        The Fisher information.\n    ')), Assign(targets=[Name(id='fisher_information', ctx=Store())], value=NameConstant(value=None)), Assign(targets=[Name(id='mlv', ctx=Store())], value=Attribute(value=Name(id='result', ctx=Load()), attr='mle', ctx=Load())), Assign(targets=[Name(id='m', ctx=Store())], value=Attribute(value=Name(id='result', ctx=Load()), attr='num_evaluation_qubits', ctx=Load())), Assign(targets=[Name(id='M', ctx=Store())], value=BinOp(left=Num(n=2), op=Pow(), right=Name(id='m', ctx=Load()))), If(test=Name(id='observed', ctx=Load()), body=[Assign(targets=[Name(id='a_i', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='asarray', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='result', ctx=Load()), attr='samples', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[])), Assign(targets=[Name(id='p_i', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='asarray', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='result', ctx=Load()), attr='samples', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[])), Assign(targets=[Name(id='fisher_information', ctx=Store())], value=Call(func=Name(id='sum', ctx=Load()), args=[GeneratorExp(elt=BinOp(left=Name(id='p', ctx=Load()), op=Mult(), right=BinOp(left=Call(func=Name(id='derivative_log_pdf_a', ctx=Load()), args=[Name(id='a', ctx=Load()), Name(id='mlv', ctx=Load()), Name(id='m', ctx=Load())], keywords=[]), op=Pow(), right=Num(n=2))), generators=[comprehension(target=Tuple(elts=[Name(id='p', ctx=Store()), Name(id='a', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='zip', ctx=Load()), args=[Name(id='p_i', ctx=Load()), Name(id='a_i', ctx=Load())], keywords=[]), ifs=[], is_async=0)])], keywords=[]))], orelse=[FunctionDef(name='integrand', args=arguments(args=[arg(arg='x', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Return(value=BinOp(left=BinOp(left=Call(func=Name(id='derivative_log_pdf_a', ctx=Load()), args=[Name(id='x', ctx=Load()), Name(id='mlv', ctx=Load()), Name(id='m', ctx=Load())], keywords=[]), op=Pow(), right=Num(n=2)), op=Mult(), right=Call(func=Name(id='pdf_a', ctx=Load()), args=[Name(id='x', ctx=Load()), Name(id='mlv', ctx=Load()), Name(id='m', ctx=Load())], keywords=[])))], decorator_list=[], returns=None), Assign(targets=[Name(id='grid', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[BinOp(left=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='arange', ctx=Load()), args=[BinOp(left=BinOp(left=Name(id='M', ctx=Load()), op=Div(), right=Num(n=2)), op=Add(), right=Num(n=1))], keywords=[])), op=Div(), right=Name(id='M', ctx=Load()))], keywords=[]), op=Pow(), right=Num(n=2))), Assign(targets=[Name(id='fisher_information', ctx=Store())], value=Call(func=Name(id='sum', ctx=Load()), args=[GeneratorExp(elt=Call(func=Name(id='integrand', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='grid', ctx=Load()), ifs=[], is_async=0)])], keywords=[]))]), Return(value=Name(id='fisher_information', ctx=Load()))], decorator_list=[], returns=Name(id='float', ctx=Load()))
FunctionDef(name='_fisher_confint', args=arguments(args=[arg(arg='result', annotation=Name(id='AmplitudeEstimationResult', ctx=Load())), arg(arg='alpha', annotation=Name(id='float', ctx=Load())), arg(arg='observed', annotation=Name(id='bool', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[NameConstant(value=False)]), body=[Expr(value=Str(s='Compute the Fisher information confidence interval for the MLE of the previous run.\n\n    Args:\n        result: An amplitude estimation result for which to compute the confidence interval.\n        alpha: Specifies the (1 - alpha) confidence level (0 < alpha < 1).\n        observed: If True, the observed Fisher information is used to construct the\n            confidence interval, otherwise the expected Fisher information.\n\n    Returns:\n        The Fisher information confidence interval.\n    ')), Assign(targets=[Name(id='std', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sqrt', ctx=Load()), args=[BinOp(left=Attribute(value=Name(id='result', ctx=Load()), attr='shots', ctx=Load()), op=Mult(), right=Call(func=Name(id='_compute_fisher_information', ctx=Load()), args=[Name(id='result', ctx=Load()), Name(id='observed', ctx=Load())], keywords=[]))], keywords=[])), Assign(targets=[Name(id='confint', ctx=Store())], value=BinOp(left=Attribute(value=Name(id='result', ctx=Load()), attr='mle', ctx=Load()), op=Add(), right=BinOp(left=BinOp(left=Call(func=Attribute(value=Name(id='norm', ctx=Load()), attr='ppf', ctx=Load()), args=[BinOp(left=Num(n=1), op=Sub(), right=BinOp(left=Name(id='alpha', ctx=Load()), op=Div(), right=Num(n=2)))], keywords=[]), op=Div(), right=Name(id='std', ctx=Load())), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='array', ctx=Load()), args=[List(elts=[UnaryOp(op=USub(), operand=Num(n=1)), Num(n=1)], ctx=Load())], keywords=[])))), Return(value=Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='post_processing', ctx=Load()), args=[Name(id='bound', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='bound', ctx=Store()), iter=Name(id='confint', ctx=Load()), ifs=[], is_async=0)])], keywords=[]))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='float', ctx=Load())), ctx=Load()))
FunctionDef(name='_likelihood_ratio_confint', args=arguments(args=[arg(arg='result', annotation=Name(id='AmplitudeEstimationResult', ctx=Load())), arg(arg='alpha', annotation=Name(id='float', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Compute the likelihood ratio confidence interval for the MLE of the previous run.\n\n    Args:\n        result: An amplitude estimation result for which to compute the confidence interval.\n        alpha: Specifies the (1 - alpha) confidence level (0 < alpha < 1).\n\n    Returns:\n        The likelihood ratio confidence interval.\n    ')), Assign(targets=[Name(id='m', ctx=Store())], value=Attribute(value=Name(id='result', ctx=Load()), attr='num_evaluation_qubits', ctx=Load())), Assign(targets=[Name(id='M', ctx=Store())], value=BinOp(left=Num(n=2), op=Pow(), right=Name(id='m', ctx=Load()))), Assign(targets=[Name(id='qae', ctx=Store())], value=Attribute(value=Name(id='result', ctx=Load()), attr='estimation', ctx=Load())), Assign(targets=[Name(id='y', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='round', ctx=Load()), args=[BinOp(left=BinOp(left=Name(id='M', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='arcsin', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sqrt', ctx=Load()), args=[Name(id='qae', ctx=Load())], keywords=[])], keywords=[])), op=Div(), right=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()))], keywords=[])], keywords=[])), If(test=Compare(left=Name(id='y', ctx=Load()), ops=[Eq()], comparators=[Num(n=0)]), body=[Assign(targets=[Name(id='right_of_qae', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[BinOp(left=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Mult(), right=BinOp(left=Name(id='y', ctx=Load()), op=Add(), right=Num(n=1))), op=Div(), right=Name(id='M', ctx=Load()))], keywords=[]), op=Pow(), right=Num(n=2))), Assign(targets=[Name(id='bubbles', ctx=Store())], value=List(elts=[Name(id='qae', ctx=Load()), Name(id='right_of_qae', ctx=Load())], ctx=Load()))], orelse=[If(test=Compare(left=Name(id='y', ctx=Load()), ops=[Eq()], comparators=[Call(func=Name(id='int', ctx=Load()), args=[BinOp(left=Name(id='M', ctx=Load()), op=Div(), right=Num(n=2))], keywords=[])]), body=[Assign(targets=[Name(id='left_of_qae', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[BinOp(left=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Mult(), right=BinOp(left=Name(id='y', ctx=Load()), op=Sub(), right=Num(n=1))), op=Div(), right=Name(id='M', ctx=Load()))], keywords=[]), op=Pow(), right=Num(n=2))), Assign(targets=[Name(id='bubbles', ctx=Store())], value=List(elts=[Name(id='left_of_qae', ctx=Load()), Name(id='qae', ctx=Load())], ctx=Load()))], orelse=[Assign(targets=[Name(id='left_of_qae', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[BinOp(left=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Mult(), right=BinOp(left=Name(id='y', ctx=Load()), op=Sub(), right=Num(n=1))), op=Div(), right=Name(id='M', ctx=Load()))], keywords=[]), op=Pow(), right=Num(n=2))), Assign(targets=[Name(id='right_of_qae', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[BinOp(left=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Mult(), right=BinOp(left=Name(id='y', ctx=Load()), op=Add(), right=Num(n=1))), op=Div(), right=Name(id='M', ctx=Load()))], keywords=[]), op=Pow(), right=Num(n=2))), Assign(targets=[Name(id='bubbles', ctx=Store())], value=List(elts=[Name(id='left_of_qae', ctx=Load()), Name(id='qae', ctx=Load()), Name(id='right_of_qae', ctx=Load())], ctx=Load()))])]), Assign(targets=[Name(id='a_i', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='asarray', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='result', ctx=Load()), attr='samples', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[])), Assign(targets=[Name(id='p_i', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='asarray', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='result', ctx=Load()), attr='samples', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[])), FunctionDef(name='loglikelihood', args=arguments(args=[arg(arg='a', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sum', ctx=Load()), args=[BinOp(left=BinOp(left=Attribute(value=Name(id='result', ctx=Load()), attr='shots', ctx=Load()), op=Mult(), right=Name(id='p_i', ctx=Load())), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='log', ctx=Load()), args=[Call(func=Name(id='pdf_a', ctx=Load()), args=[Name(id='a_i', ctx=Load()), Name(id='a', ctx=Load()), Name(id='m', ctx=Load())], keywords=[])], keywords=[]))], keywords=[]))], decorator_list=[], returns=None), Assign(targets=[Name(id='loglik_mle', ctx=Store())], value=Call(func=Name(id='loglikelihood', ctx=Load()), args=[Attribute(value=Name(id='result', ctx=Load()), attr='mle', ctx=Load())], keywords=[])), Assign(targets=[Name(id='thres', ctx=Store())], value=BinOp(left=Name(id='loglik_mle', ctx=Load()), op=Sub(), right=BinOp(left=Call(func=Attribute(value=Name(id='chi2', ctx=Load()), attr='ppf', ctx=Load()), args=[BinOp(left=Num(n=1), op=Sub(), right=Name(id='alpha', ctx=Load()))], keywords=[keyword(arg='df', value=Num(n=1))]), op=Div(), right=Num(n=2)))), FunctionDef(name='cut', args=arguments(args=[arg(arg='x', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Return(value=BinOp(left=Call(func=Name(id='loglikelihood', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), op=Sub(), right=Name(id='thres', ctx=Load())))], decorator_list=[], returns=None), Assign(targets=[Name(id='lower', ctx=Store()), Name(id='upper', ctx=Store())], value=Attribute(value=Name(id='result', ctx=Load()), attr='mle', ctx=Load())), For(target=Tuple(elts=[Name(id='a', ctx=Store()), Name(id='b', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='zip', ctx=Load()), args=[Subscript(value=Name(id='bubbles', ctx=Load()), slice=Slice(lower=None, upper=UnaryOp(op=USub(), operand=Num(n=1)), step=None), ctx=Load()), Subscript(value=Name(id='bubbles', ctx=Load()), slice=Slice(lower=Num(n=1), upper=None, step=None), ctx=Load())], keywords=[]), body=[Assign(targets=[Tuple(elts=[Name(id='locmax', ctx=Store()), Name(id='val', ctx=Store())], ctx=Store())], value=Call(func=Name(id='bisect_max', ctx=Load()), args=[Name(id='loglikelihood', ctx=Load()), Name(id='a', ctx=Load()), Name(id='b', ctx=Load())], keywords=[keyword(arg='retval', value=NameConstant(value=True))])), If(test=Compare(left=Name(id='val', ctx=Load()), ops=[GtE()], comparators=[Name(id='thres', ctx=Load())]), body=[If(test=Compare(left=BinOp(left=Call(func=Name(id='cut', ctx=Load()), args=[Name(id='a', ctx=Load())], keywords=[]), op=Mult(), right=Call(func=Name(id='cut', ctx=Load()), args=[Name(id='locmax', ctx=Load())], keywords=[])), ops=[Lt()], comparators=[Num(n=0)]), body=[Assign(targets=[Name(id='left', ctx=Store())], value=Call(func=Name(id='bisect', ctx=Load()), args=[Name(id='cut', ctx=Load()), Name(id='a', ctx=Load()), Name(id='locmax', ctx=Load())], keywords=[])), Assign(targets=[Name(id='lower', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='minimum', ctx=Load()), args=[Name(id='lower', ctx=Load()), Name(id='left', ctx=Load())], keywords=[]))], orelse=[]), If(test=Compare(left=BinOp(left=Call(func=Name(id='cut', ctx=Load()), args=[Name(id='locmax', ctx=Load())], keywords=[]), op=Mult(), right=Call(func=Name(id='cut', ctx=Load()), args=[Name(id='b', ctx=Load())], keywords=[])), ops=[Lt()], comparators=[Num(n=0)]), body=[Assign(targets=[Name(id='right', ctx=Store())], value=Call(func=Name(id='bisect', ctx=Load()), args=[Name(id='cut', ctx=Load()), Name(id='locmax', ctx=Load()), Name(id='b', ctx=Load())], keywords=[])), Assign(targets=[Name(id='upper', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='maximum', ctx=Load()), args=[Name(id='upper', ctx=Load()), Name(id='right', ctx=Load())], keywords=[]))], orelse=[])], orelse=[])], orelse=[]), Assign(targets=[Name(id='confint', ctx=Store())], value=List(elts=[Name(id='lower', ctx=Load()), Name(id='upper', ctx=Load())], ctx=Load())), Return(value=Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='post_processing', ctx=Load()), args=[Name(id='bound', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='bound', ctx=Store()), iter=Name(id='confint', ctx=Load()), ifs=[], is_async=0)])], keywords=[]))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='float', ctx=Load())), ctx=Load()))
Str(s='The Quantum Phase Estimation-based Amplitude Estimation algorithm.')
alias(name='Optional', asname=None)
alias(name='Union', asname=None)
alias(name='List', asname=None)
alias(name='Tuple', asname=None)
alias(name='Dict', asname=None)
alias(name='OrderedDict', asname=None)
alias(name='numpy', asname='np')
alias(name='chi2', asname=None)
alias(name='norm', asname=None)
alias(name='bisect', asname=None)
alias(name='QuantumCircuit', asname=None)
alias(name='ClassicalRegister', asname=None)
alias(name='Backend', asname=None)
alias(name='QuantumInstance', asname=None)
alias(name='AmplitudeEstimator', asname=None)
alias(name='AmplitudeEstimatorResult', asname=None)
alias(name='pdf_a', asname=None)
alias(name='derivative_log_pdf_a', asname=None)
alias(name='bisect_max', asname=None)
alias(name='EstimationProblem', asname=None)
Name(id='AmplitudeEstimator', ctx=Load())
Expr(value=Str(s='The Quantum Phase Estimation-based Amplitude Estimation algorithm.\n\n    This class implements the original Quantum Amplitude Estimation (QAE) algorithm, introduced by\n    [1]. This canonical version uses quantum phase estimation along with a set of :math:`m`\n    additional evaluation qubits to find an estimate :math:`\\tilde{a}`, that is restricted to the\n    grid\n\n    .. math::\n\n        \\tilde{a} \\in \\{\\sin^2(\\pi  y / 2^m) : y = 0, ..., 2^{m-1}\\}\n\n    More evaluation qubits produce a finer sampling grid, therefore the accuracy of the algorithm\n    increases with :math:`m`.\n\n    Using a maximum likelihood post processing, this grid constraint can be circumvented.\n    This improved estimator is implemented as well, see [2] Appendix A for more detail.\n\n    References:\n        [1]: Brassard, G., Hoyer, P., Mosca, M., & Tapp, A. (2000).\n             Quantum Amplitude Amplification and Estimation.\n             `arXiv:quant-ph/0005055 <http://arxiv.org/abs/quant-ph/0005055>`_.\n        [2]: Grinko, D., Gacon, J., Zoufal, C., & Woerner, S. (2019).\n             Iterative Quantum Amplitude Estimation.\n             `arXiv:1912.05559 <https://arxiv.org/abs/1912.05559>`_.\n    '))
FunctionDef(name='__init__', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='num_eval_qubits', annotation=Name(id='int', ctx=Load())), arg(arg='phase_estimation_circuit', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Name(id='QuantumCircuit', ctx=Load())), ctx=Load())), arg(arg='iqft', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Name(id='QuantumCircuit', ctx=Load())), ctx=Load())), arg(arg='quantum_instance', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='QuantumInstance', ctx=Load()), Name(id='Backend', ctx=Load())], ctx=Load())), ctx=Load())), ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[NameConstant(value=None), NameConstant(value=None), NameConstant(value=None)]), body=[Expr(value=Str(s='\n        Args:\n            num_eval_qubits: The number of evaluation qubits.\n            phase_estimation_circuit: The phase estimation circuit used to run the algorithm.\n                Defaults to the standard phase estimation circuit from the circuit library,\n                `qiskit.circuit.library.PhaseEstimation` when None.\n            iqft: The inverse quantum Fourier transform component, defaults to using a standard\n                implementation from `qiskit.circuit.library.QFT` when None.\n            quantum_instance: The backend (or `QuantumInstance`) to execute the circuits on.\n\n        Raises:\n            ValueError: If the number of evaluation qubits is smaller than 1.\n        ')), If(test=Compare(left=Name(id='num_eval_qubits', ctx=Load()), ops=[Lt()], comparators=[Num(n=1)]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Str(s='The number of evaluation qubits must at least be 1.')], keywords=[]), cause=None)], orelse=[]), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='quantum_instance', ctx=Store())], value=Name(id='quantum_instance', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Store())], value=Name(id='num_eval_qubits', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_M', ctx=Store())], value=BinOp(left=Num(n=2), op=Pow(), right=Name(id='num_eval_qubits', ctx=Load()))), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_iqft', ctx=Store())], value=Name(id='iqft', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_pec', ctx=Store())], value=Name(id='phase_estimation_circuit', ctx=Load()))], decorator_list=[], returns=NameConstant(value=None))
FunctionDef(name='quantum_instance', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Get the quantum instance.\n\n        Returns:\n            The quantum instance used to run this algorithm.\n        ')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Name(id='QuantumInstance', ctx=Load())), ctx=Load()))
FunctionDef(name='quantum_instance', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='quantum_instance', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='QuantumInstance', ctx=Load()), Name(id='Backend', ctx=Load())], ctx=Load())), ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Set quantum instance.\n\n        Args:\n            quantum_instance: The quantum instance used to run this algorithm.\n        ')), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='quantum_instance', ctx=Load()), Name(id='Backend', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='quantum_instance', ctx=Store())], value=Call(func=Name(id='QuantumInstance', ctx=Load()), args=[Name(id='quantum_instance', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Store())], value=Name(id='quantum_instance', ctx=Load()))], decorator_list=[Attribute(value=Name(id='quantum_instance', ctx=Load()), attr='setter', ctx=Load())], returns=NameConstant(value=None))
FunctionDef(name='construct_circuit', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='estimation_problem', annotation=Name(id='EstimationProblem', ctx=Load())), arg(arg='measurement', annotation=Name(id='bool', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[NameConstant(value=False)]), body=[Expr(value=Str(s='Construct the Amplitude Estimation quantum circuit.\n\n        Args:\n            estimation_problem: The estimation problem for which to construct the QAE circuit.\n            measurement: Boolean flag to indicate if measurements should be included in the circuit.\n\n        Returns:\n            The QuantumCircuit object for the constructed circuit.\n        ')), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_pec', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=[Assign(targets=[Name(id='pec', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_pec', ctx=Load()))], orelse=[ImportFrom(module='qiskit.circuit.library', names=[alias(name='PhaseEstimation', asname=None)], level=0), Assign(targets=[Name(id='pec', ctx=Store())], value=Call(func=Name(id='PhaseEstimation', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Load()), Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='grover_operator', ctx=Load())], keywords=[keyword(arg='iqft', value=Attribute(value=Name(id='self', ctx=Load()), attr='_iqft', ctx=Load()))]))]), Assign(targets=[Name(id='circuit', ctx=Store())], value=Call(func=Name(id='QuantumCircuit', ctx=Load()), args=[Starred(value=Attribute(value=Name(id='pec', ctx=Load()), attr='qregs', ctx=Load()), ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='circuit', ctx=Load()), attr='compose', ctx=Load()), args=[Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='state_preparation', ctx=Load()), Call(func=Name(id='list', ctx=Load()), args=[Call(func=Name(id='range', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Load()), Attribute(value=Name(id='circuit', ctx=Load()), attr='num_qubits', ctx=Load())], keywords=[])], keywords=[])], keywords=[keyword(arg='inplace', value=NameConstant(value=True))])), Expr(value=Call(func=Attribute(value=Name(id='circuit', ctx=Load()), attr='compose', ctx=Load()), args=[Name(id='pec', ctx=Load())], keywords=[keyword(arg='inplace', value=NameConstant(value=True))])), If(test=Name(id='measurement', ctx=Load()), body=[Assign(targets=[Name(id='cr', ctx=Store())], value=Call(func=Name(id='ClassicalRegister', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='circuit', ctx=Load()), attr='add_register', ctx=Load()), args=[Name(id='cr', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='circuit', ctx=Load()), attr='measure', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Name(id='range', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Load())], keywords=[])], keywords=[]), Call(func=Name(id='list', ctx=Load()), args=[Call(func=Name(id='range', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Load())], keywords=[])], keywords=[])], keywords=[]))], orelse=[]), Return(value=Name(id='circuit', ctx=Load()))], decorator_list=[], returns=Name(id='QuantumCircuit', ctx=Load()))
FunctionDef(name='evaluate_measurements', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='circuit_results', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Subscript(value=Name(id='Dict', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load())), ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())], ctx=Load())), ctx=Load())), arg(arg='threshold', annotation=Name(id='float', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[Num(n=1e-06)]), body=[Expr(value=Str(s='Evaluate the results from the circuit simulation.\n\n        Given the probabilities from statevector simulation of the QAE circuit, compute the\n        probabilities that the measurements y/gridpoints a are the best estimate.\n\n        Args:\n            circuit_results: The circuit result from the QAE circuit. Can be either a counts dict\n                or a statevector.\n            threshold: Measurements with probabilities below the threshold are discarded.\n\n        Returns:\n            Dictionaries containing the a gridpoints with respective probabilities and\n                y measurements with respective probabilities, in this order.\n        ')), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='circuit_results', ctx=Load()), Name(id='dict', ctx=Load())], keywords=[]), body=[Assign(targets=[Tuple(elts=[Name(id='samples', ctx=Store()), Name(id='measurements', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_evaluate_count_results', ctx=Load()), args=[Name(id='circuit_results', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Tuple(elts=[Name(id='samples', ctx=Store()), Name(id='measurements', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_evaluate_statevector_results', ctx=Load()), args=[Name(id='circuit_results', ctx=Load())], keywords=[]))]), Assign(targets=[Name(id='samples', ctx=Store())], value=DictComp(key=Name(id='a', ctx=Load()), value=Name(id='p', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='a', ctx=Store()), Name(id='p', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='samples', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), ifs=[Compare(left=Name(id='p', ctx=Load()), ops=[Gt()], comparators=[Name(id='threshold', ctx=Load())])], is_async=0)])), Assign(targets=[Name(id='measurements', ctx=Store())], value=DictComp(key=Name(id='y', ctx=Load()), value=Name(id='p', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='y', ctx=Store()), Name(id='p', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='measurements', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), ifs=[Compare(left=Name(id='p', ctx=Load()), ops=[Gt()], comparators=[Name(id='threshold', ctx=Load())])], is_async=0)])), Return(value=Tuple(elts=[Name(id='samples', ctx=Load()), Name(id='measurements', ctx=Load())], ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Index(value=Tuple(elts=[Subscript(value=Name(id='Dict', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load())), ctx=Load()), Subscript(value=Name(id='Dict', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='float', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load())), ctx=Load())], ctx=Load())), ctx=Load()))
FunctionDef(name='_evaluate_statevector_results', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='statevector', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Assign(targets=[Name(id='measurements', ctx=Store())], value=Call(func=Name(id='OrderedDict', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='num_qubits', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='log2', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='statevector', ctx=Load())], keywords=[])], keywords=[])], keywords=[])), For(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='amplitude', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='statevector', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='b', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Subscript(value=Call(func=Name(id='bin', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]), slice=Slice(lower=Num(n=2), upper=None, step=None), ctx=Load()), attr='zfill', ctx=Load()), args=[Name(id='num_qubits', ctx=Load())], keywords=[]), slice=Slice(lower=None, upper=None, step=UnaryOp(op=USub(), operand=Num(n=1))), ctx=Load())), Assign(targets=[Name(id='y', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='b', ctx=Load()), slice=Slice(lower=None, upper=Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Load()), step=None), ctx=Load()), Num(n=2)], keywords=[])), Assign(targets=[Subscript(value=Name(id='measurements', ctx=Load()), slice=Index(value=Name(id='y', ctx=Load())), ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='measurements', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='y', ctx=Load()), Num(n=0)], keywords=[]), op=Add(), right=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='abs', ctx=Load()), args=[Name(id='amplitude', ctx=Load())], keywords=[]), op=Pow(), right=Num(n=2))))], orelse=[]), Assign(targets=[Name(id='samples', ctx=Store())], value=Call(func=Name(id='OrderedDict', ctx=Load()), args=[], keywords=[])), For(target=Tuple(elts=[Name(id='y', ctx=Store()), Name(id='probability', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='measurements', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[If(test=Compare(left=Name(id='y', ctx=Load()), ops=[GtE()], comparators=[Call(func=Name(id='int', ctx=Load()), args=[BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='_M', ctx=Load()), op=Div(), right=Num(n=2))], keywords=[])]), body=[Assign(targets=[Name(id='y', ctx=Store())], value=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='_M', ctx=Load()), op=Sub(), right=Name(id='y', ctx=Load())))], orelse=[]), Assign(targets=[Name(id='a', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='round', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='power', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[BinOp(left=BinOp(left=Name(id='y', ctx=Load()), op=Mult(), right=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load())), op=Div(), right=BinOp(left=Num(n=2), op=Pow(), right=Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Load())))], keywords=[]), Num(n=2)], keywords=[])], keywords=[keyword(arg='decimals', value=Num(n=7))])), Assign(targets=[Subscript(value=Name(id='samples', ctx=Load()), slice=Index(value=Name(id='a', ctx=Load())), ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='samples', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='a', ctx=Load()), Num(n=0)], keywords=[]), op=Add(), right=Name(id='probability', ctx=Load())))], orelse=[]), Return(value=Tuple(elts=[Name(id='samples', ctx=Load()), Name(id='measurements', ctx=Load())], ctx=Load()))], decorator_list=[], returns=None)
FunctionDef(name='_evaluate_count_results', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='counts', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Assign(targets=[Name(id='measurements', ctx=Store())], value=Call(func=Name(id='OrderedDict', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='samples', ctx=Store())], value=Call(func=Name(id='OrderedDict', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='shots', ctx=Store())], value=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()), attr='_run_config', ctx=Load()), attr='shots', ctx=Load())), For(target=Tuple(elts=[Name(id='state', ctx=Store()), Name(id='count', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='counts', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Name(id='y', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Subscript(value=Call(func=Attribute(value=Name(id='state', ctx=Load()), attr='replace', ctx=Load()), args=[Str(s=' '), Str(s='')], keywords=[]), slice=Slice(lower=None, upper=Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Load()), step=None), ctx=Load()), slice=Slice(lower=None, upper=None, step=UnaryOp(op=USub(), operand=Num(n=1))), ctx=Load()), Num(n=2)], keywords=[])), Assign(targets=[Name(id='probability', ctx=Store())], value=BinOp(left=Name(id='count', ctx=Load()), op=Div(), right=Name(id='shots', ctx=Load()))), Assign(targets=[Subscript(value=Name(id='measurements', ctx=Load()), slice=Index(value=Name(id='y', ctx=Load())), ctx=Store())], value=Name(id='probability', ctx=Load())), Assign(targets=[Name(id='a', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='round', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='power', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[BinOp(left=BinOp(left=Name(id='y', ctx=Load()), op=Mult(), right=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load())), op=Div(), right=BinOp(left=Num(n=2), op=Pow(), right=Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Load())))], keywords=[]), Num(n=2)], keywords=[])], keywords=[keyword(arg='decimals', value=Num(n=7))])), Assign(targets=[Subscript(value=Name(id='samples', ctx=Load()), slice=Index(value=Name(id='a', ctx=Load())), ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='samples', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='a', ctx=Load()), Num(n=0.0)], keywords=[]), op=Add(), right=Name(id='probability', ctx=Load())))], orelse=[]), Return(value=Tuple(elts=[Name(id='samples', ctx=Load()), Name(id='measurements', ctx=Load())], ctx=Load()))], decorator_list=[], returns=None)
FunctionDef(name='compute_mle', args=arguments(args=[arg(arg='result', annotation=Str(s='AmplitudeEstimationResult')), arg(arg='apply_post_processing', annotation=Name(id='bool', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[NameConstant(value=False)]), body=[Expr(value=Str(s='Compute the Maximum Likelihood Estimator (MLE).\n\n        Args:\n            result: An amplitude estimation result object.\n            apply_post_processing: If True, apply the post processing to the MLE before returning\n                it.\n\n        Returns:\n            The MLE for the provided result object.\n        ')), Assign(targets=[Name(id='m', ctx=Store())], value=Attribute(value=Name(id='result', ctx=Load()), attr='num_evaluation_qubits', ctx=Load())), Assign(targets=[Name(id='M', ctx=Store())], value=BinOp(left=Num(n=2), op=Pow(), right=Name(id='m', ctx=Load()))), Assign(targets=[Name(id='qae', ctx=Store())], value=Attribute(value=Name(id='result', ctx=Load()), attr='estimation', ctx=Load())), Assign(targets=[Name(id='a_i', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='asarray', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='result', ctx=Load()), attr='samples', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[])), Assign(targets=[Name(id='p_i', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='asarray', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='result', ctx=Load()), attr='samples', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[])), FunctionDef(name='loglikelihood', args=arguments(args=[arg(arg='a', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sum', ctx=Load()), args=[BinOp(left=BinOp(left=Attribute(value=Name(id='result', ctx=Load()), attr='shots', ctx=Load()), op=Mult(), right=Name(id='p_i', ctx=Load())), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='log', ctx=Load()), args=[Call(func=Name(id='pdf_a', ctx=Load()), args=[Name(id='a_i', ctx=Load()), Name(id='a', ctx=Load()), Name(id='m', ctx=Load())], keywords=[])], keywords=[]))], keywords=[]))], decorator_list=[], returns=None), Assign(targets=[Name(id='y', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='round', ctx=Load()), args=[BinOp(left=BinOp(left=Name(id='M', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='arcsin', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sqrt', ctx=Load()), args=[Name(id='qae', ctx=Load())], keywords=[])], keywords=[])), op=Div(), right=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()))], keywords=[])], keywords=[])), If(test=Compare(left=Name(id='y', ctx=Load()), ops=[Eq()], comparators=[Num(n=0)]), body=[Assign(targets=[Name(id='right_of_qae', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[BinOp(left=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Mult(), right=BinOp(left=Name(id='y', ctx=Load()), op=Add(), right=Num(n=1))), op=Div(), right=Name(id='M', ctx=Load()))], keywords=[]), op=Pow(), right=Num(n=2))), Assign(targets=[Name(id='bubbles', ctx=Store())], value=List(elts=[Name(id='qae', ctx=Load()), Name(id='right_of_qae', ctx=Load())], ctx=Load()))], orelse=[If(test=Compare(left=Name(id='y', ctx=Load()), ops=[Eq()], comparators=[Call(func=Name(id='int', ctx=Load()), args=[BinOp(left=Name(id='M', ctx=Load()), op=Div(), right=Num(n=2))], keywords=[])]), body=[Assign(targets=[Name(id='left_of_qae', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[BinOp(left=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Mult(), right=BinOp(left=Name(id='y', ctx=Load()), op=Sub(), right=Num(n=1))), op=Div(), right=Name(id='M', ctx=Load()))], keywords=[]), op=Pow(), right=Num(n=2))), Assign(targets=[Name(id='bubbles', ctx=Store())], value=List(elts=[Name(id='left_of_qae', ctx=Load()), Name(id='qae', ctx=Load())], ctx=Load()))], orelse=[Assign(targets=[Name(id='left_of_qae', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[BinOp(left=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Mult(), right=BinOp(left=Name(id='y', ctx=Load()), op=Sub(), right=Num(n=1))), op=Div(), right=Name(id='M', ctx=Load()))], keywords=[]), op=Pow(), right=Num(n=2))), Assign(targets=[Name(id='right_of_qae', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[BinOp(left=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Mult(), right=BinOp(left=Name(id='y', ctx=Load()), op=Add(), right=Num(n=1))), op=Div(), right=Name(id='M', ctx=Load()))], keywords=[]), op=Pow(), right=Num(n=2))), Assign(targets=[Name(id='bubbles', ctx=Store())], value=List(elts=[Name(id='left_of_qae', ctx=Load()), Name(id='qae', ctx=Load()), Name(id='right_of_qae', ctx=Load())], ctx=Load()))])]), Assign(targets=[Name(id='a_opt', ctx=Store())], value=Name(id='qae', ctx=Load())), Assign(targets=[Name(id='loglik_opt', ctx=Store())], value=Call(func=Name(id='loglikelihood', ctx=Load()), args=[Name(id='a_opt', ctx=Load())], keywords=[])), For(target=Tuple(elts=[Name(id='a', ctx=Store()), Name(id='b', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='zip', ctx=Load()), args=[Subscript(value=Name(id='bubbles', ctx=Load()), slice=Slice(lower=None, upper=UnaryOp(op=USub(), operand=Num(n=1)), step=None), ctx=Load()), Subscript(value=Name(id='bubbles', ctx=Load()), slice=Slice(lower=Num(n=1), upper=None, step=None), ctx=Load())], keywords=[]), body=[Assign(targets=[Tuple(elts=[Name(id='locmax', ctx=Store()), Name(id='val', ctx=Store())], ctx=Store())], value=Call(func=Name(id='bisect_max', ctx=Load()), args=[Name(id='loglikelihood', ctx=Load()), Name(id='a', ctx=Load()), Name(id='b', ctx=Load())], keywords=[keyword(arg='retval', value=NameConstant(value=True))])), If(test=Compare(left=Name(id='val', ctx=Load()), ops=[Gt()], comparators=[Name(id='loglik_opt', ctx=Load())]), body=[Assign(targets=[Name(id='a_opt', ctx=Store())], value=Name(id='locmax', ctx=Load())), Assign(targets=[Name(id='loglik_opt', ctx=Store())], value=Name(id='val', ctx=Load()))], orelse=[])], orelse=[]), If(test=Name(id='apply_post_processing', ctx=Load()), body=[Return(value=Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='post_processing', ctx=Load()), args=[Name(id='a_opt', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='a_opt', ctx=Load()))], decorator_list=[Name(id='staticmethod', ctx=Load())], returns=Name(id='float', ctx=Load()))
FunctionDef(name='estimate', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='estimation_problem', annotation=Name(id='EstimationProblem', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Run the amplitude estimation algorithm on provided estimation problem.\n\n        Args:\n            estimation_problem: The estimation problem.\n\n        Returns:\n            An amplitude estimation results object.\n\n        Raises:\n            ValueError: If `state_preparation` or `objective_qubits` are not set in the\n                `estimation_problem`.\n        ')), If(test=Compare(left=Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='state_preparation', ctx=Load()), ops=[Is()], comparators=[NameConstant(value=None)]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Str(s='The state_preparation property of the estimation problem must be set.')], keywords=[]), cause=None)], orelse=[]), If(test=Compare(left=Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='objective_qubits', ctx=Load()), ops=[Is()], comparators=[NameConstant(value=None)]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Str(s='The objective_qubits property of the estimation problem must be set.')], keywords=[]), cause=None)], orelse=[]), Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Name(id='AmplitudeEstimationResult', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='num_evaluation_qubits', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Load())), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='post_processing', ctx=Store())], value=Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='post_processing', ctx=Load())), If(test=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()), attr='is_statevector', ctx=Load()), body=[Assign(targets=[Name(id='circuit', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='construct_circuit', ctx=Load()), args=[Name(id='estimation_problem', ctx=Load())], keywords=[keyword(arg='measurement', value=NameConstant(value=False))])), Assign(targets=[Name(id='statevector', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()), attr='execute', ctx=Load()), args=[Name(id='circuit', ctx=Load())], keywords=[]), attr='get_statevector', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='circuit_results', ctx=Store())], value=Name(id='statevector', ctx=Load())), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='shots', ctx=Store())], value=Num(n=1))], orelse=[Assign(targets=[Name(id='circuit', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='construct_circuit', ctx=Load()), args=[Name(id='estimation_problem', ctx=Load())], keywords=[keyword(arg='measurement', value=NameConstant(value=True))])), Assign(targets=[Name(id='counts', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()), attr='execute', ctx=Load()), args=[Name(id='circuit', ctx=Load())], keywords=[]), attr='get_counts', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='circuit_results', ctx=Store())], value=Name(id='counts', ctx=Load())), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='shots', ctx=Store())], value=Call(func=Name(id='sum', ctx=Load()), args=[Call(func=Attribute(value=Name(id='counts', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[]))]), Assign(targets=[Tuple(elts=[Name(id='samples', ctx=Store()), Name(id='measurements', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='evaluate_measurements', ctx=Load()), args=[Attribute(value=Name(id='result', ctx=Load()), attr='circuit_results', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='samples', ctx=Store())], value=Name(id='samples', ctx=Load())), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='samples_processed', ctx=Store())], value=DictComp(key=Call(func=Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='post_processing', ctx=Load()), args=[Name(id='a', ctx=Load())], keywords=[]), value=Name(id='p', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='a', ctx=Store()), Name(id='p', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='samples', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), ifs=[], is_async=0)])), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='measurements', ctx=Store())], value=Name(id='measurements', ctx=Load())), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='max_probability', ctx=Store())], value=Num(n=0)), For(target=Tuple(elts=[Name(id='amplitude', ctx=Store()), Tuple(elts=[Name(id='mapped', ctx=Store()), Name(id='prob', ctx=Store())], ctx=Store())], ctx=Store()), iter=Call(func=Name(id='zip', ctx=Load()), args=[Call(func=Attribute(value=Name(id='samples', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Attribute(value=Name(id='result', ctx=Load()), attr='samples_processed', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='prob', ctx=Load()), ops=[Gt()], comparators=[Attribute(value=Name(id='result', ctx=Load()), attr='max_probability', ctx=Load())]), body=[Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='max_probability', ctx=Store())], value=Name(id='prob', ctx=Load())), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='estimation', ctx=Store())], value=Name(id='amplitude', ctx=Load())), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='estimation_processed', ctx=Store())], value=Name(id='mapped', ctx=Load()))], orelse=[])], orelse=[]), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='num_oracle_queries', ctx=Store())], value=BinOp(left=Attribute(value=Name(id='result', ctx=Load()), attr='shots', ctx=Load()), op=Mult(), right=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='_M', ctx=Load()), op=Sub(), right=Num(n=1)))), Assign(targets=[Name(id='mle', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='compute_mle', ctx=Load()), args=[Name(id='result', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='mle', ctx=Store())], value=Name(id='mle', ctx=Load())), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='mle_processed', ctx=Store())], value=Call(func=Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='post_processing', ctx=Load()), args=[Name(id='mle', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='confidence_interval', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='compute_confidence_interval', ctx=Load()), args=[Name(id='result', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='confidence_interval_processed', ctx=Store())], value=Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='post_processing', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='value', ctx=Store()), iter=Attribute(value=Name(id='result', ctx=Load()), attr='confidence_interval', ctx=Load()), ifs=[], is_async=0)])], keywords=[])), Return(value=Name(id='result', ctx=Load()))], decorator_list=[], returns=Str(s='AmplitudeEstimationResult'))
FunctionDef(name='compute_confidence_interval', args=arguments(args=[arg(arg='result', annotation=Str(s='AmplitudeEstimationResult')), arg(arg='alpha', annotation=Name(id='float', ctx=Load())), arg(arg='kind', annotation=Name(id='str', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[Num(n=0.05), Str(s='likelihood_ratio')]), body=[Expr(value=Str(s="Compute the (1 - alpha) confidence interval.\n\n        Args:\n            result: An amplitude estimation result for which to compute the confidence interval.\n            alpha: Confidence level: compute the (1 - alpha) confidence interval.\n            kind: The method to compute the confidence interval, can be 'fisher', 'observed_fisher'\n                or 'likelihood_ratio' (default)\n\n        Returns:\n            The (1 - alpha) confidence interval of the specified kind.\n\n        Raises:\n            AquaError: If 'mle' is not in self._ret.keys() (i.e. `run` was not called yet).\n            NotImplementedError: If the confidence interval method `kind` is not implemented.\n        ")), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Attribute(value=Name(id='result', ctx=Load()), attr='circuit_results', ctx=Load()), Tuple(elts=[Name(id='list', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())], ctx=Load())], keywords=[]), body=[Return(value=Tuple(elts=[Attribute(value=Name(id='result', ctx=Load()), attr='mle', ctx=Load()), Attribute(value=Name(id='result', ctx=Load()), attr='mle', ctx=Load())], ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='kind', ctx=Load()), ops=[In()], comparators=[List(elts=[Str(s='likelihood_ratio'), Str(s='lr')], ctx=Load())]), body=[Return(value=Call(func=Name(id='_likelihood_ratio_confint', ctx=Load()), args=[Name(id='result', ctx=Load()), Name(id='alpha', ctx=Load())], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='kind', ctx=Load()), ops=[In()], comparators=[List(elts=[Str(s='fisher'), Str(s='fi')], ctx=Load())]), body=[Return(value=Call(func=Name(id='_fisher_confint', ctx=Load()), args=[Name(id='result', ctx=Load()), Name(id='alpha', ctx=Load())], keywords=[keyword(arg='observed', value=NameConstant(value=False))]))], orelse=[]), If(test=Compare(left=Name(id='kind', ctx=Load()), ops=[In()], comparators=[List(elts=[Str(s='observed_fisher'), Str(s='observed_information'), Str(s='oi')], ctx=Load())]), body=[Return(value=Call(func=Name(id='_fisher_confint', ctx=Load()), args=[Name(id='result', ctx=Load()), Name(id='alpha', ctx=Load())], keywords=[keyword(arg='observed', value=NameConstant(value=True))]))], orelse=[]), Raise(exc=Call(func=Name(id='NotImplementedError', ctx=Load()), args=[JoinedStr(values=[Str(s='CI `'), FormattedValue(value=Name(id='kind', ctx=Load()), conversion=-1, format_spec=None), Str(s='` is not implemented.')])], keywords=[]), cause=None)], decorator_list=[Name(id='staticmethod', ctx=Load())], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='float', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load())), ctx=Load()))
Name(id='AmplitudeEstimatorResult', ctx=Load())
Expr(value=Str(s='The ``AmplitudeEstimation`` result object.'))
FunctionDef(name='__init__', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_num_evaluation_qubits', ctx=Store())], value=NameConstant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_mle', ctx=Store())], value=NameConstant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_mle_processed', ctx=Store())], value=NameConstant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_samples', ctx=Store())], value=NameConstant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_samples_processed', ctx=Store())], value=NameConstant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_y_measurements', ctx=Store())], value=NameConstant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_max_probability', ctx=Store())], value=NameConstant(value=None))], decorator_list=[], returns=NameConstant(value=None))
FunctionDef(name='num_evaluation_qubits', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Returns the number of evaluation qubits.')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_num_evaluation_qubits', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='int', ctx=Load()))
FunctionDef(name='num_evaluation_qubits', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='num_evaluation_qubits', annotation=Name(id='int', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Set the number of evaluation qubits.')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_num_evaluation_qubits', ctx=Store())], value=Name(id='num_evaluation_qubits', ctx=Load()))], decorator_list=[Attribute(value=Name(id='num_evaluation_qubits', ctx=Load()), attr='setter', ctx=Load())], returns=NameConstant(value=None))
FunctionDef(name='mle_processed', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Return the post-processed MLE for the amplitude.')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_mle_processed', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='float', ctx=Load()))
FunctionDef(name='mle_processed', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='value', annotation=Name(id='float', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Set the post-processed MLE for the amplitude.')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_mle_processed', ctx=Store())], value=Name(id='value', ctx=Load()))], decorator_list=[Attribute(value=Name(id='mle_processed', ctx=Load()), attr='setter', ctx=Load())], returns=NameConstant(value=None))
FunctionDef(name='samples_processed', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Return the post-processed measurement samples with their measurement probability.')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_samples_processed', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='Dict', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='float', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load())), ctx=Load()))
FunctionDef(name='samples_processed', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='value', annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='float', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load())), ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Set the post-processed measurement samples.')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_samples_processed', ctx=Store())], value=Name(id='value', ctx=Load()))], decorator_list=[Attribute(value=Name(id='samples_processed', ctx=Load()), attr='setter', ctx=Load())], returns=NameConstant(value=None))
FunctionDef(name='mle', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Return the MLE for the amplitude, in $[0, 1]$.')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_mle', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='float', ctx=Load()))
FunctionDef(name='mle', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='value', annotation=Name(id='float', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Set the MLE for the amplitude, in $[0, 1]$.')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_mle', ctx=Store())], value=Name(id='value', ctx=Load()))], decorator_list=[Attribute(value=Name(id='mle', ctx=Load()), attr='setter', ctx=Load())], returns=NameConstant(value=None))
FunctionDef(name='samples', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Return the measurement samples with their measurement probability.')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_samples', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='Dict', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='float', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load())), ctx=Load()))
FunctionDef(name='samples', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='value', annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='float', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load())), ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Set the measurement samples with their measurement probability.')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_samples', ctx=Store())], value=Name(id='value', ctx=Load()))], decorator_list=[Attribute(value=Name(id='samples', ctx=Load()), attr='setter', ctx=Load())], returns=NameConstant(value=None))
FunctionDef(name='measurements', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Return the measurements as integers with their measurement probability.')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_y_measurements', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='Dict', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load())), ctx=Load()))
FunctionDef(name='measurements', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='value', annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load())), ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Set the measurements as integers with their measurement probability.')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_y_measurements', ctx=Store())], value=Name(id='value', ctx=Load()))], decorator_list=[Attribute(value=Name(id='measurements', ctx=Load()), attr='setter', ctx=Load())], returns=NameConstant(value=None))
FunctionDef(name='max_probability', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Return the maximum sampling probability.')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_max_probability', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='float', ctx=Load()))
FunctionDef(name='max_probability', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='value', annotation=Name(id='float', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Set the maximum sampling probability.')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_max_probability', ctx=Store())], value=Name(id='value', ctx=Load()))], decorator_list=[Attribute(value=Name(id='max_probability', ctx=Load()), attr='setter', ctx=Load())], returns=NameConstant(value=None))
arguments(args=[arg(arg='result', annotation=Name(id='AmplitudeEstimationResult', ctx=Load())), arg(arg='observed', annotation=Name(id='bool', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[NameConstant(value=False)])
Expr(value=Str(s='Computes the Fisher information for the output of the previous run.\n\n    Args:\n        result: An amplitude estimation result for which to compute the confidence interval.\n        observed: If True, the observed Fisher information is returned, otherwise\n            the expected Fisher information.\n\n    Returns:\n        The Fisher information.\n    '))
Assign(targets=[Name(id='fisher_information', ctx=Store())], value=NameConstant(value=None))
Assign(targets=[Name(id='mlv', ctx=Store())], value=Attribute(value=Name(id='result', ctx=Load()), attr='mle', ctx=Load()))
Assign(targets=[Name(id='m', ctx=Store())], value=Attribute(value=Name(id='result', ctx=Load()), attr='num_evaluation_qubits', ctx=Load()))
Assign(targets=[Name(id='M', ctx=Store())], value=BinOp(left=Num(n=2), op=Pow(), right=Name(id='m', ctx=Load())))
If(test=Name(id='observed', ctx=Load()), body=[Assign(targets=[Name(id='a_i', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='asarray', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='result', ctx=Load()), attr='samples', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[])), Assign(targets=[Name(id='p_i', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='asarray', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='result', ctx=Load()), attr='samples', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[])), Assign(targets=[Name(id='fisher_information', ctx=Store())], value=Call(func=Name(id='sum', ctx=Load()), args=[GeneratorExp(elt=BinOp(left=Name(id='p', ctx=Load()), op=Mult(), right=BinOp(left=Call(func=Name(id='derivative_log_pdf_a', ctx=Load()), args=[Name(id='a', ctx=Load()), Name(id='mlv', ctx=Load()), Name(id='m', ctx=Load())], keywords=[]), op=Pow(), right=Num(n=2))), generators=[comprehension(target=Tuple(elts=[Name(id='p', ctx=Store()), Name(id='a', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='zip', ctx=Load()), args=[Name(id='p_i', ctx=Load()), Name(id='a_i', ctx=Load())], keywords=[]), ifs=[], is_async=0)])], keywords=[]))], orelse=[FunctionDef(name='integrand', args=arguments(args=[arg(arg='x', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Return(value=BinOp(left=BinOp(left=Call(func=Name(id='derivative_log_pdf_a', ctx=Load()), args=[Name(id='x', ctx=Load()), Name(id='mlv', ctx=Load()), Name(id='m', ctx=Load())], keywords=[]), op=Pow(), right=Num(n=2)), op=Mult(), right=Call(func=Name(id='pdf_a', ctx=Load()), args=[Name(id='x', ctx=Load()), Name(id='mlv', ctx=Load()), Name(id='m', ctx=Load())], keywords=[])))], decorator_list=[], returns=None), Assign(targets=[Name(id='grid', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[BinOp(left=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='arange', ctx=Load()), args=[BinOp(left=BinOp(left=Name(id='M', ctx=Load()), op=Div(), right=Num(n=2)), op=Add(), right=Num(n=1))], keywords=[])), op=Div(), right=Name(id='M', ctx=Load()))], keywords=[]), op=Pow(), right=Num(n=2))), Assign(targets=[Name(id='fisher_information', ctx=Store())], value=Call(func=Name(id='sum', ctx=Load()), args=[GeneratorExp(elt=Call(func=Name(id='integrand', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='grid', ctx=Load()), ifs=[], is_async=0)])], keywords=[]))])
Return(value=Name(id='fisher_information', ctx=Load()))
Name(id='float', ctx=Load())
arguments(args=[arg(arg='result', annotation=Name(id='AmplitudeEstimationResult', ctx=Load())), arg(arg='alpha', annotation=Name(id='float', ctx=Load())), arg(arg='observed', annotation=Name(id='bool', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[NameConstant(value=False)])
Expr(value=Str(s='Compute the Fisher information confidence interval for the MLE of the previous run.\n\n    Args:\n        result: An amplitude estimation result for which to compute the confidence interval.\n        alpha: Specifies the (1 - alpha) confidence level (0 < alpha < 1).\n        observed: If True, the observed Fisher information is used to construct the\n            confidence interval, otherwise the expected Fisher information.\n\n    Returns:\n        The Fisher information confidence interval.\n    '))
Assign(targets=[Name(id='std', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sqrt', ctx=Load()), args=[BinOp(left=Attribute(value=Name(id='result', ctx=Load()), attr='shots', ctx=Load()), op=Mult(), right=Call(func=Name(id='_compute_fisher_information', ctx=Load()), args=[Name(id='result', ctx=Load()), Name(id='observed', ctx=Load())], keywords=[]))], keywords=[]))
Assign(targets=[Name(id='confint', ctx=Store())], value=BinOp(left=Attribute(value=Name(id='result', ctx=Load()), attr='mle', ctx=Load()), op=Add(), right=BinOp(left=BinOp(left=Call(func=Attribute(value=Name(id='norm', ctx=Load()), attr='ppf', ctx=Load()), args=[BinOp(left=Num(n=1), op=Sub(), right=BinOp(left=Name(id='alpha', ctx=Load()), op=Div(), right=Num(n=2)))], keywords=[]), op=Div(), right=Name(id='std', ctx=Load())), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='array', ctx=Load()), args=[List(elts=[UnaryOp(op=USub(), operand=Num(n=1)), Num(n=1)], ctx=Load())], keywords=[]))))
Return(value=Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='post_processing', ctx=Load()), args=[Name(id='bound', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='bound', ctx=Store()), iter=Name(id='confint', ctx=Load()), ifs=[], is_async=0)])], keywords=[]))
Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='float', ctx=Load())), ctx=Load())
arguments(args=[arg(arg='result', annotation=Name(id='AmplitudeEstimationResult', ctx=Load())), arg(arg='alpha', annotation=Name(id='float', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Expr(value=Str(s='Compute the likelihood ratio confidence interval for the MLE of the previous run.\n\n    Args:\n        result: An amplitude estimation result for which to compute the confidence interval.\n        alpha: Specifies the (1 - alpha) confidence level (0 < alpha < 1).\n\n    Returns:\n        The likelihood ratio confidence interval.\n    '))
Assign(targets=[Name(id='m', ctx=Store())], value=Attribute(value=Name(id='result', ctx=Load()), attr='num_evaluation_qubits', ctx=Load()))
Assign(targets=[Name(id='M', ctx=Store())], value=BinOp(left=Num(n=2), op=Pow(), right=Name(id='m', ctx=Load())))
Assign(targets=[Name(id='qae', ctx=Store())], value=Attribute(value=Name(id='result', ctx=Load()), attr='estimation', ctx=Load()))
Assign(targets=[Name(id='y', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='round', ctx=Load()), args=[BinOp(left=BinOp(left=Name(id='M', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='arcsin', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sqrt', ctx=Load()), args=[Name(id='qae', ctx=Load())], keywords=[])], keywords=[])), op=Div(), right=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()))], keywords=[])], keywords=[]))
If(test=Compare(left=Name(id='y', ctx=Load()), ops=[Eq()], comparators=[Num(n=0)]), body=[Assign(targets=[Name(id='right_of_qae', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[BinOp(left=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Mult(), right=BinOp(left=Name(id='y', ctx=Load()), op=Add(), right=Num(n=1))), op=Div(), right=Name(id='M', ctx=Load()))], keywords=[]), op=Pow(), right=Num(n=2))), Assign(targets=[Name(id='bubbles', ctx=Store())], value=List(elts=[Name(id='qae', ctx=Load()), Name(id='right_of_qae', ctx=Load())], ctx=Load()))], orelse=[If(test=Compare(left=Name(id='y', ctx=Load()), ops=[Eq()], comparators=[Call(func=Name(id='int', ctx=Load()), args=[BinOp(left=Name(id='M', ctx=Load()), op=Div(), right=Num(n=2))], keywords=[])]), body=[Assign(targets=[Name(id='left_of_qae', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[BinOp(left=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Mult(), right=BinOp(left=Name(id='y', ctx=Load()), op=Sub(), right=Num(n=1))), op=Div(), right=Name(id='M', ctx=Load()))], keywords=[]), op=Pow(), right=Num(n=2))), Assign(targets=[Name(id='bubbles', ctx=Store())], value=List(elts=[Name(id='left_of_qae', ctx=Load()), Name(id='qae', ctx=Load())], ctx=Load()))], orelse=[Assign(targets=[Name(id='left_of_qae', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[BinOp(left=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Mult(), right=BinOp(left=Name(id='y', ctx=Load()), op=Sub(), right=Num(n=1))), op=Div(), right=Name(id='M', ctx=Load()))], keywords=[]), op=Pow(), right=Num(n=2))), Assign(targets=[Name(id='right_of_qae', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[BinOp(left=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Mult(), right=BinOp(left=Name(id='y', ctx=Load()), op=Add(), right=Num(n=1))), op=Div(), right=Name(id='M', ctx=Load()))], keywords=[]), op=Pow(), right=Num(n=2))), Assign(targets=[Name(id='bubbles', ctx=Store())], value=List(elts=[Name(id='left_of_qae', ctx=Load()), Name(id='qae', ctx=Load()), Name(id='right_of_qae', ctx=Load())], ctx=Load()))])])
Assign(targets=[Name(id='a_i', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='asarray', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='result', ctx=Load()), attr='samples', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[]))
Assign(targets=[Name(id='p_i', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='asarray', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='result', ctx=Load()), attr='samples', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[]))
FunctionDef(name='loglikelihood', args=arguments(args=[arg(arg='a', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sum', ctx=Load()), args=[BinOp(left=BinOp(left=Attribute(value=Name(id='result', ctx=Load()), attr='shots', ctx=Load()), op=Mult(), right=Name(id='p_i', ctx=Load())), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='log', ctx=Load()), args=[Call(func=Name(id='pdf_a', ctx=Load()), args=[Name(id='a_i', ctx=Load()), Name(id='a', ctx=Load()), Name(id='m', ctx=Load())], keywords=[])], keywords=[]))], keywords=[]))], decorator_list=[], returns=None)
Assign(targets=[Name(id='loglik_mle', ctx=Store())], value=Call(func=Name(id='loglikelihood', ctx=Load()), args=[Attribute(value=Name(id='result', ctx=Load()), attr='mle', ctx=Load())], keywords=[]))
Assign(targets=[Name(id='thres', ctx=Store())], value=BinOp(left=Name(id='loglik_mle', ctx=Load()), op=Sub(), right=BinOp(left=Call(func=Attribute(value=Name(id='chi2', ctx=Load()), attr='ppf', ctx=Load()), args=[BinOp(left=Num(n=1), op=Sub(), right=Name(id='alpha', ctx=Load()))], keywords=[keyword(arg='df', value=Num(n=1))]), op=Div(), right=Num(n=2))))
FunctionDef(name='cut', args=arguments(args=[arg(arg='x', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Return(value=BinOp(left=Call(func=Name(id='loglikelihood', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), op=Sub(), right=Name(id='thres', ctx=Load())))], decorator_list=[], returns=None)
Assign(targets=[Name(id='lower', ctx=Store()), Name(id='upper', ctx=Store())], value=Attribute(value=Name(id='result', ctx=Load()), attr='mle', ctx=Load()))
For(target=Tuple(elts=[Name(id='a', ctx=Store()), Name(id='b', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='zip', ctx=Load()), args=[Subscript(value=Name(id='bubbles', ctx=Load()), slice=Slice(lower=None, upper=UnaryOp(op=USub(), operand=Num(n=1)), step=None), ctx=Load()), Subscript(value=Name(id='bubbles', ctx=Load()), slice=Slice(lower=Num(n=1), upper=None, step=None), ctx=Load())], keywords=[]), body=[Assign(targets=[Tuple(elts=[Name(id='locmax', ctx=Store()), Name(id='val', ctx=Store())], ctx=Store())], value=Call(func=Name(id='bisect_max', ctx=Load()), args=[Name(id='loglikelihood', ctx=Load()), Name(id='a', ctx=Load()), Name(id='b', ctx=Load())], keywords=[keyword(arg='retval', value=NameConstant(value=True))])), If(test=Compare(left=Name(id='val', ctx=Load()), ops=[GtE()], comparators=[Name(id='thres', ctx=Load())]), body=[If(test=Compare(left=BinOp(left=Call(func=Name(id='cut', ctx=Load()), args=[Name(id='a', ctx=Load())], keywords=[]), op=Mult(), right=Call(func=Name(id='cut', ctx=Load()), args=[Name(id='locmax', ctx=Load())], keywords=[])), ops=[Lt()], comparators=[Num(n=0)]), body=[Assign(targets=[Name(id='left', ctx=Store())], value=Call(func=Name(id='bisect', ctx=Load()), args=[Name(id='cut', ctx=Load()), Name(id='a', ctx=Load()), Name(id='locmax', ctx=Load())], keywords=[])), Assign(targets=[Name(id='lower', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='minimum', ctx=Load()), args=[Name(id='lower', ctx=Load()), Name(id='left', ctx=Load())], keywords=[]))], orelse=[]), If(test=Compare(left=BinOp(left=Call(func=Name(id='cut', ctx=Load()), args=[Name(id='locmax', ctx=Load())], keywords=[]), op=Mult(), right=Call(func=Name(id='cut', ctx=Load()), args=[Name(id='b', ctx=Load())], keywords=[])), ops=[Lt()], comparators=[Num(n=0)]), body=[Assign(targets=[Name(id='right', ctx=Store())], value=Call(func=Name(id='bisect', ctx=Load()), args=[Name(id='cut', ctx=Load()), Name(id='locmax', ctx=Load()), Name(id='b', ctx=Load())], keywords=[])), Assign(targets=[Name(id='upper', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='maximum', ctx=Load()), args=[Name(id='upper', ctx=Load()), Name(id='right', ctx=Load())], keywords=[]))], orelse=[])], orelse=[])], orelse=[])
Assign(targets=[Name(id='confint', ctx=Store())], value=List(elts=[Name(id='lower', ctx=Load()), Name(id='upper', ctx=Load())], ctx=Load()))
Return(value=Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='post_processing', ctx=Load()), args=[Name(id='bound', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='bound', ctx=Store()), iter=Name(id='confint', ctx=Load()), ifs=[], is_async=0)])], keywords=[]))
Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='float', ctx=Load())), ctx=Load())
Load()
Str(s='The Quantum Phase Estimation-based Amplitude Estimation algorithm.\n\n    This class implements the original Quantum Amplitude Estimation (QAE) algorithm, introduced by\n    [1]. This canonical version uses quantum phase estimation along with a set of :math:`m`\n    additional evaluation qubits to find an estimate :math:`\\tilde{a}`, that is restricted to the\n    grid\n\n    .. math::\n\n        \\tilde{a} \\in \\{\\sin^2(\\pi  y / 2^m) : y = 0, ..., 2^{m-1}\\}\n\n    More evaluation qubits produce a finer sampling grid, therefore the accuracy of the algorithm\n    increases with :math:`m`.\n\n    Using a maximum likelihood post processing, this grid constraint can be circumvented.\n    This improved estimator is implemented as well, see [2] Appendix A for more detail.\n\n    References:\n        [1]: Brassard, G., Hoyer, P., Mosca, M., & Tapp, A. (2000).\n             Quantum Amplitude Amplification and Estimation.\n             `arXiv:quant-ph/0005055 <http://arxiv.org/abs/quant-ph/0005055>`_.\n        [2]: Grinko, D., Gacon, J., Zoufal, C., & Woerner, S. (2019).\n             Iterative Quantum Amplitude Estimation.\n             `arXiv:1912.05559 <https://arxiv.org/abs/1912.05559>`_.\n    ')
arguments(args=[arg(arg='self', annotation=None), arg(arg='num_eval_qubits', annotation=Name(id='int', ctx=Load())), arg(arg='phase_estimation_circuit', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Name(id='QuantumCircuit', ctx=Load())), ctx=Load())), arg(arg='iqft', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Name(id='QuantumCircuit', ctx=Load())), ctx=Load())), arg(arg='quantum_instance', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='QuantumInstance', ctx=Load()), Name(id='Backend', ctx=Load())], ctx=Load())), ctx=Load())), ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[NameConstant(value=None), NameConstant(value=None), NameConstant(value=None)])
Expr(value=Str(s='\n        Args:\n            num_eval_qubits: The number of evaluation qubits.\n            phase_estimation_circuit: The phase estimation circuit used to run the algorithm.\n                Defaults to the standard phase estimation circuit from the circuit library,\n                `qiskit.circuit.library.PhaseEstimation` when None.\n            iqft: The inverse quantum Fourier transform component, defaults to using a standard\n                implementation from `qiskit.circuit.library.QFT` when None.\n            quantum_instance: The backend (or `QuantumInstance`) to execute the circuits on.\n\n        Raises:\n            ValueError: If the number of evaluation qubits is smaller than 1.\n        '))
If(test=Compare(left=Name(id='num_eval_qubits', ctx=Load()), ops=[Lt()], comparators=[Num(n=1)]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Str(s='The number of evaluation qubits must at least be 1.')], keywords=[]), cause=None)], orelse=[])
Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[]))
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='quantum_instance', ctx=Store())], value=Name(id='quantum_instance', ctx=Load()))
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Store())], value=Name(id='num_eval_qubits', ctx=Load()))
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_M', ctx=Store())], value=BinOp(left=Num(n=2), op=Pow(), right=Name(id='num_eval_qubits', ctx=Load())))
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_iqft', ctx=Store())], value=Name(id='iqft', ctx=Load()))
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_pec', ctx=Store())], value=Name(id='phase_estimation_circuit', ctx=Load()))
NameConstant(value=None)
arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Expr(value=Str(s='Get the quantum instance.\n\n        Returns:\n            The quantum instance used to run this algorithm.\n        '))
Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()))
Name(id='property', ctx=Load())
Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Name(id='QuantumInstance', ctx=Load())), ctx=Load())
arguments(args=[arg(arg='self', annotation=None), arg(arg='quantum_instance', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='QuantumInstance', ctx=Load()), Name(id='Backend', ctx=Load())], ctx=Load())), ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Expr(value=Str(s='Set quantum instance.\n\n        Args:\n            quantum_instance: The quantum instance used to run this algorithm.\n        '))
If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='quantum_instance', ctx=Load()), Name(id='Backend', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='quantum_instance', ctx=Store())], value=Call(func=Name(id='QuantumInstance', ctx=Load()), args=[Name(id='quantum_instance', ctx=Load())], keywords=[]))], orelse=[])
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Store())], value=Name(id='quantum_instance', ctx=Load()))
Attribute(value=Name(id='quantum_instance', ctx=Load()), attr='setter', ctx=Load())
NameConstant(value=None)
arguments(args=[arg(arg='self', annotation=None), arg(arg='estimation_problem', annotation=Name(id='EstimationProblem', ctx=Load())), arg(arg='measurement', annotation=Name(id='bool', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[NameConstant(value=False)])
Expr(value=Str(s='Construct the Amplitude Estimation quantum circuit.\n\n        Args:\n            estimation_problem: The estimation problem for which to construct the QAE circuit.\n            measurement: Boolean flag to indicate if measurements should be included in the circuit.\n\n        Returns:\n            The QuantumCircuit object for the constructed circuit.\n        '))
If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_pec', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=[Assign(targets=[Name(id='pec', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_pec', ctx=Load()))], orelse=[ImportFrom(module='qiskit.circuit.library', names=[alias(name='PhaseEstimation', asname=None)], level=0), Assign(targets=[Name(id='pec', ctx=Store())], value=Call(func=Name(id='PhaseEstimation', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Load()), Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='grover_operator', ctx=Load())], keywords=[keyword(arg='iqft', value=Attribute(value=Name(id='self', ctx=Load()), attr='_iqft', ctx=Load()))]))])
Assign(targets=[Name(id='circuit', ctx=Store())], value=Call(func=Name(id='QuantumCircuit', ctx=Load()), args=[Starred(value=Attribute(value=Name(id='pec', ctx=Load()), attr='qregs', ctx=Load()), ctx=Load())], keywords=[]))
Expr(value=Call(func=Attribute(value=Name(id='circuit', ctx=Load()), attr='compose', ctx=Load()), args=[Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='state_preparation', ctx=Load()), Call(func=Name(id='list', ctx=Load()), args=[Call(func=Name(id='range', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Load()), Attribute(value=Name(id='circuit', ctx=Load()), attr='num_qubits', ctx=Load())], keywords=[])], keywords=[])], keywords=[keyword(arg='inplace', value=NameConstant(value=True))]))
Expr(value=Call(func=Attribute(value=Name(id='circuit', ctx=Load()), attr='compose', ctx=Load()), args=[Name(id='pec', ctx=Load())], keywords=[keyword(arg='inplace', value=NameConstant(value=True))]))
If(test=Name(id='measurement', ctx=Load()), body=[Assign(targets=[Name(id='cr', ctx=Store())], value=Call(func=Name(id='ClassicalRegister', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='circuit', ctx=Load()), attr='add_register', ctx=Load()), args=[Name(id='cr', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='circuit', ctx=Load()), attr='measure', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Name(id='range', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Load())], keywords=[])], keywords=[]), Call(func=Name(id='list', ctx=Load()), args=[Call(func=Name(id='range', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Load())], keywords=[])], keywords=[])], keywords=[]))], orelse=[])
Return(value=Name(id='circuit', ctx=Load()))
Name(id='QuantumCircuit', ctx=Load())
arguments(args=[arg(arg='self', annotation=None), arg(arg='circuit_results', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Subscript(value=Name(id='Dict', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load())), ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())], ctx=Load())), ctx=Load())), arg(arg='threshold', annotation=Name(id='float', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[Num(n=1e-06)])
Expr(value=Str(s='Evaluate the results from the circuit simulation.\n\n        Given the probabilities from statevector simulation of the QAE circuit, compute the\n        probabilities that the measurements y/gridpoints a are the best estimate.\n\n        Args:\n            circuit_results: The circuit result from the QAE circuit. Can be either a counts dict\n                or a statevector.\n            threshold: Measurements with probabilities below the threshold are discarded.\n\n        Returns:\n            Dictionaries containing the a gridpoints with respective probabilities and\n                y measurements with respective probabilities, in this order.\n        '))
If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='circuit_results', ctx=Load()), Name(id='dict', ctx=Load())], keywords=[]), body=[Assign(targets=[Tuple(elts=[Name(id='samples', ctx=Store()), Name(id='measurements', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_evaluate_count_results', ctx=Load()), args=[Name(id='circuit_results', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Tuple(elts=[Name(id='samples', ctx=Store()), Name(id='measurements', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_evaluate_statevector_results', ctx=Load()), args=[Name(id='circuit_results', ctx=Load())], keywords=[]))])
Assign(targets=[Name(id='samples', ctx=Store())], value=DictComp(key=Name(id='a', ctx=Load()), value=Name(id='p', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='a', ctx=Store()), Name(id='p', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='samples', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), ifs=[Compare(left=Name(id='p', ctx=Load()), ops=[Gt()], comparators=[Name(id='threshold', ctx=Load())])], is_async=0)]))
Assign(targets=[Name(id='measurements', ctx=Store())], value=DictComp(key=Name(id='y', ctx=Load()), value=Name(id='p', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='y', ctx=Store()), Name(id='p', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='measurements', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), ifs=[Compare(left=Name(id='p', ctx=Load()), ops=[Gt()], comparators=[Name(id='threshold', ctx=Load())])], is_async=0)]))
Return(value=Tuple(elts=[Name(id='samples', ctx=Load()), Name(id='measurements', ctx=Load())], ctx=Load()))
Subscript(value=Name(id='Tuple', ctx=Load()), slice=Index(value=Tuple(elts=[Subscript(value=Name(id='Dict', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load())), ctx=Load()), Subscript(value=Name(id='Dict', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='float', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load())), ctx=Load())], ctx=Load())), ctx=Load())
arguments(args=[arg(arg='self', annotation=None), arg(arg='statevector', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Assign(targets=[Name(id='measurements', ctx=Store())], value=Call(func=Name(id='OrderedDict', ctx=Load()), args=[], keywords=[]))
Assign(targets=[Name(id='num_qubits', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='log2', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='statevector', ctx=Load())], keywords=[])], keywords=[])], keywords=[]))
For(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='amplitude', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='statevector', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='b', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Subscript(value=Call(func=Name(id='bin', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]), slice=Slice(lower=Num(n=2), upper=None, step=None), ctx=Load()), attr='zfill', ctx=Load()), args=[Name(id='num_qubits', ctx=Load())], keywords=[]), slice=Slice(lower=None, upper=None, step=UnaryOp(op=USub(), operand=Num(n=1))), ctx=Load())), Assign(targets=[Name(id='y', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='b', ctx=Load()), slice=Slice(lower=None, upper=Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Load()), step=None), ctx=Load()), Num(n=2)], keywords=[])), Assign(targets=[Subscript(value=Name(id='measurements', ctx=Load()), slice=Index(value=Name(id='y', ctx=Load())), ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='measurements', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='y', ctx=Load()), Num(n=0)], keywords=[]), op=Add(), right=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='abs', ctx=Load()), args=[Name(id='amplitude', ctx=Load())], keywords=[]), op=Pow(), right=Num(n=2))))], orelse=[])
Assign(targets=[Name(id='samples', ctx=Store())], value=Call(func=Name(id='OrderedDict', ctx=Load()), args=[], keywords=[]))
For(target=Tuple(elts=[Name(id='y', ctx=Store()), Name(id='probability', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='measurements', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[If(test=Compare(left=Name(id='y', ctx=Load()), ops=[GtE()], comparators=[Call(func=Name(id='int', ctx=Load()), args=[BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='_M', ctx=Load()), op=Div(), right=Num(n=2))], keywords=[])]), body=[Assign(targets=[Name(id='y', ctx=Store())], value=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='_M', ctx=Load()), op=Sub(), right=Name(id='y', ctx=Load())))], orelse=[]), Assign(targets=[Name(id='a', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='round', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='power', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[BinOp(left=BinOp(left=Name(id='y', ctx=Load()), op=Mult(), right=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load())), op=Div(), right=BinOp(left=Num(n=2), op=Pow(), right=Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Load())))], keywords=[]), Num(n=2)], keywords=[])], keywords=[keyword(arg='decimals', value=Num(n=7))])), Assign(targets=[Subscript(value=Name(id='samples', ctx=Load()), slice=Index(value=Name(id='a', ctx=Load())), ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='samples', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='a', ctx=Load()), Num(n=0)], keywords=[]), op=Add(), right=Name(id='probability', ctx=Load())))], orelse=[])
Return(value=Tuple(elts=[Name(id='samples', ctx=Load()), Name(id='measurements', ctx=Load())], ctx=Load()))
arguments(args=[arg(arg='self', annotation=None), arg(arg='counts', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Assign(targets=[Name(id='measurements', ctx=Store())], value=Call(func=Name(id='OrderedDict', ctx=Load()), args=[], keywords=[]))
Assign(targets=[Name(id='samples', ctx=Store())], value=Call(func=Name(id='OrderedDict', ctx=Load()), args=[], keywords=[]))
Assign(targets=[Name(id='shots', ctx=Store())], value=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()), attr='_run_config', ctx=Load()), attr='shots', ctx=Load()))
For(target=Tuple(elts=[Name(id='state', ctx=Store()), Name(id='count', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='counts', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Name(id='y', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Subscript(value=Call(func=Attribute(value=Name(id='state', ctx=Load()), attr='replace', ctx=Load()), args=[Str(s=' '), Str(s='')], keywords=[]), slice=Slice(lower=None, upper=Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Load()), step=None), ctx=Load()), slice=Slice(lower=None, upper=None, step=UnaryOp(op=USub(), operand=Num(n=1))), ctx=Load()), Num(n=2)], keywords=[])), Assign(targets=[Name(id='probability', ctx=Store())], value=BinOp(left=Name(id='count', ctx=Load()), op=Div(), right=Name(id='shots', ctx=Load()))), Assign(targets=[Subscript(value=Name(id='measurements', ctx=Load()), slice=Index(value=Name(id='y', ctx=Load())), ctx=Store())], value=Name(id='probability', ctx=Load())), Assign(targets=[Name(id='a', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='round', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='power', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[BinOp(left=BinOp(left=Name(id='y', ctx=Load()), op=Mult(), right=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load())), op=Div(), right=BinOp(left=Num(n=2), op=Pow(), right=Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Load())))], keywords=[]), Num(n=2)], keywords=[])], keywords=[keyword(arg='decimals', value=Num(n=7))])), Assign(targets=[Subscript(value=Name(id='samples', ctx=Load()), slice=Index(value=Name(id='a', ctx=Load())), ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='samples', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='a', ctx=Load()), Num(n=0.0)], keywords=[]), op=Add(), right=Name(id='probability', ctx=Load())))], orelse=[])
Return(value=Tuple(elts=[Name(id='samples', ctx=Load()), Name(id='measurements', ctx=Load())], ctx=Load()))
arguments(args=[arg(arg='result', annotation=Str(s='AmplitudeEstimationResult')), arg(arg='apply_post_processing', annotation=Name(id='bool', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[NameConstant(value=False)])
Expr(value=Str(s='Compute the Maximum Likelihood Estimator (MLE).\n\n        Args:\n            result: An amplitude estimation result object.\n            apply_post_processing: If True, apply the post processing to the MLE before returning\n                it.\n\n        Returns:\n            The MLE for the provided result object.\n        '))
Assign(targets=[Name(id='m', ctx=Store())], value=Attribute(value=Name(id='result', ctx=Load()), attr='num_evaluation_qubits', ctx=Load()))
Assign(targets=[Name(id='M', ctx=Store())], value=BinOp(left=Num(n=2), op=Pow(), right=Name(id='m', ctx=Load())))
Assign(targets=[Name(id='qae', ctx=Store())], value=Attribute(value=Name(id='result', ctx=Load()), attr='estimation', ctx=Load()))
Assign(targets=[Name(id='a_i', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='asarray', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='result', ctx=Load()), attr='samples', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[]))
Assign(targets=[Name(id='p_i', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='asarray', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='result', ctx=Load()), attr='samples', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[]))
FunctionDef(name='loglikelihood', args=arguments(args=[arg(arg='a', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sum', ctx=Load()), args=[BinOp(left=BinOp(left=Attribute(value=Name(id='result', ctx=Load()), attr='shots', ctx=Load()), op=Mult(), right=Name(id='p_i', ctx=Load())), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='log', ctx=Load()), args=[Call(func=Name(id='pdf_a', ctx=Load()), args=[Name(id='a_i', ctx=Load()), Name(id='a', ctx=Load()), Name(id='m', ctx=Load())], keywords=[])], keywords=[]))], keywords=[]))], decorator_list=[], returns=None)
Assign(targets=[Name(id='y', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='round', ctx=Load()), args=[BinOp(left=BinOp(left=Name(id='M', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='arcsin', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sqrt', ctx=Load()), args=[Name(id='qae', ctx=Load())], keywords=[])], keywords=[])), op=Div(), right=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()))], keywords=[])], keywords=[]))
If(test=Compare(left=Name(id='y', ctx=Load()), ops=[Eq()], comparators=[Num(n=0)]), body=[Assign(targets=[Name(id='right_of_qae', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[BinOp(left=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Mult(), right=BinOp(left=Name(id='y', ctx=Load()), op=Add(), right=Num(n=1))), op=Div(), right=Name(id='M', ctx=Load()))], keywords=[]), op=Pow(), right=Num(n=2))), Assign(targets=[Name(id='bubbles', ctx=Store())], value=List(elts=[Name(id='qae', ctx=Load()), Name(id='right_of_qae', ctx=Load())], ctx=Load()))], orelse=[If(test=Compare(left=Name(id='y', ctx=Load()), ops=[Eq()], comparators=[Call(func=Name(id='int', ctx=Load()), args=[BinOp(left=Name(id='M', ctx=Load()), op=Div(), right=Num(n=2))], keywords=[])]), body=[Assign(targets=[Name(id='left_of_qae', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[BinOp(left=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Mult(), right=BinOp(left=Name(id='y', ctx=Load()), op=Sub(), right=Num(n=1))), op=Div(), right=Name(id='M', ctx=Load()))], keywords=[]), op=Pow(), right=Num(n=2))), Assign(targets=[Name(id='bubbles', ctx=Store())], value=List(elts=[Name(id='left_of_qae', ctx=Load()), Name(id='qae', ctx=Load())], ctx=Load()))], orelse=[Assign(targets=[Name(id='left_of_qae', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[BinOp(left=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Mult(), right=BinOp(left=Name(id='y', ctx=Load()), op=Sub(), right=Num(n=1))), op=Div(), right=Name(id='M', ctx=Load()))], keywords=[]), op=Pow(), right=Num(n=2))), Assign(targets=[Name(id='right_of_qae', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[BinOp(left=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Mult(), right=BinOp(left=Name(id='y', ctx=Load()), op=Add(), right=Num(n=1))), op=Div(), right=Name(id='M', ctx=Load()))], keywords=[]), op=Pow(), right=Num(n=2))), Assign(targets=[Name(id='bubbles', ctx=Store())], value=List(elts=[Name(id='left_of_qae', ctx=Load()), Name(id='qae', ctx=Load()), Name(id='right_of_qae', ctx=Load())], ctx=Load()))])])
Assign(targets=[Name(id='a_opt', ctx=Store())], value=Name(id='qae', ctx=Load()))
Assign(targets=[Name(id='loglik_opt', ctx=Store())], value=Call(func=Name(id='loglikelihood', ctx=Load()), args=[Name(id='a_opt', ctx=Load())], keywords=[]))
For(target=Tuple(elts=[Name(id='a', ctx=Store()), Name(id='b', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='zip', ctx=Load()), args=[Subscript(value=Name(id='bubbles', ctx=Load()), slice=Slice(lower=None, upper=UnaryOp(op=USub(), operand=Num(n=1)), step=None), ctx=Load()), Subscript(value=Name(id='bubbles', ctx=Load()), slice=Slice(lower=Num(n=1), upper=None, step=None), ctx=Load())], keywords=[]), body=[Assign(targets=[Tuple(elts=[Name(id='locmax', ctx=Store()), Name(id='val', ctx=Store())], ctx=Store())], value=Call(func=Name(id='bisect_max', ctx=Load()), args=[Name(id='loglikelihood', ctx=Load()), Name(id='a', ctx=Load()), Name(id='b', ctx=Load())], keywords=[keyword(arg='retval', value=NameConstant(value=True))])), If(test=Compare(left=Name(id='val', ctx=Load()), ops=[Gt()], comparators=[Name(id='loglik_opt', ctx=Load())]), body=[Assign(targets=[Name(id='a_opt', ctx=Store())], value=Name(id='locmax', ctx=Load())), Assign(targets=[Name(id='loglik_opt', ctx=Store())], value=Name(id='val', ctx=Load()))], orelse=[])], orelse=[])
If(test=Name(id='apply_post_processing', ctx=Load()), body=[Return(value=Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='post_processing', ctx=Load()), args=[Name(id='a_opt', ctx=Load())], keywords=[]))], orelse=[])
Return(value=Name(id='a_opt', ctx=Load()))
Name(id='staticmethod', ctx=Load())
Name(id='float', ctx=Load())
arguments(args=[arg(arg='self', annotation=None), arg(arg='estimation_problem', annotation=Name(id='EstimationProblem', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Expr(value=Str(s='Run the amplitude estimation algorithm on provided estimation problem.\n\n        Args:\n            estimation_problem: The estimation problem.\n\n        Returns:\n            An amplitude estimation results object.\n\n        Raises:\n            ValueError: If `state_preparation` or `objective_qubits` are not set in the\n                `estimation_problem`.\n        '))
If(test=Compare(left=Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='state_preparation', ctx=Load()), ops=[Is()], comparators=[NameConstant(value=None)]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Str(s='The state_preparation property of the estimation problem must be set.')], keywords=[]), cause=None)], orelse=[])
If(test=Compare(left=Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='objective_qubits', ctx=Load()), ops=[Is()], comparators=[NameConstant(value=None)]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Str(s='The objective_qubits property of the estimation problem must be set.')], keywords=[]), cause=None)], orelse=[])
Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Name(id='AmplitudeEstimationResult', ctx=Load()), args=[], keywords=[]))
Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='num_evaluation_qubits', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Load()))
Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='post_processing', ctx=Store())], value=Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='post_processing', ctx=Load()))
If(test=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()), attr='is_statevector', ctx=Load()), body=[Assign(targets=[Name(id='circuit', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='construct_circuit', ctx=Load()), args=[Name(id='estimation_problem', ctx=Load())], keywords=[keyword(arg='measurement', value=NameConstant(value=False))])), Assign(targets=[Name(id='statevector', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()), attr='execute', ctx=Load()), args=[Name(id='circuit', ctx=Load())], keywords=[]), attr='get_statevector', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='circuit_results', ctx=Store())], value=Name(id='statevector', ctx=Load())), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='shots', ctx=Store())], value=Num(n=1))], orelse=[Assign(targets=[Name(id='circuit', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='construct_circuit', ctx=Load()), args=[Name(id='estimation_problem', ctx=Load())], keywords=[keyword(arg='measurement', value=NameConstant(value=True))])), Assign(targets=[Name(id='counts', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()), attr='execute', ctx=Load()), args=[Name(id='circuit', ctx=Load())], keywords=[]), attr='get_counts', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='circuit_results', ctx=Store())], value=Name(id='counts', ctx=Load())), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='shots', ctx=Store())], value=Call(func=Name(id='sum', ctx=Load()), args=[Call(func=Attribute(value=Name(id='counts', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[]))])
Assign(targets=[Tuple(elts=[Name(id='samples', ctx=Store()), Name(id='measurements', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='evaluate_measurements', ctx=Load()), args=[Attribute(value=Name(id='result', ctx=Load()), attr='circuit_results', ctx=Load())], keywords=[]))
Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='samples', ctx=Store())], value=Name(id='samples', ctx=Load()))
Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='samples_processed', ctx=Store())], value=DictComp(key=Call(func=Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='post_processing', ctx=Load()), args=[Name(id='a', ctx=Load())], keywords=[]), value=Name(id='p', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='a', ctx=Store()), Name(id='p', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='samples', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), ifs=[], is_async=0)]))
Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='measurements', ctx=Store())], value=Name(id='measurements', ctx=Load()))
Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='max_probability', ctx=Store())], value=Num(n=0))
For(target=Tuple(elts=[Name(id='amplitude', ctx=Store()), Tuple(elts=[Name(id='mapped', ctx=Store()), Name(id='prob', ctx=Store())], ctx=Store())], ctx=Store()), iter=Call(func=Name(id='zip', ctx=Load()), args=[Call(func=Attribute(value=Name(id='samples', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Attribute(value=Name(id='result', ctx=Load()), attr='samples_processed', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='prob', ctx=Load()), ops=[Gt()], comparators=[Attribute(value=Name(id='result', ctx=Load()), attr='max_probability', ctx=Load())]), body=[Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='max_probability', ctx=Store())], value=Name(id='prob', ctx=Load())), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='estimation', ctx=Store())], value=Name(id='amplitude', ctx=Load())), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='estimation_processed', ctx=Store())], value=Name(id='mapped', ctx=Load()))], orelse=[])], orelse=[])
Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='num_oracle_queries', ctx=Store())], value=BinOp(left=Attribute(value=Name(id='result', ctx=Load()), attr='shots', ctx=Load()), op=Mult(), right=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='_M', ctx=Load()), op=Sub(), right=Num(n=1))))
Assign(targets=[Name(id='mle', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='compute_mle', ctx=Load()), args=[Name(id='result', ctx=Load())], keywords=[]))
Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='mle', ctx=Store())], value=Name(id='mle', ctx=Load()))
Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='mle_processed', ctx=Store())], value=Call(func=Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='post_processing', ctx=Load()), args=[Name(id='mle', ctx=Load())], keywords=[]))
Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='confidence_interval', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='compute_confidence_interval', ctx=Load()), args=[Name(id='result', ctx=Load())], keywords=[]))
Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='confidence_interval_processed', ctx=Store())], value=Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='post_processing', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='value', ctx=Store()), iter=Attribute(value=Name(id='result', ctx=Load()), attr='confidence_interval', ctx=Load()), ifs=[], is_async=0)])], keywords=[]))
Return(value=Name(id='result', ctx=Load()))
Str(s='AmplitudeEstimationResult')
arguments(args=[arg(arg='result', annotation=Str(s='AmplitudeEstimationResult')), arg(arg='alpha', annotation=Name(id='float', ctx=Load())), arg(arg='kind', annotation=Name(id='str', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[Num(n=0.05), Str(s='likelihood_ratio')])
Expr(value=Str(s="Compute the (1 - alpha) confidence interval.\n\n        Args:\n            result: An amplitude estimation result for which to compute the confidence interval.\n            alpha: Confidence level: compute the (1 - alpha) confidence interval.\n            kind: The method to compute the confidence interval, can be 'fisher', 'observed_fisher'\n                or 'likelihood_ratio' (default)\n\n        Returns:\n            The (1 - alpha) confidence interval of the specified kind.\n\n        Raises:\n            AquaError: If 'mle' is not in self._ret.keys() (i.e. `run` was not called yet).\n            NotImplementedError: If the confidence interval method `kind` is not implemented.\n        "))
If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Attribute(value=Name(id='result', ctx=Load()), attr='circuit_results', ctx=Load()), Tuple(elts=[Name(id='list', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())], ctx=Load())], keywords=[]), body=[Return(value=Tuple(elts=[Attribute(value=Name(id='result', ctx=Load()), attr='mle', ctx=Load()), Attribute(value=Name(id='result', ctx=Load()), attr='mle', ctx=Load())], ctx=Load()))], orelse=[])
If(test=Compare(left=Name(id='kind', ctx=Load()), ops=[In()], comparators=[List(elts=[Str(s='likelihood_ratio'), Str(s='lr')], ctx=Load())]), body=[Return(value=Call(func=Name(id='_likelihood_ratio_confint', ctx=Load()), args=[Name(id='result', ctx=Load()), Name(id='alpha', ctx=Load())], keywords=[]))], orelse=[])
If(test=Compare(left=Name(id='kind', ctx=Load()), ops=[In()], comparators=[List(elts=[Str(s='fisher'), Str(s='fi')], ctx=Load())]), body=[Return(value=Call(func=Name(id='_fisher_confint', ctx=Load()), args=[Name(id='result', ctx=Load()), Name(id='alpha', ctx=Load())], keywords=[keyword(arg='observed', value=NameConstant(value=False))]))], orelse=[])
If(test=Compare(left=Name(id='kind', ctx=Load()), ops=[In()], comparators=[List(elts=[Str(s='observed_fisher'), Str(s='observed_information'), Str(s='oi')], ctx=Load())]), body=[Return(value=Call(func=Name(id='_fisher_confint', ctx=Load()), args=[Name(id='result', ctx=Load()), Name(id='alpha', ctx=Load())], keywords=[keyword(arg='observed', value=NameConstant(value=True))]))], orelse=[])
Raise(exc=Call(func=Name(id='NotImplementedError', ctx=Load()), args=[JoinedStr(values=[Str(s='CI `'), FormattedValue(value=Name(id='kind', ctx=Load()), conversion=-1, format_spec=None), Str(s='` is not implemented.')])], keywords=[]), cause=None)
Name(id='staticmethod', ctx=Load())
Subscript(value=Name(id='Tuple', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='float', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load())), ctx=Load())
Load()
Str(s='The ``AmplitudeEstimation`` result object.')
arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[]))
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_num_evaluation_qubits', ctx=Store())], value=NameConstant(value=None))
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_mle', ctx=Store())], value=NameConstant(value=None))
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_mle_processed', ctx=Store())], value=NameConstant(value=None))
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_samples', ctx=Store())], value=NameConstant(value=None))
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_samples_processed', ctx=Store())], value=NameConstant(value=None))
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_y_measurements', ctx=Store())], value=NameConstant(value=None))
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_max_probability', ctx=Store())], value=NameConstant(value=None))
NameConstant(value=None)
arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Expr(value=Str(s='Returns the number of evaluation qubits.'))
Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_num_evaluation_qubits', ctx=Load()))
Name(id='property', ctx=Load())
Name(id='int', ctx=Load())
arguments(args=[arg(arg='self', annotation=None), arg(arg='num_evaluation_qubits', annotation=Name(id='int', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Expr(value=Str(s='Set the number of evaluation qubits.'))
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_num_evaluation_qubits', ctx=Store())], value=Name(id='num_evaluation_qubits', ctx=Load()))
Attribute(value=Name(id='num_evaluation_qubits', ctx=Load()), attr='setter', ctx=Load())
NameConstant(value=None)
arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Expr(value=Str(s='Return the post-processed MLE for the amplitude.'))
Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_mle_processed', ctx=Load()))
Name(id='property', ctx=Load())
Name(id='float', ctx=Load())
arguments(args=[arg(arg='self', annotation=None), arg(arg='value', annotation=Name(id='float', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Expr(value=Str(s='Set the post-processed MLE for the amplitude.'))
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_mle_processed', ctx=Store())], value=Name(id='value', ctx=Load()))
Attribute(value=Name(id='mle_processed', ctx=Load()), attr='setter', ctx=Load())
NameConstant(value=None)
arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Expr(value=Str(s='Return the post-processed measurement samples with their measurement probability.'))
Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_samples_processed', ctx=Load()))
Name(id='property', ctx=Load())
Subscript(value=Name(id='Dict', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='float', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load())), ctx=Load())
arguments(args=[arg(arg='self', annotation=None), arg(arg='value', annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='float', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load())), ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Expr(value=Str(s='Set the post-processed measurement samples.'))
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_samples_processed', ctx=Store())], value=Name(id='value', ctx=Load()))
Attribute(value=Name(id='samples_processed', ctx=Load()), attr='setter', ctx=Load())
NameConstant(value=None)
arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Expr(value=Str(s='Return the MLE for the amplitude, in $[0, 1]$.'))
Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_mle', ctx=Load()))
Name(id='property', ctx=Load())
Name(id='float', ctx=Load())
arguments(args=[arg(arg='self', annotation=None), arg(arg='value', annotation=Name(id='float', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Expr(value=Str(s='Set the MLE for the amplitude, in $[0, 1]$.'))
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_mle', ctx=Store())], value=Name(id='value', ctx=Load()))
Attribute(value=Name(id='mle', ctx=Load()), attr='setter', ctx=Load())
NameConstant(value=None)
arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Expr(value=Str(s='Return the measurement samples with their measurement probability.'))
Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_samples', ctx=Load()))
Name(id='property', ctx=Load())
Subscript(value=Name(id='Dict', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='float', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load())), ctx=Load())
arguments(args=[arg(arg='self', annotation=None), arg(arg='value', annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='float', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load())), ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Expr(value=Str(s='Set the measurement samples with their measurement probability.'))
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_samples', ctx=Store())], value=Name(id='value', ctx=Load()))
Attribute(value=Name(id='samples', ctx=Load()), attr='setter', ctx=Load())
NameConstant(value=None)
arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Expr(value=Str(s='Return the measurements as integers with their measurement probability.'))
Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_y_measurements', ctx=Load()))
Name(id='property', ctx=Load())
Subscript(value=Name(id='Dict', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load())), ctx=Load())
arguments(args=[arg(arg='self', annotation=None), arg(arg='value', annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load())), ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Expr(value=Str(s='Set the measurements as integers with their measurement probability.'))
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_y_measurements', ctx=Store())], value=Name(id='value', ctx=Load()))
Attribute(value=Name(id='measurements', ctx=Load()), attr='setter', ctx=Load())
NameConstant(value=None)
arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Expr(value=Str(s='Return the maximum sampling probability.'))
Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_max_probability', ctx=Load()))
Name(id='property', ctx=Load())
Name(id='float', ctx=Load())
arguments(args=[arg(arg='self', annotation=None), arg(arg='value', annotation=Name(id='float', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Expr(value=Str(s='Set the maximum sampling probability.'))
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_max_probability', ctx=Store())], value=Name(id='value', ctx=Load()))
Attribute(value=Name(id='max_probability', ctx=Load()), attr='setter', ctx=Load())
NameConstant(value=None)
arg(arg='result', annotation=Name(id='AmplitudeEstimationResult', ctx=Load()))
arg(arg='observed', annotation=Name(id='bool', ctx=Load()))
NameConstant(value=False)
Str(s='Computes the Fisher information for the output of the previous run.\n\n    Args:\n        result: An amplitude estimation result for which to compute the confidence interval.\n        observed: If True, the observed Fisher information is returned, otherwise\n            the expected Fisher information.\n\n    Returns:\n        The Fisher information.\n    ')
Name(id='fisher_information', ctx=Store())
NameConstant(value=None)
Name(id='mlv', ctx=Store())
Attribute(value=Name(id='result', ctx=Load()), attr='mle', ctx=Load())
Name(id='m', ctx=Store())
Attribute(value=Name(id='result', ctx=Load()), attr='num_evaluation_qubits', ctx=Load())
Name(id='M', ctx=Store())
BinOp(left=Num(n=2), op=Pow(), right=Name(id='m', ctx=Load()))
Name(id='observed', ctx=Load())
Assign(targets=[Name(id='a_i', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='asarray', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='result', ctx=Load()), attr='samples', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[]))
Assign(targets=[Name(id='p_i', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='asarray', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='result', ctx=Load()), attr='samples', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[]))
Assign(targets=[Name(id='fisher_information', ctx=Store())], value=Call(func=Name(id='sum', ctx=Load()), args=[GeneratorExp(elt=BinOp(left=Name(id='p', ctx=Load()), op=Mult(), right=BinOp(left=Call(func=Name(id='derivative_log_pdf_a', ctx=Load()), args=[Name(id='a', ctx=Load()), Name(id='mlv', ctx=Load()), Name(id='m', ctx=Load())], keywords=[]), op=Pow(), right=Num(n=2))), generators=[comprehension(target=Tuple(elts=[Name(id='p', ctx=Store()), Name(id='a', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='zip', ctx=Load()), args=[Name(id='p_i', ctx=Load()), Name(id='a_i', ctx=Load())], keywords=[]), ifs=[], is_async=0)])], keywords=[]))
FunctionDef(name='integrand', args=arguments(args=[arg(arg='x', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Return(value=BinOp(left=BinOp(left=Call(func=Name(id='derivative_log_pdf_a', ctx=Load()), args=[Name(id='x', ctx=Load()), Name(id='mlv', ctx=Load()), Name(id='m', ctx=Load())], keywords=[]), op=Pow(), right=Num(n=2)), op=Mult(), right=Call(func=Name(id='pdf_a', ctx=Load()), args=[Name(id='x', ctx=Load()), Name(id='mlv', ctx=Load()), Name(id='m', ctx=Load())], keywords=[])))], decorator_list=[], returns=None)
Assign(targets=[Name(id='grid', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[BinOp(left=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='arange', ctx=Load()), args=[BinOp(left=BinOp(left=Name(id='M', ctx=Load()), op=Div(), right=Num(n=2)), op=Add(), right=Num(n=1))], keywords=[])), op=Div(), right=Name(id='M', ctx=Load()))], keywords=[]), op=Pow(), right=Num(n=2)))
Assign(targets=[Name(id='fisher_information', ctx=Store())], value=Call(func=Name(id='sum', ctx=Load()), args=[GeneratorExp(elt=Call(func=Name(id='integrand', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='grid', ctx=Load()), ifs=[], is_async=0)])], keywords=[]))
Name(id='fisher_information', ctx=Load())
Load()
arg(arg='result', annotation=Name(id='AmplitudeEstimationResult', ctx=Load()))
arg(arg='alpha', annotation=Name(id='float', ctx=Load()))
arg(arg='observed', annotation=Name(id='bool', ctx=Load()))
NameConstant(value=False)
Str(s='Compute the Fisher information confidence interval for the MLE of the previous run.\n\n    Args:\n        result: An amplitude estimation result for which to compute the confidence interval.\n        alpha: Specifies the (1 - alpha) confidence level (0 < alpha < 1).\n        observed: If True, the observed Fisher information is used to construct the\n            confidence interval, otherwise the expected Fisher information.\n\n    Returns:\n        The Fisher information confidence interval.\n    ')
Name(id='std', ctx=Store())
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sqrt', ctx=Load()), args=[BinOp(left=Attribute(value=Name(id='result', ctx=Load()), attr='shots', ctx=Load()), op=Mult(), right=Call(func=Name(id='_compute_fisher_information', ctx=Load()), args=[Name(id='result', ctx=Load()), Name(id='observed', ctx=Load())], keywords=[]))], keywords=[])
Name(id='confint', ctx=Store())
BinOp(left=Attribute(value=Name(id='result', ctx=Load()), attr='mle', ctx=Load()), op=Add(), right=BinOp(left=BinOp(left=Call(func=Attribute(value=Name(id='norm', ctx=Load()), attr='ppf', ctx=Load()), args=[BinOp(left=Num(n=1), op=Sub(), right=BinOp(left=Name(id='alpha', ctx=Load()), op=Div(), right=Num(n=2)))], keywords=[]), op=Div(), right=Name(id='std', ctx=Load())), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='array', ctx=Load()), args=[List(elts=[UnaryOp(op=USub(), operand=Num(n=1)), Num(n=1)], ctx=Load())], keywords=[])))
Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='post_processing', ctx=Load()), args=[Name(id='bound', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='bound', ctx=Store()), iter=Name(id='confint', ctx=Load()), ifs=[], is_async=0)])], keywords=[])
Name(id='List', ctx=Load())
Index(value=Name(id='float', ctx=Load()))
Load()
arg(arg='result', annotation=Name(id='AmplitudeEstimationResult', ctx=Load()))
arg(arg='alpha', annotation=Name(id='float', ctx=Load()))
Str(s='Compute the likelihood ratio confidence interval for the MLE of the previous run.\n\n    Args:\n        result: An amplitude estimation result for which to compute the confidence interval.\n        alpha: Specifies the (1 - alpha) confidence level (0 < alpha < 1).\n\n    Returns:\n        The likelihood ratio confidence interval.\n    ')
Name(id='m', ctx=Store())
Attribute(value=Name(id='result', ctx=Load()), attr='num_evaluation_qubits', ctx=Load())
Name(id='M', ctx=Store())
BinOp(left=Num(n=2), op=Pow(), right=Name(id='m', ctx=Load()))
Name(id='qae', ctx=Store())
Attribute(value=Name(id='result', ctx=Load()), attr='estimation', ctx=Load())
Name(id='y', ctx=Store())
Call(func=Name(id='int', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='round', ctx=Load()), args=[BinOp(left=BinOp(left=Name(id='M', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='arcsin', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sqrt', ctx=Load()), args=[Name(id='qae', ctx=Load())], keywords=[])], keywords=[])), op=Div(), right=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()))], keywords=[])], keywords=[])
Compare(left=Name(id='y', ctx=Load()), ops=[Eq()], comparators=[Num(n=0)])
Assign(targets=[Name(id='right_of_qae', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[BinOp(left=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Mult(), right=BinOp(left=Name(id='y', ctx=Load()), op=Add(), right=Num(n=1))), op=Div(), right=Name(id='M', ctx=Load()))], keywords=[]), op=Pow(), right=Num(n=2)))
Assign(targets=[Name(id='bubbles', ctx=Store())], value=List(elts=[Name(id='qae', ctx=Load()), Name(id='right_of_qae', ctx=Load())], ctx=Load()))
If(test=Compare(left=Name(id='y', ctx=Load()), ops=[Eq()], comparators=[Call(func=Name(id='int', ctx=Load()), args=[BinOp(left=Name(id='M', ctx=Load()), op=Div(), right=Num(n=2))], keywords=[])]), body=[Assign(targets=[Name(id='left_of_qae', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[BinOp(left=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Mult(), right=BinOp(left=Name(id='y', ctx=Load()), op=Sub(), right=Num(n=1))), op=Div(), right=Name(id='M', ctx=Load()))], keywords=[]), op=Pow(), right=Num(n=2))), Assign(targets=[Name(id='bubbles', ctx=Store())], value=List(elts=[Name(id='left_of_qae', ctx=Load()), Name(id='qae', ctx=Load())], ctx=Load()))], orelse=[Assign(targets=[Name(id='left_of_qae', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[BinOp(left=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Mult(), right=BinOp(left=Name(id='y', ctx=Load()), op=Sub(), right=Num(n=1))), op=Div(), right=Name(id='M', ctx=Load()))], keywords=[]), op=Pow(), right=Num(n=2))), Assign(targets=[Name(id='right_of_qae', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[BinOp(left=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Mult(), right=BinOp(left=Name(id='y', ctx=Load()), op=Add(), right=Num(n=1))), op=Div(), right=Name(id='M', ctx=Load()))], keywords=[]), op=Pow(), right=Num(n=2))), Assign(targets=[Name(id='bubbles', ctx=Store())], value=List(elts=[Name(id='left_of_qae', ctx=Load()), Name(id='qae', ctx=Load()), Name(id='right_of_qae', ctx=Load())], ctx=Load()))])
Name(id='a_i', ctx=Store())
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='asarray', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='result', ctx=Load()), attr='samples', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[])
Name(id='p_i', ctx=Store())
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='asarray', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='result', ctx=Load()), attr='samples', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[])
arguments(args=[arg(arg='a', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Return(value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sum', ctx=Load()), args=[BinOp(left=BinOp(left=Attribute(value=Name(id='result', ctx=Load()), attr='shots', ctx=Load()), op=Mult(), right=Name(id='p_i', ctx=Load())), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='log', ctx=Load()), args=[Call(func=Name(id='pdf_a', ctx=Load()), args=[Name(id='a_i', ctx=Load()), Name(id='a', ctx=Load()), Name(id='m', ctx=Load())], keywords=[])], keywords=[]))], keywords=[]))
Name(id='loglik_mle', ctx=Store())
Call(func=Name(id='loglikelihood', ctx=Load()), args=[Attribute(value=Name(id='result', ctx=Load()), attr='mle', ctx=Load())], keywords=[])
Name(id='thres', ctx=Store())
BinOp(left=Name(id='loglik_mle', ctx=Load()), op=Sub(), right=BinOp(left=Call(func=Attribute(value=Name(id='chi2', ctx=Load()), attr='ppf', ctx=Load()), args=[BinOp(left=Num(n=1), op=Sub(), right=Name(id='alpha', ctx=Load()))], keywords=[keyword(arg='df', value=Num(n=1))]), op=Div(), right=Num(n=2)))
arguments(args=[arg(arg='x', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Return(value=BinOp(left=Call(func=Name(id='loglikelihood', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), op=Sub(), right=Name(id='thres', ctx=Load())))
Name(id='lower', ctx=Store())
Name(id='upper', ctx=Store())
Attribute(value=Name(id='result', ctx=Load()), attr='mle', ctx=Load())
Tuple(elts=[Name(id='a', ctx=Store()), Name(id='b', ctx=Store())], ctx=Store())
Call(func=Name(id='zip', ctx=Load()), args=[Subscript(value=Name(id='bubbles', ctx=Load()), slice=Slice(lower=None, upper=UnaryOp(op=USub(), operand=Num(n=1)), step=None), ctx=Load()), Subscript(value=Name(id='bubbles', ctx=Load()), slice=Slice(lower=Num(n=1), upper=None, step=None), ctx=Load())], keywords=[])
Assign(targets=[Tuple(elts=[Name(id='locmax', ctx=Store()), Name(id='val', ctx=Store())], ctx=Store())], value=Call(func=Name(id='bisect_max', ctx=Load()), args=[Name(id='loglikelihood', ctx=Load()), Name(id='a', ctx=Load()), Name(id='b', ctx=Load())], keywords=[keyword(arg='retval', value=NameConstant(value=True))]))
If(test=Compare(left=Name(id='val', ctx=Load()), ops=[GtE()], comparators=[Name(id='thres', ctx=Load())]), body=[If(test=Compare(left=BinOp(left=Call(func=Name(id='cut', ctx=Load()), args=[Name(id='a', ctx=Load())], keywords=[]), op=Mult(), right=Call(func=Name(id='cut', ctx=Load()), args=[Name(id='locmax', ctx=Load())], keywords=[])), ops=[Lt()], comparators=[Num(n=0)]), body=[Assign(targets=[Name(id='left', ctx=Store())], value=Call(func=Name(id='bisect', ctx=Load()), args=[Name(id='cut', ctx=Load()), Name(id='a', ctx=Load()), Name(id='locmax', ctx=Load())], keywords=[])), Assign(targets=[Name(id='lower', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='minimum', ctx=Load()), args=[Name(id='lower', ctx=Load()), Name(id='left', ctx=Load())], keywords=[]))], orelse=[]), If(test=Compare(left=BinOp(left=Call(func=Name(id='cut', ctx=Load()), args=[Name(id='locmax', ctx=Load())], keywords=[]), op=Mult(), right=Call(func=Name(id='cut', ctx=Load()), args=[Name(id='b', ctx=Load())], keywords=[])), ops=[Lt()], comparators=[Num(n=0)]), body=[Assign(targets=[Name(id='right', ctx=Store())], value=Call(func=Name(id='bisect', ctx=Load()), args=[Name(id='cut', ctx=Load()), Name(id='locmax', ctx=Load()), Name(id='b', ctx=Load())], keywords=[])), Assign(targets=[Name(id='upper', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='maximum', ctx=Load()), args=[Name(id='upper', ctx=Load()), Name(id='right', ctx=Load())], keywords=[]))], orelse=[])], orelse=[])
Name(id='confint', ctx=Store())
List(elts=[Name(id='lower', ctx=Load()), Name(id='upper', ctx=Load())], ctx=Load())
Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='post_processing', ctx=Load()), args=[Name(id='bound', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='bound', ctx=Store()), iter=Name(id='confint', ctx=Load()), ifs=[], is_async=0)])], keywords=[])
Name(id='List', ctx=Load())
Index(value=Name(id='float', ctx=Load()))
Load()
arg(arg='self', annotation=None)
arg(arg='num_eval_qubits', annotation=Name(id='int', ctx=Load()))
arg(arg='phase_estimation_circuit', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Name(id='QuantumCircuit', ctx=Load())), ctx=Load()))
arg(arg='iqft', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Name(id='QuantumCircuit', ctx=Load())), ctx=Load()))
arg(arg='quantum_instance', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='QuantumInstance', ctx=Load()), Name(id='Backend', ctx=Load())], ctx=Load())), ctx=Load())), ctx=Load()))
NameConstant(value=None)
NameConstant(value=None)
NameConstant(value=None)
Str(s='\n        Args:\n            num_eval_qubits: The number of evaluation qubits.\n            phase_estimation_circuit: The phase estimation circuit used to run the algorithm.\n                Defaults to the standard phase estimation circuit from the circuit library,\n                `qiskit.circuit.library.PhaseEstimation` when None.\n            iqft: The inverse quantum Fourier transform component, defaults to using a standard\n                implementation from `qiskit.circuit.library.QFT` when None.\n            quantum_instance: The backend (or `QuantumInstance`) to execute the circuits on.\n\n        Raises:\n            ValueError: If the number of evaluation qubits is smaller than 1.\n        ')
Compare(left=Name(id='num_eval_qubits', ctx=Load()), ops=[Lt()], comparators=[Num(n=1)])
Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Str(s='The number of evaluation qubits must at least be 1.')], keywords=[]), cause=None)
Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[])
Attribute(value=Name(id='self', ctx=Load()), attr='quantum_instance', ctx=Store())
Name(id='quantum_instance', ctx=Load())
Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Store())
Name(id='num_eval_qubits', ctx=Load())
Attribute(value=Name(id='self', ctx=Load()), attr='_M', ctx=Store())
BinOp(left=Num(n=2), op=Pow(), right=Name(id='num_eval_qubits', ctx=Load()))
Attribute(value=Name(id='self', ctx=Load()), attr='_iqft', ctx=Store())
Name(id='iqft', ctx=Load())
Attribute(value=Name(id='self', ctx=Load()), attr='_pec', ctx=Store())
Name(id='phase_estimation_circuit', ctx=Load())
arg(arg='self', annotation=None)
Str(s='Get the quantum instance.\n\n        Returns:\n            The quantum instance used to run this algorithm.\n        ')
Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load())
Load()
Name(id='Optional', ctx=Load())
Index(value=Name(id='QuantumInstance', ctx=Load()))
Load()
arg(arg='self', annotation=None)
arg(arg='quantum_instance', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='QuantumInstance', ctx=Load()), Name(id='Backend', ctx=Load())], ctx=Load())), ctx=Load()))
Str(s='Set quantum instance.\n\n        Args:\n            quantum_instance: The quantum instance used to run this algorithm.\n        ')
Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='quantum_instance', ctx=Load()), Name(id='Backend', ctx=Load())], keywords=[])
Assign(targets=[Name(id='quantum_instance', ctx=Store())], value=Call(func=Name(id='QuantumInstance', ctx=Load()), args=[Name(id='quantum_instance', ctx=Load())], keywords=[]))
Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Store())
Name(id='quantum_instance', ctx=Load())
Name(id='quantum_instance', ctx=Load())
Load()
arg(arg='self', annotation=None)
arg(arg='estimation_problem', annotation=Name(id='EstimationProblem', ctx=Load()))
arg(arg='measurement', annotation=Name(id='bool', ctx=Load()))
NameConstant(value=False)
Str(s='Construct the Amplitude Estimation quantum circuit.\n\n        Args:\n            estimation_problem: The estimation problem for which to construct the QAE circuit.\n            measurement: Boolean flag to indicate if measurements should be included in the circuit.\n\n        Returns:\n            The QuantumCircuit object for the constructed circuit.\n        ')
Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_pec', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)])
Assign(targets=[Name(id='pec', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_pec', ctx=Load()))
ImportFrom(module='qiskit.circuit.library', names=[alias(name='PhaseEstimation', asname=None)], level=0)
Assign(targets=[Name(id='pec', ctx=Store())], value=Call(func=Name(id='PhaseEstimation', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Load()), Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='grover_operator', ctx=Load())], keywords=[keyword(arg='iqft', value=Attribute(value=Name(id='self', ctx=Load()), attr='_iqft', ctx=Load()))]))
Name(id='circuit', ctx=Store())
Call(func=Name(id='QuantumCircuit', ctx=Load()), args=[Starred(value=Attribute(value=Name(id='pec', ctx=Load()), attr='qregs', ctx=Load()), ctx=Load())], keywords=[])
Call(func=Attribute(value=Name(id='circuit', ctx=Load()), attr='compose', ctx=Load()), args=[Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='state_preparation', ctx=Load()), Call(func=Name(id='list', ctx=Load()), args=[Call(func=Name(id='range', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Load()), Attribute(value=Name(id='circuit', ctx=Load()), attr='num_qubits', ctx=Load())], keywords=[])], keywords=[])], keywords=[keyword(arg='inplace', value=NameConstant(value=True))])
Call(func=Attribute(value=Name(id='circuit', ctx=Load()), attr='compose', ctx=Load()), args=[Name(id='pec', ctx=Load())], keywords=[keyword(arg='inplace', value=NameConstant(value=True))])
Name(id='measurement', ctx=Load())
Assign(targets=[Name(id='cr', ctx=Store())], value=Call(func=Name(id='ClassicalRegister', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Load())], keywords=[]))
Expr(value=Call(func=Attribute(value=Name(id='circuit', ctx=Load()), attr='add_register', ctx=Load()), args=[Name(id='cr', ctx=Load())], keywords=[]))
Expr(value=Call(func=Attribute(value=Name(id='circuit', ctx=Load()), attr='measure', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Name(id='range', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Load())], keywords=[])], keywords=[]), Call(func=Name(id='list', ctx=Load()), args=[Call(func=Name(id='range', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Load())], keywords=[])], keywords=[])], keywords=[]))
Name(id='circuit', ctx=Load())
Load()
arg(arg='self', annotation=None)
arg(arg='circuit_results', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Subscript(value=Name(id='Dict', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load())), ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())], ctx=Load())), ctx=Load()))
arg(arg='threshold', annotation=Name(id='float', ctx=Load()))
Num(n=1e-06)
Str(s='Evaluate the results from the circuit simulation.\n\n        Given the probabilities from statevector simulation of the QAE circuit, compute the\n        probabilities that the measurements y/gridpoints a are the best estimate.\n\n        Args:\n            circuit_results: The circuit result from the QAE circuit. Can be either a counts dict\n                or a statevector.\n            threshold: Measurements with probabilities below the threshold are discarded.\n\n        Returns:\n            Dictionaries containing the a gridpoints with respective probabilities and\n                y measurements with respective probabilities, in this order.\n        ')
Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='circuit_results', ctx=Load()), Name(id='dict', ctx=Load())], keywords=[])
Assign(targets=[Tuple(elts=[Name(id='samples', ctx=Store()), Name(id='measurements', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_evaluate_count_results', ctx=Load()), args=[Name(id='circuit_results', ctx=Load())], keywords=[]))
Assign(targets=[Tuple(elts=[Name(id='samples', ctx=Store()), Name(id='measurements', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_evaluate_statevector_results', ctx=Load()), args=[Name(id='circuit_results', ctx=Load())], keywords=[]))
Name(id='samples', ctx=Store())
DictComp(key=Name(id='a', ctx=Load()), value=Name(id='p', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='a', ctx=Store()), Name(id='p', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='samples', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), ifs=[Compare(left=Name(id='p', ctx=Load()), ops=[Gt()], comparators=[Name(id='threshold', ctx=Load())])], is_async=0)])
Name(id='measurements', ctx=Store())
DictComp(key=Name(id='y', ctx=Load()), value=Name(id='p', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='y', ctx=Store()), Name(id='p', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='measurements', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), ifs=[Compare(left=Name(id='p', ctx=Load()), ops=[Gt()], comparators=[Name(id='threshold', ctx=Load())])], is_async=0)])
Tuple(elts=[Name(id='samples', ctx=Load()), Name(id='measurements', ctx=Load())], ctx=Load())
Name(id='Tuple', ctx=Load())
Index(value=Tuple(elts=[Subscript(value=Name(id='Dict', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load())), ctx=Load()), Subscript(value=Name(id='Dict', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='float', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load())), ctx=Load())], ctx=Load()))
Load()
arg(arg='self', annotation=None)
arg(arg='statevector', annotation=None)
Name(id='measurements', ctx=Store())
Call(func=Name(id='OrderedDict', ctx=Load()), args=[], keywords=[])
Name(id='num_qubits', ctx=Store())
Call(func=Name(id='int', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='log2', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='statevector', ctx=Load())], keywords=[])], keywords=[])], keywords=[])
Tuple(elts=[Name(id='i', ctx=Store()), Name(id='amplitude', ctx=Store())], ctx=Store())
Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='statevector', ctx=Load())], keywords=[])
Assign(targets=[Name(id='b', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Subscript(value=Call(func=Name(id='bin', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]), slice=Slice(lower=Num(n=2), upper=None, step=None), ctx=Load()), attr='zfill', ctx=Load()), args=[Name(id='num_qubits', ctx=Load())], keywords=[]), slice=Slice(lower=None, upper=None, step=UnaryOp(op=USub(), operand=Num(n=1))), ctx=Load()))
Assign(targets=[Name(id='y', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='b', ctx=Load()), slice=Slice(lower=None, upper=Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Load()), step=None), ctx=Load()), Num(n=2)], keywords=[]))
Assign(targets=[Subscript(value=Name(id='measurements', ctx=Load()), slice=Index(value=Name(id='y', ctx=Load())), ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='measurements', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='y', ctx=Load()), Num(n=0)], keywords=[]), op=Add(), right=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='abs', ctx=Load()), args=[Name(id='amplitude', ctx=Load())], keywords=[]), op=Pow(), right=Num(n=2))))
Name(id='samples', ctx=Store())
Call(func=Name(id='OrderedDict', ctx=Load()), args=[], keywords=[])
Tuple(elts=[Name(id='y', ctx=Store()), Name(id='probability', ctx=Store())], ctx=Store())
Call(func=Attribute(value=Name(id='measurements', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])
If(test=Compare(left=Name(id='y', ctx=Load()), ops=[GtE()], comparators=[Call(func=Name(id='int', ctx=Load()), args=[BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='_M', ctx=Load()), op=Div(), right=Num(n=2))], keywords=[])]), body=[Assign(targets=[Name(id='y', ctx=Store())], value=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='_M', ctx=Load()), op=Sub(), right=Name(id='y', ctx=Load())))], orelse=[])
Assign(targets=[Name(id='a', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='round', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='power', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[BinOp(left=BinOp(left=Name(id='y', ctx=Load()), op=Mult(), right=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load())), op=Div(), right=BinOp(left=Num(n=2), op=Pow(), right=Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Load())))], keywords=[]), Num(n=2)], keywords=[])], keywords=[keyword(arg='decimals', value=Num(n=7))]))
Assign(targets=[Subscript(value=Name(id='samples', ctx=Load()), slice=Index(value=Name(id='a', ctx=Load())), ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='samples', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='a', ctx=Load()), Num(n=0)], keywords=[]), op=Add(), right=Name(id='probability', ctx=Load())))
Tuple(elts=[Name(id='samples', ctx=Load()), Name(id='measurements', ctx=Load())], ctx=Load())
arg(arg='self', annotation=None)
arg(arg='counts', annotation=None)
Name(id='measurements', ctx=Store())
Call(func=Name(id='OrderedDict', ctx=Load()), args=[], keywords=[])
Name(id='samples', ctx=Store())
Call(func=Name(id='OrderedDict', ctx=Load()), args=[], keywords=[])
Name(id='shots', ctx=Store())
Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()), attr='_run_config', ctx=Load()), attr='shots', ctx=Load())
Tuple(elts=[Name(id='state', ctx=Store()), Name(id='count', ctx=Store())], ctx=Store())
Call(func=Attribute(value=Name(id='counts', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])
Assign(targets=[Name(id='y', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Subscript(value=Call(func=Attribute(value=Name(id='state', ctx=Load()), attr='replace', ctx=Load()), args=[Str(s=' '), Str(s='')], keywords=[]), slice=Slice(lower=None, upper=Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Load()), step=None), ctx=Load()), slice=Slice(lower=None, upper=None, step=UnaryOp(op=USub(), operand=Num(n=1))), ctx=Load()), Num(n=2)], keywords=[]))
Assign(targets=[Name(id='probability', ctx=Store())], value=BinOp(left=Name(id='count', ctx=Load()), op=Div(), right=Name(id='shots', ctx=Load())))
Assign(targets=[Subscript(value=Name(id='measurements', ctx=Load()), slice=Index(value=Name(id='y', ctx=Load())), ctx=Store())], value=Name(id='probability', ctx=Load()))
Assign(targets=[Name(id='a', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='round', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='power', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[BinOp(left=BinOp(left=Name(id='y', ctx=Load()), op=Mult(), right=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load())), op=Div(), right=BinOp(left=Num(n=2), op=Pow(), right=Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Load())))], keywords=[]), Num(n=2)], keywords=[])], keywords=[keyword(arg='decimals', value=Num(n=7))]))
Assign(targets=[Subscript(value=Name(id='samples', ctx=Load()), slice=Index(value=Name(id='a', ctx=Load())), ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='samples', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='a', ctx=Load()), Num(n=0.0)], keywords=[]), op=Add(), right=Name(id='probability', ctx=Load())))
Tuple(elts=[Name(id='samples', ctx=Load()), Name(id='measurements', ctx=Load())], ctx=Load())
arg(arg='result', annotation=Str(s='AmplitudeEstimationResult'))
arg(arg='apply_post_processing', annotation=Name(id='bool', ctx=Load()))
NameConstant(value=False)
Str(s='Compute the Maximum Likelihood Estimator (MLE).\n\n        Args:\n            result: An amplitude estimation result object.\n            apply_post_processing: If True, apply the post processing to the MLE before returning\n                it.\n\n        Returns:\n            The MLE for the provided result object.\n        ')
Name(id='m', ctx=Store())
Attribute(value=Name(id='result', ctx=Load()), attr='num_evaluation_qubits', ctx=Load())
Name(id='M', ctx=Store())
BinOp(left=Num(n=2), op=Pow(), right=Name(id='m', ctx=Load()))
Name(id='qae', ctx=Store())
Attribute(value=Name(id='result', ctx=Load()), attr='estimation', ctx=Load())
Name(id='a_i', ctx=Store())
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='asarray', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='result', ctx=Load()), attr='samples', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[])
Name(id='p_i', ctx=Store())
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='asarray', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='result', ctx=Load()), attr='samples', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[])
arguments(args=[arg(arg='a', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Return(value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sum', ctx=Load()), args=[BinOp(left=BinOp(left=Attribute(value=Name(id='result', ctx=Load()), attr='shots', ctx=Load()), op=Mult(), right=Name(id='p_i', ctx=Load())), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='log', ctx=Load()), args=[Call(func=Name(id='pdf_a', ctx=Load()), args=[Name(id='a_i', ctx=Load()), Name(id='a', ctx=Load()), Name(id='m', ctx=Load())], keywords=[])], keywords=[]))], keywords=[]))
Name(id='y', ctx=Store())
Call(func=Name(id='int', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='round', ctx=Load()), args=[BinOp(left=BinOp(left=Name(id='M', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='arcsin', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sqrt', ctx=Load()), args=[Name(id='qae', ctx=Load())], keywords=[])], keywords=[])), op=Div(), right=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()))], keywords=[])], keywords=[])
Compare(left=Name(id='y', ctx=Load()), ops=[Eq()], comparators=[Num(n=0)])
Assign(targets=[Name(id='right_of_qae', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[BinOp(left=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Mult(), right=BinOp(left=Name(id='y', ctx=Load()), op=Add(), right=Num(n=1))), op=Div(), right=Name(id='M', ctx=Load()))], keywords=[]), op=Pow(), right=Num(n=2)))
Assign(targets=[Name(id='bubbles', ctx=Store())], value=List(elts=[Name(id='qae', ctx=Load()), Name(id='right_of_qae', ctx=Load())], ctx=Load()))
If(test=Compare(left=Name(id='y', ctx=Load()), ops=[Eq()], comparators=[Call(func=Name(id='int', ctx=Load()), args=[BinOp(left=Name(id='M', ctx=Load()), op=Div(), right=Num(n=2))], keywords=[])]), body=[Assign(targets=[Name(id='left_of_qae', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[BinOp(left=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Mult(), right=BinOp(left=Name(id='y', ctx=Load()), op=Sub(), right=Num(n=1))), op=Div(), right=Name(id='M', ctx=Load()))], keywords=[]), op=Pow(), right=Num(n=2))), Assign(targets=[Name(id='bubbles', ctx=Store())], value=List(elts=[Name(id='left_of_qae', ctx=Load()), Name(id='qae', ctx=Load())], ctx=Load()))], orelse=[Assign(targets=[Name(id='left_of_qae', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[BinOp(left=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Mult(), right=BinOp(left=Name(id='y', ctx=Load()), op=Sub(), right=Num(n=1))), op=Div(), right=Name(id='M', ctx=Load()))], keywords=[]), op=Pow(), right=Num(n=2))), Assign(targets=[Name(id='right_of_qae', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[BinOp(left=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Mult(), right=BinOp(left=Name(id='y', ctx=Load()), op=Add(), right=Num(n=1))), op=Div(), right=Name(id='M', ctx=Load()))], keywords=[]), op=Pow(), right=Num(n=2))), Assign(targets=[Name(id='bubbles', ctx=Store())], value=List(elts=[Name(id='left_of_qae', ctx=Load()), Name(id='qae', ctx=Load()), Name(id='right_of_qae', ctx=Load())], ctx=Load()))])
Name(id='a_opt', ctx=Store())
Name(id='qae', ctx=Load())
Name(id='loglik_opt', ctx=Store())
Call(func=Name(id='loglikelihood', ctx=Load()), args=[Name(id='a_opt', ctx=Load())], keywords=[])
Tuple(elts=[Name(id='a', ctx=Store()), Name(id='b', ctx=Store())], ctx=Store())
Call(func=Name(id='zip', ctx=Load()), args=[Subscript(value=Name(id='bubbles', ctx=Load()), slice=Slice(lower=None, upper=UnaryOp(op=USub(), operand=Num(n=1)), step=None), ctx=Load()), Subscript(value=Name(id='bubbles', ctx=Load()), slice=Slice(lower=Num(n=1), upper=None, step=None), ctx=Load())], keywords=[])
Assign(targets=[Tuple(elts=[Name(id='locmax', ctx=Store()), Name(id='val', ctx=Store())], ctx=Store())], value=Call(func=Name(id='bisect_max', ctx=Load()), args=[Name(id='loglikelihood', ctx=Load()), Name(id='a', ctx=Load()), Name(id='b', ctx=Load())], keywords=[keyword(arg='retval', value=NameConstant(value=True))]))
If(test=Compare(left=Name(id='val', ctx=Load()), ops=[Gt()], comparators=[Name(id='loglik_opt', ctx=Load())]), body=[Assign(targets=[Name(id='a_opt', ctx=Store())], value=Name(id='locmax', ctx=Load())), Assign(targets=[Name(id='loglik_opt', ctx=Store())], value=Name(id='val', ctx=Load()))], orelse=[])
Name(id='apply_post_processing', ctx=Load())
Return(value=Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='post_processing', ctx=Load()), args=[Name(id='a_opt', ctx=Load())], keywords=[]))
Name(id='a_opt', ctx=Load())
Load()
Load()
arg(arg='self', annotation=None)
arg(arg='estimation_problem', annotation=Name(id='EstimationProblem', ctx=Load()))
Str(s='Run the amplitude estimation algorithm on provided estimation problem.\n\n        Args:\n            estimation_problem: The estimation problem.\n\n        Returns:\n            An amplitude estimation results object.\n\n        Raises:\n            ValueError: If `state_preparation` or `objective_qubits` are not set in the\n                `estimation_problem`.\n        ')
Compare(left=Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='state_preparation', ctx=Load()), ops=[Is()], comparators=[NameConstant(value=None)])
Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Str(s='The state_preparation property of the estimation problem must be set.')], keywords=[]), cause=None)
Compare(left=Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='objective_qubits', ctx=Load()), ops=[Is()], comparators=[NameConstant(value=None)])
Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Str(s='The objective_qubits property of the estimation problem must be set.')], keywords=[]), cause=None)
Name(id='result', ctx=Store())
Call(func=Name(id='AmplitudeEstimationResult', ctx=Load()), args=[], keywords=[])
Attribute(value=Name(id='result', ctx=Load()), attr='num_evaluation_qubits', ctx=Store())
Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Load())
Attribute(value=Name(id='result', ctx=Load()), attr='post_processing', ctx=Store())
Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='post_processing', ctx=Load())
Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()), attr='is_statevector', ctx=Load())
Assign(targets=[Name(id='circuit', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='construct_circuit', ctx=Load()), args=[Name(id='estimation_problem', ctx=Load())], keywords=[keyword(arg='measurement', value=NameConstant(value=False))]))
Assign(targets=[Name(id='statevector', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()), attr='execute', ctx=Load()), args=[Name(id='circuit', ctx=Load())], keywords=[]), attr='get_statevector', ctx=Load()), args=[], keywords=[]))
Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='circuit_results', ctx=Store())], value=Name(id='statevector', ctx=Load()))
Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='shots', ctx=Store())], value=Num(n=1))
Assign(targets=[Name(id='circuit', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='construct_circuit', ctx=Load()), args=[Name(id='estimation_problem', ctx=Load())], keywords=[keyword(arg='measurement', value=NameConstant(value=True))]))
Assign(targets=[Name(id='counts', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()), attr='execute', ctx=Load()), args=[Name(id='circuit', ctx=Load())], keywords=[]), attr='get_counts', ctx=Load()), args=[], keywords=[]))
Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='circuit_results', ctx=Store())], value=Name(id='counts', ctx=Load()))
Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='shots', ctx=Store())], value=Call(func=Name(id='sum', ctx=Load()), args=[Call(func=Attribute(value=Name(id='counts', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[]))
Tuple(elts=[Name(id='samples', ctx=Store()), Name(id='measurements', ctx=Store())], ctx=Store())
Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='evaluate_measurements', ctx=Load()), args=[Attribute(value=Name(id='result', ctx=Load()), attr='circuit_results', ctx=Load())], keywords=[])
Attribute(value=Name(id='result', ctx=Load()), attr='samples', ctx=Store())
Name(id='samples', ctx=Load())
Attribute(value=Name(id='result', ctx=Load()), attr='samples_processed', ctx=Store())
DictComp(key=Call(func=Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='post_processing', ctx=Load()), args=[Name(id='a', ctx=Load())], keywords=[]), value=Name(id='p', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='a', ctx=Store()), Name(id='p', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='samples', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), ifs=[], is_async=0)])
Attribute(value=Name(id='result', ctx=Load()), attr='measurements', ctx=Store())
Name(id='measurements', ctx=Load())
Attribute(value=Name(id='result', ctx=Load()), attr='max_probability', ctx=Store())
Num(n=0)
Tuple(elts=[Name(id='amplitude', ctx=Store()), Tuple(elts=[Name(id='mapped', ctx=Store()), Name(id='prob', ctx=Store())], ctx=Store())], ctx=Store())
Call(func=Name(id='zip', ctx=Load()), args=[Call(func=Attribute(value=Name(id='samples', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Attribute(value=Name(id='result', ctx=Load()), attr='samples_processed', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[])
If(test=Compare(left=Name(id='prob', ctx=Load()), ops=[Gt()], comparators=[Attribute(value=Name(id='result', ctx=Load()), attr='max_probability', ctx=Load())]), body=[Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='max_probability', ctx=Store())], value=Name(id='prob', ctx=Load())), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='estimation', ctx=Store())], value=Name(id='amplitude', ctx=Load())), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='estimation_processed', ctx=Store())], value=Name(id='mapped', ctx=Load()))], orelse=[])
Attribute(value=Name(id='result', ctx=Load()), attr='num_oracle_queries', ctx=Store())
BinOp(left=Attribute(value=Name(id='result', ctx=Load()), attr='shots', ctx=Load()), op=Mult(), right=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='_M', ctx=Load()), op=Sub(), right=Num(n=1)))
Name(id='mle', ctx=Store())
Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='compute_mle', ctx=Load()), args=[Name(id='result', ctx=Load())], keywords=[])
Attribute(value=Name(id='result', ctx=Load()), attr='mle', ctx=Store())
Name(id='mle', ctx=Load())
Attribute(value=Name(id='result', ctx=Load()), attr='mle_processed', ctx=Store())
Call(func=Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='post_processing', ctx=Load()), args=[Name(id='mle', ctx=Load())], keywords=[])
Attribute(value=Name(id='result', ctx=Load()), attr='confidence_interval', ctx=Store())
Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='compute_confidence_interval', ctx=Load()), args=[Name(id='result', ctx=Load())], keywords=[])
Attribute(value=Name(id='result', ctx=Load()), attr='confidence_interval_processed', ctx=Store())
Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='post_processing', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='value', ctx=Store()), iter=Attribute(value=Name(id='result', ctx=Load()), attr='confidence_interval', ctx=Load()), ifs=[], is_async=0)])], keywords=[])
Name(id='result', ctx=Load())
arg(arg='result', annotation=Str(s='AmplitudeEstimationResult'))
arg(arg='alpha', annotation=Name(id='float', ctx=Load()))
arg(arg='kind', annotation=Name(id='str', ctx=Load()))
Num(n=0.05)
Str(s='likelihood_ratio')
Str(s="Compute the (1 - alpha) confidence interval.\n\n        Args:\n            result: An amplitude estimation result for which to compute the confidence interval.\n            alpha: Confidence level: compute the (1 - alpha) confidence interval.\n            kind: The method to compute the confidence interval, can be 'fisher', 'observed_fisher'\n                or 'likelihood_ratio' (default)\n\n        Returns:\n            The (1 - alpha) confidence interval of the specified kind.\n\n        Raises:\n            AquaError: If 'mle' is not in self._ret.keys() (i.e. `run` was not called yet).\n            NotImplementedError: If the confidence interval method `kind` is not implemented.\n        ")
Call(func=Name(id='isinstance', ctx=Load()), args=[Attribute(value=Name(id='result', ctx=Load()), attr='circuit_results', ctx=Load()), Tuple(elts=[Name(id='list', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())], ctx=Load())], keywords=[])
Return(value=Tuple(elts=[Attribute(value=Name(id='result', ctx=Load()), attr='mle', ctx=Load()), Attribute(value=Name(id='result', ctx=Load()), attr='mle', ctx=Load())], ctx=Load()))
Compare(left=Name(id='kind', ctx=Load()), ops=[In()], comparators=[List(elts=[Str(s='likelihood_ratio'), Str(s='lr')], ctx=Load())])
Return(value=Call(func=Name(id='_likelihood_ratio_confint', ctx=Load()), args=[Name(id='result', ctx=Load()), Name(id='alpha', ctx=Load())], keywords=[]))
Compare(left=Name(id='kind', ctx=Load()), ops=[In()], comparators=[List(elts=[Str(s='fisher'), Str(s='fi')], ctx=Load())])
Return(value=Call(func=Name(id='_fisher_confint', ctx=Load()), args=[Name(id='result', ctx=Load()), Name(id='alpha', ctx=Load())], keywords=[keyword(arg='observed', value=NameConstant(value=False))]))
Compare(left=Name(id='kind', ctx=Load()), ops=[In()], comparators=[List(elts=[Str(s='observed_fisher'), Str(s='observed_information'), Str(s='oi')], ctx=Load())])
Return(value=Call(func=Name(id='_fisher_confint', ctx=Load()), args=[Name(id='result', ctx=Load()), Name(id='alpha', ctx=Load())], keywords=[keyword(arg='observed', value=NameConstant(value=True))]))
Call(func=Name(id='NotImplementedError', ctx=Load()), args=[JoinedStr(values=[Str(s='CI `'), FormattedValue(value=Name(id='kind', ctx=Load()), conversion=-1, format_spec=None), Str(s='` is not implemented.')])], keywords=[])
Load()
Name(id='Tuple', ctx=Load())
Index(value=Tuple(elts=[Name(id='float', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load()))
Load()
arg(arg='self', annotation=None)
Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[])
Attribute(value=Name(id='self', ctx=Load()), attr='_num_evaluation_qubits', ctx=Store())
NameConstant(value=None)
Attribute(value=Name(id='self', ctx=Load()), attr='_mle', ctx=Store())
NameConstant(value=None)
Attribute(value=Name(id='self', ctx=Load()), attr='_mle_processed', ctx=Store())
NameConstant(value=None)
Attribute(value=Name(id='self', ctx=Load()), attr='_samples', ctx=Store())
NameConstant(value=None)
Attribute(value=Name(id='self', ctx=Load()), attr='_samples_processed', ctx=Store())
NameConstant(value=None)
Attribute(value=Name(id='self', ctx=Load()), attr='_y_measurements', ctx=Store())
NameConstant(value=None)
Attribute(value=Name(id='self', ctx=Load()), attr='_max_probability', ctx=Store())
NameConstant(value=None)
arg(arg='self', annotation=None)
Str(s='Returns the number of evaluation qubits.')
Attribute(value=Name(id='self', ctx=Load()), attr='_num_evaluation_qubits', ctx=Load())
Load()
Load()
arg(arg='self', annotation=None)
arg(arg='num_evaluation_qubits', annotation=Name(id='int', ctx=Load()))
Str(s='Set the number of evaluation qubits.')
Attribute(value=Name(id='self', ctx=Load()), attr='_num_evaluation_qubits', ctx=Store())
Name(id='num_evaluation_qubits', ctx=Load())
Name(id='num_evaluation_qubits', ctx=Load())
Load()
arg(arg='self', annotation=None)
Str(s='Return the post-processed MLE for the amplitude.')
Attribute(value=Name(id='self', ctx=Load()), attr='_mle_processed', ctx=Load())
Load()
Load()
arg(arg='self', annotation=None)
arg(arg='value', annotation=Name(id='float', ctx=Load()))
Str(s='Set the post-processed MLE for the amplitude.')
Attribute(value=Name(id='self', ctx=Load()), attr='_mle_processed', ctx=Store())
Name(id='value', ctx=Load())
Name(id='mle_processed', ctx=Load())
Load()
arg(arg='self', annotation=None)
Str(s='Return the post-processed measurement samples with their measurement probability.')
Attribute(value=Name(id='self', ctx=Load()), attr='_samples_processed', ctx=Load())
Load()
Name(id='Dict', ctx=Load())
Index(value=Tuple(elts=[Name(id='float', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load()))
Load()
arg(arg='self', annotation=None)
arg(arg='value', annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='float', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load())), ctx=Load()))
Str(s='Set the post-processed measurement samples.')
Attribute(value=Name(id='self', ctx=Load()), attr='_samples_processed', ctx=Store())
Name(id='value', ctx=Load())
Name(id='samples_processed', ctx=Load())
Load()
arg(arg='self', annotation=None)
Str(s='Return the MLE for the amplitude, in $[0, 1]$.')
Attribute(value=Name(id='self', ctx=Load()), attr='_mle', ctx=Load())
Load()
Load()
arg(arg='self', annotation=None)
arg(arg='value', annotation=Name(id='float', ctx=Load()))
Str(s='Set the MLE for the amplitude, in $[0, 1]$.')
Attribute(value=Name(id='self', ctx=Load()), attr='_mle', ctx=Store())
Name(id='value', ctx=Load())
Name(id='mle', ctx=Load())
Load()
arg(arg='self', annotation=None)
Str(s='Return the measurement samples with their measurement probability.')
Attribute(value=Name(id='self', ctx=Load()), attr='_samples', ctx=Load())
Load()
Name(id='Dict', ctx=Load())
Index(value=Tuple(elts=[Name(id='float', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load()))
Load()
arg(arg='self', annotation=None)
arg(arg='value', annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='float', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load())), ctx=Load()))
Str(s='Set the measurement samples with their measurement probability.')
Attribute(value=Name(id='self', ctx=Load()), attr='_samples', ctx=Store())
Name(id='value', ctx=Load())
Name(id='samples', ctx=Load())
Load()
arg(arg='self', annotation=None)
Str(s='Return the measurements as integers with their measurement probability.')
Attribute(value=Name(id='self', ctx=Load()), attr='_y_measurements', ctx=Load())
Load()
Name(id='Dict', ctx=Load())
Index(value=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load()))
Load()
arg(arg='self', annotation=None)
arg(arg='value', annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load())), ctx=Load()))
Str(s='Set the measurements as integers with their measurement probability.')
Attribute(value=Name(id='self', ctx=Load()), attr='_y_measurements', ctx=Store())
Name(id='value', ctx=Load())
Name(id='measurements', ctx=Load())
Load()
arg(arg='self', annotation=None)
Str(s='Return the maximum sampling probability.')
Attribute(value=Name(id='self', ctx=Load()), attr='_max_probability', ctx=Load())
Load()
Load()
arg(arg='self', annotation=None)
arg(arg='value', annotation=Name(id='float', ctx=Load()))
Str(s='Set the maximum sampling probability.')
Attribute(value=Name(id='self', ctx=Load()), attr='_max_probability', ctx=Store())
Name(id='value', ctx=Load())
Name(id='max_probability', ctx=Load())
Load()
Name(id='AmplitudeEstimationResult', ctx=Load())
Name(id='bool', ctx=Load())
Store()
Store()
Name(id='result', ctx=Load())
Load()
Store()
Name(id='result', ctx=Load())
Load()
Store()
Num(n=2)
Pow()
Name(id='m', ctx=Load())
Load()
Name(id='a_i', ctx=Store())
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='asarray', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='result', ctx=Load()), attr='samples', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[])
Name(id='p_i', ctx=Store())
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='asarray', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='result', ctx=Load()), attr='samples', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[])
Name(id='fisher_information', ctx=Store())
Call(func=Name(id='sum', ctx=Load()), args=[GeneratorExp(elt=BinOp(left=Name(id='p', ctx=Load()), op=Mult(), right=BinOp(left=Call(func=Name(id='derivative_log_pdf_a', ctx=Load()), args=[Name(id='a', ctx=Load()), Name(id='mlv', ctx=Load()), Name(id='m', ctx=Load())], keywords=[]), op=Pow(), right=Num(n=2))), generators=[comprehension(target=Tuple(elts=[Name(id='p', ctx=Store()), Name(id='a', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='zip', ctx=Load()), args=[Name(id='p_i', ctx=Load()), Name(id='a_i', ctx=Load())], keywords=[]), ifs=[], is_async=0)])], keywords=[])
arguments(args=[arg(arg='x', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Return(value=BinOp(left=BinOp(left=Call(func=Name(id='derivative_log_pdf_a', ctx=Load()), args=[Name(id='x', ctx=Load()), Name(id='mlv', ctx=Load()), Name(id='m', ctx=Load())], keywords=[]), op=Pow(), right=Num(n=2)), op=Mult(), right=Call(func=Name(id='pdf_a', ctx=Load()), args=[Name(id='x', ctx=Load()), Name(id='mlv', ctx=Load()), Name(id='m', ctx=Load())], keywords=[])))
Name(id='grid', ctx=Store())
BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[BinOp(left=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='arange', ctx=Load()), args=[BinOp(left=BinOp(left=Name(id='M', ctx=Load()), op=Div(), right=Num(n=2)), op=Add(), right=Num(n=1))], keywords=[])), op=Div(), right=Name(id='M', ctx=Load()))], keywords=[]), op=Pow(), right=Num(n=2))
Name(id='fisher_information', ctx=Store())
Call(func=Name(id='sum', ctx=Load()), args=[GeneratorExp(elt=Call(func=Name(id='integrand', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='grid', ctx=Load()), ifs=[], is_async=0)])], keywords=[])
Load()
Name(id='AmplitudeEstimationResult', ctx=Load())
Name(id='float', ctx=Load())
Name(id='bool', ctx=Load())
Store()
Attribute(value=Name(id='np', ctx=Load()), attr='sqrt', ctx=Load())
BinOp(left=Attribute(value=Name(id='result', ctx=Load()), attr='shots', ctx=Load()), op=Mult(), right=Call(func=Name(id='_compute_fisher_information', ctx=Load()), args=[Name(id='result', ctx=Load()), Name(id='observed', ctx=Load())], keywords=[]))
Store()
Attribute(value=Name(id='result', ctx=Load()), attr='mle', ctx=Load())
Add()
BinOp(left=BinOp(left=Call(func=Attribute(value=Name(id='norm', ctx=Load()), attr='ppf', ctx=Load()), args=[BinOp(left=Num(n=1), op=Sub(), right=BinOp(left=Name(id='alpha', ctx=Load()), op=Div(), right=Num(n=2)))], keywords=[]), op=Div(), right=Name(id='std', ctx=Load())), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='array', ctx=Load()), args=[List(elts=[UnaryOp(op=USub(), operand=Num(n=1)), Num(n=1)], ctx=Load())], keywords=[]))
Name(id='tuple', ctx=Load())
GeneratorExp(elt=Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='post_processing', ctx=Load()), args=[Name(id='bound', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='bound', ctx=Store()), iter=Name(id='confint', ctx=Load()), ifs=[], is_async=0)])
Load()
Name(id='float', ctx=Load())
Name(id='AmplitudeEstimationResult', ctx=Load())
Name(id='float', ctx=Load())
Store()
Name(id='result', ctx=Load())
Load()
Store()
Num(n=2)
Pow()
Name(id='m', ctx=Load())
Store()
Name(id='result', ctx=Load())
Load()
Store()
Name(id='int', ctx=Load())
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='round', ctx=Load()), args=[BinOp(left=BinOp(left=Name(id='M', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='arcsin', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sqrt', ctx=Load()), args=[Name(id='qae', ctx=Load())], keywords=[])], keywords=[])), op=Div(), right=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()))], keywords=[])
Name(id='y', ctx=Load())
Eq()
Num(n=0)
Name(id='right_of_qae', ctx=Store())
BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[BinOp(left=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Mult(), right=BinOp(left=Name(id='y', ctx=Load()), op=Add(), right=Num(n=1))), op=Div(), right=Name(id='M', ctx=Load()))], keywords=[]), op=Pow(), right=Num(n=2))
Name(id='bubbles', ctx=Store())
List(elts=[Name(id='qae', ctx=Load()), Name(id='right_of_qae', ctx=Load())], ctx=Load())
Compare(left=Name(id='y', ctx=Load()), ops=[Eq()], comparators=[Call(func=Name(id='int', ctx=Load()), args=[BinOp(left=Name(id='M', ctx=Load()), op=Div(), right=Num(n=2))], keywords=[])])
Assign(targets=[Name(id='left_of_qae', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[BinOp(left=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Mult(), right=BinOp(left=Name(id='y', ctx=Load()), op=Sub(), right=Num(n=1))), op=Div(), right=Name(id='M', ctx=Load()))], keywords=[]), op=Pow(), right=Num(n=2)))
Assign(targets=[Name(id='bubbles', ctx=Store())], value=List(elts=[Name(id='left_of_qae', ctx=Load()), Name(id='qae', ctx=Load())], ctx=Load()))
Assign(targets=[Name(id='left_of_qae', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[BinOp(left=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Mult(), right=BinOp(left=Name(id='y', ctx=Load()), op=Sub(), right=Num(n=1))), op=Div(), right=Name(id='M', ctx=Load()))], keywords=[]), op=Pow(), right=Num(n=2)))
Assign(targets=[Name(id='right_of_qae', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[BinOp(left=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Mult(), right=BinOp(left=Name(id='y', ctx=Load()), op=Add(), right=Num(n=1))), op=Div(), right=Name(id='M', ctx=Load()))], keywords=[]), op=Pow(), right=Num(n=2)))
Assign(targets=[Name(id='bubbles', ctx=Store())], value=List(elts=[Name(id='left_of_qae', ctx=Load()), Name(id='qae', ctx=Load()), Name(id='right_of_qae', ctx=Load())], ctx=Load()))
Store()
Attribute(value=Name(id='np', ctx=Load()), attr='asarray', ctx=Load())
Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='result', ctx=Load()), attr='samples', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])], keywords=[])
Store()
Attribute(value=Name(id='np', ctx=Load()), attr='asarray', ctx=Load())
Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='result', ctx=Load()), attr='samples', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[])
arg(arg='a', annotation=None)
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sum', ctx=Load()), args=[BinOp(left=BinOp(left=Attribute(value=Name(id='result', ctx=Load()), attr='shots', ctx=Load()), op=Mult(), right=Name(id='p_i', ctx=Load())), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='log', ctx=Load()), args=[Call(func=Name(id='pdf_a', ctx=Load()), args=[Name(id='a_i', ctx=Load()), Name(id='a', ctx=Load()), Name(id='m', ctx=Load())], keywords=[])], keywords=[]))], keywords=[])
Store()
Name(id='loglikelihood', ctx=Load())
Attribute(value=Name(id='result', ctx=Load()), attr='mle', ctx=Load())
Store()
Name(id='loglik_mle', ctx=Load())
Sub()
BinOp(left=Call(func=Attribute(value=Name(id='chi2', ctx=Load()), attr='ppf', ctx=Load()), args=[BinOp(left=Num(n=1), op=Sub(), right=Name(id='alpha', ctx=Load()))], keywords=[keyword(arg='df', value=Num(n=1))]), op=Div(), right=Num(n=2))
arg(arg='x', annotation=None)
BinOp(left=Call(func=Name(id='loglikelihood', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), op=Sub(), right=Name(id='thres', ctx=Load()))
Store()
Store()
Name(id='result', ctx=Load())
Load()
Name(id='a', ctx=Store())
Name(id='b', ctx=Store())
Store()
Name(id='zip', ctx=Load())
Subscript(value=Name(id='bubbles', ctx=Load()), slice=Slice(lower=None, upper=UnaryOp(op=USub(), operand=Num(n=1)), step=None), ctx=Load())
Subscript(value=Name(id='bubbles', ctx=Load()), slice=Slice(lower=Num(n=1), upper=None, step=None), ctx=Load())
Tuple(elts=[Name(id='locmax', ctx=Store()), Name(id='val', ctx=Store())], ctx=Store())
Call(func=Name(id='bisect_max', ctx=Load()), args=[Name(id='loglikelihood', ctx=Load()), Name(id='a', ctx=Load()), Name(id='b', ctx=Load())], keywords=[keyword(arg='retval', value=NameConstant(value=True))])
Compare(left=Name(id='val', ctx=Load()), ops=[GtE()], comparators=[Name(id='thres', ctx=Load())])
If(test=Compare(left=BinOp(left=Call(func=Name(id='cut', ctx=Load()), args=[Name(id='a', ctx=Load())], keywords=[]), op=Mult(), right=Call(func=Name(id='cut', ctx=Load()), args=[Name(id='locmax', ctx=Load())], keywords=[])), ops=[Lt()], comparators=[Num(n=0)]), body=[Assign(targets=[Name(id='left', ctx=Store())], value=Call(func=Name(id='bisect', ctx=Load()), args=[Name(id='cut', ctx=Load()), Name(id='a', ctx=Load()), Name(id='locmax', ctx=Load())], keywords=[])), Assign(targets=[Name(id='lower', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='minimum', ctx=Load()), args=[Name(id='lower', ctx=Load()), Name(id='left', ctx=Load())], keywords=[]))], orelse=[])
If(test=Compare(left=BinOp(left=Call(func=Name(id='cut', ctx=Load()), args=[Name(id='locmax', ctx=Load())], keywords=[]), op=Mult(), right=Call(func=Name(id='cut', ctx=Load()), args=[Name(id='b', ctx=Load())], keywords=[])), ops=[Lt()], comparators=[Num(n=0)]), body=[Assign(targets=[Name(id='right', ctx=Store())], value=Call(func=Name(id='bisect', ctx=Load()), args=[Name(id='cut', ctx=Load()), Name(id='locmax', ctx=Load()), Name(id='b', ctx=Load())], keywords=[])), Assign(targets=[Name(id='upper', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='maximum', ctx=Load()), args=[Name(id='upper', ctx=Load()), Name(id='right', ctx=Load())], keywords=[]))], orelse=[])
Store()
Name(id='lower', ctx=Load())
Name(id='upper', ctx=Load())
Load()
Name(id='tuple', ctx=Load())
GeneratorExp(elt=Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='post_processing', ctx=Load()), args=[Name(id='bound', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='bound', ctx=Store()), iter=Name(id='confint', ctx=Load()), ifs=[], is_async=0)])
Load()
Name(id='float', ctx=Load())
Name(id='int', ctx=Load())
Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Name(id='QuantumCircuit', ctx=Load())), ctx=Load())
Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Name(id='QuantumCircuit', ctx=Load())), ctx=Load())
Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='QuantumInstance', ctx=Load()), Name(id='Backend', ctx=Load())], ctx=Load())), ctx=Load())), ctx=Load())
Name(id='num_eval_qubits', ctx=Load())
Lt()
Num(n=1)
Call(func=Name(id='ValueError', ctx=Load()), args=[Str(s='The number of evaluation qubits must at least be 1.')], keywords=[])
Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load())
Name(id='self', ctx=Load())
Store()
Load()
Name(id='self', ctx=Load())
Store()
Load()
Name(id='self', ctx=Load())
Store()
Num(n=2)
Pow()
Name(id='num_eval_qubits', ctx=Load())
Name(id='self', ctx=Load())
Store()
Load()
Name(id='self', ctx=Load())
Store()
Load()
Name(id='self', ctx=Load())
Load()
Load()
Name(id='QuantumInstance', ctx=Load())
Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='QuantumInstance', ctx=Load()), Name(id='Backend', ctx=Load())], ctx=Load())), ctx=Load())
Name(id='isinstance', ctx=Load())
Name(id='quantum_instance', ctx=Load())
Name(id='Backend', ctx=Load())
Name(id='quantum_instance', ctx=Store())
Call(func=Name(id='QuantumInstance', ctx=Load()), args=[Name(id='quantum_instance', ctx=Load())], keywords=[])
Name(id='self', ctx=Load())
Store()
Load()
Load()
Name(id='EstimationProblem', ctx=Load())
Name(id='bool', ctx=Load())
Attribute(value=Name(id='self', ctx=Load()), attr='_pec', ctx=Load())
IsNot()
NameConstant(value=None)
Name(id='pec', ctx=Store())
Attribute(value=Name(id='self', ctx=Load()), attr='_pec', ctx=Load())
alias(name='PhaseEstimation', asname=None)
Name(id='pec', ctx=Store())
Call(func=Name(id='PhaseEstimation', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Load()), Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='grover_operator', ctx=Load())], keywords=[keyword(arg='iqft', value=Attribute(value=Name(id='self', ctx=Load()), attr='_iqft', ctx=Load()))])
Store()
Name(id='QuantumCircuit', ctx=Load())
Starred(value=Attribute(value=Name(id='pec', ctx=Load()), attr='qregs', ctx=Load()), ctx=Load())
Attribute(value=Name(id='circuit', ctx=Load()), attr='compose', ctx=Load())
Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='state_preparation', ctx=Load())
Call(func=Name(id='list', ctx=Load()), args=[Call(func=Name(id='range', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Load()), Attribute(value=Name(id='circuit', ctx=Load()), attr='num_qubits', ctx=Load())], keywords=[])], keywords=[])
keyword(arg='inplace', value=NameConstant(value=True))
Attribute(value=Name(id='circuit', ctx=Load()), attr='compose', ctx=Load())
Name(id='pec', ctx=Load())
keyword(arg='inplace', value=NameConstant(value=True))
Load()
Name(id='cr', ctx=Store())
Call(func=Name(id='ClassicalRegister', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Load())], keywords=[])
Call(func=Attribute(value=Name(id='circuit', ctx=Load()), attr='add_register', ctx=Load()), args=[Name(id='cr', ctx=Load())], keywords=[])
Call(func=Attribute(value=Name(id='circuit', ctx=Load()), attr='measure', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Name(id='range', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Load())], keywords=[])], keywords=[]), Call(func=Name(id='list', ctx=Load()), args=[Call(func=Name(id='range', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Load())], keywords=[])], keywords=[])], keywords=[])
Load()
Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Subscript(value=Name(id='Dict', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load())), ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())], ctx=Load())), ctx=Load())
Name(id='float', ctx=Load())
Name(id='isinstance', ctx=Load())
Name(id='circuit_results', ctx=Load())
Name(id='dict', ctx=Load())
Tuple(elts=[Name(id='samples', ctx=Store()), Name(id='measurements', ctx=Store())], ctx=Store())
Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_evaluate_count_results', ctx=Load()), args=[Name(id='circuit_results', ctx=Load())], keywords=[])
Tuple(elts=[Name(id='samples', ctx=Store()), Name(id='measurements', ctx=Store())], ctx=Store())
Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_evaluate_statevector_results', ctx=Load()), args=[Name(id='circuit_results', ctx=Load())], keywords=[])
Store()
Name(id='a', ctx=Load())
Name(id='p', ctx=Load())
comprehension(target=Tuple(elts=[Name(id='a', ctx=Store()), Name(id='p', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='samples', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), ifs=[Compare(left=Name(id='p', ctx=Load()), ops=[Gt()], comparators=[Name(id='threshold', ctx=Load())])], is_async=0)
Store()
Name(id='y', ctx=Load())
Name(id='p', ctx=Load())
comprehension(target=Tuple(elts=[Name(id='y', ctx=Store()), Name(id='p', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='measurements', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), ifs=[Compare(left=Name(id='p', ctx=Load()), ops=[Gt()], comparators=[Name(id='threshold', ctx=Load())])], is_async=0)
Name(id='samples', ctx=Load())
Name(id='measurements', ctx=Load())
Load()
Load()
Tuple(elts=[Subscript(value=Name(id='Dict', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load())), ctx=Load()), Subscript(value=Name(id='Dict', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='float', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load())), ctx=Load())], ctx=Load())
Store()
Name(id='OrderedDict', ctx=Load())
Store()
Name(id='int', ctx=Load())
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='log2', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='statevector', ctx=Load())], keywords=[])], keywords=[])
Name(id='i', ctx=Store())
Name(id='amplitude', ctx=Store())
Store()
Name(id='enumerate', ctx=Load())
Name(id='statevector', ctx=Load())
Name(id='b', ctx=Store())
Subscript(value=Call(func=Attribute(value=Subscript(value=Call(func=Name(id='bin', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]), slice=Slice(lower=Num(n=2), upper=None, step=None), ctx=Load()), attr='zfill', ctx=Load()), args=[Name(id='num_qubits', ctx=Load())], keywords=[]), slice=Slice(lower=None, upper=None, step=UnaryOp(op=USub(), operand=Num(n=1))), ctx=Load())
Name(id='y', ctx=Store())
Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='b', ctx=Load()), slice=Slice(lower=None, upper=Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Load()), step=None), ctx=Load()), Num(n=2)], keywords=[])
Subscript(value=Name(id='measurements', ctx=Load()), slice=Index(value=Name(id='y', ctx=Load())), ctx=Store())
BinOp(left=Call(func=Attribute(value=Name(id='measurements', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='y', ctx=Load()), Num(n=0)], keywords=[]), op=Add(), right=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='abs', ctx=Load()), args=[Name(id='amplitude', ctx=Load())], keywords=[]), op=Pow(), right=Num(n=2)))
Store()
Name(id='OrderedDict', ctx=Load())
Name(id='y', ctx=Store())
Name(id='probability', ctx=Store())
Store()
Attribute(value=Name(id='measurements', ctx=Load()), attr='items', ctx=Load())
Compare(left=Name(id='y', ctx=Load()), ops=[GtE()], comparators=[Call(func=Name(id='int', ctx=Load()), args=[BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='_M', ctx=Load()), op=Div(), right=Num(n=2))], keywords=[])])
Assign(targets=[Name(id='y', ctx=Store())], value=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='_M', ctx=Load()), op=Sub(), right=Name(id='y', ctx=Load())))
Name(id='a', ctx=Store())
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='round', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='power', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[BinOp(left=BinOp(left=Name(id='y', ctx=Load()), op=Mult(), right=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load())), op=Div(), right=BinOp(left=Num(n=2), op=Pow(), right=Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Load())))], keywords=[]), Num(n=2)], keywords=[])], keywords=[keyword(arg='decimals', value=Num(n=7))])
Subscript(value=Name(id='samples', ctx=Load()), slice=Index(value=Name(id='a', ctx=Load())), ctx=Store())
BinOp(left=Call(func=Attribute(value=Name(id='samples', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='a', ctx=Load()), Num(n=0)], keywords=[]), op=Add(), right=Name(id='probability', ctx=Load()))
Name(id='samples', ctx=Load())
Name(id='measurements', ctx=Load())
Load()
Store()
Name(id='OrderedDict', ctx=Load())
Store()
Name(id='OrderedDict', ctx=Load())
Store()
Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()), attr='_run_config', ctx=Load())
Load()
Name(id='state', ctx=Store())
Name(id='count', ctx=Store())
Store()
Attribute(value=Name(id='counts', ctx=Load()), attr='items', ctx=Load())
Name(id='y', ctx=Store())
Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Subscript(value=Call(func=Attribute(value=Name(id='state', ctx=Load()), attr='replace', ctx=Load()), args=[Str(s=' '), Str(s='')], keywords=[]), slice=Slice(lower=None, upper=Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Load()), step=None), ctx=Load()), slice=Slice(lower=None, upper=None, step=UnaryOp(op=USub(), operand=Num(n=1))), ctx=Load()), Num(n=2)], keywords=[])
Name(id='probability', ctx=Store())
BinOp(left=Name(id='count', ctx=Load()), op=Div(), right=Name(id='shots', ctx=Load()))
Subscript(value=Name(id='measurements', ctx=Load()), slice=Index(value=Name(id='y', ctx=Load())), ctx=Store())
Name(id='probability', ctx=Load())
Name(id='a', ctx=Store())
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='round', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='power', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[BinOp(left=BinOp(left=Name(id='y', ctx=Load()), op=Mult(), right=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load())), op=Div(), right=BinOp(left=Num(n=2), op=Pow(), right=Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Load())))], keywords=[]), Num(n=2)], keywords=[])], keywords=[keyword(arg='decimals', value=Num(n=7))])
Subscript(value=Name(id='samples', ctx=Load()), slice=Index(value=Name(id='a', ctx=Load())), ctx=Store())
BinOp(left=Call(func=Attribute(value=Name(id='samples', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='a', ctx=Load()), Num(n=0.0)], keywords=[]), op=Add(), right=Name(id='probability', ctx=Load()))
Name(id='samples', ctx=Load())
Name(id='measurements', ctx=Load())
Load()
Str(s='AmplitudeEstimationResult')
Name(id='bool', ctx=Load())
Store()
Name(id='result', ctx=Load())
Load()
Store()
Num(n=2)
Pow()
Name(id='m', ctx=Load())
Store()
Name(id='result', ctx=Load())
Load()
Store()
Attribute(value=Name(id='np', ctx=Load()), attr='asarray', ctx=Load())
Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='result', ctx=Load()), attr='samples', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])], keywords=[])
Store()
Attribute(value=Name(id='np', ctx=Load()), attr='asarray', ctx=Load())
Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='result', ctx=Load()), attr='samples', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[])
arg(arg='a', annotation=None)
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sum', ctx=Load()), args=[BinOp(left=BinOp(left=Attribute(value=Name(id='result', ctx=Load()), attr='shots', ctx=Load()), op=Mult(), right=Name(id='p_i', ctx=Load())), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='log', ctx=Load()), args=[Call(func=Name(id='pdf_a', ctx=Load()), args=[Name(id='a_i', ctx=Load()), Name(id='a', ctx=Load()), Name(id='m', ctx=Load())], keywords=[])], keywords=[]))], keywords=[])
Store()
Name(id='int', ctx=Load())
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='round', ctx=Load()), args=[BinOp(left=BinOp(left=Name(id='M', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='arcsin', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sqrt', ctx=Load()), args=[Name(id='qae', ctx=Load())], keywords=[])], keywords=[])), op=Div(), right=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()))], keywords=[])
Name(id='y', ctx=Load())
Eq()
Num(n=0)
Name(id='right_of_qae', ctx=Store())
BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[BinOp(left=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Mult(), right=BinOp(left=Name(id='y', ctx=Load()), op=Add(), right=Num(n=1))), op=Div(), right=Name(id='M', ctx=Load()))], keywords=[]), op=Pow(), right=Num(n=2))
Name(id='bubbles', ctx=Store())
List(elts=[Name(id='qae', ctx=Load()), Name(id='right_of_qae', ctx=Load())], ctx=Load())
Compare(left=Name(id='y', ctx=Load()), ops=[Eq()], comparators=[Call(func=Name(id='int', ctx=Load()), args=[BinOp(left=Name(id='M', ctx=Load()), op=Div(), right=Num(n=2))], keywords=[])])
Assign(targets=[Name(id='left_of_qae', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[BinOp(left=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Mult(), right=BinOp(left=Name(id='y', ctx=Load()), op=Sub(), right=Num(n=1))), op=Div(), right=Name(id='M', ctx=Load()))], keywords=[]), op=Pow(), right=Num(n=2)))
Assign(targets=[Name(id='bubbles', ctx=Store())], value=List(elts=[Name(id='left_of_qae', ctx=Load()), Name(id='qae', ctx=Load())], ctx=Load()))
Assign(targets=[Name(id='left_of_qae', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[BinOp(left=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Mult(), right=BinOp(left=Name(id='y', ctx=Load()), op=Sub(), right=Num(n=1))), op=Div(), right=Name(id='M', ctx=Load()))], keywords=[]), op=Pow(), right=Num(n=2)))
Assign(targets=[Name(id='right_of_qae', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[BinOp(left=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Mult(), right=BinOp(left=Name(id='y', ctx=Load()), op=Add(), right=Num(n=1))), op=Div(), right=Name(id='M', ctx=Load()))], keywords=[]), op=Pow(), right=Num(n=2)))
Assign(targets=[Name(id='bubbles', ctx=Store())], value=List(elts=[Name(id='left_of_qae', ctx=Load()), Name(id='qae', ctx=Load()), Name(id='right_of_qae', ctx=Load())], ctx=Load()))
Store()
Load()
Store()
Name(id='loglikelihood', ctx=Load())
Name(id='a_opt', ctx=Load())
Name(id='a', ctx=Store())
Name(id='b', ctx=Store())
Store()
Name(id='zip', ctx=Load())
Subscript(value=Name(id='bubbles', ctx=Load()), slice=Slice(lower=None, upper=UnaryOp(op=USub(), operand=Num(n=1)), step=None), ctx=Load())
Subscript(value=Name(id='bubbles', ctx=Load()), slice=Slice(lower=Num(n=1), upper=None, step=None), ctx=Load())
Tuple(elts=[Name(id='locmax', ctx=Store()), Name(id='val', ctx=Store())], ctx=Store())
Call(func=Name(id='bisect_max', ctx=Load()), args=[Name(id='loglikelihood', ctx=Load()), Name(id='a', ctx=Load()), Name(id='b', ctx=Load())], keywords=[keyword(arg='retval', value=NameConstant(value=True))])
Compare(left=Name(id='val', ctx=Load()), ops=[Gt()], comparators=[Name(id='loglik_opt', ctx=Load())])
Assign(targets=[Name(id='a_opt', ctx=Store())], value=Name(id='locmax', ctx=Load()))
Assign(targets=[Name(id='loglik_opt', ctx=Store())], value=Name(id='val', ctx=Load()))
Load()
Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='post_processing', ctx=Load()), args=[Name(id='a_opt', ctx=Load())], keywords=[])
Load()
Name(id='EstimationProblem', ctx=Load())
Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='state_preparation', ctx=Load())
Is()
NameConstant(value=None)
Call(func=Name(id='ValueError', ctx=Load()), args=[Str(s='The state_preparation property of the estimation problem must be set.')], keywords=[])
Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='objective_qubits', ctx=Load())
Is()
NameConstant(value=None)
Call(func=Name(id='ValueError', ctx=Load()), args=[Str(s='The objective_qubits property of the estimation problem must be set.')], keywords=[])
Store()
Name(id='AmplitudeEstimationResult', ctx=Load())
Name(id='result', ctx=Load())
Store()
Name(id='self', ctx=Load())
Load()
Name(id='result', ctx=Load())
Store()
Name(id='estimation_problem', ctx=Load())
Load()
Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load())
Load()
Name(id='circuit', ctx=Store())
Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='construct_circuit', ctx=Load()), args=[Name(id='estimation_problem', ctx=Load())], keywords=[keyword(arg='measurement', value=NameConstant(value=False))])
Name(id='statevector', ctx=Store())
Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()), attr='execute', ctx=Load()), args=[Name(id='circuit', ctx=Load())], keywords=[]), attr='get_statevector', ctx=Load()), args=[], keywords=[])
Attribute(value=Name(id='result', ctx=Load()), attr='circuit_results', ctx=Store())
Name(id='statevector', ctx=Load())
Attribute(value=Name(id='result', ctx=Load()), attr='shots', ctx=Store())
Num(n=1)
Name(id='circuit', ctx=Store())
Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='construct_circuit', ctx=Load()), args=[Name(id='estimation_problem', ctx=Load())], keywords=[keyword(arg='measurement', value=NameConstant(value=True))])
Name(id='counts', ctx=Store())
Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()), attr='execute', ctx=Load()), args=[Name(id='circuit', ctx=Load())], keywords=[]), attr='get_counts', ctx=Load()), args=[], keywords=[])
Attribute(value=Name(id='result', ctx=Load()), attr='circuit_results', ctx=Store())
Name(id='counts', ctx=Load())
Attribute(value=Name(id='result', ctx=Load()), attr='shots', ctx=Store())
Call(func=Name(id='sum', ctx=Load()), args=[Call(func=Attribute(value=Name(id='counts', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[])
Name(id='samples', ctx=Store())
Name(id='measurements', ctx=Store())
Store()
Attribute(value=Name(id='self', ctx=Load()), attr='evaluate_measurements', ctx=Load())
Attribute(value=Name(id='result', ctx=Load()), attr='circuit_results', ctx=Load())
Name(id='result', ctx=Load())
Store()
Load()
Name(id='result', ctx=Load())
Store()
Call(func=Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='post_processing', ctx=Load()), args=[Name(id='a', ctx=Load())], keywords=[])
Name(id='p', ctx=Load())
comprehension(target=Tuple(elts=[Name(id='a', ctx=Store()), Name(id='p', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='samples', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), ifs=[], is_async=0)
Name(id='result', ctx=Load())
Store()
Load()
Name(id='result', ctx=Load())
Store()
Name(id='amplitude', ctx=Store())
Tuple(elts=[Name(id='mapped', ctx=Store()), Name(id='prob', ctx=Store())], ctx=Store())
Store()
Name(id='zip', ctx=Load())
Call(func=Attribute(value=Name(id='samples', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])
Call(func=Attribute(value=Attribute(value=Name(id='result', ctx=Load()), attr='samples_processed', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])
Compare(left=Name(id='prob', ctx=Load()), ops=[Gt()], comparators=[Attribute(value=Name(id='result', ctx=Load()), attr='max_probability', ctx=Load())])
Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='max_probability', ctx=Store())], value=Name(id='prob', ctx=Load()))
Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='estimation', ctx=Store())], value=Name(id='amplitude', ctx=Load()))
Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='estimation_processed', ctx=Store())], value=Name(id='mapped', ctx=Load()))
Name(id='result', ctx=Load())
Store()
Attribute(value=Name(id='result', ctx=Load()), attr='shots', ctx=Load())
Mult()
BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='_M', ctx=Load()), op=Sub(), right=Num(n=1))
Store()
Attribute(value=Name(id='self', ctx=Load()), attr='compute_mle', ctx=Load())
Name(id='result', ctx=Load())
Name(id='result', ctx=Load())
Store()
Load()
Name(id='result', ctx=Load())
Store()
Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='post_processing', ctx=Load())
Name(id='mle', ctx=Load())
Name(id='result', ctx=Load())
Store()
Attribute(value=Name(id='self', ctx=Load()), attr='compute_confidence_interval', ctx=Load())
Name(id='result', ctx=Load())
Name(id='result', ctx=Load())
Store()
Name(id='tuple', ctx=Load())
GeneratorExp(elt=Call(func=Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='post_processing', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='value', ctx=Store()), iter=Attribute(value=Name(id='result', ctx=Load()), attr='confidence_interval', ctx=Load()), ifs=[], is_async=0)])
Load()
Str(s='AmplitudeEstimationResult')
Name(id='float', ctx=Load())
Name(id='str', ctx=Load())
Name(id='isinstance', ctx=Load())
Attribute(value=Name(id='result', ctx=Load()), attr='circuit_results', ctx=Load())
Tuple(elts=[Name(id='list', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())], ctx=Load())
Tuple(elts=[Attribute(value=Name(id='result', ctx=Load()), attr='mle', ctx=Load()), Attribute(value=Name(id='result', ctx=Load()), attr='mle', ctx=Load())], ctx=Load())
Name(id='kind', ctx=Load())
In()
List(elts=[Str(s='likelihood_ratio'), Str(s='lr')], ctx=Load())
Call(func=Name(id='_likelihood_ratio_confint', ctx=Load()), args=[Name(id='result', ctx=Load()), Name(id='alpha', ctx=Load())], keywords=[])
Name(id='kind', ctx=Load())
In()
List(elts=[Str(s='fisher'), Str(s='fi')], ctx=Load())
Call(func=Name(id='_fisher_confint', ctx=Load()), args=[Name(id='result', ctx=Load()), Name(id='alpha', ctx=Load())], keywords=[keyword(arg='observed', value=NameConstant(value=False))])
Name(id='kind', ctx=Load())
In()
List(elts=[Str(s='observed_fisher'), Str(s='observed_information'), Str(s='oi')], ctx=Load())
Call(func=Name(id='_fisher_confint', ctx=Load()), args=[Name(id='result', ctx=Load()), Name(id='alpha', ctx=Load())], keywords=[keyword(arg='observed', value=NameConstant(value=True))])
Name(id='NotImplementedError', ctx=Load())
JoinedStr(values=[Str(s='CI `'), FormattedValue(value=Name(id='kind', ctx=Load()), conversion=-1, format_spec=None), Str(s='` is not implemented.')])
Load()
Tuple(elts=[Name(id='float', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load())
Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load())
Name(id='self', ctx=Load())
Store()
Name(id='self', ctx=Load())
Store()
Name(id='self', ctx=Load())
Store()
Name(id='self', ctx=Load())
Store()
Name(id='self', ctx=Load())
Store()
Name(id='self', ctx=Load())
Store()
Name(id='self', ctx=Load())
Store()
Name(id='self', ctx=Load())
Load()
Name(id='int', ctx=Load())
Name(id='self', ctx=Load())
Store()
Load()
Load()
Name(id='self', ctx=Load())
Load()
Name(id='float', ctx=Load())
Name(id='self', ctx=Load())
Store()
Load()
Load()
Name(id='self', ctx=Load())
Load()
Load()
Tuple(elts=[Name(id='float', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load())
Subscript(value=Name(id='Dict', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='float', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load())), ctx=Load())
Name(id='self', ctx=Load())
Store()
Load()
Load()
Name(id='self', ctx=Load())
Load()
Name(id='float', ctx=Load())
Name(id='self', ctx=Load())
Store()
Load()
Load()
Name(id='self', ctx=Load())
Load()
Load()
Tuple(elts=[Name(id='float', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load())
Subscript(value=Name(id='Dict', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='float', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load())), ctx=Load())
Name(id='self', ctx=Load())
Store()
Load()
Load()
Name(id='self', ctx=Load())
Load()
Load()
Tuple(elts=[Name(id='int', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load())
Subscript(value=Name(id='Dict', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load())), ctx=Load())
Name(id='self', ctx=Load())
Store()
Load()
Load()
Name(id='self', ctx=Load())
Load()
Name(id='float', ctx=Load())
Name(id='self', ctx=Load())
Store()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Store()
Attribute(value=Name(id='np', ctx=Load()), attr='asarray', ctx=Load())
Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='result', ctx=Load()), attr='samples', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])], keywords=[])
Store()
Attribute(value=Name(id='np', ctx=Load()), attr='asarray', ctx=Load())
Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='result', ctx=Load()), attr='samples', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[])
Store()
Name(id='sum', ctx=Load())
GeneratorExp(elt=BinOp(left=Name(id='p', ctx=Load()), op=Mult(), right=BinOp(left=Call(func=Name(id='derivative_log_pdf_a', ctx=Load()), args=[Name(id='a', ctx=Load()), Name(id='mlv', ctx=Load()), Name(id='m', ctx=Load())], keywords=[]), op=Pow(), right=Num(n=2))), generators=[comprehension(target=Tuple(elts=[Name(id='p', ctx=Store()), Name(id='a', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='zip', ctx=Load()), args=[Name(id='p_i', ctx=Load()), Name(id='a_i', ctx=Load())], keywords=[]), ifs=[], is_async=0)])
arg(arg='x', annotation=None)
BinOp(left=BinOp(left=Call(func=Name(id='derivative_log_pdf_a', ctx=Load()), args=[Name(id='x', ctx=Load()), Name(id='mlv', ctx=Load()), Name(id='m', ctx=Load())], keywords=[]), op=Pow(), right=Num(n=2)), op=Mult(), right=Call(func=Name(id='pdf_a', ctx=Load()), args=[Name(id='x', ctx=Load()), Name(id='mlv', ctx=Load()), Name(id='m', ctx=Load())], keywords=[]))
Store()
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[BinOp(left=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='arange', ctx=Load()), args=[BinOp(left=BinOp(left=Name(id='M', ctx=Load()), op=Div(), right=Num(n=2)), op=Add(), right=Num(n=1))], keywords=[])), op=Div(), right=Name(id='M', ctx=Load()))], keywords=[])
Pow()
Num(n=2)
Store()
Name(id='sum', ctx=Load())
GeneratorExp(elt=Call(func=Name(id='integrand', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='grid', ctx=Load()), ifs=[], is_async=0)])
Load()
Load()
Load()
Name(id='np', ctx=Load())
Load()
Attribute(value=Name(id='result', ctx=Load()), attr='shots', ctx=Load())
Mult()
Call(func=Name(id='_compute_fisher_information', ctx=Load()), args=[Name(id='result', ctx=Load()), Name(id='observed', ctx=Load())], keywords=[])
Name(id='result', ctx=Load())
Load()
BinOp(left=Call(func=Attribute(value=Name(id='norm', ctx=Load()), attr='ppf', ctx=Load()), args=[BinOp(left=Num(n=1), op=Sub(), right=BinOp(left=Name(id='alpha', ctx=Load()), op=Div(), right=Num(n=2)))], keywords=[]), op=Div(), right=Name(id='std', ctx=Load()))
Mult()
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='array', ctx=Load()), args=[List(elts=[UnaryOp(op=USub(), operand=Num(n=1)), Num(n=1)], ctx=Load())], keywords=[])
Load()
Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='post_processing', ctx=Load()), args=[Name(id='bound', ctx=Load())], keywords=[])
comprehension(target=Name(id='bound', ctx=Store()), iter=Name(id='confint', ctx=Load()), ifs=[], is_async=0)
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Attribute(value=Name(id='np', ctx=Load()), attr='round', ctx=Load())
BinOp(left=BinOp(left=Name(id='M', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='arcsin', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sqrt', ctx=Load()), args=[Name(id='qae', ctx=Load())], keywords=[])], keywords=[])), op=Div(), right=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()))
Load()
Store()
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[BinOp(left=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Mult(), right=BinOp(left=Name(id='y', ctx=Load()), op=Add(), right=Num(n=1))), op=Div(), right=Name(id='M', ctx=Load()))], keywords=[])
Pow()
Num(n=2)
Store()
Name(id='qae', ctx=Load())
Name(id='right_of_qae', ctx=Load())
Load()
Name(id='y', ctx=Load())
Eq()
Call(func=Name(id='int', ctx=Load()), args=[BinOp(left=Name(id='M', ctx=Load()), op=Div(), right=Num(n=2))], keywords=[])
Name(id='left_of_qae', ctx=Store())
BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[BinOp(left=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Mult(), right=BinOp(left=Name(id='y', ctx=Load()), op=Sub(), right=Num(n=1))), op=Div(), right=Name(id='M', ctx=Load()))], keywords=[]), op=Pow(), right=Num(n=2))
Name(id='bubbles', ctx=Store())
List(elts=[Name(id='left_of_qae', ctx=Load()), Name(id='qae', ctx=Load())], ctx=Load())
Name(id='left_of_qae', ctx=Store())
BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[BinOp(left=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Mult(), right=BinOp(left=Name(id='y', ctx=Load()), op=Sub(), right=Num(n=1))), op=Div(), right=Name(id='M', ctx=Load()))], keywords=[]), op=Pow(), right=Num(n=2))
Name(id='right_of_qae', ctx=Store())
BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[BinOp(left=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Mult(), right=BinOp(left=Name(id='y', ctx=Load()), op=Add(), right=Num(n=1))), op=Div(), right=Name(id='M', ctx=Load()))], keywords=[]), op=Pow(), right=Num(n=2))
Name(id='bubbles', ctx=Store())
List(elts=[Name(id='left_of_qae', ctx=Load()), Name(id='qae', ctx=Load()), Name(id='right_of_qae', ctx=Load())], ctx=Load())
Name(id='np', ctx=Load())
Load()
Name(id='list', ctx=Load())
Call(func=Attribute(value=Attribute(value=Name(id='result', ctx=Load()), attr='samples', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])
Name(id='np', ctx=Load())
Load()
Name(id='list', ctx=Load())
Call(func=Attribute(value=Attribute(value=Name(id='result', ctx=Load()), attr='samples', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])
Attribute(value=Name(id='np', ctx=Load()), attr='sum', ctx=Load())
BinOp(left=BinOp(left=Attribute(value=Name(id='result', ctx=Load()), attr='shots', ctx=Load()), op=Mult(), right=Name(id='p_i', ctx=Load())), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='log', ctx=Load()), args=[Call(func=Name(id='pdf_a', ctx=Load()), args=[Name(id='a_i', ctx=Load()), Name(id='a', ctx=Load()), Name(id='m', ctx=Load())], keywords=[])], keywords=[]))
Load()
Name(id='result', ctx=Load())
Load()
Load()
Call(func=Attribute(value=Name(id='chi2', ctx=Load()), attr='ppf', ctx=Load()), args=[BinOp(left=Num(n=1), op=Sub(), right=Name(id='alpha', ctx=Load()))], keywords=[keyword(arg='df', value=Num(n=1))])
Div()
Num(n=2)
Call(func=Name(id='loglikelihood', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[])
Sub()
Name(id='thres', ctx=Load())
Load()
Store()
Store()
Load()
Name(id='bubbles', ctx=Load())
Slice(lower=None, upper=UnaryOp(op=USub(), operand=Num(n=1)), step=None)
Load()
Name(id='bubbles', ctx=Load())
Slice(lower=Num(n=1), upper=None, step=None)
Load()
Name(id='locmax', ctx=Store())
Name(id='val', ctx=Store())
Store()
Name(id='bisect_max', ctx=Load())
Name(id='loglikelihood', ctx=Load())
Name(id='a', ctx=Load())
Name(id='b', ctx=Load())
keyword(arg='retval', value=NameConstant(value=True))
Name(id='val', ctx=Load())
GtE()
Name(id='thres', ctx=Load())
Compare(left=BinOp(left=Call(func=Name(id='cut', ctx=Load()), args=[Name(id='a', ctx=Load())], keywords=[]), op=Mult(), right=Call(func=Name(id='cut', ctx=Load()), args=[Name(id='locmax', ctx=Load())], keywords=[])), ops=[Lt()], comparators=[Num(n=0)])
Assign(targets=[Name(id='left', ctx=Store())], value=Call(func=Name(id='bisect', ctx=Load()), args=[Name(id='cut', ctx=Load()), Name(id='a', ctx=Load()), Name(id='locmax', ctx=Load())], keywords=[]))
Assign(targets=[Name(id='lower', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='minimum', ctx=Load()), args=[Name(id='lower', ctx=Load()), Name(id='left', ctx=Load())], keywords=[]))
Compare(left=BinOp(left=Call(func=Name(id='cut', ctx=Load()), args=[Name(id='locmax', ctx=Load())], keywords=[]), op=Mult(), right=Call(func=Name(id='cut', ctx=Load()), args=[Name(id='b', ctx=Load())], keywords=[])), ops=[Lt()], comparators=[Num(n=0)])
Assign(targets=[Name(id='right', ctx=Store())], value=Call(func=Name(id='bisect', ctx=Load()), args=[Name(id='cut', ctx=Load()), Name(id='locmax', ctx=Load()), Name(id='b', ctx=Load())], keywords=[]))
Assign(targets=[Name(id='upper', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='maximum', ctx=Load()), args=[Name(id='upper', ctx=Load()), Name(id='right', ctx=Load())], keywords=[]))
Load()
Load()
Load()
Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='post_processing', ctx=Load()), args=[Name(id='bound', ctx=Load())], keywords=[])
comprehension(target=Name(id='bound', ctx=Store()), iter=Name(id='confint', ctx=Load()), ifs=[], is_async=0)
Load()
Load()
Name(id='Optional', ctx=Load())
Index(value=Name(id='QuantumCircuit', ctx=Load()))
Load()
Name(id='Optional', ctx=Load())
Index(value=Name(id='QuantumCircuit', ctx=Load()))
Load()
Name(id='Optional', ctx=Load())
Index(value=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='QuantumInstance', ctx=Load()), Name(id='Backend', ctx=Load())], ctx=Load())), ctx=Load()))
Load()
Load()
Name(id='ValueError', ctx=Load())
Str(s='The number of evaluation qubits must at least be 1.')
Call(func=Name(id='super', ctx=Load()), args=[], keywords=[])
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Name(id='Union', ctx=Load())
Index(value=Tuple(elts=[Name(id='QuantumInstance', ctx=Load()), Name(id='Backend', ctx=Load())], ctx=Load()))
Load()
Load()
Load()
Load()
Store()
Name(id='QuantumInstance', ctx=Load())
Name(id='quantum_instance', ctx=Load())
Load()
Load()
Load()
Name(id='self', ctx=Load())
Load()
Store()
Name(id='self', ctx=Load())
Load()
Store()
Name(id='PhaseEstimation', ctx=Load())
Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Load())
Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='grover_operator', ctx=Load())
keyword(arg='iqft', value=Attribute(value=Name(id='self', ctx=Load()), attr='_iqft', ctx=Load()))
Load()
Attribute(value=Name(id='pec', ctx=Load()), attr='qregs', ctx=Load())
Load()
Name(id='circuit', ctx=Load())
Load()
Name(id='estimation_problem', ctx=Load())
Load()
Name(id='list', ctx=Load())
Call(func=Name(id='range', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Load()), Attribute(value=Name(id='circuit', ctx=Load()), attr='num_qubits', ctx=Load())], keywords=[])
NameConstant(value=True)
Name(id='circuit', ctx=Load())
Load()
Load()
NameConstant(value=True)
Store()
Name(id='ClassicalRegister', ctx=Load())
Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Load())
Attribute(value=Name(id='circuit', ctx=Load()), attr='add_register', ctx=Load())
Name(id='cr', ctx=Load())
Attribute(value=Name(id='circuit', ctx=Load()), attr='measure', ctx=Load())
Call(func=Name(id='list', ctx=Load()), args=[Call(func=Name(id='range', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Load())], keywords=[])], keywords=[])
Call(func=Name(id='list', ctx=Load()), args=[Call(func=Name(id='range', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Load())], keywords=[])], keywords=[])
Name(id='Union', ctx=Load())
Index(value=Tuple(elts=[Subscript(value=Name(id='Dict', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load())), ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())], ctx=Load()))
Load()
Load()
Load()
Load()
Load()
Name(id='samples', ctx=Store())
Name(id='measurements', ctx=Store())
Store()
Attribute(value=Name(id='self', ctx=Load()), attr='_evaluate_count_results', ctx=Load())
Name(id='circuit_results', ctx=Load())
Name(id='samples', ctx=Store())
Name(id='measurements', ctx=Store())
Store()
Attribute(value=Name(id='self', ctx=Load()), attr='_evaluate_statevector_results', ctx=Load())
Name(id='circuit_results', ctx=Load())
Load()
Load()
Tuple(elts=[Name(id='a', ctx=Store()), Name(id='p', ctx=Store())], ctx=Store())
Call(func=Attribute(value=Name(id='samples', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])
Compare(left=Name(id='p', ctx=Load()), ops=[Gt()], comparators=[Name(id='threshold', ctx=Load())])
Load()
Load()
Tuple(elts=[Name(id='y', ctx=Store()), Name(id='p', ctx=Store())], ctx=Store())
Call(func=Attribute(value=Name(id='measurements', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])
Compare(left=Name(id='p', ctx=Load()), ops=[Gt()], comparators=[Name(id='threshold', ctx=Load())])
Load()
Load()
Subscript(value=Name(id='Dict', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load())), ctx=Load())
Subscript(value=Name(id='Dict', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='float', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load())), ctx=Load())
Load()
Load()
Load()
Attribute(value=Name(id='np', ctx=Load()), attr='log2', ctx=Load())
Call(func=Name(id='len', ctx=Load()), args=[Name(id='statevector', ctx=Load())], keywords=[])
Store()
Store()
Load()
Load()
Store()
Call(func=Attribute(value=Subscript(value=Call(func=Name(id='bin', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]), slice=Slice(lower=Num(n=2), upper=None, step=None), ctx=Load()), attr='zfill', ctx=Load()), args=[Name(id='num_qubits', ctx=Load())], keywords=[])
Slice(lower=None, upper=None, step=UnaryOp(op=USub(), operand=Num(n=1)))
Load()
Store()
Name(id='int', ctx=Load())
Subscript(value=Name(id='b', ctx=Load()), slice=Slice(lower=None, upper=Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Load()), step=None), ctx=Load())
Num(n=2)
Name(id='measurements', ctx=Load())
Index(value=Name(id='y', ctx=Load()))
Store()
Call(func=Attribute(value=Name(id='measurements', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='y', ctx=Load()), Num(n=0)], keywords=[])
Add()
BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='abs', ctx=Load()), args=[Name(id='amplitude', ctx=Load())], keywords=[]), op=Pow(), right=Num(n=2))
Load()
Store()
Store()
Name(id='measurements', ctx=Load())
Load()
Name(id='y', ctx=Load())
GtE()
Call(func=Name(id='int', ctx=Load()), args=[BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='_M', ctx=Load()), op=Div(), right=Num(n=2))], keywords=[])
Name(id='y', ctx=Store())
BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='_M', ctx=Load()), op=Sub(), right=Name(id='y', ctx=Load()))
Store()
Attribute(value=Name(id='np', ctx=Load()), attr='round', ctx=Load())
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='power', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[BinOp(left=BinOp(left=Name(id='y', ctx=Load()), op=Mult(), right=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load())), op=Div(), right=BinOp(left=Num(n=2), op=Pow(), right=Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Load())))], keywords=[]), Num(n=2)], keywords=[])
keyword(arg='decimals', value=Num(n=7))
Name(id='samples', ctx=Load())
Index(value=Name(id='a', ctx=Load()))
Store()
Call(func=Attribute(value=Name(id='samples', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='a', ctx=Load()), Num(n=0)], keywords=[])
Add()
Name(id='probability', ctx=Load())
Load()
Load()
Load()
Load()
Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load())
Load()
Store()
Store()
Name(id='counts', ctx=Load())
Load()
Store()
Name(id='int', ctx=Load())
Subscript(value=Subscript(value=Call(func=Attribute(value=Name(id='state', ctx=Load()), attr='replace', ctx=Load()), args=[Str(s=' '), Str(s='')], keywords=[]), slice=Slice(lower=None, upper=Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Load()), step=None), ctx=Load()), slice=Slice(lower=None, upper=None, step=UnaryOp(op=USub(), operand=Num(n=1))), ctx=Load())
Num(n=2)
Store()
Name(id='count', ctx=Load())
Div()
Name(id='shots', ctx=Load())
Name(id='measurements', ctx=Load())
Index(value=Name(id='y', ctx=Load()))
Store()
Load()
Store()
Attribute(value=Name(id='np', ctx=Load()), attr='round', ctx=Load())
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='power', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[BinOp(left=BinOp(left=Name(id='y', ctx=Load()), op=Mult(), right=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load())), op=Div(), right=BinOp(left=Num(n=2), op=Pow(), right=Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Load())))], keywords=[]), Num(n=2)], keywords=[])
keyword(arg='decimals', value=Num(n=7))
Name(id='samples', ctx=Load())
Index(value=Name(id='a', ctx=Load()))
Store()
Call(func=Attribute(value=Name(id='samples', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='a', ctx=Load()), Num(n=0.0)], keywords=[])
Add()
Name(id='probability', ctx=Load())
Load()
Load()
Load()
Load()
Load()
Load()
Name(id='np', ctx=Load())
Load()
Name(id='list', ctx=Load())
Call(func=Attribute(value=Attribute(value=Name(id='result', ctx=Load()), attr='samples', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])
Name(id='np', ctx=Load())
Load()
Name(id='list', ctx=Load())
Call(func=Attribute(value=Attribute(value=Name(id='result', ctx=Load()), attr='samples', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])
Attribute(value=Name(id='np', ctx=Load()), attr='sum', ctx=Load())
BinOp(left=BinOp(left=Attribute(value=Name(id='result', ctx=Load()), attr='shots', ctx=Load()), op=Mult(), right=Name(id='p_i', ctx=Load())), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='log', ctx=Load()), args=[Call(func=Name(id='pdf_a', ctx=Load()), args=[Name(id='a_i', ctx=Load()), Name(id='a', ctx=Load()), Name(id='m', ctx=Load())], keywords=[])], keywords=[]))
Load()
Attribute(value=Name(id='np', ctx=Load()), attr='round', ctx=Load())
BinOp(left=BinOp(left=Name(id='M', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='arcsin', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sqrt', ctx=Load()), args=[Name(id='qae', ctx=Load())], keywords=[])], keywords=[])), op=Div(), right=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()))
Load()
Store()
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[BinOp(left=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Mult(), right=BinOp(left=Name(id='y', ctx=Load()), op=Add(), right=Num(n=1))), op=Div(), right=Name(id='M', ctx=Load()))], keywords=[])
Pow()
Num(n=2)
Store()
Name(id='qae', ctx=Load())
Name(id='right_of_qae', ctx=Load())
Load()
Name(id='y', ctx=Load())
Eq()
Call(func=Name(id='int', ctx=Load()), args=[BinOp(left=Name(id='M', ctx=Load()), op=Div(), right=Num(n=2))], keywords=[])
Name(id='left_of_qae', ctx=Store())
BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[BinOp(left=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Mult(), right=BinOp(left=Name(id='y', ctx=Load()), op=Sub(), right=Num(n=1))), op=Div(), right=Name(id='M', ctx=Load()))], keywords=[]), op=Pow(), right=Num(n=2))
Name(id='bubbles', ctx=Store())
List(elts=[Name(id='left_of_qae', ctx=Load()), Name(id='qae', ctx=Load())], ctx=Load())
Name(id='left_of_qae', ctx=Store())
BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[BinOp(left=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Mult(), right=BinOp(left=Name(id='y', ctx=Load()), op=Sub(), right=Num(n=1))), op=Div(), right=Name(id='M', ctx=Load()))], keywords=[]), op=Pow(), right=Num(n=2))
Name(id='right_of_qae', ctx=Store())
BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[BinOp(left=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Mult(), right=BinOp(left=Name(id='y', ctx=Load()), op=Add(), right=Num(n=1))), op=Div(), right=Name(id='M', ctx=Load()))], keywords=[]), op=Pow(), right=Num(n=2))
Name(id='bubbles', ctx=Store())
List(elts=[Name(id='left_of_qae', ctx=Load()), Name(id='qae', ctx=Load()), Name(id='right_of_qae', ctx=Load())], ctx=Load())
Load()
Load()
Store()
Store()
Load()
Name(id='bubbles', ctx=Load())
Slice(lower=None, upper=UnaryOp(op=USub(), operand=Num(n=1)), step=None)
Load()
Name(id='bubbles', ctx=Load())
Slice(lower=Num(n=1), upper=None, step=None)
Load()
Name(id='locmax', ctx=Store())
Name(id='val', ctx=Store())
Store()
Name(id='bisect_max', ctx=Load())
Name(id='loglikelihood', ctx=Load())
Name(id='a', ctx=Load())
Name(id='b', ctx=Load())
keyword(arg='retval', value=NameConstant(value=True))
Name(id='val', ctx=Load())
Gt()
Name(id='loglik_opt', ctx=Load())
Name(id='a_opt', ctx=Store())
Name(id='locmax', ctx=Load())
Name(id='loglik_opt', ctx=Store())
Name(id='val', ctx=Load())
Attribute(value=Name(id='result', ctx=Load()), attr='post_processing', ctx=Load())
Name(id='a_opt', ctx=Load())
Load()
Name(id='estimation_problem', ctx=Load())
Load()
Name(id='ValueError', ctx=Load())
Str(s='The state_preparation property of the estimation problem must be set.')
Name(id='estimation_problem', ctx=Load())
Load()
Name(id='ValueError', ctx=Load())
Str(s='The objective_qubits property of the estimation problem must be set.')
Load()
Load()
Load()
Load()
Load()
Name(id='self', ctx=Load())
Load()
Store()
Attribute(value=Name(id='self', ctx=Load()), attr='construct_circuit', ctx=Load())
Name(id='estimation_problem', ctx=Load())
keyword(arg='measurement', value=NameConstant(value=False))
Store()
Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()), attr='execute', ctx=Load()), args=[Name(id='circuit', ctx=Load())], keywords=[]), attr='get_statevector', ctx=Load())
Name(id='result', ctx=Load())
Store()
Load()
Name(id='result', ctx=Load())
Store()
Store()
Attribute(value=Name(id='self', ctx=Load()), attr='construct_circuit', ctx=Load())
Name(id='estimation_problem', ctx=Load())
keyword(arg='measurement', value=NameConstant(value=True))
Store()
Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()), attr='execute', ctx=Load()), args=[Name(id='circuit', ctx=Load())], keywords=[]), attr='get_counts', ctx=Load())
Name(id='result', ctx=Load())
Store()
Load()
Name(id='result', ctx=Load())
Store()
Name(id='sum', ctx=Load())
Call(func=Attribute(value=Name(id='counts', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])
Store()
Store()
Name(id='self', ctx=Load())
Load()
Name(id='result', ctx=Load())
Load()
Load()
Load()
Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='post_processing', ctx=Load())
Name(id='a', ctx=Load())
Load()
Tuple(elts=[Name(id='a', ctx=Store()), Name(id='p', ctx=Store())], ctx=Store())
Call(func=Attribute(value=Name(id='samples', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])
Load()
Load()
Store()
Name(id='mapped', ctx=Store())
Name(id='prob', ctx=Store())
Store()
Load()
Attribute(value=Name(id='samples', ctx=Load()), attr='keys', ctx=Load())
Attribute(value=Attribute(value=Name(id='result', ctx=Load()), attr='samples_processed', ctx=Load()), attr='items', ctx=Load())
Name(id='prob', ctx=Load())
Gt()
Attribute(value=Name(id='result', ctx=Load()), attr='max_probability', ctx=Load())
Attribute(value=Name(id='result', ctx=Load()), attr='max_probability', ctx=Store())
Name(id='prob', ctx=Load())
Attribute(value=Name(id='result', ctx=Load()), attr='estimation', ctx=Store())
Name(id='amplitude', ctx=Load())
Attribute(value=Name(id='result', ctx=Load()), attr='estimation_processed', ctx=Store())
Name(id='mapped', ctx=Load())
Load()
Name(id='result', ctx=Load())
Load()
Attribute(value=Name(id='self', ctx=Load()), attr='_M', ctx=Load())
Sub()
Num(n=1)
Name(id='self', ctx=Load())
Load()
Load()
Load()
Load()
Name(id='estimation_problem', ctx=Load())
Load()
Load()
Load()
Name(id='self', ctx=Load())
Load()
Load()
Load()
Load()
Call(func=Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='post_processing', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[])
comprehension(target=Name(id='value', ctx=Store()), iter=Attribute(value=Name(id='result', ctx=Load()), attr='confidence_interval', ctx=Load()), ifs=[], is_async=0)
Load()
Load()
Load()
Name(id='result', ctx=Load())
Load()
Name(id='list', ctx=Load())
Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())
Load()
Attribute(value=Name(id='result', ctx=Load()), attr='mle', ctx=Load())
Attribute(value=Name(id='result', ctx=Load()), attr='mle', ctx=Load())
Load()
Load()
Str(s='likelihood_ratio')
Str(s='lr')
Load()
Name(id='_likelihood_ratio_confint', ctx=Load())
Name(id='result', ctx=Load())
Name(id='alpha', ctx=Load())
Load()
Str(s='fisher')
Str(s='fi')
Load()
Name(id='_fisher_confint', ctx=Load())
Name(id='result', ctx=Load())
Name(id='alpha', ctx=Load())
keyword(arg='observed', value=NameConstant(value=False))
Load()
Str(s='observed_fisher')
Str(s='observed_information')
Str(s='oi')
Load()
Name(id='_fisher_confint', ctx=Load())
Name(id='result', ctx=Load())
Name(id='alpha', ctx=Load())
keyword(arg='observed', value=NameConstant(value=True))
Load()
Str(s='CI `')
FormattedValue(value=Name(id='kind', ctx=Load()), conversion=-1, format_spec=None)
Str(s='` is not implemented.')
Name(id='float', ctx=Load())
Name(id='float', ctx=Load())
Load()
Call(func=Name(id='super', ctx=Load()), args=[], keywords=[])
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Name(id='float', ctx=Load())
Name(id='float', ctx=Load())
Load()
Name(id='Dict', ctx=Load())
Index(value=Tuple(elts=[Name(id='float', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load()))
Load()
Load()
Load()
Load()
Load()
Load()
Name(id='float', ctx=Load())
Name(id='float', ctx=Load())
Load()
Name(id='Dict', ctx=Load())
Index(value=Tuple(elts=[Name(id='float', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load()))
Load()
Load()
Load()
Name(id='int', ctx=Load())
Name(id='float', ctx=Load())
Load()
Name(id='Dict', ctx=Load())
Index(value=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load()))
Load()
Load()
Load()
Load()
Load()
Name(id='np', ctx=Load())
Load()
Name(id='list', ctx=Load())
Call(func=Attribute(value=Attribute(value=Name(id='result', ctx=Load()), attr='samples', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])
Name(id='np', ctx=Load())
Load()
Name(id='list', ctx=Load())
Call(func=Attribute(value=Attribute(value=Name(id='result', ctx=Load()), attr='samples', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])
Load()
BinOp(left=Name(id='p', ctx=Load()), op=Mult(), right=BinOp(left=Call(func=Name(id='derivative_log_pdf_a', ctx=Load()), args=[Name(id='a', ctx=Load()), Name(id='mlv', ctx=Load()), Name(id='m', ctx=Load())], keywords=[]), op=Pow(), right=Num(n=2)))
comprehension(target=Tuple(elts=[Name(id='p', ctx=Store()), Name(id='a', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='zip', ctx=Load()), args=[Name(id='p_i', ctx=Load()), Name(id='a_i', ctx=Load())], keywords=[]), ifs=[], is_async=0)
BinOp(left=Call(func=Name(id='derivative_log_pdf_a', ctx=Load()), args=[Name(id='x', ctx=Load()), Name(id='mlv', ctx=Load()), Name(id='m', ctx=Load())], keywords=[]), op=Pow(), right=Num(n=2))
Mult()
Call(func=Name(id='pdf_a', ctx=Load()), args=[Name(id='x', ctx=Load()), Name(id='mlv', ctx=Load()), Name(id='m', ctx=Load())], keywords=[])
Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load())
BinOp(left=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='arange', ctx=Load()), args=[BinOp(left=BinOp(left=Name(id='M', ctx=Load()), op=Div(), right=Num(n=2)), op=Add(), right=Num(n=1))], keywords=[])), op=Div(), right=Name(id='M', ctx=Load()))
Load()
Call(func=Name(id='integrand', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[])
comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='grid', ctx=Load()), ifs=[], is_async=0)
Load()
Name(id='result', ctx=Load())
Load()
Name(id='_compute_fisher_information', ctx=Load())
Name(id='result', ctx=Load())
Name(id='observed', ctx=Load())
Load()
Call(func=Attribute(value=Name(id='norm', ctx=Load()), attr='ppf', ctx=Load()), args=[BinOp(left=Num(n=1), op=Sub(), right=BinOp(left=Name(id='alpha', ctx=Load()), op=Div(), right=Num(n=2)))], keywords=[])
Div()
Name(id='std', ctx=Load())
Attribute(value=Name(id='np', ctx=Load()), attr='array', ctx=Load())
List(elts=[UnaryOp(op=USub(), operand=Num(n=1)), Num(n=1)], ctx=Load())
Attribute(value=Name(id='result', ctx=Load()), attr='post_processing', ctx=Load())
Name(id='bound', ctx=Load())
Name(id='bound', ctx=Store())
Name(id='confint', ctx=Load())
Name(id='np', ctx=Load())
Load()
BinOp(left=Name(id='M', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='arcsin', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sqrt', ctx=Load()), args=[Name(id='qae', ctx=Load())], keywords=[])], keywords=[]))
Div()
Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load())
Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load())
BinOp(left=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Mult(), right=BinOp(left=Name(id='y', ctx=Load()), op=Add(), right=Num(n=1))), op=Div(), right=Name(id='M', ctx=Load()))
Load()
Load()
Load()
Name(id='int', ctx=Load())
BinOp(left=Name(id='M', ctx=Load()), op=Div(), right=Num(n=2))
Store()
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[BinOp(left=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Mult(), right=BinOp(left=Name(id='y', ctx=Load()), op=Sub(), right=Num(n=1))), op=Div(), right=Name(id='M', ctx=Load()))], keywords=[])
Pow()
Num(n=2)
Store()
Name(id='left_of_qae', ctx=Load())
Name(id='qae', ctx=Load())
Load()
Store()
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[BinOp(left=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Mult(), right=BinOp(left=Name(id='y', ctx=Load()), op=Sub(), right=Num(n=1))), op=Div(), right=Name(id='M', ctx=Load()))], keywords=[])
Pow()
Num(n=2)
Store()
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[BinOp(left=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Mult(), right=BinOp(left=Name(id='y', ctx=Load()), op=Add(), right=Num(n=1))), op=Div(), right=Name(id='M', ctx=Load()))], keywords=[])
Pow()
Num(n=2)
Store()
Name(id='left_of_qae', ctx=Load())
Name(id='qae', ctx=Load())
Name(id='right_of_qae', ctx=Load())
Load()
Load()
Load()
Attribute(value=Attribute(value=Name(id='result', ctx=Load()), attr='samples', ctx=Load()), attr='keys', ctx=Load())
Load()
Load()
Attribute(value=Attribute(value=Name(id='result', ctx=Load()), attr='samples', ctx=Load()), attr='values', ctx=Load())
Name(id='np', ctx=Load())
Load()
BinOp(left=Attribute(value=Name(id='result', ctx=Load()), attr='shots', ctx=Load()), op=Mult(), right=Name(id='p_i', ctx=Load()))
Mult()
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='log', ctx=Load()), args=[Call(func=Name(id='pdf_a', ctx=Load()), args=[Name(id='a_i', ctx=Load()), Name(id='a', ctx=Load()), Name(id='m', ctx=Load())], keywords=[])], keywords=[])
Load()
Attribute(value=Name(id='chi2', ctx=Load()), attr='ppf', ctx=Load())
BinOp(left=Num(n=1), op=Sub(), right=Name(id='alpha', ctx=Load()))
keyword(arg='df', value=Num(n=1))
Name(id='loglikelihood', ctx=Load())
Name(id='x', ctx=Load())
Load()
Load()
UnaryOp(op=USub(), operand=Num(n=1))
Load()
Num(n=1)
Store()
Store()
Load()
Load()
Load()
Load()
NameConstant(value=True)
Load()
Load()
BinOp(left=Call(func=Name(id='cut', ctx=Load()), args=[Name(id='a', ctx=Load())], keywords=[]), op=Mult(), right=Call(func=Name(id='cut', ctx=Load()), args=[Name(id='locmax', ctx=Load())], keywords=[]))
Lt()
Num(n=0)
Name(id='left', ctx=Store())
Call(func=Name(id='bisect', ctx=Load()), args=[Name(id='cut', ctx=Load()), Name(id='a', ctx=Load()), Name(id='locmax', ctx=Load())], keywords=[])
Name(id='lower', ctx=Store())
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='minimum', ctx=Load()), args=[Name(id='lower', ctx=Load()), Name(id='left', ctx=Load())], keywords=[])
BinOp(left=Call(func=Name(id='cut', ctx=Load()), args=[Name(id='locmax', ctx=Load())], keywords=[]), op=Mult(), right=Call(func=Name(id='cut', ctx=Load()), args=[Name(id='b', ctx=Load())], keywords=[]))
Lt()
Num(n=0)
Name(id='right', ctx=Store())
Call(func=Name(id='bisect', ctx=Load()), args=[Name(id='cut', ctx=Load()), Name(id='locmax', ctx=Load()), Name(id='b', ctx=Load())], keywords=[])
Name(id='upper', ctx=Store())
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='maximum', ctx=Load()), args=[Name(id='upper', ctx=Load()), Name(id='right', ctx=Load())], keywords=[])
Attribute(value=Name(id='result', ctx=Load()), attr='post_processing', ctx=Load())
Name(id='bound', ctx=Load())
Name(id='bound', ctx=Store())
Name(id='confint', ctx=Load())
Load()
Name(id='QuantumCircuit', ctx=Load())
Load()
Name(id='QuantumCircuit', ctx=Load())
Load()
Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='QuantumInstance', ctx=Load()), Name(id='Backend', ctx=Load())], ctx=Load())), ctx=Load())
Load()
Name(id='super', ctx=Load())
Load()
Tuple(elts=[Name(id='QuantumInstance', ctx=Load()), Name(id='Backend', ctx=Load())], ctx=Load())
Load()
Load()
Load()
Load()
Load()
Name(id='self', ctx=Load())
Load()
Name(id='estimation_problem', ctx=Load())
Load()
Attribute(value=Name(id='self', ctx=Load()), attr='_iqft', ctx=Load())
Name(id='pec', ctx=Load())
Load()
Load()
Load()
Load()
Name(id='range', ctx=Load())
Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Load())
Attribute(value=Name(id='circuit', ctx=Load()), attr='num_qubits', ctx=Load())
Load()
Load()
Name(id='self', ctx=Load())
Load()
Name(id='circuit', ctx=Load())
Load()
Load()
Name(id='circuit', ctx=Load())
Load()
Name(id='list', ctx=Load())
Call(func=Name(id='range', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Load())], keywords=[])
Name(id='list', ctx=Load())
Call(func=Name(id='range', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Load())], keywords=[])
Load()
Tuple(elts=[Subscript(value=Name(id='Dict', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load())), ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())], ctx=Load())
Store()
Store()
Name(id='self', ctx=Load())
Load()
Load()
Store()
Store()
Name(id='self', ctx=Load())
Load()
Load()
Name(id='a', ctx=Store())
Name(id='p', ctx=Store())
Store()
Attribute(value=Name(id='samples', ctx=Load()), attr='items', ctx=Load())
Name(id='p', ctx=Load())
Gt()
Name(id='threshold', ctx=Load())
Name(id='y', ctx=Store())
Name(id='p', ctx=Store())
Store()
Attribute(value=Name(id='measurements', ctx=Load()), attr='items', ctx=Load())
Name(id='p', ctx=Load())
Gt()
Name(id='threshold', ctx=Load())
Name(id='Dict', ctx=Load())
Index(value=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load()))
Load()
Name(id='Dict', ctx=Load())
Index(value=Tuple(elts=[Name(id='float', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load()))
Load()
Name(id='np', ctx=Load())
Load()
Name(id='len', ctx=Load())
Name(id='statevector', ctx=Load())
Attribute(value=Subscript(value=Call(func=Name(id='bin', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]), slice=Slice(lower=Num(n=2), upper=None, step=None), ctx=Load()), attr='zfill', ctx=Load())
Name(id='num_qubits', ctx=Load())
UnaryOp(op=USub(), operand=Num(n=1))
Load()
Name(id='b', ctx=Load())
Slice(lower=None, upper=Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Load()), step=None)
Load()
Load()
Name(id='y', ctx=Load())
Attribute(value=Name(id='measurements', ctx=Load()), attr='get', ctx=Load())
Name(id='y', ctx=Load())
Num(n=0)
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='abs', ctx=Load()), args=[Name(id='amplitude', ctx=Load())], keywords=[])
Pow()
Num(n=2)
Load()
Load()
Name(id='int', ctx=Load())
BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='_M', ctx=Load()), op=Div(), right=Num(n=2))
Store()
Attribute(value=Name(id='self', ctx=Load()), attr='_M', ctx=Load())
Sub()
Name(id='y', ctx=Load())
Name(id='np', ctx=Load())
Load()
Attribute(value=Name(id='np', ctx=Load()), attr='power', ctx=Load())
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[BinOp(left=BinOp(left=Name(id='y', ctx=Load()), op=Mult(), right=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load())), op=Div(), right=BinOp(left=Num(n=2), op=Pow(), right=Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Load())))], keywords=[])
Num(n=2)
Num(n=7)
Load()
Name(id='a', ctx=Load())
Attribute(value=Name(id='samples', ctx=Load()), attr='get', ctx=Load())
Name(id='a', ctx=Load())
Num(n=0)
Load()
Name(id='self', ctx=Load())
Load()
Load()
Load()
Subscript(value=Call(func=Attribute(value=Name(id='state', ctx=Load()), attr='replace', ctx=Load()), args=[Str(s=' '), Str(s='')], keywords=[]), slice=Slice(lower=None, upper=Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Load()), step=None), ctx=Load())
Slice(lower=None, upper=None, step=UnaryOp(op=USub(), operand=Num(n=1)))
Load()
Load()
Load()
Load()
Name(id='y', ctx=Load())
Name(id='np', ctx=Load())
Load()
Attribute(value=Name(id='np', ctx=Load()), attr='power', ctx=Load())
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[BinOp(left=BinOp(left=Name(id='y', ctx=Load()), op=Mult(), right=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load())), op=Div(), right=BinOp(left=Num(n=2), op=Pow(), right=Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Load())))], keywords=[])
Num(n=2)
Num(n=7)
Load()
Name(id='a', ctx=Load())
Attribute(value=Name(id='samples', ctx=Load()), attr='get', ctx=Load())
Name(id='a', ctx=Load())
Num(n=0.0)
Load()
Load()
Load()
Attribute(value=Attribute(value=Name(id='result', ctx=Load()), attr='samples', ctx=Load()), attr='keys', ctx=Load())
Load()
Load()
Attribute(value=Attribute(value=Name(id='result', ctx=Load()), attr='samples', ctx=Load()), attr='values', ctx=Load())
Name(id='np', ctx=Load())
Load()
BinOp(left=Attribute(value=Name(id='result', ctx=Load()), attr='shots', ctx=Load()), op=Mult(), right=Name(id='p_i', ctx=Load()))
Mult()
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='log', ctx=Load()), args=[Call(func=Name(id='pdf_a', ctx=Load()), args=[Name(id='a_i', ctx=Load()), Name(id='a', ctx=Load()), Name(id='m', ctx=Load())], keywords=[])], keywords=[])
Name(id='np', ctx=Load())
Load()
BinOp(left=Name(id='M', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='arcsin', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sqrt', ctx=Load()), args=[Name(id='qae', ctx=Load())], keywords=[])], keywords=[]))
Div()
Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load())
Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load())
BinOp(left=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Mult(), right=BinOp(left=Name(id='y', ctx=Load()), op=Add(), right=Num(n=1))), op=Div(), right=Name(id='M', ctx=Load()))
Load()
Load()
Load()
Name(id='int', ctx=Load())
BinOp(left=Name(id='M', ctx=Load()), op=Div(), right=Num(n=2))
Store()
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[BinOp(left=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Mult(), right=BinOp(left=Name(id='y', ctx=Load()), op=Sub(), right=Num(n=1))), op=Div(), right=Name(id='M', ctx=Load()))], keywords=[])
Pow()
Num(n=2)
Store()
Name(id='left_of_qae', ctx=Load())
Name(id='qae', ctx=Load())
Load()
Store()
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[BinOp(left=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Mult(), right=BinOp(left=Name(id='y', ctx=Load()), op=Sub(), right=Num(n=1))), op=Div(), right=Name(id='M', ctx=Load()))], keywords=[])
Pow()
Num(n=2)
Store()
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[BinOp(left=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Mult(), right=BinOp(left=Name(id='y', ctx=Load()), op=Add(), right=Num(n=1))), op=Div(), right=Name(id='M', ctx=Load()))], keywords=[])
Pow()
Num(n=2)
Store()
Name(id='left_of_qae', ctx=Load())
Name(id='qae', ctx=Load())
Name(id='right_of_qae', ctx=Load())
Load()
Load()
UnaryOp(op=USub(), operand=Num(n=1))
Load()
Num(n=1)
Store()
Store()
Load()
Load()
Load()
Load()
NameConstant(value=True)
Load()
Load()
Store()
Load()
Store()
Load()
Name(id='result', ctx=Load())
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Name(id='self', ctx=Load())
Load()
Load()
NameConstant(value=False)
Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()), attr='execute', ctx=Load()), args=[Name(id='circuit', ctx=Load())], keywords=[])
  Found a method call call at line 303
Load()
Load()
Load()
Name(id='self', ctx=Load())
Load()
Load()
NameConstant(value=True)
Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()), attr='execute', ctx=Load()), args=[Name(id='circuit', ctx=Load())], keywords=[])
  Found a method call call at line 312
Load()
Load()
Load()
Load()
Attribute(value=Name(id='counts', ctx=Load()), attr='values', ctx=Load())
Load()
Load()
Name(id='estimation_problem', ctx=Load())
Load()
Load()
Name(id='a', ctx=Store())
Name(id='p', ctx=Store())
Store()
Attribute(value=Name(id='samples', ctx=Load()), attr='items', ctx=Load())
Store()
Store()
Name(id='samples', ctx=Load())
Load()
Attribute(value=Name(id='result', ctx=Load()), attr='samples_processed', ctx=Load())
Load()
Load()
Name(id='result', ctx=Load())
Load()
Name(id='result', ctx=Load())
Store()
Load()
Name(id='result', ctx=Load())
Store()
Load()
Name(id='result', ctx=Load())
Store()
Load()
Load()
Name(id='self', ctx=Load())
Load()
Load()
Load()
Load()
Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='post_processing', ctx=Load())
Name(id='value', ctx=Load())
Name(id='value', ctx=Store())
Attribute(value=Name(id='result', ctx=Load()), attr='confidence_interval', ctx=Load())
Load()
Load()
Name(id='np', ctx=Load())
Load()
Name(id='result', ctx=Load())
Load()
Name(id='result', ctx=Load())
Load()
Load()
Load()
Load()
Load()
Load()
Load()
NameConstant(value=False)
Load()
Load()
Load()
NameConstant(value=True)
Name(id='kind', ctx=Load())
Load()
Load()
Name(id='super', ctx=Load())
Load()
Load()
Load()
Tuple(elts=[Name(id='float', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load())
Load()
Load()
Load()
Tuple(elts=[Name(id='float', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load())
Load()
Load()
Load()
Tuple(elts=[Name(id='int', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load())
Load()
Load()
Attribute(value=Attribute(value=Name(id='result', ctx=Load()), attr='samples', ctx=Load()), attr='keys', ctx=Load())
Load()
Load()
Attribute(value=Attribute(value=Name(id='result', ctx=Load()), attr='samples', ctx=Load()), attr='values', ctx=Load())
Name(id='p', ctx=Load())
Mult()
BinOp(left=Call(func=Name(id='derivative_log_pdf_a', ctx=Load()), args=[Name(id='a', ctx=Load()), Name(id='mlv', ctx=Load()), Name(id='m', ctx=Load())], keywords=[]), op=Pow(), right=Num(n=2))
Tuple(elts=[Name(id='p', ctx=Store()), Name(id='a', ctx=Store())], ctx=Store())
Call(func=Name(id='zip', ctx=Load()), args=[Name(id='p_i', ctx=Load()), Name(id='a_i', ctx=Load())], keywords=[])
Call(func=Name(id='derivative_log_pdf_a', ctx=Load()), args=[Name(id='x', ctx=Load()), Name(id='mlv', ctx=Load()), Name(id='m', ctx=Load())], keywords=[])
Pow()
Num(n=2)
Name(id='pdf_a', ctx=Load())
Name(id='x', ctx=Load())
Name(id='mlv', ctx=Load())
Name(id='m', ctx=Load())
Name(id='np', ctx=Load())
Load()
BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='arange', ctx=Load()), args=[BinOp(left=BinOp(left=Name(id='M', ctx=Load()), op=Div(), right=Num(n=2)), op=Add(), right=Num(n=1))], keywords=[]))
Div()
Name(id='M', ctx=Load())
Name(id='integrand', ctx=Load())
Name(id='x', ctx=Load())
Name(id='x', ctx=Store())
Name(id='grid', ctx=Load())
Load()
Load()
Load()
Load()
Attribute(value=Name(id='norm', ctx=Load()), attr='ppf', ctx=Load())
BinOp(left=Num(n=1), op=Sub(), right=BinOp(left=Name(id='alpha', ctx=Load()), op=Div(), right=Num(n=2)))
Load()
Name(id='np', ctx=Load())
Load()
UnaryOp(op=USub(), operand=Num(n=1))
Num(n=1)
Load()
Name(id='result', ctx=Load())
Load()
Load()
Store()
Load()
Load()
Name(id='M', ctx=Load())
Mult()
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='arcsin', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sqrt', ctx=Load()), args=[Name(id='qae', ctx=Load())], keywords=[])], keywords=[])
Name(id='np', ctx=Load())
Load()
Name(id='np', ctx=Load())
Load()
BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Mult(), right=BinOp(left=Name(id='y', ctx=Load()), op=Add(), right=Num(n=1)))
Div()
Name(id='M', ctx=Load())
Load()
Name(id='M', ctx=Load())
Div()
Num(n=2)
Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load())
BinOp(left=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Mult(), right=BinOp(left=Name(id='y', ctx=Load()), op=Sub(), right=Num(n=1))), op=Div(), right=Name(id='M', ctx=Load()))
Load()
Load()
Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load())
BinOp(left=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Mult(), right=BinOp(left=Name(id='y', ctx=Load()), op=Sub(), right=Num(n=1))), op=Div(), right=Name(id='M', ctx=Load()))
Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load())
BinOp(left=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Mult(), right=BinOp(left=Name(id='y', ctx=Load()), op=Add(), right=Num(n=1))), op=Div(), right=Name(id='M', ctx=Load()))
Load()
Load()
Load()
Attribute(value=Name(id='result', ctx=Load()), attr='samples', ctx=Load())
Load()
Attribute(value=Name(id='result', ctx=Load()), attr='samples', ctx=Load())
Load()
Load()
Attribute(value=Name(id='result', ctx=Load()), attr='shots', ctx=Load())
Mult()
Name(id='p_i', ctx=Load())
Attribute(value=Name(id='np', ctx=Load()), attr='log', ctx=Load())
Call(func=Name(id='pdf_a', ctx=Load()), args=[Name(id='a_i', ctx=Load()), Name(id='a', ctx=Load()), Name(id='m', ctx=Load())], keywords=[])
Name(id='chi2', ctx=Load())
Load()
Num(n=1)
Sub()
Name(id='alpha', ctx=Load())
Num(n=1)
Load()
Load()
USub()
Num(n=1)
Call(func=Name(id='cut', ctx=Load()), args=[Name(id='a', ctx=Load())], keywords=[])
Mult()
Call(func=Name(id='cut', ctx=Load()), args=[Name(id='locmax', ctx=Load())], keywords=[])
Store()
Name(id='bisect', ctx=Load())
Name(id='cut', ctx=Load())
Name(id='a', ctx=Load())
Name(id='locmax', ctx=Load())
Store()
Attribute(value=Name(id='np', ctx=Load()), attr='minimum', ctx=Load())
Name(id='lower', ctx=Load())
Name(id='left', ctx=Load())
Call(func=Name(id='cut', ctx=Load()), args=[Name(id='locmax', ctx=Load())], keywords=[])
Mult()
Call(func=Name(id='cut', ctx=Load()), args=[Name(id='b', ctx=Load())], keywords=[])
Store()
Name(id='bisect', ctx=Load())
Name(id='cut', ctx=Load())
Name(id='locmax', ctx=Load())
Name(id='b', ctx=Load())
Store()
Attribute(value=Name(id='np', ctx=Load()), attr='maximum', ctx=Load())
Name(id='upper', ctx=Load())
Name(id='right', ctx=Load())
Name(id='result', ctx=Load())
Load()
Load()
Store()
Load()
Load()
Load()
Name(id='Union', ctx=Load())
Index(value=Tuple(elts=[Name(id='QuantumInstance', ctx=Load()), Name(id='Backend', ctx=Load())], ctx=Load()))
Load()
Load()
Name(id='QuantumInstance', ctx=Load())
Name(id='Backend', ctx=Load())
Load()
Load()
Load()
Name(id='self', ctx=Load())
Load()
Load()
Load()
Name(id='self', ctx=Load())
Load()
Name(id='circuit', ctx=Load())
Load()
Load()
Load()
Load()
Load()
Name(id='range', ctx=Load())
Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Load())
Load()
Name(id='range', ctx=Load())
Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Load())
Subscript(value=Name(id='Dict', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load())), ctx=Load())
Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())
Load()
Load()
Load()
Store()
Store()
Name(id='samples', ctx=Load())
Load()
Load()
Load()
Store()
Store()
Name(id='measurements', ctx=Load())
Load()
Load()
Load()
Load()
Tuple(elts=[Name(id='int', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load())
Load()
Tuple(elts=[Name(id='float', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load())
Load()
Load()
Load()
Subscript(value=Call(func=Name(id='bin', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]), slice=Slice(lower=Num(n=2), upper=None, step=None), ctx=Load())
Load()
Load()
USub()
Num(n=1)
Load()
Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Load())
Load()
Name(id='measurements', ctx=Load())
Load()
Load()
Attribute(value=Name(id='np', ctx=Load()), attr='abs', ctx=Load())
Name(id='amplitude', ctx=Load())
Load()
Attribute(value=Name(id='self', ctx=Load()), attr='_M', ctx=Load())
Div()
Num(n=2)
Name(id='self', ctx=Load())
Load()
Load()
Load()
Name(id='np', ctx=Load())
Load()
Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load())
BinOp(left=BinOp(left=Name(id='y', ctx=Load()), op=Mult(), right=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load())), op=Div(), right=BinOp(left=Num(n=2), op=Pow(), right=Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Load())))
Load()
Name(id='samples', ctx=Load())
Load()
Load()
Load()
Call(func=Attribute(value=Name(id='state', ctx=Load()), attr='replace', ctx=Load()), args=[Str(s=' '), Str(s='')], keywords=[])
Slice(lower=None, upper=Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Load()), step=None)
Load()
UnaryOp(op=USub(), operand=Num(n=1))
Load()
Load()
Name(id='np', ctx=Load())
Load()
Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load())
BinOp(left=BinOp(left=Name(id='y', ctx=Load()), op=Mult(), right=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load())), op=Div(), right=BinOp(left=Num(n=2), op=Pow(), right=Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Load())))
Load()
Name(id='samples', ctx=Load())
Load()
Load()
Attribute(value=Name(id='result', ctx=Load()), attr='samples', ctx=Load())
Load()
Attribute(value=Name(id='result', ctx=Load()), attr='samples', ctx=Load())
Load()
Load()
Attribute(value=Name(id='result', ctx=Load()), attr='shots', ctx=Load())
Mult()
Name(id='p_i', ctx=Load())
Attribute(value=Name(id='np', ctx=Load()), attr='log', ctx=Load())
Call(func=Name(id='pdf_a', ctx=Load()), args=[Name(id='a_i', ctx=Load()), Name(id='a', ctx=Load()), Name(id='m', ctx=Load())], keywords=[])
Load()
Name(id='M', ctx=Load())
Mult()
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='arcsin', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sqrt', ctx=Load()), args=[Name(id='qae', ctx=Load())], keywords=[])], keywords=[])
Name(id='np', ctx=Load())
Load()
Name(id='np', ctx=Load())
Load()
BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Mult(), right=BinOp(left=Name(id='y', ctx=Load()), op=Add(), right=Num(n=1)))
Div()
Name(id='M', ctx=Load())
Load()
Name(id='M', ctx=Load())
Div()
Num(n=2)
Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load())
BinOp(left=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Mult(), right=BinOp(left=Name(id='y', ctx=Load()), op=Sub(), right=Num(n=1))), op=Div(), right=Name(id='M', ctx=Load()))
Load()
Load()
Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load())
BinOp(left=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Mult(), right=BinOp(left=Name(id='y', ctx=Load()), op=Sub(), right=Num(n=1))), op=Div(), right=Name(id='M', ctx=Load()))
Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load())
BinOp(left=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Mult(), right=BinOp(left=Name(id='y', ctx=Load()), op=Add(), right=Num(n=1))), op=Div(), right=Name(id='M', ctx=Load()))
Load()
Load()
Load()
USub()
Num(n=1)
Load()
Load()
Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()), attr='execute', ctx=Load())
Name(id='circuit', ctx=Load())
Load()
Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()), attr='execute', ctx=Load())
Name(id='circuit', ctx=Load())
Name(id='counts', ctx=Load())
Load()
Load()
Store()
Store()
Name(id='samples', ctx=Load())
Load()
Load()
Name(id='result', ctx=Load())
Load()
Load()
Load()
Load()
Load()
Load()
Name(id='estimation_problem', ctx=Load())
Load()
Load()
Store()
Name(id='result', ctx=Load())
Load()
Load()
Load()
Load()
Load()
Load()
Name(id='float', ctx=Load())
Name(id='float', ctx=Load())
Load()
Name(id='float', ctx=Load())
Name(id='float', ctx=Load())
Load()
Name(id='int', ctx=Load())
Name(id='float', ctx=Load())
Load()
Attribute(value=Name(id='result', ctx=Load()), attr='samples', ctx=Load())
Load()
Attribute(value=Name(id='result', ctx=Load()), attr='samples', ctx=Load())
Load()
Load()
Call(func=Name(id='derivative_log_pdf_a', ctx=Load()), args=[Name(id='a', ctx=Load()), Name(id='mlv', ctx=Load()), Name(id='m', ctx=Load())], keywords=[])
Pow()
Num(n=2)
Name(id='p', ctx=Store())
Name(id='a', ctx=Store())
Store()
Name(id='zip', ctx=Load())
Name(id='p_i', ctx=Load())
Name(id='a_i', ctx=Load())
Name(id='derivative_log_pdf_a', ctx=Load())
Name(id='x', ctx=Load())
Name(id='mlv', ctx=Load())
Name(id='m', ctx=Load())
Load()
Load()
Load()
Load()
Load()
Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load())
Mult()
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='arange', ctx=Load()), args=[BinOp(left=BinOp(left=Name(id='M', ctx=Load()), op=Div(), right=Num(n=2)), op=Add(), right=Num(n=1))], keywords=[])
Load()
Load()
Load()
Store()
Load()
Name(id='norm', ctx=Load())
Load()
Num(n=1)
Sub()
BinOp(left=Name(id='alpha', ctx=Load()), op=Div(), right=Num(n=2))
Load()
USub()
Num(n=1)
Load()
Load()
Attribute(value=Name(id='np', ctx=Load()), attr='arcsin', ctx=Load())
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sqrt', ctx=Load()), args=[Name(id='qae', ctx=Load())], keywords=[])
Load()
Load()
Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load())
Mult()
BinOp(left=Name(id='y', ctx=Load()), op=Add(), right=Num(n=1))
Load()
Load()
Name(id='np', ctx=Load())
Load()
BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Mult(), right=BinOp(left=Name(id='y', ctx=Load()), op=Sub(), right=Num(n=1)))
Div()
Name(id='M', ctx=Load())
Name(id='np', ctx=Load())
Load()
BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Mult(), right=BinOp(left=Name(id='y', ctx=Load()), op=Sub(), right=Num(n=1)))
Div()
Name(id='M', ctx=Load())
Name(id='np', ctx=Load())
Load()
BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Mult(), right=BinOp(left=Name(id='y', ctx=Load()), op=Add(), right=Num(n=1)))
Div()
Name(id='M', ctx=Load())
Name(id='result', ctx=Load())
Load()
Name(id='result', ctx=Load())
Load()
Name(id='result', ctx=Load())
Load()
Load()
Name(id='np', ctx=Load())
Load()
Name(id='pdf_a', ctx=Load())
Name(id='a_i', ctx=Load())
Name(id='a', ctx=Load())
Name(id='m', ctx=Load())
Load()
Load()
Name(id='cut', ctx=Load())
Name(id='a', ctx=Load())
Name(id='cut', ctx=Load())
Name(id='locmax', ctx=Load())
Load()
Load()
Load()
Load()
Name(id='np', ctx=Load())
Load()
Load()
Load()
Name(id='cut', ctx=Load())
Name(id='locmax', ctx=Load())
Name(id='cut', ctx=Load())
Name(id='b', ctx=Load())
Load()
Load()
Load()
Load()
Name(id='np', ctx=Load())
Load()
Load()
Load()
Load()
Load()
Tuple(elts=[Name(id='QuantumInstance', ctx=Load()), Name(id='Backend', ctx=Load())], ctx=Load())
Load()
Load()
Load()
Load()
Load()
Load()
Name(id='self', ctx=Load())
Load()
Load()
Name(id='self', ctx=Load())
Load()
Name(id='Dict', ctx=Load())
Index(value=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()))
Load()
Name(id='np', ctx=Load())
Load()
Load()
Load()
Name(id='int', ctx=Load())
Name(id='float', ctx=Load())
Load()
Name(id='float', ctx=Load())
Name(id='float', ctx=Load())
Load()
Call(func=Name(id='bin', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[])
Slice(lower=Num(n=2), upper=None, step=None)
Load()
Name(id='self', ctx=Load())
Load()
Load()
Name(id='np', ctx=Load())
Load()
Load()
Name(id='self', ctx=Load())
Load()
Load()
Load()
Name(id='np', ctx=Load())
Load()
BinOp(left=Name(id='y', ctx=Load()), op=Mult(), right=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()))
Div()
BinOp(left=Num(n=2), op=Pow(), right=Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Load()))
Load()
Attribute(value=Name(id='state', ctx=Load()), attr='replace', ctx=Load())
Str(s=' ')
Str(s='')
Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Load())
USub()
Num(n=1)
Load()
Name(id='np', ctx=Load())
Load()
BinOp(left=Name(id='y', ctx=Load()), op=Mult(), right=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()))
Div()
BinOp(left=Num(n=2), op=Pow(), right=Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Load()))
Load()
Name(id='result', ctx=Load())
Load()
Name(id='result', ctx=Load())
Load()
Name(id='result', ctx=Load())
Load()
Load()
Name(id='np', ctx=Load())
Load()
Name(id='pdf_a', ctx=Load())
Name(id='a_i', ctx=Load())
Name(id='a', ctx=Load())
Name(id='m', ctx=Load())
Load()
Attribute(value=Name(id='np', ctx=Load()), attr='arcsin', ctx=Load())
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sqrt', ctx=Load()), args=[Name(id='qae', ctx=Load())], keywords=[])
Load()
Load()
Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load())
Mult()
BinOp(left=Name(id='y', ctx=Load()), op=Add(), right=Num(n=1))
Load()
Load()
Name(id='np', ctx=Load())
Load()
BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Mult(), right=BinOp(left=Name(id='y', ctx=Load()), op=Sub(), right=Num(n=1)))
Div()
Name(id='M', ctx=Load())
Name(id='np', ctx=Load())
Load()
BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Mult(), right=BinOp(left=Name(id='y', ctx=Load()), op=Sub(), right=Num(n=1)))
Div()
Name(id='M', ctx=Load())
Name(id='np', ctx=Load())
Load()
BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Mult(), right=BinOp(left=Name(id='y', ctx=Load()), op=Add(), right=Num(n=1)))
Div()
Name(id='M', ctx=Load())
Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load())
Load()
Load()
Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load())
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Name(id='result', ctx=Load())
Load()
Name(id='result', ctx=Load())
Load()
Name(id='derivative_log_pdf_a', ctx=Load())
Name(id='a', ctx=Load())
Name(id='mlv', ctx=Load())
Name(id='m', ctx=Load())
Store()
Store()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Name(id='np', ctx=Load())
Load()
Attribute(value=Name(id='np', ctx=Load()), attr='arange', ctx=Load())
BinOp(left=BinOp(left=Name(id='M', ctx=Load()), op=Div(), right=Num(n=2)), op=Add(), right=Num(n=1))
Load()
Name(id='alpha', ctx=Load())
Div()
Num(n=2)
Name(id='np', ctx=Load())
Load()
Attribute(value=Name(id='np', ctx=Load()), attr='sqrt', ctx=Load())
Name(id='qae', ctx=Load())
Name(id='np', ctx=Load())
Load()
Name(id='y', ctx=Load())
Add()
Num(n=1)
Load()
Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load())
Mult()
BinOp(left=Name(id='y', ctx=Load()), op=Sub(), right=Num(n=1))
Load()
Load()
Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load())
Mult()
BinOp(left=Name(id='y', ctx=Load()), op=Sub(), right=Num(n=1))
Load()
Load()
Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load())
Mult()
BinOp(left=Name(id='y', ctx=Load()), op=Add(), right=Num(n=1))
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Name(id='QuantumInstance', ctx=Load())
Name(id='Backend', ctx=Load())
Load()
Load()
Load()
Load()
Tuple(elts=[Name(id='str', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load())
Load()
Load()
Load()
Load()
Load()
Name(id='bin', ctx=Load())
Name(id='i', ctx=Load())
Num(n=2)
Load()
Load()
Load()
Load()
Name(id='y', ctx=Load())
Mult()
Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load())
Num(n=2)
Pow()
Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Load())
Name(id='state', ctx=Load())
Load()
Name(id='self', ctx=Load())
Load()
Load()
Name(id='y', ctx=Load())
Mult()
Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load())
Num(n=2)
Pow()
Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Load())
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Name(id='np', ctx=Load())
Load()
Attribute(value=Name(id='np', ctx=Load()), attr='sqrt', ctx=Load())
Name(id='qae', ctx=Load())
Name(id='np', ctx=Load())
Load()
Name(id='y', ctx=Load())
Add()
Num(n=1)
Load()
Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load())
Mult()
BinOp(left=Name(id='y', ctx=Load()), op=Sub(), right=Num(n=1))
Load()
Load()
Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load())
Mult()
BinOp(left=Name(id='y', ctx=Load()), op=Sub(), right=Num(n=1))
Load()
Load()
Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load())
Mult()
BinOp(left=Name(id='y', ctx=Load()), op=Add(), right=Num(n=1))
Load()
Name(id='self', ctx=Load())
Load()
Name(id='self', ctx=Load())
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Name(id='np', ctx=Load())
Load()
BinOp(left=Name(id='M', ctx=Load()), op=Div(), right=Num(n=2))
Add()
Num(n=1)
Load()
Load()
Name(id='np', ctx=Load())
Load()
Load()
Load()
Load()
Name(id='np', ctx=Load())
Load()
Name(id='y', ctx=Load())
Sub()
Num(n=1)
Name(id='np', ctx=Load())
Load()
Name(id='y', ctx=Load())
Sub()
Num(n=1)
Name(id='np', ctx=Load())
Load()
Name(id='y', ctx=Load())
Add()
Num(n=1)
Load()
Load()
Name(id='str', ctx=Load())
Name(id='int', ctx=Load())
Load()
Load()
Load()
Load()
Name(id='np', ctx=Load())
Load()
Name(id='self', ctx=Load())
Load()
Load()
Load()
Load()
Name(id='np', ctx=Load())
Load()
Name(id='self', ctx=Load())
Load()
Load()
Name(id='np', ctx=Load())
Load()
Load()
Load()
Load()
Name(id='np', ctx=Load())
Load()
Name(id='y', ctx=Load())
Sub()
Num(n=1)
Name(id='np', ctx=Load())
Load()
Name(id='y', ctx=Load())
Sub()
Num(n=1)
Name(id='np', ctx=Load())
Load()
Name(id='y', ctx=Load())
Add()
Num(n=1)
Load()
Load()
Load()
Name(id='M', ctx=Load())
Div()
Num(n=2)
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Module(body=[Expr(value=Str(s='The Quantum Phase Estimation-based Amplitude Estimation algorithm.')), ImportFrom(module='typing', names=[alias(name='Optional', asname=None), alias(name='Union', asname=None), alias(name='List', asname=None), alias(name='Tuple', asname=None), alias(name='Dict', asname=None)], level=0), ImportFrom(module='collections', names=[alias(name='OrderedDict', asname=None)], level=0), Import(names=[alias(name='numpy', asname='np')]), ImportFrom(module='scipy.stats', names=[alias(name='chi2', asname=None), alias(name='norm', asname=None)], level=0), ImportFrom(module='scipy.optimize', names=[alias(name='bisect', asname=None)], level=0), ImportFrom(module='qiskit', names=[alias(name='QuantumCircuit', asname=None), alias(name='ClassicalRegister', asname=None)], level=0), ImportFrom(module='qiskit.providers', names=[alias(name='Backend', asname=None)], level=0), ImportFrom(module='qiskit.utils', names=[alias(name='QuantumInstance', asname=None)], level=0), ImportFrom(module='amplitude_estimator', names=[alias(name='AmplitudeEstimator', asname=None), alias(name='AmplitudeEstimatorResult', asname=None)], level=1), ImportFrom(module='ae_utils', names=[alias(name='pdf_a', asname=None), alias(name='derivative_log_pdf_a', asname=None), alias(name='bisect_max', asname=None)], level=1), ImportFrom(module='estimation_problem', names=[alias(name='EstimationProblem', asname=None)], level=1), ClassDef(name='AmplitudeEstimation', bases=[Name(id='AmplitudeEstimator', ctx=Load())], keywords=[], body=[Expr(value=Str(s='The Quantum Phase Estimation-based Amplitude Estimation algorithm.\n\n    This class implements the original Quantum Amplitude Estimation (QAE) algorithm, introduced by\n    [1]. This canonical version uses quantum phase estimation along with a set of :math:`m`\n    additional evaluation qubits to find an estimate :math:`\\tilde{a}`, that is restricted to the\n    grid\n\n    .. math::\n\n        \\tilde{a} \\in \\{\\sin^2(\\pi  y / 2^m) : y = 0, ..., 2^{m-1}\\}\n\n    More evaluation qubits produce a finer sampling grid, therefore the accuracy of the algorithm\n    increases with :math:`m`.\n\n    Using a maximum likelihood post processing, this grid constraint can be circumvented.\n    This improved estimator is implemented as well, see [2] Appendix A for more detail.\n\n    References:\n        [1]: Brassard, G., Hoyer, P., Mosca, M., & Tapp, A. (2000).\n             Quantum Amplitude Amplification and Estimation.\n             `arXiv:quant-ph/0005055 <http://arxiv.org/abs/quant-ph/0005055>`_.\n        [2]: Grinko, D., Gacon, J., Zoufal, C., & Woerner, S. (2019).\n             Iterative Quantum Amplitude Estimation.\n             `arXiv:1912.05559 <https://arxiv.org/abs/1912.05559>`_.\n    ')), FunctionDef(name='__init__', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='num_eval_qubits', annotation=Name(id='int', ctx=Load())), arg(arg='phase_estimation_circuit', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Name(id='QuantumCircuit', ctx=Load())), ctx=Load())), arg(arg='iqft', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Name(id='QuantumCircuit', ctx=Load())), ctx=Load())), arg(arg='quantum_instance', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='QuantumInstance', ctx=Load()), Name(id='Backend', ctx=Load())], ctx=Load())), ctx=Load())), ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[NameConstant(value=None), NameConstant(value=None), NameConstant(value=None)]), body=[Expr(value=Str(s='\n        Args:\n            num_eval_qubits: The number of evaluation qubits.\n            phase_estimation_circuit: The phase estimation circuit used to run the algorithm.\n                Defaults to the standard phase estimation circuit from the circuit library,\n                `qiskit.circuit.library.PhaseEstimation` when None.\n            iqft: The inverse quantum Fourier transform component, defaults to using a standard\n                implementation from `qiskit.circuit.library.QFT` when None.\n            quantum_instance: The backend (or `QuantumInstance`) to execute the circuits on.\n\n        Raises:\n            ValueError: If the number of evaluation qubits is smaller than 1.\n        ')), If(test=Compare(left=Name(id='num_eval_qubits', ctx=Load()), ops=[Lt()], comparators=[Num(n=1)]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Str(s='The number of evaluation qubits must at least be 1.')], keywords=[]), cause=None)], orelse=[]), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='quantum_instance', ctx=Store())], value=Name(id='quantum_instance', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Store())], value=Name(id='num_eval_qubits', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_M', ctx=Store())], value=BinOp(left=Num(n=2), op=Pow(), right=Name(id='num_eval_qubits', ctx=Load()))), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_iqft', ctx=Store())], value=Name(id='iqft', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_pec', ctx=Store())], value=Name(id='phase_estimation_circuit', ctx=Load()))], decorator_list=[], returns=NameConstant(value=None)), FunctionDef(name='quantum_instance', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Get the quantum instance.\n\n        Returns:\n            The quantum instance used to run this algorithm.\n        ')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Name(id='QuantumInstance', ctx=Load())), ctx=Load())), FunctionDef(name='quantum_instance', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='quantum_instance', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='QuantumInstance', ctx=Load()), Name(id='Backend', ctx=Load())], ctx=Load())), ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Set quantum instance.\n\n        Args:\n            quantum_instance: The quantum instance used to run this algorithm.\n        ')), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='quantum_instance', ctx=Load()), Name(id='Backend', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='quantum_instance', ctx=Store())], value=Call(func=Name(id='QuantumInstance', ctx=Load()), args=[Name(id='quantum_instance', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Store())], value=Name(id='quantum_instance', ctx=Load()))], decorator_list=[Attribute(value=Name(id='quantum_instance', ctx=Load()), attr='setter', ctx=Load())], returns=NameConstant(value=None)), FunctionDef(name='construct_circuit', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='estimation_problem', annotation=Name(id='EstimationProblem', ctx=Load())), arg(arg='measurement', annotation=Name(id='bool', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[NameConstant(value=False)]), body=[Expr(value=Str(s='Construct the Amplitude Estimation quantum circuit.\n\n        Args:\n            estimation_problem: The estimation problem for which to construct the QAE circuit.\n            measurement: Boolean flag to indicate if measurements should be included in the circuit.\n\n        Returns:\n            The QuantumCircuit object for the constructed circuit.\n        ')), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_pec', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=[Assign(targets=[Name(id='pec', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_pec', ctx=Load()))], orelse=[ImportFrom(module='qiskit.circuit.library', names=[alias(name='PhaseEstimation', asname=None)], level=0), Assign(targets=[Name(id='pec', ctx=Store())], value=Call(func=Name(id='PhaseEstimation', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Load()), Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='grover_operator', ctx=Load())], keywords=[keyword(arg='iqft', value=Attribute(value=Name(id='self', ctx=Load()), attr='_iqft', ctx=Load()))]))]), Assign(targets=[Name(id='circuit', ctx=Store())], value=Call(func=Name(id='QuantumCircuit', ctx=Load()), args=[Starred(value=Attribute(value=Name(id='pec', ctx=Load()), attr='qregs', ctx=Load()), ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='circuit', ctx=Load()), attr='compose', ctx=Load()), args=[Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='state_preparation', ctx=Load()), Call(func=Name(id='list', ctx=Load()), args=[Call(func=Name(id='range', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Load()), Attribute(value=Name(id='circuit', ctx=Load()), attr='num_qubits', ctx=Load())], keywords=[])], keywords=[])], keywords=[keyword(arg='inplace', value=NameConstant(value=True))])), Expr(value=Call(func=Attribute(value=Name(id='circuit', ctx=Load()), attr='compose', ctx=Load()), args=[Name(id='pec', ctx=Load())], keywords=[keyword(arg='inplace', value=NameConstant(value=True))])), If(test=Name(id='measurement', ctx=Load()), body=[Assign(targets=[Name(id='cr', ctx=Store())], value=Call(func=Name(id='ClassicalRegister', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='circuit', ctx=Load()), attr='add_register', ctx=Load()), args=[Name(id='cr', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='circuit', ctx=Load()), attr='measure', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Name(id='range', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Load())], keywords=[])], keywords=[]), Call(func=Name(id='list', ctx=Load()), args=[Call(func=Name(id='range', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Load())], keywords=[])], keywords=[])], keywords=[]))], orelse=[]), Return(value=Name(id='circuit', ctx=Load()))], decorator_list=[], returns=Name(id='QuantumCircuit', ctx=Load())), FunctionDef(name='evaluate_measurements', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='circuit_results', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Subscript(value=Name(id='Dict', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load())), ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())], ctx=Load())), ctx=Load())), arg(arg='threshold', annotation=Name(id='float', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[Num(n=1e-06)]), body=[Expr(value=Str(s='Evaluate the results from the circuit simulation.\n\n        Given the probabilities from statevector simulation of the QAE circuit, compute the\n        probabilities that the measurements y/gridpoints a are the best estimate.\n\n        Args:\n            circuit_results: The circuit result from the QAE circuit. Can be either a counts dict\n                or a statevector.\n            threshold: Measurements with probabilities below the threshold are discarded.\n\n        Returns:\n            Dictionaries containing the a gridpoints with respective probabilities and\n                y measurements with respective probabilities, in this order.\n        ')), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='circuit_results', ctx=Load()), Name(id='dict', ctx=Load())], keywords=[]), body=[Assign(targets=[Tuple(elts=[Name(id='samples', ctx=Store()), Name(id='measurements', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_evaluate_count_results', ctx=Load()), args=[Name(id='circuit_results', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Tuple(elts=[Name(id='samples', ctx=Store()), Name(id='measurements', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_evaluate_statevector_results', ctx=Load()), args=[Name(id='circuit_results', ctx=Load())], keywords=[]))]), Assign(targets=[Name(id='samples', ctx=Store())], value=DictComp(key=Name(id='a', ctx=Load()), value=Name(id='p', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='a', ctx=Store()), Name(id='p', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='samples', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), ifs=[Compare(left=Name(id='p', ctx=Load()), ops=[Gt()], comparators=[Name(id='threshold', ctx=Load())])], is_async=0)])), Assign(targets=[Name(id='measurements', ctx=Store())], value=DictComp(key=Name(id='y', ctx=Load()), value=Name(id='p', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='y', ctx=Store()), Name(id='p', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='measurements', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), ifs=[Compare(left=Name(id='p', ctx=Load()), ops=[Gt()], comparators=[Name(id='threshold', ctx=Load())])], is_async=0)])), Return(value=Tuple(elts=[Name(id='samples', ctx=Load()), Name(id='measurements', ctx=Load())], ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Index(value=Tuple(elts=[Subscript(value=Name(id='Dict', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load())), ctx=Load()), Subscript(value=Name(id='Dict', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='float', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load())), ctx=Load())], ctx=Load())), ctx=Load())), FunctionDef(name='_evaluate_statevector_results', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='statevector', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Assign(targets=[Name(id='measurements', ctx=Store())], value=Call(func=Name(id='OrderedDict', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='num_qubits', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='log2', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='statevector', ctx=Load())], keywords=[])], keywords=[])], keywords=[])), For(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='amplitude', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='statevector', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='b', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Subscript(value=Call(func=Name(id='bin', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]), slice=Slice(lower=Num(n=2), upper=None, step=None), ctx=Load()), attr='zfill', ctx=Load()), args=[Name(id='num_qubits', ctx=Load())], keywords=[]), slice=Slice(lower=None, upper=None, step=UnaryOp(op=USub(), operand=Num(n=1))), ctx=Load())), Assign(targets=[Name(id='y', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='b', ctx=Load()), slice=Slice(lower=None, upper=Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Load()), step=None), ctx=Load()), Num(n=2)], keywords=[])), Assign(targets=[Subscript(value=Name(id='measurements', ctx=Load()), slice=Index(value=Name(id='y', ctx=Load())), ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='measurements', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='y', ctx=Load()), Num(n=0)], keywords=[]), op=Add(), right=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='abs', ctx=Load()), args=[Name(id='amplitude', ctx=Load())], keywords=[]), op=Pow(), right=Num(n=2))))], orelse=[]), Assign(targets=[Name(id='samples', ctx=Store())], value=Call(func=Name(id='OrderedDict', ctx=Load()), args=[], keywords=[])), For(target=Tuple(elts=[Name(id='y', ctx=Store()), Name(id='probability', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='measurements', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[If(test=Compare(left=Name(id='y', ctx=Load()), ops=[GtE()], comparators=[Call(func=Name(id='int', ctx=Load()), args=[BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='_M', ctx=Load()), op=Div(), right=Num(n=2))], keywords=[])]), body=[Assign(targets=[Name(id='y', ctx=Store())], value=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='_M', ctx=Load()), op=Sub(), right=Name(id='y', ctx=Load())))], orelse=[]), Assign(targets=[Name(id='a', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='round', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='power', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[BinOp(left=BinOp(left=Name(id='y', ctx=Load()), op=Mult(), right=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load())), op=Div(), right=BinOp(left=Num(n=2), op=Pow(), right=Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Load())))], keywords=[]), Num(n=2)], keywords=[])], keywords=[keyword(arg='decimals', value=Num(n=7))])), Assign(targets=[Subscript(value=Name(id='samples', ctx=Load()), slice=Index(value=Name(id='a', ctx=Load())), ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='samples', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='a', ctx=Load()), Num(n=0)], keywords=[]), op=Add(), right=Name(id='probability', ctx=Load())))], orelse=[]), Return(value=Tuple(elts=[Name(id='samples', ctx=Load()), Name(id='measurements', ctx=Load())], ctx=Load()))], decorator_list=[], returns=None), FunctionDef(name='_evaluate_count_results', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='counts', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Assign(targets=[Name(id='measurements', ctx=Store())], value=Call(func=Name(id='OrderedDict', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='samples', ctx=Store())], value=Call(func=Name(id='OrderedDict', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='shots', ctx=Store())], value=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()), attr='_run_config', ctx=Load()), attr='shots', ctx=Load())), For(target=Tuple(elts=[Name(id='state', ctx=Store()), Name(id='count', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='counts', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Name(id='y', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Subscript(value=Call(func=Attribute(value=Name(id='state', ctx=Load()), attr='replace', ctx=Load()), args=[Str(s=' '), Str(s='')], keywords=[]), slice=Slice(lower=None, upper=Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Load()), step=None), ctx=Load()), slice=Slice(lower=None, upper=None, step=UnaryOp(op=USub(), operand=Num(n=1))), ctx=Load()), Num(n=2)], keywords=[])), Assign(targets=[Name(id='probability', ctx=Store())], value=BinOp(left=Name(id='count', ctx=Load()), op=Div(), right=Name(id='shots', ctx=Load()))), Assign(targets=[Subscript(value=Name(id='measurements', ctx=Load()), slice=Index(value=Name(id='y', ctx=Load())), ctx=Store())], value=Name(id='probability', ctx=Load())), Assign(targets=[Name(id='a', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='round', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='power', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[BinOp(left=BinOp(left=Name(id='y', ctx=Load()), op=Mult(), right=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load())), op=Div(), right=BinOp(left=Num(n=2), op=Pow(), right=Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Load())))], keywords=[]), Num(n=2)], keywords=[])], keywords=[keyword(arg='decimals', value=Num(n=7))])), Assign(targets=[Subscript(value=Name(id='samples', ctx=Load()), slice=Index(value=Name(id='a', ctx=Load())), ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='samples', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='a', ctx=Load()), Num(n=0.0)], keywords=[]), op=Add(), right=Name(id='probability', ctx=Load())))], orelse=[]), Return(value=Tuple(elts=[Name(id='samples', ctx=Load()), Name(id='measurements', ctx=Load())], ctx=Load()))], decorator_list=[], returns=None), FunctionDef(name='compute_mle', args=arguments(args=[arg(arg='result', annotation=Str(s='AmplitudeEstimationResult')), arg(arg='apply_post_processing', annotation=Name(id='bool', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[NameConstant(value=False)]), body=[Expr(value=Str(s='Compute the Maximum Likelihood Estimator (MLE).\n\n        Args:\n            result: An amplitude estimation result object.\n            apply_post_processing: If True, apply the post processing to the MLE before returning\n                it.\n\n        Returns:\n            The MLE for the provided result object.\n        ')), Assign(targets=[Name(id='m', ctx=Store())], value=Attribute(value=Name(id='result', ctx=Load()), attr='num_evaluation_qubits', ctx=Load())), Assign(targets=[Name(id='M', ctx=Store())], value=BinOp(left=Num(n=2), op=Pow(), right=Name(id='m', ctx=Load()))), Assign(targets=[Name(id='qae', ctx=Store())], value=Attribute(value=Name(id='result', ctx=Load()), attr='estimation', ctx=Load())), Assign(targets=[Name(id='a_i', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='asarray', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='result', ctx=Load()), attr='samples', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[])), Assign(targets=[Name(id='p_i', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='asarray', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='result', ctx=Load()), attr='samples', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[])), FunctionDef(name='loglikelihood', args=arguments(args=[arg(arg='a', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sum', ctx=Load()), args=[BinOp(left=BinOp(left=Attribute(value=Name(id='result', ctx=Load()), attr='shots', ctx=Load()), op=Mult(), right=Name(id='p_i', ctx=Load())), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='log', ctx=Load()), args=[Call(func=Name(id='pdf_a', ctx=Load()), args=[Name(id='a_i', ctx=Load()), Name(id='a', ctx=Load()), Name(id='m', ctx=Load())], keywords=[])], keywords=[]))], keywords=[]))], decorator_list=[], returns=None), Assign(targets=[Name(id='y', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='round', ctx=Load()), args=[BinOp(left=BinOp(left=Name(id='M', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='arcsin', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sqrt', ctx=Load()), args=[Name(id='qae', ctx=Load())], keywords=[])], keywords=[])), op=Div(), right=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()))], keywords=[])], keywords=[])), If(test=Compare(left=Name(id='y', ctx=Load()), ops=[Eq()], comparators=[Num(n=0)]), body=[Assign(targets=[Name(id='right_of_qae', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[BinOp(left=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Mult(), right=BinOp(left=Name(id='y', ctx=Load()), op=Add(), right=Num(n=1))), op=Div(), right=Name(id='M', ctx=Load()))], keywords=[]), op=Pow(), right=Num(n=2))), Assign(targets=[Name(id='bubbles', ctx=Store())], value=List(elts=[Name(id='qae', ctx=Load()), Name(id='right_of_qae', ctx=Load())], ctx=Load()))], orelse=[If(test=Compare(left=Name(id='y', ctx=Load()), ops=[Eq()], comparators=[Call(func=Name(id='int', ctx=Load()), args=[BinOp(left=Name(id='M', ctx=Load()), op=Div(), right=Num(n=2))], keywords=[])]), body=[Assign(targets=[Name(id='left_of_qae', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[BinOp(left=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Mult(), right=BinOp(left=Name(id='y', ctx=Load()), op=Sub(), right=Num(n=1))), op=Div(), right=Name(id='M', ctx=Load()))], keywords=[]), op=Pow(), right=Num(n=2))), Assign(targets=[Name(id='bubbles', ctx=Store())], value=List(elts=[Name(id='left_of_qae', ctx=Load()), Name(id='qae', ctx=Load())], ctx=Load()))], orelse=[Assign(targets=[Name(id='left_of_qae', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[BinOp(left=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Mult(), right=BinOp(left=Name(id='y', ctx=Load()), op=Sub(), right=Num(n=1))), op=Div(), right=Name(id='M', ctx=Load()))], keywords=[]), op=Pow(), right=Num(n=2))), Assign(targets=[Name(id='right_of_qae', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[BinOp(left=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Mult(), right=BinOp(left=Name(id='y', ctx=Load()), op=Add(), right=Num(n=1))), op=Div(), right=Name(id='M', ctx=Load()))], keywords=[]), op=Pow(), right=Num(n=2))), Assign(targets=[Name(id='bubbles', ctx=Store())], value=List(elts=[Name(id='left_of_qae', ctx=Load()), Name(id='qae', ctx=Load()), Name(id='right_of_qae', ctx=Load())], ctx=Load()))])]), Assign(targets=[Name(id='a_opt', ctx=Store())], value=Name(id='qae', ctx=Load())), Assign(targets=[Name(id='loglik_opt', ctx=Store())], value=Call(func=Name(id='loglikelihood', ctx=Load()), args=[Name(id='a_opt', ctx=Load())], keywords=[])), For(target=Tuple(elts=[Name(id='a', ctx=Store()), Name(id='b', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='zip', ctx=Load()), args=[Subscript(value=Name(id='bubbles', ctx=Load()), slice=Slice(lower=None, upper=UnaryOp(op=USub(), operand=Num(n=1)), step=None), ctx=Load()), Subscript(value=Name(id='bubbles', ctx=Load()), slice=Slice(lower=Num(n=1), upper=None, step=None), ctx=Load())], keywords=[]), body=[Assign(targets=[Tuple(elts=[Name(id='locmax', ctx=Store()), Name(id='val', ctx=Store())], ctx=Store())], value=Call(func=Name(id='bisect_max', ctx=Load()), args=[Name(id='loglikelihood', ctx=Load()), Name(id='a', ctx=Load()), Name(id='b', ctx=Load())], keywords=[keyword(arg='retval', value=NameConstant(value=True))])), If(test=Compare(left=Name(id='val', ctx=Load()), ops=[Gt()], comparators=[Name(id='loglik_opt', ctx=Load())]), body=[Assign(targets=[Name(id='a_opt', ctx=Store())], value=Name(id='locmax', ctx=Load())), Assign(targets=[Name(id='loglik_opt', ctx=Store())], value=Name(id='val', ctx=Load()))], orelse=[])], orelse=[]), If(test=Name(id='apply_post_processing', ctx=Load()), body=[Return(value=Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='post_processing', ctx=Load()), args=[Name(id='a_opt', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='a_opt', ctx=Load()))], decorator_list=[Name(id='staticmethod', ctx=Load())], returns=Name(id='float', ctx=Load())), FunctionDef(name='estimate', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='estimation_problem', annotation=Name(id='EstimationProblem', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Run the amplitude estimation algorithm on provided estimation problem.\n\n        Args:\n            estimation_problem: The estimation problem.\n\n        Returns:\n            An amplitude estimation results object.\n\n        Raises:\n            ValueError: If `state_preparation` or `objective_qubits` are not set in the\n                `estimation_problem`.\n        ')), If(test=Compare(left=Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='state_preparation', ctx=Load()), ops=[Is()], comparators=[NameConstant(value=None)]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Str(s='The state_preparation property of the estimation problem must be set.')], keywords=[]), cause=None)], orelse=[]), If(test=Compare(left=Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='objective_qubits', ctx=Load()), ops=[Is()], comparators=[NameConstant(value=None)]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Str(s='The objective_qubits property of the estimation problem must be set.')], keywords=[]), cause=None)], orelse=[]), Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Name(id='AmplitudeEstimationResult', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='num_evaluation_qubits', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Load())), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='post_processing', ctx=Store())], value=Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='post_processing', ctx=Load())), If(test=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()), attr='is_statevector', ctx=Load()), body=[Assign(targets=[Name(id='circuit', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='construct_circuit', ctx=Load()), args=[Name(id='estimation_problem', ctx=Load())], keywords=[keyword(arg='measurement', value=NameConstant(value=False))])), Assign(targets=[Name(id='statevector', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()), attr='execute', ctx=Load()), args=[Name(id='circuit', ctx=Load())], keywords=[]), attr='get_statevector', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='circuit_results', ctx=Store())], value=Name(id='statevector', ctx=Load())), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='shots', ctx=Store())], value=Num(n=1))], orelse=[Assign(targets=[Name(id='circuit', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='construct_circuit', ctx=Load()), args=[Name(id='estimation_problem', ctx=Load())], keywords=[keyword(arg='measurement', value=NameConstant(value=True))])), Assign(targets=[Name(id='counts', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()), attr='execute', ctx=Load()), args=[Name(id='circuit', ctx=Load())], keywords=[]), attr='get_counts', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='circuit_results', ctx=Store())], value=Name(id='counts', ctx=Load())), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='shots', ctx=Store())], value=Call(func=Name(id='sum', ctx=Load()), args=[Call(func=Attribute(value=Name(id='counts', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[]))]), Assign(targets=[Tuple(elts=[Name(id='samples', ctx=Store()), Name(id='measurements', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='evaluate_measurements', ctx=Load()), args=[Attribute(value=Name(id='result', ctx=Load()), attr='circuit_results', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='samples', ctx=Store())], value=Name(id='samples', ctx=Load())), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='samples_processed', ctx=Store())], value=DictComp(key=Call(func=Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='post_processing', ctx=Load()), args=[Name(id='a', ctx=Load())], keywords=[]), value=Name(id='p', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='a', ctx=Store()), Name(id='p', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='samples', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), ifs=[], is_async=0)])), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='measurements', ctx=Store())], value=Name(id='measurements', ctx=Load())), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='max_probability', ctx=Store())], value=Num(n=0)), For(target=Tuple(elts=[Name(id='amplitude', ctx=Store()), Tuple(elts=[Name(id='mapped', ctx=Store()), Name(id='prob', ctx=Store())], ctx=Store())], ctx=Store()), iter=Call(func=Name(id='zip', ctx=Load()), args=[Call(func=Attribute(value=Name(id='samples', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Attribute(value=Name(id='result', ctx=Load()), attr='samples_processed', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='prob', ctx=Load()), ops=[Gt()], comparators=[Attribute(value=Name(id='result', ctx=Load()), attr='max_probability', ctx=Load())]), body=[Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='max_probability', ctx=Store())], value=Name(id='prob', ctx=Load())), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='estimation', ctx=Store())], value=Name(id='amplitude', ctx=Load())), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='estimation_processed', ctx=Store())], value=Name(id='mapped', ctx=Load()))], orelse=[])], orelse=[]), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='num_oracle_queries', ctx=Store())], value=BinOp(left=Attribute(value=Name(id='result', ctx=Load()), attr='shots', ctx=Load()), op=Mult(), right=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='_M', ctx=Load()), op=Sub(), right=Num(n=1)))), Assign(targets=[Name(id='mle', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='compute_mle', ctx=Load()), args=[Name(id='result', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='mle', ctx=Store())], value=Name(id='mle', ctx=Load())), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='mle_processed', ctx=Store())], value=Call(func=Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='post_processing', ctx=Load()), args=[Name(id='mle', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='confidence_interval', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='compute_confidence_interval', ctx=Load()), args=[Name(id='result', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='confidence_interval_processed', ctx=Store())], value=Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='post_processing', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='value', ctx=Store()), iter=Attribute(value=Name(id='result', ctx=Load()), attr='confidence_interval', ctx=Load()), ifs=[], is_async=0)])], keywords=[])), Return(value=Name(id='result', ctx=Load()))], decorator_list=[], returns=Str(s='AmplitudeEstimationResult')), FunctionDef(name='compute_confidence_interval', args=arguments(args=[arg(arg='result', annotation=Str(s='AmplitudeEstimationResult')), arg(arg='alpha', annotation=Name(id='float', ctx=Load())), arg(arg='kind', annotation=Name(id='str', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[Num(n=0.05), Str(s='likelihood_ratio')]), body=[Expr(value=Str(s="Compute the (1 - alpha) confidence interval.\n\n        Args:\n            result: An amplitude estimation result for which to compute the confidence interval.\n            alpha: Confidence level: compute the (1 - alpha) confidence interval.\n            kind: The method to compute the confidence interval, can be 'fisher', 'observed_fisher'\n                or 'likelihood_ratio' (default)\n\n        Returns:\n            The (1 - alpha) confidence interval of the specified kind.\n\n        Raises:\n            AquaError: If 'mle' is not in self._ret.keys() (i.e. `run` was not called yet).\n            NotImplementedError: If the confidence interval method `kind` is not implemented.\n        ")), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Attribute(value=Name(id='result', ctx=Load()), attr='circuit_results', ctx=Load()), Tuple(elts=[Name(id='list', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())], ctx=Load())], keywords=[]), body=[Return(value=Tuple(elts=[Attribute(value=Name(id='result', ctx=Load()), attr='mle', ctx=Load()), Attribute(value=Name(id='result', ctx=Load()), attr='mle', ctx=Load())], ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='kind', ctx=Load()), ops=[In()], comparators=[List(elts=[Str(s='likelihood_ratio'), Str(s='lr')], ctx=Load())]), body=[Return(value=Call(func=Name(id='_likelihood_ratio_confint', ctx=Load()), args=[Name(id='result', ctx=Load()), Name(id='alpha', ctx=Load())], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='kind', ctx=Load()), ops=[In()], comparators=[List(elts=[Str(s='fisher'), Str(s='fi')], ctx=Load())]), body=[Return(value=Call(func=Name(id='_fisher_confint', ctx=Load()), args=[Name(id='result', ctx=Load()), Name(id='alpha', ctx=Load())], keywords=[keyword(arg='observed', value=NameConstant(value=False))]))], orelse=[]), If(test=Compare(left=Name(id='kind', ctx=Load()), ops=[In()], comparators=[List(elts=[Str(s='observed_fisher'), Str(s='observed_information'), Str(s='oi')], ctx=Load())]), body=[Return(value=Call(func=Name(id='_fisher_confint', ctx=Load()), args=[Name(id='result', ctx=Load()), Name(id='alpha', ctx=Load())], keywords=[keyword(arg='observed', value=NameConstant(value=True))]))], orelse=[]), Raise(exc=Call(func=Name(id='NotImplementedError', ctx=Load()), args=[JoinedStr(values=[Str(s='CI `'), FormattedValue(value=Name(id='kind', ctx=Load()), conversion=-1, format_spec=None), Str(s='` is not implemented.')])], keywords=[]), cause=None)], decorator_list=[Name(id='staticmethod', ctx=Load())], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='float', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load())), ctx=Load()))], decorator_list=[]), ClassDef(name='AmplitudeEstimationResult', bases=[Name(id='AmplitudeEstimatorResult', ctx=Load())], keywords=[], body=[Expr(value=Str(s='The ``AmplitudeEstimation`` result object.')), FunctionDef(name='__init__', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_num_evaluation_qubits', ctx=Store())], value=NameConstant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_mle', ctx=Store())], value=NameConstant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_mle_processed', ctx=Store())], value=NameConstant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_samples', ctx=Store())], value=NameConstant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_samples_processed', ctx=Store())], value=NameConstant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_y_measurements', ctx=Store())], value=NameConstant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_max_probability', ctx=Store())], value=NameConstant(value=None))], decorator_list=[], returns=NameConstant(value=None)), FunctionDef(name='num_evaluation_qubits', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Returns the number of evaluation qubits.')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_num_evaluation_qubits', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='int', ctx=Load())), FunctionDef(name='num_evaluation_qubits', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='num_evaluation_qubits', annotation=Name(id='int', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Set the number of evaluation qubits.')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_num_evaluation_qubits', ctx=Store())], value=Name(id='num_evaluation_qubits', ctx=Load()))], decorator_list=[Attribute(value=Name(id='num_evaluation_qubits', ctx=Load()), attr='setter', ctx=Load())], returns=NameConstant(value=None)), FunctionDef(name='mle_processed', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Return the post-processed MLE for the amplitude.')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_mle_processed', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='float', ctx=Load())), FunctionDef(name='mle_processed', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='value', annotation=Name(id='float', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Set the post-processed MLE for the amplitude.')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_mle_processed', ctx=Store())], value=Name(id='value', ctx=Load()))], decorator_list=[Attribute(value=Name(id='mle_processed', ctx=Load()), attr='setter', ctx=Load())], returns=NameConstant(value=None)), FunctionDef(name='samples_processed', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Return the post-processed measurement samples with their measurement probability.')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_samples_processed', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='Dict', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='float', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load())), ctx=Load())), FunctionDef(name='samples_processed', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='value', annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='float', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load())), ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Set the post-processed measurement samples.')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_samples_processed', ctx=Store())], value=Name(id='value', ctx=Load()))], decorator_list=[Attribute(value=Name(id='samples_processed', ctx=Load()), attr='setter', ctx=Load())], returns=NameConstant(value=None)), FunctionDef(name='mle', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Return the MLE for the amplitude, in $[0, 1]$.')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_mle', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='float', ctx=Load())), FunctionDef(name='mle', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='value', annotation=Name(id='float', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Set the MLE for the amplitude, in $[0, 1]$.')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_mle', ctx=Store())], value=Name(id='value', ctx=Load()))], decorator_list=[Attribute(value=Name(id='mle', ctx=Load()), attr='setter', ctx=Load())], returns=NameConstant(value=None)), FunctionDef(name='samples', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Return the measurement samples with their measurement probability.')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_samples', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='Dict', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='float', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load())), ctx=Load())), FunctionDef(name='samples', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='value', annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='float', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load())), ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Set the measurement samples with their measurement probability.')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_samples', ctx=Store())], value=Name(id='value', ctx=Load()))], decorator_list=[Attribute(value=Name(id='samples', ctx=Load()), attr='setter', ctx=Load())], returns=NameConstant(value=None)), FunctionDef(name='measurements', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Return the measurements as integers with their measurement probability.')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_y_measurements', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='Dict', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load())), ctx=Load())), FunctionDef(name='measurements', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='value', annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load())), ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Set the measurements as integers with their measurement probability.')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_y_measurements', ctx=Store())], value=Name(id='value', ctx=Load()))], decorator_list=[Attribute(value=Name(id='measurements', ctx=Load()), attr='setter', ctx=Load())], returns=NameConstant(value=None)), FunctionDef(name='max_probability', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Return the maximum sampling probability.')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_max_probability', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='float', ctx=Load())), FunctionDef(name='max_probability', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='value', annotation=Name(id='float', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Set the maximum sampling probability.')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_max_probability', ctx=Store())], value=Name(id='value', ctx=Load()))], decorator_list=[Attribute(value=Name(id='max_probability', ctx=Load()), attr='setter', ctx=Load())], returns=NameConstant(value=None))], decorator_list=[]), FunctionDef(name='_compute_fisher_information', args=arguments(args=[arg(arg='result', annotation=Name(id='AmplitudeEstimationResult', ctx=Load())), arg(arg='observed', annotation=Name(id='bool', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[NameConstant(value=False)]), body=[Expr(value=Str(s='Computes the Fisher information for the output of the previous run.\n\n    Args:\n        result: An amplitude estimation result for which to compute the confidence interval.\n        observed: If True, the observed Fisher information is returned, otherwise\n            the expected Fisher information.\n\n    Returns:\n        The Fisher information.\n    ')), Assign(targets=[Name(id='fisher_information', ctx=Store())], value=NameConstant(value=None)), Assign(targets=[Name(id='mlv', ctx=Store())], value=Attribute(value=Name(id='result', ctx=Load()), attr='mle', ctx=Load())), Assign(targets=[Name(id='m', ctx=Store())], value=Attribute(value=Name(id='result', ctx=Load()), attr='num_evaluation_qubits', ctx=Load())), Assign(targets=[Name(id='M', ctx=Store())], value=BinOp(left=Num(n=2), op=Pow(), right=Name(id='m', ctx=Load()))), If(test=Name(id='observed', ctx=Load()), body=[Assign(targets=[Name(id='a_i', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='asarray', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='result', ctx=Load()), attr='samples', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[])), Assign(targets=[Name(id='p_i', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='asarray', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='result', ctx=Load()), attr='samples', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[])), Assign(targets=[Name(id='fisher_information', ctx=Store())], value=Call(func=Name(id='sum', ctx=Load()), args=[GeneratorExp(elt=BinOp(left=Name(id='p', ctx=Load()), op=Mult(), right=BinOp(left=Call(func=Name(id='derivative_log_pdf_a', ctx=Load()), args=[Name(id='a', ctx=Load()), Name(id='mlv', ctx=Load()), Name(id='m', ctx=Load())], keywords=[]), op=Pow(), right=Num(n=2))), generators=[comprehension(target=Tuple(elts=[Name(id='p', ctx=Store()), Name(id='a', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='zip', ctx=Load()), args=[Name(id='p_i', ctx=Load()), Name(id='a_i', ctx=Load())], keywords=[]), ifs=[], is_async=0)])], keywords=[]))], orelse=[FunctionDef(name='integrand', args=arguments(args=[arg(arg='x', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Return(value=BinOp(left=BinOp(left=Call(func=Name(id='derivative_log_pdf_a', ctx=Load()), args=[Name(id='x', ctx=Load()), Name(id='mlv', ctx=Load()), Name(id='m', ctx=Load())], keywords=[]), op=Pow(), right=Num(n=2)), op=Mult(), right=Call(func=Name(id='pdf_a', ctx=Load()), args=[Name(id='x', ctx=Load()), Name(id='mlv', ctx=Load()), Name(id='m', ctx=Load())], keywords=[])))], decorator_list=[], returns=None), Assign(targets=[Name(id='grid', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[BinOp(left=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='arange', ctx=Load()), args=[BinOp(left=BinOp(left=Name(id='M', ctx=Load()), op=Div(), right=Num(n=2)), op=Add(), right=Num(n=1))], keywords=[])), op=Div(), right=Name(id='M', ctx=Load()))], keywords=[]), op=Pow(), right=Num(n=2))), Assign(targets=[Name(id='fisher_information', ctx=Store())], value=Call(func=Name(id='sum', ctx=Load()), args=[GeneratorExp(elt=Call(func=Name(id='integrand', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='grid', ctx=Load()), ifs=[], is_async=0)])], keywords=[]))]), Return(value=Name(id='fisher_information', ctx=Load()))], decorator_list=[], returns=Name(id='float', ctx=Load())), FunctionDef(name='_fisher_confint', args=arguments(args=[arg(arg='result', annotation=Name(id='AmplitudeEstimationResult', ctx=Load())), arg(arg='alpha', annotation=Name(id='float', ctx=Load())), arg(arg='observed', annotation=Name(id='bool', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[NameConstant(value=False)]), body=[Expr(value=Str(s='Compute the Fisher information confidence interval for the MLE of the previous run.\n\n    Args:\n        result: An amplitude estimation result for which to compute the confidence interval.\n        alpha: Specifies the (1 - alpha) confidence level (0 < alpha < 1).\n        observed: If True, the observed Fisher information is used to construct the\n            confidence interval, otherwise the expected Fisher information.\n\n    Returns:\n        The Fisher information confidence interval.\n    ')), Assign(targets=[Name(id='std', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sqrt', ctx=Load()), args=[BinOp(left=Attribute(value=Name(id='result', ctx=Load()), attr='shots', ctx=Load()), op=Mult(), right=Call(func=Name(id='_compute_fisher_information', ctx=Load()), args=[Name(id='result', ctx=Load()), Name(id='observed', ctx=Load())], keywords=[]))], keywords=[])), Assign(targets=[Name(id='confint', ctx=Store())], value=BinOp(left=Attribute(value=Name(id='result', ctx=Load()), attr='mle', ctx=Load()), op=Add(), right=BinOp(left=BinOp(left=Call(func=Attribute(value=Name(id='norm', ctx=Load()), attr='ppf', ctx=Load()), args=[BinOp(left=Num(n=1), op=Sub(), right=BinOp(left=Name(id='alpha', ctx=Load()), op=Div(), right=Num(n=2)))], keywords=[]), op=Div(), right=Name(id='std', ctx=Load())), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='array', ctx=Load()), args=[List(elts=[UnaryOp(op=USub(), operand=Num(n=1)), Num(n=1)], ctx=Load())], keywords=[])))), Return(value=Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='post_processing', ctx=Load()), args=[Name(id='bound', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='bound', ctx=Store()), iter=Name(id='confint', ctx=Load()), ifs=[], is_async=0)])], keywords=[]))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='float', ctx=Load())), ctx=Load())), FunctionDef(name='_likelihood_ratio_confint', args=arguments(args=[arg(arg='result', annotation=Name(id='AmplitudeEstimationResult', ctx=Load())), arg(arg='alpha', annotation=Name(id='float', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Compute the likelihood ratio confidence interval for the MLE of the previous run.\n\n    Args:\n        result: An amplitude estimation result for which to compute the confidence interval.\n        alpha: Specifies the (1 - alpha) confidence level (0 < alpha < 1).\n\n    Returns:\n        The likelihood ratio confidence interval.\n    ')), Assign(targets=[Name(id='m', ctx=Store())], value=Attribute(value=Name(id='result', ctx=Load()), attr='num_evaluation_qubits', ctx=Load())), Assign(targets=[Name(id='M', ctx=Store())], value=BinOp(left=Num(n=2), op=Pow(), right=Name(id='m', ctx=Load()))), Assign(targets=[Name(id='qae', ctx=Store())], value=Attribute(value=Name(id='result', ctx=Load()), attr='estimation', ctx=Load())), Assign(targets=[Name(id='y', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='round', ctx=Load()), args=[BinOp(left=BinOp(left=Name(id='M', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='arcsin', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sqrt', ctx=Load()), args=[Name(id='qae', ctx=Load())], keywords=[])], keywords=[])), op=Div(), right=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()))], keywords=[])], keywords=[])), If(test=Compare(left=Name(id='y', ctx=Load()), ops=[Eq()], comparators=[Num(n=0)]), body=[Assign(targets=[Name(id='right_of_qae', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[BinOp(left=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Mult(), right=BinOp(left=Name(id='y', ctx=Load()), op=Add(), right=Num(n=1))), op=Div(), right=Name(id='M', ctx=Load()))], keywords=[]), op=Pow(), right=Num(n=2))), Assign(targets=[Name(id='bubbles', ctx=Store())], value=List(elts=[Name(id='qae', ctx=Load()), Name(id='right_of_qae', ctx=Load())], ctx=Load()))], orelse=[If(test=Compare(left=Name(id='y', ctx=Load()), ops=[Eq()], comparators=[Call(func=Name(id='int', ctx=Load()), args=[BinOp(left=Name(id='M', ctx=Load()), op=Div(), right=Num(n=2))], keywords=[])]), body=[Assign(targets=[Name(id='left_of_qae', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[BinOp(left=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Mult(), right=BinOp(left=Name(id='y', ctx=Load()), op=Sub(), right=Num(n=1))), op=Div(), right=Name(id='M', ctx=Load()))], keywords=[]), op=Pow(), right=Num(n=2))), Assign(targets=[Name(id='bubbles', ctx=Store())], value=List(elts=[Name(id='left_of_qae', ctx=Load()), Name(id='qae', ctx=Load())], ctx=Load()))], orelse=[Assign(targets=[Name(id='left_of_qae', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[BinOp(left=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Mult(), right=BinOp(left=Name(id='y', ctx=Load()), op=Sub(), right=Num(n=1))), op=Div(), right=Name(id='M', ctx=Load()))], keywords=[]), op=Pow(), right=Num(n=2))), Assign(targets=[Name(id='right_of_qae', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[BinOp(left=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Mult(), right=BinOp(left=Name(id='y', ctx=Load()), op=Add(), right=Num(n=1))), op=Div(), right=Name(id='M', ctx=Load()))], keywords=[]), op=Pow(), right=Num(n=2))), Assign(targets=[Name(id='bubbles', ctx=Store())], value=List(elts=[Name(id='left_of_qae', ctx=Load()), Name(id='qae', ctx=Load()), Name(id='right_of_qae', ctx=Load())], ctx=Load()))])]), Assign(targets=[Name(id='a_i', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='asarray', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='result', ctx=Load()), attr='samples', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[])), Assign(targets=[Name(id='p_i', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='asarray', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='result', ctx=Load()), attr='samples', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[])), FunctionDef(name='loglikelihood', args=arguments(args=[arg(arg='a', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sum', ctx=Load()), args=[BinOp(left=BinOp(left=Attribute(value=Name(id='result', ctx=Load()), attr='shots', ctx=Load()), op=Mult(), right=Name(id='p_i', ctx=Load())), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='log', ctx=Load()), args=[Call(func=Name(id='pdf_a', ctx=Load()), args=[Name(id='a_i', ctx=Load()), Name(id='a', ctx=Load()), Name(id='m', ctx=Load())], keywords=[])], keywords=[]))], keywords=[]))], decorator_list=[], returns=None), Assign(targets=[Name(id='loglik_mle', ctx=Store())], value=Call(func=Name(id='loglikelihood', ctx=Load()), args=[Attribute(value=Name(id='result', ctx=Load()), attr='mle', ctx=Load())], keywords=[])), Assign(targets=[Name(id='thres', ctx=Store())], value=BinOp(left=Name(id='loglik_mle', ctx=Load()), op=Sub(), right=BinOp(left=Call(func=Attribute(value=Name(id='chi2', ctx=Load()), attr='ppf', ctx=Load()), args=[BinOp(left=Num(n=1), op=Sub(), right=Name(id='alpha', ctx=Load()))], keywords=[keyword(arg='df', value=Num(n=1))]), op=Div(), right=Num(n=2)))), FunctionDef(name='cut', args=arguments(args=[arg(arg='x', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Return(value=BinOp(left=Call(func=Name(id='loglikelihood', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), op=Sub(), right=Name(id='thres', ctx=Load())))], decorator_list=[], returns=None), Assign(targets=[Name(id='lower', ctx=Store()), Name(id='upper', ctx=Store())], value=Attribute(value=Name(id='result', ctx=Load()), attr='mle', ctx=Load())), For(target=Tuple(elts=[Name(id='a', ctx=Store()), Name(id='b', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='zip', ctx=Load()), args=[Subscript(value=Name(id='bubbles', ctx=Load()), slice=Slice(lower=None, upper=UnaryOp(op=USub(), operand=Num(n=1)), step=None), ctx=Load()), Subscript(value=Name(id='bubbles', ctx=Load()), slice=Slice(lower=Num(n=1), upper=None, step=None), ctx=Load())], keywords=[]), body=[Assign(targets=[Tuple(elts=[Name(id='locmax', ctx=Store()), Name(id='val', ctx=Store())], ctx=Store())], value=Call(func=Name(id='bisect_max', ctx=Load()), args=[Name(id='loglikelihood', ctx=Load()), Name(id='a', ctx=Load()), Name(id='b', ctx=Load())], keywords=[keyword(arg='retval', value=NameConstant(value=True))])), If(test=Compare(left=Name(id='val', ctx=Load()), ops=[GtE()], comparators=[Name(id='thres', ctx=Load())]), body=[If(test=Compare(left=BinOp(left=Call(func=Name(id='cut', ctx=Load()), args=[Name(id='a', ctx=Load())], keywords=[]), op=Mult(), right=Call(func=Name(id='cut', ctx=Load()), args=[Name(id='locmax', ctx=Load())], keywords=[])), ops=[Lt()], comparators=[Num(n=0)]), body=[Assign(targets=[Name(id='left', ctx=Store())], value=Call(func=Name(id='bisect', ctx=Load()), args=[Name(id='cut', ctx=Load()), Name(id='a', ctx=Load()), Name(id='locmax', ctx=Load())], keywords=[])), Assign(targets=[Name(id='lower', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='minimum', ctx=Load()), args=[Name(id='lower', ctx=Load()), Name(id='left', ctx=Load())], keywords=[]))], orelse=[]), If(test=Compare(left=BinOp(left=Call(func=Name(id='cut', ctx=Load()), args=[Name(id='locmax', ctx=Load())], keywords=[]), op=Mult(), right=Call(func=Name(id='cut', ctx=Load()), args=[Name(id='b', ctx=Load())], keywords=[])), ops=[Lt()], comparators=[Num(n=0)]), body=[Assign(targets=[Name(id='right', ctx=Store())], value=Call(func=Name(id='bisect', ctx=Load()), args=[Name(id='cut', ctx=Load()), Name(id='locmax', ctx=Load()), Name(id='b', ctx=Load())], keywords=[])), Assign(targets=[Name(id='upper', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='maximum', ctx=Load()), args=[Name(id='upper', ctx=Load()), Name(id='right', ctx=Load())], keywords=[]))], orelse=[])], orelse=[])], orelse=[]), Assign(targets=[Name(id='confint', ctx=Store())], value=List(elts=[Name(id='lower', ctx=Load()), Name(id='upper', ctx=Load())], ctx=Load())), Return(value=Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='post_processing', ctx=Load()), args=[Name(id='bound', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='bound', ctx=Store()), iter=Name(id='confint', ctx=Load()), ifs=[], is_async=0)])], keywords=[]))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='float', ctx=Load())), ctx=Load()))])
Expr(value=Str(s='The Quantum Phase Estimation-based Amplitude Estimation algorithm.'))
ImportFrom(module='typing', names=[alias(name='Optional', asname=None), alias(name='Union', asname=None), alias(name='List', asname=None), alias(name='Tuple', asname=None), alias(name='Dict', asname=None)], level=0)
ImportFrom(module='collections', names=[alias(name='OrderedDict', asname=None)], level=0)
Import(names=[alias(name='numpy', asname='np')])
ImportFrom(module='scipy.stats', names=[alias(name='chi2', asname=None), alias(name='norm', asname=None)], level=0)
ImportFrom(module='scipy.optimize', names=[alias(name='bisect', asname=None)], level=0)
ImportFrom(module='qiskit', names=[alias(name='QuantumCircuit', asname=None), alias(name='ClassicalRegister', asname=None)], level=0)
ImportFrom(module='qiskit.providers', names=[alias(name='Backend', asname=None)], level=0)
ImportFrom(module='qiskit.utils', names=[alias(name='QuantumInstance', asname=None)], level=0)
ImportFrom(module='amplitude_estimator', names=[alias(name='AmplitudeEstimator', asname=None), alias(name='AmplitudeEstimatorResult', asname=None)], level=1)
ImportFrom(module='ae_utils', names=[alias(name='pdf_a', asname=None), alias(name='derivative_log_pdf_a', asname=None), alias(name='bisect_max', asname=None)], level=1)
ImportFrom(module='estimation_problem', names=[alias(name='EstimationProblem', asname=None)], level=1)
ClassDef(name='AmplitudeEstimation', bases=[Name(id='AmplitudeEstimator', ctx=Load())], keywords=[], body=[Expr(value=Str(s='The Quantum Phase Estimation-based Amplitude Estimation algorithm.\n\n    This class implements the original Quantum Amplitude Estimation (QAE) algorithm, introduced by\n    [1]. This canonical version uses quantum phase estimation along with a set of :math:`m`\n    additional evaluation qubits to find an estimate :math:`\\tilde{a}`, that is restricted to the\n    grid\n\n    .. math::\n\n        \\tilde{a} \\in \\{\\sin^2(\\pi  y / 2^m) : y = 0, ..., 2^{m-1}\\}\n\n    More evaluation qubits produce a finer sampling grid, therefore the accuracy of the algorithm\n    increases with :math:`m`.\n\n    Using a maximum likelihood post processing, this grid constraint can be circumvented.\n    This improved estimator is implemented as well, see [2] Appendix A for more detail.\n\n    References:\n        [1]: Brassard, G., Hoyer, P., Mosca, M., & Tapp, A. (2000).\n             Quantum Amplitude Amplification and Estimation.\n             `arXiv:quant-ph/0005055 <http://arxiv.org/abs/quant-ph/0005055>`_.\n        [2]: Grinko, D., Gacon, J., Zoufal, C., & Woerner, S. (2019).\n             Iterative Quantum Amplitude Estimation.\n             `arXiv:1912.05559 <https://arxiv.org/abs/1912.05559>`_.\n    ')), FunctionDef(name='__init__', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='num_eval_qubits', annotation=Name(id='int', ctx=Load())), arg(arg='phase_estimation_circuit', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Name(id='QuantumCircuit', ctx=Load())), ctx=Load())), arg(arg='iqft', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Name(id='QuantumCircuit', ctx=Load())), ctx=Load())), arg(arg='quantum_instance', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='QuantumInstance', ctx=Load()), Name(id='Backend', ctx=Load())], ctx=Load())), ctx=Load())), ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[NameConstant(value=None), NameConstant(value=None), NameConstant(value=None)]), body=[Expr(value=Str(s='\n        Args:\n            num_eval_qubits: The number of evaluation qubits.\n            phase_estimation_circuit: The phase estimation circuit used to run the algorithm.\n                Defaults to the standard phase estimation circuit from the circuit library,\n                `qiskit.circuit.library.PhaseEstimation` when None.\n            iqft: The inverse quantum Fourier transform component, defaults to using a standard\n                implementation from `qiskit.circuit.library.QFT` when None.\n            quantum_instance: The backend (or `QuantumInstance`) to execute the circuits on.\n\n        Raises:\n            ValueError: If the number of evaluation qubits is smaller than 1.\n        ')), If(test=Compare(left=Name(id='num_eval_qubits', ctx=Load()), ops=[Lt()], comparators=[Num(n=1)]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Str(s='The number of evaluation qubits must at least be 1.')], keywords=[]), cause=None)], orelse=[]), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='quantum_instance', ctx=Store())], value=Name(id='quantum_instance', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Store())], value=Name(id='num_eval_qubits', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_M', ctx=Store())], value=BinOp(left=Num(n=2), op=Pow(), right=Name(id='num_eval_qubits', ctx=Load()))), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_iqft', ctx=Store())], value=Name(id='iqft', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_pec', ctx=Store())], value=Name(id='phase_estimation_circuit', ctx=Load()))], decorator_list=[], returns=NameConstant(value=None)), FunctionDef(name='quantum_instance', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Get the quantum instance.\n\n        Returns:\n            The quantum instance used to run this algorithm.\n        ')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Name(id='QuantumInstance', ctx=Load())), ctx=Load())), FunctionDef(name='quantum_instance', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='quantum_instance', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='QuantumInstance', ctx=Load()), Name(id='Backend', ctx=Load())], ctx=Load())), ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Set quantum instance.\n\n        Args:\n            quantum_instance: The quantum instance used to run this algorithm.\n        ')), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='quantum_instance', ctx=Load()), Name(id='Backend', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='quantum_instance', ctx=Store())], value=Call(func=Name(id='QuantumInstance', ctx=Load()), args=[Name(id='quantum_instance', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Store())], value=Name(id='quantum_instance', ctx=Load()))], decorator_list=[Attribute(value=Name(id='quantum_instance', ctx=Load()), attr='setter', ctx=Load())], returns=NameConstant(value=None)), FunctionDef(name='construct_circuit', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='estimation_problem', annotation=Name(id='EstimationProblem', ctx=Load())), arg(arg='measurement', annotation=Name(id='bool', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[NameConstant(value=False)]), body=[Expr(value=Str(s='Construct the Amplitude Estimation quantum circuit.\n\n        Args:\n            estimation_problem: The estimation problem for which to construct the QAE circuit.\n            measurement: Boolean flag to indicate if measurements should be included in the circuit.\n\n        Returns:\n            The QuantumCircuit object for the constructed circuit.\n        ')), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_pec', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=[Assign(targets=[Name(id='pec', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_pec', ctx=Load()))], orelse=[ImportFrom(module='qiskit.circuit.library', names=[alias(name='PhaseEstimation', asname=None)], level=0), Assign(targets=[Name(id='pec', ctx=Store())], value=Call(func=Name(id='PhaseEstimation', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Load()), Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='grover_operator', ctx=Load())], keywords=[keyword(arg='iqft', value=Attribute(value=Name(id='self', ctx=Load()), attr='_iqft', ctx=Load()))]))]), Assign(targets=[Name(id='circuit', ctx=Store())], value=Call(func=Name(id='QuantumCircuit', ctx=Load()), args=[Starred(value=Attribute(value=Name(id='pec', ctx=Load()), attr='qregs', ctx=Load()), ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='circuit', ctx=Load()), attr='compose', ctx=Load()), args=[Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='state_preparation', ctx=Load()), Call(func=Name(id='list', ctx=Load()), args=[Call(func=Name(id='range', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Load()), Attribute(value=Name(id='circuit', ctx=Load()), attr='num_qubits', ctx=Load())], keywords=[])], keywords=[])], keywords=[keyword(arg='inplace', value=NameConstant(value=True))])), Expr(value=Call(func=Attribute(value=Name(id='circuit', ctx=Load()), attr='compose', ctx=Load()), args=[Name(id='pec', ctx=Load())], keywords=[keyword(arg='inplace', value=NameConstant(value=True))])), If(test=Name(id='measurement', ctx=Load()), body=[Assign(targets=[Name(id='cr', ctx=Store())], value=Call(func=Name(id='ClassicalRegister', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='circuit', ctx=Load()), attr='add_register', ctx=Load()), args=[Name(id='cr', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='circuit', ctx=Load()), attr='measure', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Name(id='range', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Load())], keywords=[])], keywords=[]), Call(func=Name(id='list', ctx=Load()), args=[Call(func=Name(id='range', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Load())], keywords=[])], keywords=[])], keywords=[]))], orelse=[]), Return(value=Name(id='circuit', ctx=Load()))], decorator_list=[], returns=Name(id='QuantumCircuit', ctx=Load())), FunctionDef(name='evaluate_measurements', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='circuit_results', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Subscript(value=Name(id='Dict', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load())), ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())], ctx=Load())), ctx=Load())), arg(arg='threshold', annotation=Name(id='float', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[Num(n=1e-06)]), body=[Expr(value=Str(s='Evaluate the results from the circuit simulation.\n\n        Given the probabilities from statevector simulation of the QAE circuit, compute the\n        probabilities that the measurements y/gridpoints a are the best estimate.\n\n        Args:\n            circuit_results: The circuit result from the QAE circuit. Can be either a counts dict\n                or a statevector.\n            threshold: Measurements with probabilities below the threshold are discarded.\n\n        Returns:\n            Dictionaries containing the a gridpoints with respective probabilities and\n                y measurements with respective probabilities, in this order.\n        ')), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='circuit_results', ctx=Load()), Name(id='dict', ctx=Load())], keywords=[]), body=[Assign(targets=[Tuple(elts=[Name(id='samples', ctx=Store()), Name(id='measurements', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_evaluate_count_results', ctx=Load()), args=[Name(id='circuit_results', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Tuple(elts=[Name(id='samples', ctx=Store()), Name(id='measurements', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_evaluate_statevector_results', ctx=Load()), args=[Name(id='circuit_results', ctx=Load())], keywords=[]))]), Assign(targets=[Name(id='samples', ctx=Store())], value=DictComp(key=Name(id='a', ctx=Load()), value=Name(id='p', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='a', ctx=Store()), Name(id='p', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='samples', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), ifs=[Compare(left=Name(id='p', ctx=Load()), ops=[Gt()], comparators=[Name(id='threshold', ctx=Load())])], is_async=0)])), Assign(targets=[Name(id='measurements', ctx=Store())], value=DictComp(key=Name(id='y', ctx=Load()), value=Name(id='p', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='y', ctx=Store()), Name(id='p', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='measurements', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), ifs=[Compare(left=Name(id='p', ctx=Load()), ops=[Gt()], comparators=[Name(id='threshold', ctx=Load())])], is_async=0)])), Return(value=Tuple(elts=[Name(id='samples', ctx=Load()), Name(id='measurements', ctx=Load())], ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Index(value=Tuple(elts=[Subscript(value=Name(id='Dict', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load())), ctx=Load()), Subscript(value=Name(id='Dict', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='float', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load())), ctx=Load())], ctx=Load())), ctx=Load())), FunctionDef(name='_evaluate_statevector_results', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='statevector', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Assign(targets=[Name(id='measurements', ctx=Store())], value=Call(func=Name(id='OrderedDict', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='num_qubits', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='log2', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='statevector', ctx=Load())], keywords=[])], keywords=[])], keywords=[])), For(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='amplitude', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='statevector', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='b', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Subscript(value=Call(func=Name(id='bin', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]), slice=Slice(lower=Num(n=2), upper=None, step=None), ctx=Load()), attr='zfill', ctx=Load()), args=[Name(id='num_qubits', ctx=Load())], keywords=[]), slice=Slice(lower=None, upper=None, step=UnaryOp(op=USub(), operand=Num(n=1))), ctx=Load())), Assign(targets=[Name(id='y', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='b', ctx=Load()), slice=Slice(lower=None, upper=Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Load()), step=None), ctx=Load()), Num(n=2)], keywords=[])), Assign(targets=[Subscript(value=Name(id='measurements', ctx=Load()), slice=Index(value=Name(id='y', ctx=Load())), ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='measurements', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='y', ctx=Load()), Num(n=0)], keywords=[]), op=Add(), right=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='abs', ctx=Load()), args=[Name(id='amplitude', ctx=Load())], keywords=[]), op=Pow(), right=Num(n=2))))], orelse=[]), Assign(targets=[Name(id='samples', ctx=Store())], value=Call(func=Name(id='OrderedDict', ctx=Load()), args=[], keywords=[])), For(target=Tuple(elts=[Name(id='y', ctx=Store()), Name(id='probability', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='measurements', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[If(test=Compare(left=Name(id='y', ctx=Load()), ops=[GtE()], comparators=[Call(func=Name(id='int', ctx=Load()), args=[BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='_M', ctx=Load()), op=Div(), right=Num(n=2))], keywords=[])]), body=[Assign(targets=[Name(id='y', ctx=Store())], value=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='_M', ctx=Load()), op=Sub(), right=Name(id='y', ctx=Load())))], orelse=[]), Assign(targets=[Name(id='a', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='round', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='power', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[BinOp(left=BinOp(left=Name(id='y', ctx=Load()), op=Mult(), right=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load())), op=Div(), right=BinOp(left=Num(n=2), op=Pow(), right=Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Load())))], keywords=[]), Num(n=2)], keywords=[])], keywords=[keyword(arg='decimals', value=Num(n=7))])), Assign(targets=[Subscript(value=Name(id='samples', ctx=Load()), slice=Index(value=Name(id='a', ctx=Load())), ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='samples', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='a', ctx=Load()), Num(n=0)], keywords=[]), op=Add(), right=Name(id='probability', ctx=Load())))], orelse=[]), Return(value=Tuple(elts=[Name(id='samples', ctx=Load()), Name(id='measurements', ctx=Load())], ctx=Load()))], decorator_list=[], returns=None), FunctionDef(name='_evaluate_count_results', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='counts', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Assign(targets=[Name(id='measurements', ctx=Store())], value=Call(func=Name(id='OrderedDict', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='samples', ctx=Store())], value=Call(func=Name(id='OrderedDict', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='shots', ctx=Store())], value=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()), attr='_run_config', ctx=Load()), attr='shots', ctx=Load())), For(target=Tuple(elts=[Name(id='state', ctx=Store()), Name(id='count', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='counts', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Name(id='y', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Subscript(value=Call(func=Attribute(value=Name(id='state', ctx=Load()), attr='replace', ctx=Load()), args=[Str(s=' '), Str(s='')], keywords=[]), slice=Slice(lower=None, upper=Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Load()), step=None), ctx=Load()), slice=Slice(lower=None, upper=None, step=UnaryOp(op=USub(), operand=Num(n=1))), ctx=Load()), Num(n=2)], keywords=[])), Assign(targets=[Name(id='probability', ctx=Store())], value=BinOp(left=Name(id='count', ctx=Load()), op=Div(), right=Name(id='shots', ctx=Load()))), Assign(targets=[Subscript(value=Name(id='measurements', ctx=Load()), slice=Index(value=Name(id='y', ctx=Load())), ctx=Store())], value=Name(id='probability', ctx=Load())), Assign(targets=[Name(id='a', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='round', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='power', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[BinOp(left=BinOp(left=Name(id='y', ctx=Load()), op=Mult(), right=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load())), op=Div(), right=BinOp(left=Num(n=2), op=Pow(), right=Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Load())))], keywords=[]), Num(n=2)], keywords=[])], keywords=[keyword(arg='decimals', value=Num(n=7))])), Assign(targets=[Subscript(value=Name(id='samples', ctx=Load()), slice=Index(value=Name(id='a', ctx=Load())), ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='samples', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='a', ctx=Load()), Num(n=0.0)], keywords=[]), op=Add(), right=Name(id='probability', ctx=Load())))], orelse=[]), Return(value=Tuple(elts=[Name(id='samples', ctx=Load()), Name(id='measurements', ctx=Load())], ctx=Load()))], decorator_list=[], returns=None), FunctionDef(name='compute_mle', args=arguments(args=[arg(arg='result', annotation=Str(s='AmplitudeEstimationResult')), arg(arg='apply_post_processing', annotation=Name(id='bool', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[NameConstant(value=False)]), body=[Expr(value=Str(s='Compute the Maximum Likelihood Estimator (MLE).\n\n        Args:\n            result: An amplitude estimation result object.\n            apply_post_processing: If True, apply the post processing to the MLE before returning\n                it.\n\n        Returns:\n            The MLE for the provided result object.\n        ')), Assign(targets=[Name(id='m', ctx=Store())], value=Attribute(value=Name(id='result', ctx=Load()), attr='num_evaluation_qubits', ctx=Load())), Assign(targets=[Name(id='M', ctx=Store())], value=BinOp(left=Num(n=2), op=Pow(), right=Name(id='m', ctx=Load()))), Assign(targets=[Name(id='qae', ctx=Store())], value=Attribute(value=Name(id='result', ctx=Load()), attr='estimation', ctx=Load())), Assign(targets=[Name(id='a_i', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='asarray', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='result', ctx=Load()), attr='samples', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[])), Assign(targets=[Name(id='p_i', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='asarray', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='result', ctx=Load()), attr='samples', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[])), FunctionDef(name='loglikelihood', args=arguments(args=[arg(arg='a', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sum', ctx=Load()), args=[BinOp(left=BinOp(left=Attribute(value=Name(id='result', ctx=Load()), attr='shots', ctx=Load()), op=Mult(), right=Name(id='p_i', ctx=Load())), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='log', ctx=Load()), args=[Call(func=Name(id='pdf_a', ctx=Load()), args=[Name(id='a_i', ctx=Load()), Name(id='a', ctx=Load()), Name(id='m', ctx=Load())], keywords=[])], keywords=[]))], keywords=[]))], decorator_list=[], returns=None), Assign(targets=[Name(id='y', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='round', ctx=Load()), args=[BinOp(left=BinOp(left=Name(id='M', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='arcsin', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sqrt', ctx=Load()), args=[Name(id='qae', ctx=Load())], keywords=[])], keywords=[])), op=Div(), right=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()))], keywords=[])], keywords=[])), If(test=Compare(left=Name(id='y', ctx=Load()), ops=[Eq()], comparators=[Num(n=0)]), body=[Assign(targets=[Name(id='right_of_qae', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[BinOp(left=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Mult(), right=BinOp(left=Name(id='y', ctx=Load()), op=Add(), right=Num(n=1))), op=Div(), right=Name(id='M', ctx=Load()))], keywords=[]), op=Pow(), right=Num(n=2))), Assign(targets=[Name(id='bubbles', ctx=Store())], value=List(elts=[Name(id='qae', ctx=Load()), Name(id='right_of_qae', ctx=Load())], ctx=Load()))], orelse=[If(test=Compare(left=Name(id='y', ctx=Load()), ops=[Eq()], comparators=[Call(func=Name(id='int', ctx=Load()), args=[BinOp(left=Name(id='M', ctx=Load()), op=Div(), right=Num(n=2))], keywords=[])]), body=[Assign(targets=[Name(id='left_of_qae', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[BinOp(left=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Mult(), right=BinOp(left=Name(id='y', ctx=Load()), op=Sub(), right=Num(n=1))), op=Div(), right=Name(id='M', ctx=Load()))], keywords=[]), op=Pow(), right=Num(n=2))), Assign(targets=[Name(id='bubbles', ctx=Store())], value=List(elts=[Name(id='left_of_qae', ctx=Load()), Name(id='qae', ctx=Load())], ctx=Load()))], orelse=[Assign(targets=[Name(id='left_of_qae', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[BinOp(left=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Mult(), right=BinOp(left=Name(id='y', ctx=Load()), op=Sub(), right=Num(n=1))), op=Div(), right=Name(id='M', ctx=Load()))], keywords=[]), op=Pow(), right=Num(n=2))), Assign(targets=[Name(id='right_of_qae', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[BinOp(left=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Mult(), right=BinOp(left=Name(id='y', ctx=Load()), op=Add(), right=Num(n=1))), op=Div(), right=Name(id='M', ctx=Load()))], keywords=[]), op=Pow(), right=Num(n=2))), Assign(targets=[Name(id='bubbles', ctx=Store())], value=List(elts=[Name(id='left_of_qae', ctx=Load()), Name(id='qae', ctx=Load()), Name(id='right_of_qae', ctx=Load())], ctx=Load()))])]), Assign(targets=[Name(id='a_opt', ctx=Store())], value=Name(id='qae', ctx=Load())), Assign(targets=[Name(id='loglik_opt', ctx=Store())], value=Call(func=Name(id='loglikelihood', ctx=Load()), args=[Name(id='a_opt', ctx=Load())], keywords=[])), For(target=Tuple(elts=[Name(id='a', ctx=Store()), Name(id='b', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='zip', ctx=Load()), args=[Subscript(value=Name(id='bubbles', ctx=Load()), slice=Slice(lower=None, upper=UnaryOp(op=USub(), operand=Num(n=1)), step=None), ctx=Load()), Subscript(value=Name(id='bubbles', ctx=Load()), slice=Slice(lower=Num(n=1), upper=None, step=None), ctx=Load())], keywords=[]), body=[Assign(targets=[Tuple(elts=[Name(id='locmax', ctx=Store()), Name(id='val', ctx=Store())], ctx=Store())], value=Call(func=Name(id='bisect_max', ctx=Load()), args=[Name(id='loglikelihood', ctx=Load()), Name(id='a', ctx=Load()), Name(id='b', ctx=Load())], keywords=[keyword(arg='retval', value=NameConstant(value=True))])), If(test=Compare(left=Name(id='val', ctx=Load()), ops=[Gt()], comparators=[Name(id='loglik_opt', ctx=Load())]), body=[Assign(targets=[Name(id='a_opt', ctx=Store())], value=Name(id='locmax', ctx=Load())), Assign(targets=[Name(id='loglik_opt', ctx=Store())], value=Name(id='val', ctx=Load()))], orelse=[])], orelse=[]), If(test=Name(id='apply_post_processing', ctx=Load()), body=[Return(value=Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='post_processing', ctx=Load()), args=[Name(id='a_opt', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='a_opt', ctx=Load()))], decorator_list=[Name(id='staticmethod', ctx=Load())], returns=Name(id='float', ctx=Load())), FunctionDef(name='estimate', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='estimation_problem', annotation=Name(id='EstimationProblem', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Run the amplitude estimation algorithm on provided estimation problem.\n\n        Args:\n            estimation_problem: The estimation problem.\n\n        Returns:\n            An amplitude estimation results object.\n\n        Raises:\n            ValueError: If `state_preparation` or `objective_qubits` are not set in the\n                `estimation_problem`.\n        ')), If(test=Compare(left=Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='state_preparation', ctx=Load()), ops=[Is()], comparators=[NameConstant(value=None)]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Str(s='The state_preparation property of the estimation problem must be set.')], keywords=[]), cause=None)], orelse=[]), If(test=Compare(left=Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='objective_qubits', ctx=Load()), ops=[Is()], comparators=[NameConstant(value=None)]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Str(s='The objective_qubits property of the estimation problem must be set.')], keywords=[]), cause=None)], orelse=[]), Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Name(id='AmplitudeEstimationResult', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='num_evaluation_qubits', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Load())), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='post_processing', ctx=Store())], value=Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='post_processing', ctx=Load())), If(test=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()), attr='is_statevector', ctx=Load()), body=[Assign(targets=[Name(id='circuit', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='construct_circuit', ctx=Load()), args=[Name(id='estimation_problem', ctx=Load())], keywords=[keyword(arg='measurement', value=NameConstant(value=False))])), Assign(targets=[Name(id='statevector', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()), attr='execute', ctx=Load()), args=[Name(id='circuit', ctx=Load())], keywords=[]), attr='get_statevector', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='circuit_results', ctx=Store())], value=Name(id='statevector', ctx=Load())), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='shots', ctx=Store())], value=Num(n=1))], orelse=[Assign(targets=[Name(id='circuit', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='construct_circuit', ctx=Load()), args=[Name(id='estimation_problem', ctx=Load())], keywords=[keyword(arg='measurement', value=NameConstant(value=True))])), Assign(targets=[Name(id='counts', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()), attr='execute', ctx=Load()), args=[Name(id='circuit', ctx=Load())], keywords=[]), attr='get_counts', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='circuit_results', ctx=Store())], value=Name(id='counts', ctx=Load())), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='shots', ctx=Store())], value=Call(func=Name(id='sum', ctx=Load()), args=[Call(func=Attribute(value=Name(id='counts', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[]))]), Assign(targets=[Tuple(elts=[Name(id='samples', ctx=Store()), Name(id='measurements', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='evaluate_measurements', ctx=Load()), args=[Attribute(value=Name(id='result', ctx=Load()), attr='circuit_results', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='samples', ctx=Store())], value=Name(id='samples', ctx=Load())), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='samples_processed', ctx=Store())], value=DictComp(key=Call(func=Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='post_processing', ctx=Load()), args=[Name(id='a', ctx=Load())], keywords=[]), value=Name(id='p', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='a', ctx=Store()), Name(id='p', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='samples', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), ifs=[], is_async=0)])), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='measurements', ctx=Store())], value=Name(id='measurements', ctx=Load())), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='max_probability', ctx=Store())], value=Num(n=0)), For(target=Tuple(elts=[Name(id='amplitude', ctx=Store()), Tuple(elts=[Name(id='mapped', ctx=Store()), Name(id='prob', ctx=Store())], ctx=Store())], ctx=Store()), iter=Call(func=Name(id='zip', ctx=Load()), args=[Call(func=Attribute(value=Name(id='samples', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Attribute(value=Name(id='result', ctx=Load()), attr='samples_processed', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='prob', ctx=Load()), ops=[Gt()], comparators=[Attribute(value=Name(id='result', ctx=Load()), attr='max_probability', ctx=Load())]), body=[Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='max_probability', ctx=Store())], value=Name(id='prob', ctx=Load())), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='estimation', ctx=Store())], value=Name(id='amplitude', ctx=Load())), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='estimation_processed', ctx=Store())], value=Name(id='mapped', ctx=Load()))], orelse=[])], orelse=[]), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='num_oracle_queries', ctx=Store())], value=BinOp(left=Attribute(value=Name(id='result', ctx=Load()), attr='shots', ctx=Load()), op=Mult(), right=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='_M', ctx=Load()), op=Sub(), right=Num(n=1)))), Assign(targets=[Name(id='mle', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='compute_mle', ctx=Load()), args=[Name(id='result', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='mle', ctx=Store())], value=Name(id='mle', ctx=Load())), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='mle_processed', ctx=Store())], value=Call(func=Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='post_processing', ctx=Load()), args=[Name(id='mle', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='confidence_interval', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='compute_confidence_interval', ctx=Load()), args=[Name(id='result', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='confidence_interval_processed', ctx=Store())], value=Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='post_processing', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='value', ctx=Store()), iter=Attribute(value=Name(id='result', ctx=Load()), attr='confidence_interval', ctx=Load()), ifs=[], is_async=0)])], keywords=[])), Return(value=Name(id='result', ctx=Load()))], decorator_list=[], returns=Str(s='AmplitudeEstimationResult')), FunctionDef(name='compute_confidence_interval', args=arguments(args=[arg(arg='result', annotation=Str(s='AmplitudeEstimationResult')), arg(arg='alpha', annotation=Name(id='float', ctx=Load())), arg(arg='kind', annotation=Name(id='str', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[Num(n=0.05), Str(s='likelihood_ratio')]), body=[Expr(value=Str(s="Compute the (1 - alpha) confidence interval.\n\n        Args:\n            result: An amplitude estimation result for which to compute the confidence interval.\n            alpha: Confidence level: compute the (1 - alpha) confidence interval.\n            kind: The method to compute the confidence interval, can be 'fisher', 'observed_fisher'\n                or 'likelihood_ratio' (default)\n\n        Returns:\n            The (1 - alpha) confidence interval of the specified kind.\n\n        Raises:\n            AquaError: If 'mle' is not in self._ret.keys() (i.e. `run` was not called yet).\n            NotImplementedError: If the confidence interval method `kind` is not implemented.\n        ")), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Attribute(value=Name(id='result', ctx=Load()), attr='circuit_results', ctx=Load()), Tuple(elts=[Name(id='list', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())], ctx=Load())], keywords=[]), body=[Return(value=Tuple(elts=[Attribute(value=Name(id='result', ctx=Load()), attr='mle', ctx=Load()), Attribute(value=Name(id='result', ctx=Load()), attr='mle', ctx=Load())], ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='kind', ctx=Load()), ops=[In()], comparators=[List(elts=[Str(s='likelihood_ratio'), Str(s='lr')], ctx=Load())]), body=[Return(value=Call(func=Name(id='_likelihood_ratio_confint', ctx=Load()), args=[Name(id='result', ctx=Load()), Name(id='alpha', ctx=Load())], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='kind', ctx=Load()), ops=[In()], comparators=[List(elts=[Str(s='fisher'), Str(s='fi')], ctx=Load())]), body=[Return(value=Call(func=Name(id='_fisher_confint', ctx=Load()), args=[Name(id='result', ctx=Load()), Name(id='alpha', ctx=Load())], keywords=[keyword(arg='observed', value=NameConstant(value=False))]))], orelse=[]), If(test=Compare(left=Name(id='kind', ctx=Load()), ops=[In()], comparators=[List(elts=[Str(s='observed_fisher'), Str(s='observed_information'), Str(s='oi')], ctx=Load())]), body=[Return(value=Call(func=Name(id='_fisher_confint', ctx=Load()), args=[Name(id='result', ctx=Load()), Name(id='alpha', ctx=Load())], keywords=[keyword(arg='observed', value=NameConstant(value=True))]))], orelse=[]), Raise(exc=Call(func=Name(id='NotImplementedError', ctx=Load()), args=[JoinedStr(values=[Str(s='CI `'), FormattedValue(value=Name(id='kind', ctx=Load()), conversion=-1, format_spec=None), Str(s='` is not implemented.')])], keywords=[]), cause=None)], decorator_list=[Name(id='staticmethod', ctx=Load())], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='float', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load())), ctx=Load()))], decorator_list=[])
ClassDef(name='AmplitudeEstimationResult', bases=[Name(id='AmplitudeEstimatorResult', ctx=Load())], keywords=[], body=[Expr(value=Str(s='The ``AmplitudeEstimation`` result object.')), FunctionDef(name='__init__', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_num_evaluation_qubits', ctx=Store())], value=NameConstant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_mle', ctx=Store())], value=NameConstant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_mle_processed', ctx=Store())], value=NameConstant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_samples', ctx=Store())], value=NameConstant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_samples_processed', ctx=Store())], value=NameConstant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_y_measurements', ctx=Store())], value=NameConstant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_max_probability', ctx=Store())], value=NameConstant(value=None))], decorator_list=[], returns=NameConstant(value=None)), FunctionDef(name='num_evaluation_qubits', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Returns the number of evaluation qubits.')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_num_evaluation_qubits', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='int', ctx=Load())), FunctionDef(name='num_evaluation_qubits', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='num_evaluation_qubits', annotation=Name(id='int', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Set the number of evaluation qubits.')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_num_evaluation_qubits', ctx=Store())], value=Name(id='num_evaluation_qubits', ctx=Load()))], decorator_list=[Attribute(value=Name(id='num_evaluation_qubits', ctx=Load()), attr='setter', ctx=Load())], returns=NameConstant(value=None)), FunctionDef(name='mle_processed', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Return the post-processed MLE for the amplitude.')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_mle_processed', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='float', ctx=Load())), FunctionDef(name='mle_processed', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='value', annotation=Name(id='float', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Set the post-processed MLE for the amplitude.')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_mle_processed', ctx=Store())], value=Name(id='value', ctx=Load()))], decorator_list=[Attribute(value=Name(id='mle_processed', ctx=Load()), attr='setter', ctx=Load())], returns=NameConstant(value=None)), FunctionDef(name='samples_processed', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Return the post-processed measurement samples with their measurement probability.')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_samples_processed', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='Dict', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='float', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load())), ctx=Load())), FunctionDef(name='samples_processed', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='value', annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='float', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load())), ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Set the post-processed measurement samples.')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_samples_processed', ctx=Store())], value=Name(id='value', ctx=Load()))], decorator_list=[Attribute(value=Name(id='samples_processed', ctx=Load()), attr='setter', ctx=Load())], returns=NameConstant(value=None)), FunctionDef(name='mle', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Return the MLE for the amplitude, in $[0, 1]$.')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_mle', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='float', ctx=Load())), FunctionDef(name='mle', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='value', annotation=Name(id='float', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Set the MLE for the amplitude, in $[0, 1]$.')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_mle', ctx=Store())], value=Name(id='value', ctx=Load()))], decorator_list=[Attribute(value=Name(id='mle', ctx=Load()), attr='setter', ctx=Load())], returns=NameConstant(value=None)), FunctionDef(name='samples', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Return the measurement samples with their measurement probability.')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_samples', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='Dict', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='float', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load())), ctx=Load())), FunctionDef(name='samples', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='value', annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='float', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load())), ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Set the measurement samples with their measurement probability.')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_samples', ctx=Store())], value=Name(id='value', ctx=Load()))], decorator_list=[Attribute(value=Name(id='samples', ctx=Load()), attr='setter', ctx=Load())], returns=NameConstant(value=None)), FunctionDef(name='measurements', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Return the measurements as integers with their measurement probability.')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_y_measurements', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='Dict', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load())), ctx=Load())), FunctionDef(name='measurements', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='value', annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load())), ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Set the measurements as integers with their measurement probability.')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_y_measurements', ctx=Store())], value=Name(id='value', ctx=Load()))], decorator_list=[Attribute(value=Name(id='measurements', ctx=Load()), attr='setter', ctx=Load())], returns=NameConstant(value=None)), FunctionDef(name='max_probability', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Return the maximum sampling probability.')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_max_probability', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='float', ctx=Load())), FunctionDef(name='max_probability', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='value', annotation=Name(id='float', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Set the maximum sampling probability.')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_max_probability', ctx=Store())], value=Name(id='value', ctx=Load()))], decorator_list=[Attribute(value=Name(id='max_probability', ctx=Load()), attr='setter', ctx=Load())], returns=NameConstant(value=None))], decorator_list=[])
FunctionDef(name='_compute_fisher_information', args=arguments(args=[arg(arg='result', annotation=Name(id='AmplitudeEstimationResult', ctx=Load())), arg(arg='observed', annotation=Name(id='bool', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[NameConstant(value=False)]), body=[Expr(value=Str(s='Computes the Fisher information for the output of the previous run.\n\n    Args:\n        result: An amplitude estimation result for which to compute the confidence interval.\n        observed: If True, the observed Fisher information is returned, otherwise\n            the expected Fisher information.\n\n    Returns:\n        The Fisher information.\n    ')), Assign(targets=[Name(id='fisher_information', ctx=Store())], value=NameConstant(value=None)), Assign(targets=[Name(id='mlv', ctx=Store())], value=Attribute(value=Name(id='result', ctx=Load()), attr='mle', ctx=Load())), Assign(targets=[Name(id='m', ctx=Store())], value=Attribute(value=Name(id='result', ctx=Load()), attr='num_evaluation_qubits', ctx=Load())), Assign(targets=[Name(id='M', ctx=Store())], value=BinOp(left=Num(n=2), op=Pow(), right=Name(id='m', ctx=Load()))), If(test=Name(id='observed', ctx=Load()), body=[Assign(targets=[Name(id='a_i', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='asarray', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='result', ctx=Load()), attr='samples', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[])), Assign(targets=[Name(id='p_i', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='asarray', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='result', ctx=Load()), attr='samples', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[])), Assign(targets=[Name(id='fisher_information', ctx=Store())], value=Call(func=Name(id='sum', ctx=Load()), args=[GeneratorExp(elt=BinOp(left=Name(id='p', ctx=Load()), op=Mult(), right=BinOp(left=Call(func=Name(id='derivative_log_pdf_a', ctx=Load()), args=[Name(id='a', ctx=Load()), Name(id='mlv', ctx=Load()), Name(id='m', ctx=Load())], keywords=[]), op=Pow(), right=Num(n=2))), generators=[comprehension(target=Tuple(elts=[Name(id='p', ctx=Store()), Name(id='a', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='zip', ctx=Load()), args=[Name(id='p_i', ctx=Load()), Name(id='a_i', ctx=Load())], keywords=[]), ifs=[], is_async=0)])], keywords=[]))], orelse=[FunctionDef(name='integrand', args=arguments(args=[arg(arg='x', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Return(value=BinOp(left=BinOp(left=Call(func=Name(id='derivative_log_pdf_a', ctx=Load()), args=[Name(id='x', ctx=Load()), Name(id='mlv', ctx=Load()), Name(id='m', ctx=Load())], keywords=[]), op=Pow(), right=Num(n=2)), op=Mult(), right=Call(func=Name(id='pdf_a', ctx=Load()), args=[Name(id='x', ctx=Load()), Name(id='mlv', ctx=Load()), Name(id='m', ctx=Load())], keywords=[])))], decorator_list=[], returns=None), Assign(targets=[Name(id='grid', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[BinOp(left=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='arange', ctx=Load()), args=[BinOp(left=BinOp(left=Name(id='M', ctx=Load()), op=Div(), right=Num(n=2)), op=Add(), right=Num(n=1))], keywords=[])), op=Div(), right=Name(id='M', ctx=Load()))], keywords=[]), op=Pow(), right=Num(n=2))), Assign(targets=[Name(id='fisher_information', ctx=Store())], value=Call(func=Name(id='sum', ctx=Load()), args=[GeneratorExp(elt=Call(func=Name(id='integrand', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='grid', ctx=Load()), ifs=[], is_async=0)])], keywords=[]))]), Return(value=Name(id='fisher_information', ctx=Load()))], decorator_list=[], returns=Name(id='float', ctx=Load()))
FunctionDef(name='_fisher_confint', args=arguments(args=[arg(arg='result', annotation=Name(id='AmplitudeEstimationResult', ctx=Load())), arg(arg='alpha', annotation=Name(id='float', ctx=Load())), arg(arg='observed', annotation=Name(id='bool', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[NameConstant(value=False)]), body=[Expr(value=Str(s='Compute the Fisher information confidence interval for the MLE of the previous run.\n\n    Args:\n        result: An amplitude estimation result for which to compute the confidence interval.\n        alpha: Specifies the (1 - alpha) confidence level (0 < alpha < 1).\n        observed: If True, the observed Fisher information is used to construct the\n            confidence interval, otherwise the expected Fisher information.\n\n    Returns:\n        The Fisher information confidence interval.\n    ')), Assign(targets=[Name(id='std', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sqrt', ctx=Load()), args=[BinOp(left=Attribute(value=Name(id='result', ctx=Load()), attr='shots', ctx=Load()), op=Mult(), right=Call(func=Name(id='_compute_fisher_information', ctx=Load()), args=[Name(id='result', ctx=Load()), Name(id='observed', ctx=Load())], keywords=[]))], keywords=[])), Assign(targets=[Name(id='confint', ctx=Store())], value=BinOp(left=Attribute(value=Name(id='result', ctx=Load()), attr='mle', ctx=Load()), op=Add(), right=BinOp(left=BinOp(left=Call(func=Attribute(value=Name(id='norm', ctx=Load()), attr='ppf', ctx=Load()), args=[BinOp(left=Num(n=1), op=Sub(), right=BinOp(left=Name(id='alpha', ctx=Load()), op=Div(), right=Num(n=2)))], keywords=[]), op=Div(), right=Name(id='std', ctx=Load())), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='array', ctx=Load()), args=[List(elts=[UnaryOp(op=USub(), operand=Num(n=1)), Num(n=1)], ctx=Load())], keywords=[])))), Return(value=Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='post_processing', ctx=Load()), args=[Name(id='bound', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='bound', ctx=Store()), iter=Name(id='confint', ctx=Load()), ifs=[], is_async=0)])], keywords=[]))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='float', ctx=Load())), ctx=Load()))
FunctionDef(name='_likelihood_ratio_confint', args=arguments(args=[arg(arg='result', annotation=Name(id='AmplitudeEstimationResult', ctx=Load())), arg(arg='alpha', annotation=Name(id='float', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Compute the likelihood ratio confidence interval for the MLE of the previous run.\n\n    Args:\n        result: An amplitude estimation result for which to compute the confidence interval.\n        alpha: Specifies the (1 - alpha) confidence level (0 < alpha < 1).\n\n    Returns:\n        The likelihood ratio confidence interval.\n    ')), Assign(targets=[Name(id='m', ctx=Store())], value=Attribute(value=Name(id='result', ctx=Load()), attr='num_evaluation_qubits', ctx=Load())), Assign(targets=[Name(id='M', ctx=Store())], value=BinOp(left=Num(n=2), op=Pow(), right=Name(id='m', ctx=Load()))), Assign(targets=[Name(id='qae', ctx=Store())], value=Attribute(value=Name(id='result', ctx=Load()), attr='estimation', ctx=Load())), Assign(targets=[Name(id='y', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='round', ctx=Load()), args=[BinOp(left=BinOp(left=Name(id='M', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='arcsin', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sqrt', ctx=Load()), args=[Name(id='qae', ctx=Load())], keywords=[])], keywords=[])), op=Div(), right=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()))], keywords=[])], keywords=[])), If(test=Compare(left=Name(id='y', ctx=Load()), ops=[Eq()], comparators=[Num(n=0)]), body=[Assign(targets=[Name(id='right_of_qae', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[BinOp(left=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Mult(), right=BinOp(left=Name(id='y', ctx=Load()), op=Add(), right=Num(n=1))), op=Div(), right=Name(id='M', ctx=Load()))], keywords=[]), op=Pow(), right=Num(n=2))), Assign(targets=[Name(id='bubbles', ctx=Store())], value=List(elts=[Name(id='qae', ctx=Load()), Name(id='right_of_qae', ctx=Load())], ctx=Load()))], orelse=[If(test=Compare(left=Name(id='y', ctx=Load()), ops=[Eq()], comparators=[Call(func=Name(id='int', ctx=Load()), args=[BinOp(left=Name(id='M', ctx=Load()), op=Div(), right=Num(n=2))], keywords=[])]), body=[Assign(targets=[Name(id='left_of_qae', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[BinOp(left=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Mult(), right=BinOp(left=Name(id='y', ctx=Load()), op=Sub(), right=Num(n=1))), op=Div(), right=Name(id='M', ctx=Load()))], keywords=[]), op=Pow(), right=Num(n=2))), Assign(targets=[Name(id='bubbles', ctx=Store())], value=List(elts=[Name(id='left_of_qae', ctx=Load()), Name(id='qae', ctx=Load())], ctx=Load()))], orelse=[Assign(targets=[Name(id='left_of_qae', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[BinOp(left=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Mult(), right=BinOp(left=Name(id='y', ctx=Load()), op=Sub(), right=Num(n=1))), op=Div(), right=Name(id='M', ctx=Load()))], keywords=[]), op=Pow(), right=Num(n=2))), Assign(targets=[Name(id='right_of_qae', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[BinOp(left=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Mult(), right=BinOp(left=Name(id='y', ctx=Load()), op=Add(), right=Num(n=1))), op=Div(), right=Name(id='M', ctx=Load()))], keywords=[]), op=Pow(), right=Num(n=2))), Assign(targets=[Name(id='bubbles', ctx=Store())], value=List(elts=[Name(id='left_of_qae', ctx=Load()), Name(id='qae', ctx=Load()), Name(id='right_of_qae', ctx=Load())], ctx=Load()))])]), Assign(targets=[Name(id='a_i', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='asarray', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='result', ctx=Load()), attr='samples', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[])), Assign(targets=[Name(id='p_i', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='asarray', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='result', ctx=Load()), attr='samples', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[])), FunctionDef(name='loglikelihood', args=arguments(args=[arg(arg='a', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sum', ctx=Load()), args=[BinOp(left=BinOp(left=Attribute(value=Name(id='result', ctx=Load()), attr='shots', ctx=Load()), op=Mult(), right=Name(id='p_i', ctx=Load())), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='log', ctx=Load()), args=[Call(func=Name(id='pdf_a', ctx=Load()), args=[Name(id='a_i', ctx=Load()), Name(id='a', ctx=Load()), Name(id='m', ctx=Load())], keywords=[])], keywords=[]))], keywords=[]))], decorator_list=[], returns=None), Assign(targets=[Name(id='loglik_mle', ctx=Store())], value=Call(func=Name(id='loglikelihood', ctx=Load()), args=[Attribute(value=Name(id='result', ctx=Load()), attr='mle', ctx=Load())], keywords=[])), Assign(targets=[Name(id='thres', ctx=Store())], value=BinOp(left=Name(id='loglik_mle', ctx=Load()), op=Sub(), right=BinOp(left=Call(func=Attribute(value=Name(id='chi2', ctx=Load()), attr='ppf', ctx=Load()), args=[BinOp(left=Num(n=1), op=Sub(), right=Name(id='alpha', ctx=Load()))], keywords=[keyword(arg='df', value=Num(n=1))]), op=Div(), right=Num(n=2)))), FunctionDef(name='cut', args=arguments(args=[arg(arg='x', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Return(value=BinOp(left=Call(func=Name(id='loglikelihood', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), op=Sub(), right=Name(id='thres', ctx=Load())))], decorator_list=[], returns=None), Assign(targets=[Name(id='lower', ctx=Store()), Name(id='upper', ctx=Store())], value=Attribute(value=Name(id='result', ctx=Load()), attr='mle', ctx=Load())), For(target=Tuple(elts=[Name(id='a', ctx=Store()), Name(id='b', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='zip', ctx=Load()), args=[Subscript(value=Name(id='bubbles', ctx=Load()), slice=Slice(lower=None, upper=UnaryOp(op=USub(), operand=Num(n=1)), step=None), ctx=Load()), Subscript(value=Name(id='bubbles', ctx=Load()), slice=Slice(lower=Num(n=1), upper=None, step=None), ctx=Load())], keywords=[]), body=[Assign(targets=[Tuple(elts=[Name(id='locmax', ctx=Store()), Name(id='val', ctx=Store())], ctx=Store())], value=Call(func=Name(id='bisect_max', ctx=Load()), args=[Name(id='loglikelihood', ctx=Load()), Name(id='a', ctx=Load()), Name(id='b', ctx=Load())], keywords=[keyword(arg='retval', value=NameConstant(value=True))])), If(test=Compare(left=Name(id='val', ctx=Load()), ops=[GtE()], comparators=[Name(id='thres', ctx=Load())]), body=[If(test=Compare(left=BinOp(left=Call(func=Name(id='cut', ctx=Load()), args=[Name(id='a', ctx=Load())], keywords=[]), op=Mult(), right=Call(func=Name(id='cut', ctx=Load()), args=[Name(id='locmax', ctx=Load())], keywords=[])), ops=[Lt()], comparators=[Num(n=0)]), body=[Assign(targets=[Name(id='left', ctx=Store())], value=Call(func=Name(id='bisect', ctx=Load()), args=[Name(id='cut', ctx=Load()), Name(id='a', ctx=Load()), Name(id='locmax', ctx=Load())], keywords=[])), Assign(targets=[Name(id='lower', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='minimum', ctx=Load()), args=[Name(id='lower', ctx=Load()), Name(id='left', ctx=Load())], keywords=[]))], orelse=[]), If(test=Compare(left=BinOp(left=Call(func=Name(id='cut', ctx=Load()), args=[Name(id='locmax', ctx=Load())], keywords=[]), op=Mult(), right=Call(func=Name(id='cut', ctx=Load()), args=[Name(id='b', ctx=Load())], keywords=[])), ops=[Lt()], comparators=[Num(n=0)]), body=[Assign(targets=[Name(id='right', ctx=Store())], value=Call(func=Name(id='bisect', ctx=Load()), args=[Name(id='cut', ctx=Load()), Name(id='locmax', ctx=Load()), Name(id='b', ctx=Load())], keywords=[])), Assign(targets=[Name(id='upper', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='maximum', ctx=Load()), args=[Name(id='upper', ctx=Load()), Name(id='right', ctx=Load())], keywords=[]))], orelse=[])], orelse=[])], orelse=[]), Assign(targets=[Name(id='confint', ctx=Store())], value=List(elts=[Name(id='lower', ctx=Load()), Name(id='upper', ctx=Load())], ctx=Load())), Return(value=Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='post_processing', ctx=Load()), args=[Name(id='bound', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='bound', ctx=Store()), iter=Name(id='confint', ctx=Load()), ifs=[], is_async=0)])], keywords=[]))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='float', ctx=Load())), ctx=Load()))
Str(s='The Quantum Phase Estimation-based Amplitude Estimation algorithm.')
alias(name='Optional', asname=None)
alias(name='Union', asname=None)
alias(name='List', asname=None)
alias(name='Tuple', asname=None)
alias(name='Dict', asname=None)
alias(name='OrderedDict', asname=None)
alias(name='numpy', asname='np')
alias(name='chi2', asname=None)
alias(name='norm', asname=None)
alias(name='bisect', asname=None)
alias(name='QuantumCircuit', asname=None)
alias(name='ClassicalRegister', asname=None)
alias(name='Backend', asname=None)
alias(name='QuantumInstance', asname=None)
alias(name='AmplitudeEstimator', asname=None)
alias(name='AmplitudeEstimatorResult', asname=None)
alias(name='pdf_a', asname=None)
alias(name='derivative_log_pdf_a', asname=None)
alias(name='bisect_max', asname=None)
alias(name='EstimationProblem', asname=None)
Name(id='AmplitudeEstimator', ctx=Load())
Expr(value=Str(s='The Quantum Phase Estimation-based Amplitude Estimation algorithm.\n\n    This class implements the original Quantum Amplitude Estimation (QAE) algorithm, introduced by\n    [1]. This canonical version uses quantum phase estimation along with a set of :math:`m`\n    additional evaluation qubits to find an estimate :math:`\\tilde{a}`, that is restricted to the\n    grid\n\n    .. math::\n\n        \\tilde{a} \\in \\{\\sin^2(\\pi  y / 2^m) : y = 0, ..., 2^{m-1}\\}\n\n    More evaluation qubits produce a finer sampling grid, therefore the accuracy of the algorithm\n    increases with :math:`m`.\n\n    Using a maximum likelihood post processing, this grid constraint can be circumvented.\n    This improved estimator is implemented as well, see [2] Appendix A for more detail.\n\n    References:\n        [1]: Brassard, G., Hoyer, P., Mosca, M., & Tapp, A. (2000).\n             Quantum Amplitude Amplification and Estimation.\n             `arXiv:quant-ph/0005055 <http://arxiv.org/abs/quant-ph/0005055>`_.\n        [2]: Grinko, D., Gacon, J., Zoufal, C., & Woerner, S. (2019).\n             Iterative Quantum Amplitude Estimation.\n             `arXiv:1912.05559 <https://arxiv.org/abs/1912.05559>`_.\n    '))
FunctionDef(name='__init__', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='num_eval_qubits', annotation=Name(id='int', ctx=Load())), arg(arg='phase_estimation_circuit', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Name(id='QuantumCircuit', ctx=Load())), ctx=Load())), arg(arg='iqft', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Name(id='QuantumCircuit', ctx=Load())), ctx=Load())), arg(arg='quantum_instance', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='QuantumInstance', ctx=Load()), Name(id='Backend', ctx=Load())], ctx=Load())), ctx=Load())), ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[NameConstant(value=None), NameConstant(value=None), NameConstant(value=None)]), body=[Expr(value=Str(s='\n        Args:\n            num_eval_qubits: The number of evaluation qubits.\n            phase_estimation_circuit: The phase estimation circuit used to run the algorithm.\n                Defaults to the standard phase estimation circuit from the circuit library,\n                `qiskit.circuit.library.PhaseEstimation` when None.\n            iqft: The inverse quantum Fourier transform component, defaults to using a standard\n                implementation from `qiskit.circuit.library.QFT` when None.\n            quantum_instance: The backend (or `QuantumInstance`) to execute the circuits on.\n\n        Raises:\n            ValueError: If the number of evaluation qubits is smaller than 1.\n        ')), If(test=Compare(left=Name(id='num_eval_qubits', ctx=Load()), ops=[Lt()], comparators=[Num(n=1)]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Str(s='The number of evaluation qubits must at least be 1.')], keywords=[]), cause=None)], orelse=[]), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='quantum_instance', ctx=Store())], value=Name(id='quantum_instance', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Store())], value=Name(id='num_eval_qubits', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_M', ctx=Store())], value=BinOp(left=Num(n=2), op=Pow(), right=Name(id='num_eval_qubits', ctx=Load()))), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_iqft', ctx=Store())], value=Name(id='iqft', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_pec', ctx=Store())], value=Name(id='phase_estimation_circuit', ctx=Load()))], decorator_list=[], returns=NameConstant(value=None))
FunctionDef(name='quantum_instance', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Get the quantum instance.\n\n        Returns:\n            The quantum instance used to run this algorithm.\n        ')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Name(id='QuantumInstance', ctx=Load())), ctx=Load()))
FunctionDef(name='quantum_instance', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='quantum_instance', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='QuantumInstance', ctx=Load()), Name(id='Backend', ctx=Load())], ctx=Load())), ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Set quantum instance.\n\n        Args:\n            quantum_instance: The quantum instance used to run this algorithm.\n        ')), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='quantum_instance', ctx=Load()), Name(id='Backend', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='quantum_instance', ctx=Store())], value=Call(func=Name(id='QuantumInstance', ctx=Load()), args=[Name(id='quantum_instance', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Store())], value=Name(id='quantum_instance', ctx=Load()))], decorator_list=[Attribute(value=Name(id='quantum_instance', ctx=Load()), attr='setter', ctx=Load())], returns=NameConstant(value=None))
FunctionDef(name='construct_circuit', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='estimation_problem', annotation=Name(id='EstimationProblem', ctx=Load())), arg(arg='measurement', annotation=Name(id='bool', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[NameConstant(value=False)]), body=[Expr(value=Str(s='Construct the Amplitude Estimation quantum circuit.\n\n        Args:\n            estimation_problem: The estimation problem for which to construct the QAE circuit.\n            measurement: Boolean flag to indicate if measurements should be included in the circuit.\n\n        Returns:\n            The QuantumCircuit object for the constructed circuit.\n        ')), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_pec', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=[Assign(targets=[Name(id='pec', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_pec', ctx=Load()))], orelse=[ImportFrom(module='qiskit.circuit.library', names=[alias(name='PhaseEstimation', asname=None)], level=0), Assign(targets=[Name(id='pec', ctx=Store())], value=Call(func=Name(id='PhaseEstimation', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Load()), Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='grover_operator', ctx=Load())], keywords=[keyword(arg='iqft', value=Attribute(value=Name(id='self', ctx=Load()), attr='_iqft', ctx=Load()))]))]), Assign(targets=[Name(id='circuit', ctx=Store())], value=Call(func=Name(id='QuantumCircuit', ctx=Load()), args=[Starred(value=Attribute(value=Name(id='pec', ctx=Load()), attr='qregs', ctx=Load()), ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='circuit', ctx=Load()), attr='compose', ctx=Load()), args=[Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='state_preparation', ctx=Load()), Call(func=Name(id='list', ctx=Load()), args=[Call(func=Name(id='range', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Load()), Attribute(value=Name(id='circuit', ctx=Load()), attr='num_qubits', ctx=Load())], keywords=[])], keywords=[])], keywords=[keyword(arg='inplace', value=NameConstant(value=True))])), Expr(value=Call(func=Attribute(value=Name(id='circuit', ctx=Load()), attr='compose', ctx=Load()), args=[Name(id='pec', ctx=Load())], keywords=[keyword(arg='inplace', value=NameConstant(value=True))])), If(test=Name(id='measurement', ctx=Load()), body=[Assign(targets=[Name(id='cr', ctx=Store())], value=Call(func=Name(id='ClassicalRegister', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='circuit', ctx=Load()), attr='add_register', ctx=Load()), args=[Name(id='cr', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='circuit', ctx=Load()), attr='measure', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Name(id='range', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Load())], keywords=[])], keywords=[]), Call(func=Name(id='list', ctx=Load()), args=[Call(func=Name(id='range', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Load())], keywords=[])], keywords=[])], keywords=[]))], orelse=[]), Return(value=Name(id='circuit', ctx=Load()))], decorator_list=[], returns=Name(id='QuantumCircuit', ctx=Load()))
FunctionDef(name='evaluate_measurements', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='circuit_results', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Subscript(value=Name(id='Dict', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load())), ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())], ctx=Load())), ctx=Load())), arg(arg='threshold', annotation=Name(id='float', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[Num(n=1e-06)]), body=[Expr(value=Str(s='Evaluate the results from the circuit simulation.\n\n        Given the probabilities from statevector simulation of the QAE circuit, compute the\n        probabilities that the measurements y/gridpoints a are the best estimate.\n\n        Args:\n            circuit_results: The circuit result from the QAE circuit. Can be either a counts dict\n                or a statevector.\n            threshold: Measurements with probabilities below the threshold are discarded.\n\n        Returns:\n            Dictionaries containing the a gridpoints with respective probabilities and\n                y measurements with respective probabilities, in this order.\n        ')), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='circuit_results', ctx=Load()), Name(id='dict', ctx=Load())], keywords=[]), body=[Assign(targets=[Tuple(elts=[Name(id='samples', ctx=Store()), Name(id='measurements', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_evaluate_count_results', ctx=Load()), args=[Name(id='circuit_results', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Tuple(elts=[Name(id='samples', ctx=Store()), Name(id='measurements', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_evaluate_statevector_results', ctx=Load()), args=[Name(id='circuit_results', ctx=Load())], keywords=[]))]), Assign(targets=[Name(id='samples', ctx=Store())], value=DictComp(key=Name(id='a', ctx=Load()), value=Name(id='p', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='a', ctx=Store()), Name(id='p', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='samples', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), ifs=[Compare(left=Name(id='p', ctx=Load()), ops=[Gt()], comparators=[Name(id='threshold', ctx=Load())])], is_async=0)])), Assign(targets=[Name(id='measurements', ctx=Store())], value=DictComp(key=Name(id='y', ctx=Load()), value=Name(id='p', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='y', ctx=Store()), Name(id='p', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='measurements', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), ifs=[Compare(left=Name(id='p', ctx=Load()), ops=[Gt()], comparators=[Name(id='threshold', ctx=Load())])], is_async=0)])), Return(value=Tuple(elts=[Name(id='samples', ctx=Load()), Name(id='measurements', ctx=Load())], ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Index(value=Tuple(elts=[Subscript(value=Name(id='Dict', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load())), ctx=Load()), Subscript(value=Name(id='Dict', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='float', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load())), ctx=Load())], ctx=Load())), ctx=Load()))
FunctionDef(name='_evaluate_statevector_results', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='statevector', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Assign(targets=[Name(id='measurements', ctx=Store())], value=Call(func=Name(id='OrderedDict', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='num_qubits', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='log2', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='statevector', ctx=Load())], keywords=[])], keywords=[])], keywords=[])), For(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='amplitude', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='statevector', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='b', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Subscript(value=Call(func=Name(id='bin', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]), slice=Slice(lower=Num(n=2), upper=None, step=None), ctx=Load()), attr='zfill', ctx=Load()), args=[Name(id='num_qubits', ctx=Load())], keywords=[]), slice=Slice(lower=None, upper=None, step=UnaryOp(op=USub(), operand=Num(n=1))), ctx=Load())), Assign(targets=[Name(id='y', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='b', ctx=Load()), slice=Slice(lower=None, upper=Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Load()), step=None), ctx=Load()), Num(n=2)], keywords=[])), Assign(targets=[Subscript(value=Name(id='measurements', ctx=Load()), slice=Index(value=Name(id='y', ctx=Load())), ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='measurements', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='y', ctx=Load()), Num(n=0)], keywords=[]), op=Add(), right=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='abs', ctx=Load()), args=[Name(id='amplitude', ctx=Load())], keywords=[]), op=Pow(), right=Num(n=2))))], orelse=[]), Assign(targets=[Name(id='samples', ctx=Store())], value=Call(func=Name(id='OrderedDict', ctx=Load()), args=[], keywords=[])), For(target=Tuple(elts=[Name(id='y', ctx=Store()), Name(id='probability', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='measurements', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[If(test=Compare(left=Name(id='y', ctx=Load()), ops=[GtE()], comparators=[Call(func=Name(id='int', ctx=Load()), args=[BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='_M', ctx=Load()), op=Div(), right=Num(n=2))], keywords=[])]), body=[Assign(targets=[Name(id='y', ctx=Store())], value=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='_M', ctx=Load()), op=Sub(), right=Name(id='y', ctx=Load())))], orelse=[]), Assign(targets=[Name(id='a', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='round', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='power', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[BinOp(left=BinOp(left=Name(id='y', ctx=Load()), op=Mult(), right=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load())), op=Div(), right=BinOp(left=Num(n=2), op=Pow(), right=Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Load())))], keywords=[]), Num(n=2)], keywords=[])], keywords=[keyword(arg='decimals', value=Num(n=7))])), Assign(targets=[Subscript(value=Name(id='samples', ctx=Load()), slice=Index(value=Name(id='a', ctx=Load())), ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='samples', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='a', ctx=Load()), Num(n=0)], keywords=[]), op=Add(), right=Name(id='probability', ctx=Load())))], orelse=[]), Return(value=Tuple(elts=[Name(id='samples', ctx=Load()), Name(id='measurements', ctx=Load())], ctx=Load()))], decorator_list=[], returns=None)
FunctionDef(name='_evaluate_count_results', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='counts', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Assign(targets=[Name(id='measurements', ctx=Store())], value=Call(func=Name(id='OrderedDict', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='samples', ctx=Store())], value=Call(func=Name(id='OrderedDict', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='shots', ctx=Store())], value=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()), attr='_run_config', ctx=Load()), attr='shots', ctx=Load())), For(target=Tuple(elts=[Name(id='state', ctx=Store()), Name(id='count', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='counts', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Name(id='y', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Subscript(value=Call(func=Attribute(value=Name(id='state', ctx=Load()), attr='replace', ctx=Load()), args=[Str(s=' '), Str(s='')], keywords=[]), slice=Slice(lower=None, upper=Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Load()), step=None), ctx=Load()), slice=Slice(lower=None, upper=None, step=UnaryOp(op=USub(), operand=Num(n=1))), ctx=Load()), Num(n=2)], keywords=[])), Assign(targets=[Name(id='probability', ctx=Store())], value=BinOp(left=Name(id='count', ctx=Load()), op=Div(), right=Name(id='shots', ctx=Load()))), Assign(targets=[Subscript(value=Name(id='measurements', ctx=Load()), slice=Index(value=Name(id='y', ctx=Load())), ctx=Store())], value=Name(id='probability', ctx=Load())), Assign(targets=[Name(id='a', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='round', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='power', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[BinOp(left=BinOp(left=Name(id='y', ctx=Load()), op=Mult(), right=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load())), op=Div(), right=BinOp(left=Num(n=2), op=Pow(), right=Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Load())))], keywords=[]), Num(n=2)], keywords=[])], keywords=[keyword(arg='decimals', value=Num(n=7))])), Assign(targets=[Subscript(value=Name(id='samples', ctx=Load()), slice=Index(value=Name(id='a', ctx=Load())), ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='samples', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='a', ctx=Load()), Num(n=0.0)], keywords=[]), op=Add(), right=Name(id='probability', ctx=Load())))], orelse=[]), Return(value=Tuple(elts=[Name(id='samples', ctx=Load()), Name(id='measurements', ctx=Load())], ctx=Load()))], decorator_list=[], returns=None)
FunctionDef(name='compute_mle', args=arguments(args=[arg(arg='result', annotation=Str(s='AmplitudeEstimationResult')), arg(arg='apply_post_processing', annotation=Name(id='bool', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[NameConstant(value=False)]), body=[Expr(value=Str(s='Compute the Maximum Likelihood Estimator (MLE).\n\n        Args:\n            result: An amplitude estimation result object.\n            apply_post_processing: If True, apply the post processing to the MLE before returning\n                it.\n\n        Returns:\n            The MLE for the provided result object.\n        ')), Assign(targets=[Name(id='m', ctx=Store())], value=Attribute(value=Name(id='result', ctx=Load()), attr='num_evaluation_qubits', ctx=Load())), Assign(targets=[Name(id='M', ctx=Store())], value=BinOp(left=Num(n=2), op=Pow(), right=Name(id='m', ctx=Load()))), Assign(targets=[Name(id='qae', ctx=Store())], value=Attribute(value=Name(id='result', ctx=Load()), attr='estimation', ctx=Load())), Assign(targets=[Name(id='a_i', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='asarray', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='result', ctx=Load()), attr='samples', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[])), Assign(targets=[Name(id='p_i', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='asarray', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='result', ctx=Load()), attr='samples', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[])), FunctionDef(name='loglikelihood', args=arguments(args=[arg(arg='a', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sum', ctx=Load()), args=[BinOp(left=BinOp(left=Attribute(value=Name(id='result', ctx=Load()), attr='shots', ctx=Load()), op=Mult(), right=Name(id='p_i', ctx=Load())), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='log', ctx=Load()), args=[Call(func=Name(id='pdf_a', ctx=Load()), args=[Name(id='a_i', ctx=Load()), Name(id='a', ctx=Load()), Name(id='m', ctx=Load())], keywords=[])], keywords=[]))], keywords=[]))], decorator_list=[], returns=None), Assign(targets=[Name(id='y', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='round', ctx=Load()), args=[BinOp(left=BinOp(left=Name(id='M', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='arcsin', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sqrt', ctx=Load()), args=[Name(id='qae', ctx=Load())], keywords=[])], keywords=[])), op=Div(), right=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()))], keywords=[])], keywords=[])), If(test=Compare(left=Name(id='y', ctx=Load()), ops=[Eq()], comparators=[Num(n=0)]), body=[Assign(targets=[Name(id='right_of_qae', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[BinOp(left=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Mult(), right=BinOp(left=Name(id='y', ctx=Load()), op=Add(), right=Num(n=1))), op=Div(), right=Name(id='M', ctx=Load()))], keywords=[]), op=Pow(), right=Num(n=2))), Assign(targets=[Name(id='bubbles', ctx=Store())], value=List(elts=[Name(id='qae', ctx=Load()), Name(id='right_of_qae', ctx=Load())], ctx=Load()))], orelse=[If(test=Compare(left=Name(id='y', ctx=Load()), ops=[Eq()], comparators=[Call(func=Name(id='int', ctx=Load()), args=[BinOp(left=Name(id='M', ctx=Load()), op=Div(), right=Num(n=2))], keywords=[])]), body=[Assign(targets=[Name(id='left_of_qae', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[BinOp(left=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Mult(), right=BinOp(left=Name(id='y', ctx=Load()), op=Sub(), right=Num(n=1))), op=Div(), right=Name(id='M', ctx=Load()))], keywords=[]), op=Pow(), right=Num(n=2))), Assign(targets=[Name(id='bubbles', ctx=Store())], value=List(elts=[Name(id='left_of_qae', ctx=Load()), Name(id='qae', ctx=Load())], ctx=Load()))], orelse=[Assign(targets=[Name(id='left_of_qae', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[BinOp(left=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Mult(), right=BinOp(left=Name(id='y', ctx=Load()), op=Sub(), right=Num(n=1))), op=Div(), right=Name(id='M', ctx=Load()))], keywords=[]), op=Pow(), right=Num(n=2))), Assign(targets=[Name(id='right_of_qae', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[BinOp(left=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Mult(), right=BinOp(left=Name(id='y', ctx=Load()), op=Add(), right=Num(n=1))), op=Div(), right=Name(id='M', ctx=Load()))], keywords=[]), op=Pow(), right=Num(n=2))), Assign(targets=[Name(id='bubbles', ctx=Store())], value=List(elts=[Name(id='left_of_qae', ctx=Load()), Name(id='qae', ctx=Load()), Name(id='right_of_qae', ctx=Load())], ctx=Load()))])]), Assign(targets=[Name(id='a_opt', ctx=Store())], value=Name(id='qae', ctx=Load())), Assign(targets=[Name(id='loglik_opt', ctx=Store())], value=Call(func=Name(id='loglikelihood', ctx=Load()), args=[Name(id='a_opt', ctx=Load())], keywords=[])), For(target=Tuple(elts=[Name(id='a', ctx=Store()), Name(id='b', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='zip', ctx=Load()), args=[Subscript(value=Name(id='bubbles', ctx=Load()), slice=Slice(lower=None, upper=UnaryOp(op=USub(), operand=Num(n=1)), step=None), ctx=Load()), Subscript(value=Name(id='bubbles', ctx=Load()), slice=Slice(lower=Num(n=1), upper=None, step=None), ctx=Load())], keywords=[]), body=[Assign(targets=[Tuple(elts=[Name(id='locmax', ctx=Store()), Name(id='val', ctx=Store())], ctx=Store())], value=Call(func=Name(id='bisect_max', ctx=Load()), args=[Name(id='loglikelihood', ctx=Load()), Name(id='a', ctx=Load()), Name(id='b', ctx=Load())], keywords=[keyword(arg='retval', value=NameConstant(value=True))])), If(test=Compare(left=Name(id='val', ctx=Load()), ops=[Gt()], comparators=[Name(id='loglik_opt', ctx=Load())]), body=[Assign(targets=[Name(id='a_opt', ctx=Store())], value=Name(id='locmax', ctx=Load())), Assign(targets=[Name(id='loglik_opt', ctx=Store())], value=Name(id='val', ctx=Load()))], orelse=[])], orelse=[]), If(test=Name(id='apply_post_processing', ctx=Load()), body=[Return(value=Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='post_processing', ctx=Load()), args=[Name(id='a_opt', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='a_opt', ctx=Load()))], decorator_list=[Name(id='staticmethod', ctx=Load())], returns=Name(id='float', ctx=Load()))
FunctionDef(name='estimate', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='estimation_problem', annotation=Name(id='EstimationProblem', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Run the amplitude estimation algorithm on provided estimation problem.\n\n        Args:\n            estimation_problem: The estimation problem.\n\n        Returns:\n            An amplitude estimation results object.\n\n        Raises:\n            ValueError: If `state_preparation` or `objective_qubits` are not set in the\n                `estimation_problem`.\n        ')), If(test=Compare(left=Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='state_preparation', ctx=Load()), ops=[Is()], comparators=[NameConstant(value=None)]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Str(s='The state_preparation property of the estimation problem must be set.')], keywords=[]), cause=None)], orelse=[]), If(test=Compare(left=Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='objective_qubits', ctx=Load()), ops=[Is()], comparators=[NameConstant(value=None)]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Str(s='The objective_qubits property of the estimation problem must be set.')], keywords=[]), cause=None)], orelse=[]), Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Name(id='AmplitudeEstimationResult', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='num_evaluation_qubits', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Load())), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='post_processing', ctx=Store())], value=Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='post_processing', ctx=Load())), If(test=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()), attr='is_statevector', ctx=Load()), body=[Assign(targets=[Name(id='circuit', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='construct_circuit', ctx=Load()), args=[Name(id='estimation_problem', ctx=Load())], keywords=[keyword(arg='measurement', value=NameConstant(value=False))])), Assign(targets=[Name(id='statevector', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()), attr='execute', ctx=Load()), args=[Name(id='circuit', ctx=Load())], keywords=[]), attr='get_statevector', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='circuit_results', ctx=Store())], value=Name(id='statevector', ctx=Load())), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='shots', ctx=Store())], value=Num(n=1))], orelse=[Assign(targets=[Name(id='circuit', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='construct_circuit', ctx=Load()), args=[Name(id='estimation_problem', ctx=Load())], keywords=[keyword(arg='measurement', value=NameConstant(value=True))])), Assign(targets=[Name(id='counts', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()), attr='execute', ctx=Load()), args=[Name(id='circuit', ctx=Load())], keywords=[]), attr='get_counts', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='circuit_results', ctx=Store())], value=Name(id='counts', ctx=Load())), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='shots', ctx=Store())], value=Call(func=Name(id='sum', ctx=Load()), args=[Call(func=Attribute(value=Name(id='counts', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[]))]), Assign(targets=[Tuple(elts=[Name(id='samples', ctx=Store()), Name(id='measurements', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='evaluate_measurements', ctx=Load()), args=[Attribute(value=Name(id='result', ctx=Load()), attr='circuit_results', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='samples', ctx=Store())], value=Name(id='samples', ctx=Load())), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='samples_processed', ctx=Store())], value=DictComp(key=Call(func=Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='post_processing', ctx=Load()), args=[Name(id='a', ctx=Load())], keywords=[]), value=Name(id='p', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='a', ctx=Store()), Name(id='p', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='samples', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), ifs=[], is_async=0)])), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='measurements', ctx=Store())], value=Name(id='measurements', ctx=Load())), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='max_probability', ctx=Store())], value=Num(n=0)), For(target=Tuple(elts=[Name(id='amplitude', ctx=Store()), Tuple(elts=[Name(id='mapped', ctx=Store()), Name(id='prob', ctx=Store())], ctx=Store())], ctx=Store()), iter=Call(func=Name(id='zip', ctx=Load()), args=[Call(func=Attribute(value=Name(id='samples', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Attribute(value=Name(id='result', ctx=Load()), attr='samples_processed', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='prob', ctx=Load()), ops=[Gt()], comparators=[Attribute(value=Name(id='result', ctx=Load()), attr='max_probability', ctx=Load())]), body=[Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='max_probability', ctx=Store())], value=Name(id='prob', ctx=Load())), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='estimation', ctx=Store())], value=Name(id='amplitude', ctx=Load())), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='estimation_processed', ctx=Store())], value=Name(id='mapped', ctx=Load()))], orelse=[])], orelse=[]), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='num_oracle_queries', ctx=Store())], value=BinOp(left=Attribute(value=Name(id='result', ctx=Load()), attr='shots', ctx=Load()), op=Mult(), right=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='_M', ctx=Load()), op=Sub(), right=Num(n=1)))), Assign(targets=[Name(id='mle', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='compute_mle', ctx=Load()), args=[Name(id='result', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='mle', ctx=Store())], value=Name(id='mle', ctx=Load())), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='mle_processed', ctx=Store())], value=Call(func=Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='post_processing', ctx=Load()), args=[Name(id='mle', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='confidence_interval', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='compute_confidence_interval', ctx=Load()), args=[Name(id='result', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='confidence_interval_processed', ctx=Store())], value=Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='post_processing', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='value', ctx=Store()), iter=Attribute(value=Name(id='result', ctx=Load()), attr='confidence_interval', ctx=Load()), ifs=[], is_async=0)])], keywords=[])), Return(value=Name(id='result', ctx=Load()))], decorator_list=[], returns=Str(s='AmplitudeEstimationResult'))
FunctionDef(name='compute_confidence_interval', args=arguments(args=[arg(arg='result', annotation=Str(s='AmplitudeEstimationResult')), arg(arg='alpha', annotation=Name(id='float', ctx=Load())), arg(arg='kind', annotation=Name(id='str', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[Num(n=0.05), Str(s='likelihood_ratio')]), body=[Expr(value=Str(s="Compute the (1 - alpha) confidence interval.\n\n        Args:\n            result: An amplitude estimation result for which to compute the confidence interval.\n            alpha: Confidence level: compute the (1 - alpha) confidence interval.\n            kind: The method to compute the confidence interval, can be 'fisher', 'observed_fisher'\n                or 'likelihood_ratio' (default)\n\n        Returns:\n            The (1 - alpha) confidence interval of the specified kind.\n\n        Raises:\n            AquaError: If 'mle' is not in self._ret.keys() (i.e. `run` was not called yet).\n            NotImplementedError: If the confidence interval method `kind` is not implemented.\n        ")), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Attribute(value=Name(id='result', ctx=Load()), attr='circuit_results', ctx=Load()), Tuple(elts=[Name(id='list', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())], ctx=Load())], keywords=[]), body=[Return(value=Tuple(elts=[Attribute(value=Name(id='result', ctx=Load()), attr='mle', ctx=Load()), Attribute(value=Name(id='result', ctx=Load()), attr='mle', ctx=Load())], ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='kind', ctx=Load()), ops=[In()], comparators=[List(elts=[Str(s='likelihood_ratio'), Str(s='lr')], ctx=Load())]), body=[Return(value=Call(func=Name(id='_likelihood_ratio_confint', ctx=Load()), args=[Name(id='result', ctx=Load()), Name(id='alpha', ctx=Load())], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='kind', ctx=Load()), ops=[In()], comparators=[List(elts=[Str(s='fisher'), Str(s='fi')], ctx=Load())]), body=[Return(value=Call(func=Name(id='_fisher_confint', ctx=Load()), args=[Name(id='result', ctx=Load()), Name(id='alpha', ctx=Load())], keywords=[keyword(arg='observed', value=NameConstant(value=False))]))], orelse=[]), If(test=Compare(left=Name(id='kind', ctx=Load()), ops=[In()], comparators=[List(elts=[Str(s='observed_fisher'), Str(s='observed_information'), Str(s='oi')], ctx=Load())]), body=[Return(value=Call(func=Name(id='_fisher_confint', ctx=Load()), args=[Name(id='result', ctx=Load()), Name(id='alpha', ctx=Load())], keywords=[keyword(arg='observed', value=NameConstant(value=True))]))], orelse=[]), Raise(exc=Call(func=Name(id='NotImplementedError', ctx=Load()), args=[JoinedStr(values=[Str(s='CI `'), FormattedValue(value=Name(id='kind', ctx=Load()), conversion=-1, format_spec=None), Str(s='` is not implemented.')])], keywords=[]), cause=None)], decorator_list=[Name(id='staticmethod', ctx=Load())], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='float', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load())), ctx=Load()))
Name(id='AmplitudeEstimatorResult', ctx=Load())
Expr(value=Str(s='The ``AmplitudeEstimation`` result object.'))
FunctionDef(name='__init__', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_num_evaluation_qubits', ctx=Store())], value=NameConstant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_mle', ctx=Store())], value=NameConstant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_mle_processed', ctx=Store())], value=NameConstant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_samples', ctx=Store())], value=NameConstant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_samples_processed', ctx=Store())], value=NameConstant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_y_measurements', ctx=Store())], value=NameConstant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_max_probability', ctx=Store())], value=NameConstant(value=None))], decorator_list=[], returns=NameConstant(value=None))
FunctionDef(name='num_evaluation_qubits', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Returns the number of evaluation qubits.')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_num_evaluation_qubits', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='int', ctx=Load()))
FunctionDef(name='num_evaluation_qubits', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='num_evaluation_qubits', annotation=Name(id='int', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Set the number of evaluation qubits.')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_num_evaluation_qubits', ctx=Store())], value=Name(id='num_evaluation_qubits', ctx=Load()))], decorator_list=[Attribute(value=Name(id='num_evaluation_qubits', ctx=Load()), attr='setter', ctx=Load())], returns=NameConstant(value=None))
FunctionDef(name='mle_processed', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Return the post-processed MLE for the amplitude.')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_mle_processed', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='float', ctx=Load()))
FunctionDef(name='mle_processed', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='value', annotation=Name(id='float', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Set the post-processed MLE for the amplitude.')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_mle_processed', ctx=Store())], value=Name(id='value', ctx=Load()))], decorator_list=[Attribute(value=Name(id='mle_processed', ctx=Load()), attr='setter', ctx=Load())], returns=NameConstant(value=None))
FunctionDef(name='samples_processed', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Return the post-processed measurement samples with their measurement probability.')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_samples_processed', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='Dict', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='float', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load())), ctx=Load()))
FunctionDef(name='samples_processed', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='value', annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='float', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load())), ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Set the post-processed measurement samples.')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_samples_processed', ctx=Store())], value=Name(id='value', ctx=Load()))], decorator_list=[Attribute(value=Name(id='samples_processed', ctx=Load()), attr='setter', ctx=Load())], returns=NameConstant(value=None))
FunctionDef(name='mle', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Return the MLE for the amplitude, in $[0, 1]$.')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_mle', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='float', ctx=Load()))
FunctionDef(name='mle', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='value', annotation=Name(id='float', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Set the MLE for the amplitude, in $[0, 1]$.')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_mle', ctx=Store())], value=Name(id='value', ctx=Load()))], decorator_list=[Attribute(value=Name(id='mle', ctx=Load()), attr='setter', ctx=Load())], returns=NameConstant(value=None))
FunctionDef(name='samples', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Return the measurement samples with their measurement probability.')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_samples', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='Dict', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='float', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load())), ctx=Load()))
FunctionDef(name='samples', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='value', annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='float', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load())), ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Set the measurement samples with their measurement probability.')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_samples', ctx=Store())], value=Name(id='value', ctx=Load()))], decorator_list=[Attribute(value=Name(id='samples', ctx=Load()), attr='setter', ctx=Load())], returns=NameConstant(value=None))
FunctionDef(name='measurements', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Return the measurements as integers with their measurement probability.')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_y_measurements', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='Dict', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load())), ctx=Load()))
FunctionDef(name='measurements', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='value', annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load())), ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Set the measurements as integers with their measurement probability.')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_y_measurements', ctx=Store())], value=Name(id='value', ctx=Load()))], decorator_list=[Attribute(value=Name(id='measurements', ctx=Load()), attr='setter', ctx=Load())], returns=NameConstant(value=None))
FunctionDef(name='max_probability', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Return the maximum sampling probability.')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_max_probability', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='float', ctx=Load()))
FunctionDef(name='max_probability', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='value', annotation=Name(id='float', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Set the maximum sampling probability.')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_max_probability', ctx=Store())], value=Name(id='value', ctx=Load()))], decorator_list=[Attribute(value=Name(id='max_probability', ctx=Load()), attr='setter', ctx=Load())], returns=NameConstant(value=None))
arguments(args=[arg(arg='result', annotation=Name(id='AmplitudeEstimationResult', ctx=Load())), arg(arg='observed', annotation=Name(id='bool', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[NameConstant(value=False)])
Expr(value=Str(s='Computes the Fisher information for the output of the previous run.\n\n    Args:\n        result: An amplitude estimation result for which to compute the confidence interval.\n        observed: If True, the observed Fisher information is returned, otherwise\n            the expected Fisher information.\n\n    Returns:\n        The Fisher information.\n    '))
Assign(targets=[Name(id='fisher_information', ctx=Store())], value=NameConstant(value=None))
Assign(targets=[Name(id='mlv', ctx=Store())], value=Attribute(value=Name(id='result', ctx=Load()), attr='mle', ctx=Load()))
Assign(targets=[Name(id='m', ctx=Store())], value=Attribute(value=Name(id='result', ctx=Load()), attr='num_evaluation_qubits', ctx=Load()))
Assign(targets=[Name(id='M', ctx=Store())], value=BinOp(left=Num(n=2), op=Pow(), right=Name(id='m', ctx=Load())))
If(test=Name(id='observed', ctx=Load()), body=[Assign(targets=[Name(id='a_i', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='asarray', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='result', ctx=Load()), attr='samples', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[])), Assign(targets=[Name(id='p_i', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='asarray', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='result', ctx=Load()), attr='samples', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[])), Assign(targets=[Name(id='fisher_information', ctx=Store())], value=Call(func=Name(id='sum', ctx=Load()), args=[GeneratorExp(elt=BinOp(left=Name(id='p', ctx=Load()), op=Mult(), right=BinOp(left=Call(func=Name(id='derivative_log_pdf_a', ctx=Load()), args=[Name(id='a', ctx=Load()), Name(id='mlv', ctx=Load()), Name(id='m', ctx=Load())], keywords=[]), op=Pow(), right=Num(n=2))), generators=[comprehension(target=Tuple(elts=[Name(id='p', ctx=Store()), Name(id='a', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='zip', ctx=Load()), args=[Name(id='p_i', ctx=Load()), Name(id='a_i', ctx=Load())], keywords=[]), ifs=[], is_async=0)])], keywords=[]))], orelse=[FunctionDef(name='integrand', args=arguments(args=[arg(arg='x', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Return(value=BinOp(left=BinOp(left=Call(func=Name(id='derivative_log_pdf_a', ctx=Load()), args=[Name(id='x', ctx=Load()), Name(id='mlv', ctx=Load()), Name(id='m', ctx=Load())], keywords=[]), op=Pow(), right=Num(n=2)), op=Mult(), right=Call(func=Name(id='pdf_a', ctx=Load()), args=[Name(id='x', ctx=Load()), Name(id='mlv', ctx=Load()), Name(id='m', ctx=Load())], keywords=[])))], decorator_list=[], returns=None), Assign(targets=[Name(id='grid', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[BinOp(left=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='arange', ctx=Load()), args=[BinOp(left=BinOp(left=Name(id='M', ctx=Load()), op=Div(), right=Num(n=2)), op=Add(), right=Num(n=1))], keywords=[])), op=Div(), right=Name(id='M', ctx=Load()))], keywords=[]), op=Pow(), right=Num(n=2))), Assign(targets=[Name(id='fisher_information', ctx=Store())], value=Call(func=Name(id='sum', ctx=Load()), args=[GeneratorExp(elt=Call(func=Name(id='integrand', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='grid', ctx=Load()), ifs=[], is_async=0)])], keywords=[]))])
Return(value=Name(id='fisher_information', ctx=Load()))
Name(id='float', ctx=Load())
arguments(args=[arg(arg='result', annotation=Name(id='AmplitudeEstimationResult', ctx=Load())), arg(arg='alpha', annotation=Name(id='float', ctx=Load())), arg(arg='observed', annotation=Name(id='bool', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[NameConstant(value=False)])
Expr(value=Str(s='Compute the Fisher information confidence interval for the MLE of the previous run.\n\n    Args:\n        result: An amplitude estimation result for which to compute the confidence interval.\n        alpha: Specifies the (1 - alpha) confidence level (0 < alpha < 1).\n        observed: If True, the observed Fisher information is used to construct the\n            confidence interval, otherwise the expected Fisher information.\n\n    Returns:\n        The Fisher information confidence interval.\n    '))
Assign(targets=[Name(id='std', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sqrt', ctx=Load()), args=[BinOp(left=Attribute(value=Name(id='result', ctx=Load()), attr='shots', ctx=Load()), op=Mult(), right=Call(func=Name(id='_compute_fisher_information', ctx=Load()), args=[Name(id='result', ctx=Load()), Name(id='observed', ctx=Load())], keywords=[]))], keywords=[]))
Assign(targets=[Name(id='confint', ctx=Store())], value=BinOp(left=Attribute(value=Name(id='result', ctx=Load()), attr='mle', ctx=Load()), op=Add(), right=BinOp(left=BinOp(left=Call(func=Attribute(value=Name(id='norm', ctx=Load()), attr='ppf', ctx=Load()), args=[BinOp(left=Num(n=1), op=Sub(), right=BinOp(left=Name(id='alpha', ctx=Load()), op=Div(), right=Num(n=2)))], keywords=[]), op=Div(), right=Name(id='std', ctx=Load())), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='array', ctx=Load()), args=[List(elts=[UnaryOp(op=USub(), operand=Num(n=1)), Num(n=1)], ctx=Load())], keywords=[]))))
Return(value=Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='post_processing', ctx=Load()), args=[Name(id='bound', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='bound', ctx=Store()), iter=Name(id='confint', ctx=Load()), ifs=[], is_async=0)])], keywords=[]))
Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='float', ctx=Load())), ctx=Load())
arguments(args=[arg(arg='result', annotation=Name(id='AmplitudeEstimationResult', ctx=Load())), arg(arg='alpha', annotation=Name(id='float', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Expr(value=Str(s='Compute the likelihood ratio confidence interval for the MLE of the previous run.\n\n    Args:\n        result: An amplitude estimation result for which to compute the confidence interval.\n        alpha: Specifies the (1 - alpha) confidence level (0 < alpha < 1).\n\n    Returns:\n        The likelihood ratio confidence interval.\n    '))
Assign(targets=[Name(id='m', ctx=Store())], value=Attribute(value=Name(id='result', ctx=Load()), attr='num_evaluation_qubits', ctx=Load()))
Assign(targets=[Name(id='M', ctx=Store())], value=BinOp(left=Num(n=2), op=Pow(), right=Name(id='m', ctx=Load())))
Assign(targets=[Name(id='qae', ctx=Store())], value=Attribute(value=Name(id='result', ctx=Load()), attr='estimation', ctx=Load()))
Assign(targets=[Name(id='y', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='round', ctx=Load()), args=[BinOp(left=BinOp(left=Name(id='M', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='arcsin', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sqrt', ctx=Load()), args=[Name(id='qae', ctx=Load())], keywords=[])], keywords=[])), op=Div(), right=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()))], keywords=[])], keywords=[]))
If(test=Compare(left=Name(id='y', ctx=Load()), ops=[Eq()], comparators=[Num(n=0)]), body=[Assign(targets=[Name(id='right_of_qae', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[BinOp(left=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Mult(), right=BinOp(left=Name(id='y', ctx=Load()), op=Add(), right=Num(n=1))), op=Div(), right=Name(id='M', ctx=Load()))], keywords=[]), op=Pow(), right=Num(n=2))), Assign(targets=[Name(id='bubbles', ctx=Store())], value=List(elts=[Name(id='qae', ctx=Load()), Name(id='right_of_qae', ctx=Load())], ctx=Load()))], orelse=[If(test=Compare(left=Name(id='y', ctx=Load()), ops=[Eq()], comparators=[Call(func=Name(id='int', ctx=Load()), args=[BinOp(left=Name(id='M', ctx=Load()), op=Div(), right=Num(n=2))], keywords=[])]), body=[Assign(targets=[Name(id='left_of_qae', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[BinOp(left=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Mult(), right=BinOp(left=Name(id='y', ctx=Load()), op=Sub(), right=Num(n=1))), op=Div(), right=Name(id='M', ctx=Load()))], keywords=[]), op=Pow(), right=Num(n=2))), Assign(targets=[Name(id='bubbles', ctx=Store())], value=List(elts=[Name(id='left_of_qae', ctx=Load()), Name(id='qae', ctx=Load())], ctx=Load()))], orelse=[Assign(targets=[Name(id='left_of_qae', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[BinOp(left=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Mult(), right=BinOp(left=Name(id='y', ctx=Load()), op=Sub(), right=Num(n=1))), op=Div(), right=Name(id='M', ctx=Load()))], keywords=[]), op=Pow(), right=Num(n=2))), Assign(targets=[Name(id='right_of_qae', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[BinOp(left=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Mult(), right=BinOp(left=Name(id='y', ctx=Load()), op=Add(), right=Num(n=1))), op=Div(), right=Name(id='M', ctx=Load()))], keywords=[]), op=Pow(), right=Num(n=2))), Assign(targets=[Name(id='bubbles', ctx=Store())], value=List(elts=[Name(id='left_of_qae', ctx=Load()), Name(id='qae', ctx=Load()), Name(id='right_of_qae', ctx=Load())], ctx=Load()))])])
Assign(targets=[Name(id='a_i', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='asarray', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='result', ctx=Load()), attr='samples', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[]))
Assign(targets=[Name(id='p_i', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='asarray', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='result', ctx=Load()), attr='samples', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[]))
FunctionDef(name='loglikelihood', args=arguments(args=[arg(arg='a', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sum', ctx=Load()), args=[BinOp(left=BinOp(left=Attribute(value=Name(id='result', ctx=Load()), attr='shots', ctx=Load()), op=Mult(), right=Name(id='p_i', ctx=Load())), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='log', ctx=Load()), args=[Call(func=Name(id='pdf_a', ctx=Load()), args=[Name(id='a_i', ctx=Load()), Name(id='a', ctx=Load()), Name(id='m', ctx=Load())], keywords=[])], keywords=[]))], keywords=[]))], decorator_list=[], returns=None)
Assign(targets=[Name(id='loglik_mle', ctx=Store())], value=Call(func=Name(id='loglikelihood', ctx=Load()), args=[Attribute(value=Name(id='result', ctx=Load()), attr='mle', ctx=Load())], keywords=[]))
Assign(targets=[Name(id='thres', ctx=Store())], value=BinOp(left=Name(id='loglik_mle', ctx=Load()), op=Sub(), right=BinOp(left=Call(func=Attribute(value=Name(id='chi2', ctx=Load()), attr='ppf', ctx=Load()), args=[BinOp(left=Num(n=1), op=Sub(), right=Name(id='alpha', ctx=Load()))], keywords=[keyword(arg='df', value=Num(n=1))]), op=Div(), right=Num(n=2))))
FunctionDef(name='cut', args=arguments(args=[arg(arg='x', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Return(value=BinOp(left=Call(func=Name(id='loglikelihood', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), op=Sub(), right=Name(id='thres', ctx=Load())))], decorator_list=[], returns=None)
Assign(targets=[Name(id='lower', ctx=Store()), Name(id='upper', ctx=Store())], value=Attribute(value=Name(id='result', ctx=Load()), attr='mle', ctx=Load()))
For(target=Tuple(elts=[Name(id='a', ctx=Store()), Name(id='b', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='zip', ctx=Load()), args=[Subscript(value=Name(id='bubbles', ctx=Load()), slice=Slice(lower=None, upper=UnaryOp(op=USub(), operand=Num(n=1)), step=None), ctx=Load()), Subscript(value=Name(id='bubbles', ctx=Load()), slice=Slice(lower=Num(n=1), upper=None, step=None), ctx=Load())], keywords=[]), body=[Assign(targets=[Tuple(elts=[Name(id='locmax', ctx=Store()), Name(id='val', ctx=Store())], ctx=Store())], value=Call(func=Name(id='bisect_max', ctx=Load()), args=[Name(id='loglikelihood', ctx=Load()), Name(id='a', ctx=Load()), Name(id='b', ctx=Load())], keywords=[keyword(arg='retval', value=NameConstant(value=True))])), If(test=Compare(left=Name(id='val', ctx=Load()), ops=[GtE()], comparators=[Name(id='thres', ctx=Load())]), body=[If(test=Compare(left=BinOp(left=Call(func=Name(id='cut', ctx=Load()), args=[Name(id='a', ctx=Load())], keywords=[]), op=Mult(), right=Call(func=Name(id='cut', ctx=Load()), args=[Name(id='locmax', ctx=Load())], keywords=[])), ops=[Lt()], comparators=[Num(n=0)]), body=[Assign(targets=[Name(id='left', ctx=Store())], value=Call(func=Name(id='bisect', ctx=Load()), args=[Name(id='cut', ctx=Load()), Name(id='a', ctx=Load()), Name(id='locmax', ctx=Load())], keywords=[])), Assign(targets=[Name(id='lower', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='minimum', ctx=Load()), args=[Name(id='lower', ctx=Load()), Name(id='left', ctx=Load())], keywords=[]))], orelse=[]), If(test=Compare(left=BinOp(left=Call(func=Name(id='cut', ctx=Load()), args=[Name(id='locmax', ctx=Load())], keywords=[]), op=Mult(), right=Call(func=Name(id='cut', ctx=Load()), args=[Name(id='b', ctx=Load())], keywords=[])), ops=[Lt()], comparators=[Num(n=0)]), body=[Assign(targets=[Name(id='right', ctx=Store())], value=Call(func=Name(id='bisect', ctx=Load()), args=[Name(id='cut', ctx=Load()), Name(id='locmax', ctx=Load()), Name(id='b', ctx=Load())], keywords=[])), Assign(targets=[Name(id='upper', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='maximum', ctx=Load()), args=[Name(id='upper', ctx=Load()), Name(id='right', ctx=Load())], keywords=[]))], orelse=[])], orelse=[])], orelse=[])
Assign(targets=[Name(id='confint', ctx=Store())], value=List(elts=[Name(id='lower', ctx=Load()), Name(id='upper', ctx=Load())], ctx=Load()))
Return(value=Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='post_processing', ctx=Load()), args=[Name(id='bound', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='bound', ctx=Store()), iter=Name(id='confint', ctx=Load()), ifs=[], is_async=0)])], keywords=[]))
Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='float', ctx=Load())), ctx=Load())
Load()
Str(s='The Quantum Phase Estimation-based Amplitude Estimation algorithm.\n\n    This class implements the original Quantum Amplitude Estimation (QAE) algorithm, introduced by\n    [1]. This canonical version uses quantum phase estimation along with a set of :math:`m`\n    additional evaluation qubits to find an estimate :math:`\\tilde{a}`, that is restricted to the\n    grid\n\n    .. math::\n\n        \\tilde{a} \\in \\{\\sin^2(\\pi  y / 2^m) : y = 0, ..., 2^{m-1}\\}\n\n    More evaluation qubits produce a finer sampling grid, therefore the accuracy of the algorithm\n    increases with :math:`m`.\n\n    Using a maximum likelihood post processing, this grid constraint can be circumvented.\n    This improved estimator is implemented as well, see [2] Appendix A for more detail.\n\n    References:\n        [1]: Brassard, G., Hoyer, P., Mosca, M., & Tapp, A. (2000).\n             Quantum Amplitude Amplification and Estimation.\n             `arXiv:quant-ph/0005055 <http://arxiv.org/abs/quant-ph/0005055>`_.\n        [2]: Grinko, D., Gacon, J., Zoufal, C., & Woerner, S. (2019).\n             Iterative Quantum Amplitude Estimation.\n             `arXiv:1912.05559 <https://arxiv.org/abs/1912.05559>`_.\n    ')
arguments(args=[arg(arg='self', annotation=None), arg(arg='num_eval_qubits', annotation=Name(id='int', ctx=Load())), arg(arg='phase_estimation_circuit', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Name(id='QuantumCircuit', ctx=Load())), ctx=Load())), arg(arg='iqft', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Name(id='QuantumCircuit', ctx=Load())), ctx=Load())), arg(arg='quantum_instance', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='QuantumInstance', ctx=Load()), Name(id='Backend', ctx=Load())], ctx=Load())), ctx=Load())), ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[NameConstant(value=None), NameConstant(value=None), NameConstant(value=None)])
Expr(value=Str(s='\n        Args:\n            num_eval_qubits: The number of evaluation qubits.\n            phase_estimation_circuit: The phase estimation circuit used to run the algorithm.\n                Defaults to the standard phase estimation circuit from the circuit library,\n                `qiskit.circuit.library.PhaseEstimation` when None.\n            iqft: The inverse quantum Fourier transform component, defaults to using a standard\n                implementation from `qiskit.circuit.library.QFT` when None.\n            quantum_instance: The backend (or `QuantumInstance`) to execute the circuits on.\n\n        Raises:\n            ValueError: If the number of evaluation qubits is smaller than 1.\n        '))
If(test=Compare(left=Name(id='num_eval_qubits', ctx=Load()), ops=[Lt()], comparators=[Num(n=1)]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Str(s='The number of evaluation qubits must at least be 1.')], keywords=[]), cause=None)], orelse=[])
Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[]))
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='quantum_instance', ctx=Store())], value=Name(id='quantum_instance', ctx=Load()))
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Store())], value=Name(id='num_eval_qubits', ctx=Load()))
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_M', ctx=Store())], value=BinOp(left=Num(n=2), op=Pow(), right=Name(id='num_eval_qubits', ctx=Load())))
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_iqft', ctx=Store())], value=Name(id='iqft', ctx=Load()))
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_pec', ctx=Store())], value=Name(id='phase_estimation_circuit', ctx=Load()))
NameConstant(value=None)
arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Expr(value=Str(s='Get the quantum instance.\n\n        Returns:\n            The quantum instance used to run this algorithm.\n        '))
Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()))
Name(id='property', ctx=Load())
Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Name(id='QuantumInstance', ctx=Load())), ctx=Load())
arguments(args=[arg(arg='self', annotation=None), arg(arg='quantum_instance', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='QuantumInstance', ctx=Load()), Name(id='Backend', ctx=Load())], ctx=Load())), ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Expr(value=Str(s='Set quantum instance.\n\n        Args:\n            quantum_instance: The quantum instance used to run this algorithm.\n        '))
If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='quantum_instance', ctx=Load()), Name(id='Backend', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='quantum_instance', ctx=Store())], value=Call(func=Name(id='QuantumInstance', ctx=Load()), args=[Name(id='quantum_instance', ctx=Load())], keywords=[]))], orelse=[])
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Store())], value=Name(id='quantum_instance', ctx=Load()))
Attribute(value=Name(id='quantum_instance', ctx=Load()), attr='setter', ctx=Load())
NameConstant(value=None)
arguments(args=[arg(arg='self', annotation=None), arg(arg='estimation_problem', annotation=Name(id='EstimationProblem', ctx=Load())), arg(arg='measurement', annotation=Name(id='bool', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[NameConstant(value=False)])
Expr(value=Str(s='Construct the Amplitude Estimation quantum circuit.\n\n        Args:\n            estimation_problem: The estimation problem for which to construct the QAE circuit.\n            measurement: Boolean flag to indicate if measurements should be included in the circuit.\n\n        Returns:\n            The QuantumCircuit object for the constructed circuit.\n        '))
If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_pec', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=[Assign(targets=[Name(id='pec', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_pec', ctx=Load()))], orelse=[ImportFrom(module='qiskit.circuit.library', names=[alias(name='PhaseEstimation', asname=None)], level=0), Assign(targets=[Name(id='pec', ctx=Store())], value=Call(func=Name(id='PhaseEstimation', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Load()), Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='grover_operator', ctx=Load())], keywords=[keyword(arg='iqft', value=Attribute(value=Name(id='self', ctx=Load()), attr='_iqft', ctx=Load()))]))])
Assign(targets=[Name(id='circuit', ctx=Store())], value=Call(func=Name(id='QuantumCircuit', ctx=Load()), args=[Starred(value=Attribute(value=Name(id='pec', ctx=Load()), attr='qregs', ctx=Load()), ctx=Load())], keywords=[]))
Expr(value=Call(func=Attribute(value=Name(id='circuit', ctx=Load()), attr='compose', ctx=Load()), args=[Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='state_preparation', ctx=Load()), Call(func=Name(id='list', ctx=Load()), args=[Call(func=Name(id='range', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Load()), Attribute(value=Name(id='circuit', ctx=Load()), attr='num_qubits', ctx=Load())], keywords=[])], keywords=[])], keywords=[keyword(arg='inplace', value=NameConstant(value=True))]))
Expr(value=Call(func=Attribute(value=Name(id='circuit', ctx=Load()), attr='compose', ctx=Load()), args=[Name(id='pec', ctx=Load())], keywords=[keyword(arg='inplace', value=NameConstant(value=True))]))
If(test=Name(id='measurement', ctx=Load()), body=[Assign(targets=[Name(id='cr', ctx=Store())], value=Call(func=Name(id='ClassicalRegister', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='circuit', ctx=Load()), attr='add_register', ctx=Load()), args=[Name(id='cr', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='circuit', ctx=Load()), attr='measure', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Name(id='range', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Load())], keywords=[])], keywords=[]), Call(func=Name(id='list', ctx=Load()), args=[Call(func=Name(id='range', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Load())], keywords=[])], keywords=[])], keywords=[]))], orelse=[])
Return(value=Name(id='circuit', ctx=Load()))
Name(id='QuantumCircuit', ctx=Load())
arguments(args=[arg(arg='self', annotation=None), arg(arg='circuit_results', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Subscript(value=Name(id='Dict', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load())), ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())], ctx=Load())), ctx=Load())), arg(arg='threshold', annotation=Name(id='float', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[Num(n=1e-06)])
Expr(value=Str(s='Evaluate the results from the circuit simulation.\n\n        Given the probabilities from statevector simulation of the QAE circuit, compute the\n        probabilities that the measurements y/gridpoints a are the best estimate.\n\n        Args:\n            circuit_results: The circuit result from the QAE circuit. Can be either a counts dict\n                or a statevector.\n            threshold: Measurements with probabilities below the threshold are discarded.\n\n        Returns:\n            Dictionaries containing the a gridpoints with respective probabilities and\n                y measurements with respective probabilities, in this order.\n        '))
If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='circuit_results', ctx=Load()), Name(id='dict', ctx=Load())], keywords=[]), body=[Assign(targets=[Tuple(elts=[Name(id='samples', ctx=Store()), Name(id='measurements', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_evaluate_count_results', ctx=Load()), args=[Name(id='circuit_results', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Tuple(elts=[Name(id='samples', ctx=Store()), Name(id='measurements', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_evaluate_statevector_results', ctx=Load()), args=[Name(id='circuit_results', ctx=Load())], keywords=[]))])
Assign(targets=[Name(id='samples', ctx=Store())], value=DictComp(key=Name(id='a', ctx=Load()), value=Name(id='p', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='a', ctx=Store()), Name(id='p', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='samples', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), ifs=[Compare(left=Name(id='p', ctx=Load()), ops=[Gt()], comparators=[Name(id='threshold', ctx=Load())])], is_async=0)]))
Assign(targets=[Name(id='measurements', ctx=Store())], value=DictComp(key=Name(id='y', ctx=Load()), value=Name(id='p', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='y', ctx=Store()), Name(id='p', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='measurements', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), ifs=[Compare(left=Name(id='p', ctx=Load()), ops=[Gt()], comparators=[Name(id='threshold', ctx=Load())])], is_async=0)]))
Return(value=Tuple(elts=[Name(id='samples', ctx=Load()), Name(id='measurements', ctx=Load())], ctx=Load()))
Subscript(value=Name(id='Tuple', ctx=Load()), slice=Index(value=Tuple(elts=[Subscript(value=Name(id='Dict', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load())), ctx=Load()), Subscript(value=Name(id='Dict', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='float', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load())), ctx=Load())], ctx=Load())), ctx=Load())
arguments(args=[arg(arg='self', annotation=None), arg(arg='statevector', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Assign(targets=[Name(id='measurements', ctx=Store())], value=Call(func=Name(id='OrderedDict', ctx=Load()), args=[], keywords=[]))
Assign(targets=[Name(id='num_qubits', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='log2', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='statevector', ctx=Load())], keywords=[])], keywords=[])], keywords=[]))
For(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='amplitude', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='statevector', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='b', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Subscript(value=Call(func=Name(id='bin', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]), slice=Slice(lower=Num(n=2), upper=None, step=None), ctx=Load()), attr='zfill', ctx=Load()), args=[Name(id='num_qubits', ctx=Load())], keywords=[]), slice=Slice(lower=None, upper=None, step=UnaryOp(op=USub(), operand=Num(n=1))), ctx=Load())), Assign(targets=[Name(id='y', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='b', ctx=Load()), slice=Slice(lower=None, upper=Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Load()), step=None), ctx=Load()), Num(n=2)], keywords=[])), Assign(targets=[Subscript(value=Name(id='measurements', ctx=Load()), slice=Index(value=Name(id='y', ctx=Load())), ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='measurements', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='y', ctx=Load()), Num(n=0)], keywords=[]), op=Add(), right=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='abs', ctx=Load()), args=[Name(id='amplitude', ctx=Load())], keywords=[]), op=Pow(), right=Num(n=2))))], orelse=[])
Assign(targets=[Name(id='samples', ctx=Store())], value=Call(func=Name(id='OrderedDict', ctx=Load()), args=[], keywords=[]))
For(target=Tuple(elts=[Name(id='y', ctx=Store()), Name(id='probability', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='measurements', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[If(test=Compare(left=Name(id='y', ctx=Load()), ops=[GtE()], comparators=[Call(func=Name(id='int', ctx=Load()), args=[BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='_M', ctx=Load()), op=Div(), right=Num(n=2))], keywords=[])]), body=[Assign(targets=[Name(id='y', ctx=Store())], value=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='_M', ctx=Load()), op=Sub(), right=Name(id='y', ctx=Load())))], orelse=[]), Assign(targets=[Name(id='a', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='round', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='power', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[BinOp(left=BinOp(left=Name(id='y', ctx=Load()), op=Mult(), right=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load())), op=Div(), right=BinOp(left=Num(n=2), op=Pow(), right=Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Load())))], keywords=[]), Num(n=2)], keywords=[])], keywords=[keyword(arg='decimals', value=Num(n=7))])), Assign(targets=[Subscript(value=Name(id='samples', ctx=Load()), slice=Index(value=Name(id='a', ctx=Load())), ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='samples', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='a', ctx=Load()), Num(n=0)], keywords=[]), op=Add(), right=Name(id='probability', ctx=Load())))], orelse=[])
Return(value=Tuple(elts=[Name(id='samples', ctx=Load()), Name(id='measurements', ctx=Load())], ctx=Load()))
arguments(args=[arg(arg='self', annotation=None), arg(arg='counts', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Assign(targets=[Name(id='measurements', ctx=Store())], value=Call(func=Name(id='OrderedDict', ctx=Load()), args=[], keywords=[]))
Assign(targets=[Name(id='samples', ctx=Store())], value=Call(func=Name(id='OrderedDict', ctx=Load()), args=[], keywords=[]))
Assign(targets=[Name(id='shots', ctx=Store())], value=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()), attr='_run_config', ctx=Load()), attr='shots', ctx=Load()))
For(target=Tuple(elts=[Name(id='state', ctx=Store()), Name(id='count', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='counts', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Name(id='y', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Subscript(value=Call(func=Attribute(value=Name(id='state', ctx=Load()), attr='replace', ctx=Load()), args=[Str(s=' '), Str(s='')], keywords=[]), slice=Slice(lower=None, upper=Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Load()), step=None), ctx=Load()), slice=Slice(lower=None, upper=None, step=UnaryOp(op=USub(), operand=Num(n=1))), ctx=Load()), Num(n=2)], keywords=[])), Assign(targets=[Name(id='probability', ctx=Store())], value=BinOp(left=Name(id='count', ctx=Load()), op=Div(), right=Name(id='shots', ctx=Load()))), Assign(targets=[Subscript(value=Name(id='measurements', ctx=Load()), slice=Index(value=Name(id='y', ctx=Load())), ctx=Store())], value=Name(id='probability', ctx=Load())), Assign(targets=[Name(id='a', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='round', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='power', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[BinOp(left=BinOp(left=Name(id='y', ctx=Load()), op=Mult(), right=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load())), op=Div(), right=BinOp(left=Num(n=2), op=Pow(), right=Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Load())))], keywords=[]), Num(n=2)], keywords=[])], keywords=[keyword(arg='decimals', value=Num(n=7))])), Assign(targets=[Subscript(value=Name(id='samples', ctx=Load()), slice=Index(value=Name(id='a', ctx=Load())), ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='samples', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='a', ctx=Load()), Num(n=0.0)], keywords=[]), op=Add(), right=Name(id='probability', ctx=Load())))], orelse=[])
Return(value=Tuple(elts=[Name(id='samples', ctx=Load()), Name(id='measurements', ctx=Load())], ctx=Load()))
arguments(args=[arg(arg='result', annotation=Str(s='AmplitudeEstimationResult')), arg(arg='apply_post_processing', annotation=Name(id='bool', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[NameConstant(value=False)])
Expr(value=Str(s='Compute the Maximum Likelihood Estimator (MLE).\n\n        Args:\n            result: An amplitude estimation result object.\n            apply_post_processing: If True, apply the post processing to the MLE before returning\n                it.\n\n        Returns:\n            The MLE for the provided result object.\n        '))
Assign(targets=[Name(id='m', ctx=Store())], value=Attribute(value=Name(id='result', ctx=Load()), attr='num_evaluation_qubits', ctx=Load()))
Assign(targets=[Name(id='M', ctx=Store())], value=BinOp(left=Num(n=2), op=Pow(), right=Name(id='m', ctx=Load())))
Assign(targets=[Name(id='qae', ctx=Store())], value=Attribute(value=Name(id='result', ctx=Load()), attr='estimation', ctx=Load()))
Assign(targets=[Name(id='a_i', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='asarray', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='result', ctx=Load()), attr='samples', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[]))
Assign(targets=[Name(id='p_i', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='asarray', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='result', ctx=Load()), attr='samples', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[]))
FunctionDef(name='loglikelihood', args=arguments(args=[arg(arg='a', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sum', ctx=Load()), args=[BinOp(left=BinOp(left=Attribute(value=Name(id='result', ctx=Load()), attr='shots', ctx=Load()), op=Mult(), right=Name(id='p_i', ctx=Load())), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='log', ctx=Load()), args=[Call(func=Name(id='pdf_a', ctx=Load()), args=[Name(id='a_i', ctx=Load()), Name(id='a', ctx=Load()), Name(id='m', ctx=Load())], keywords=[])], keywords=[]))], keywords=[]))], decorator_list=[], returns=None)
Assign(targets=[Name(id='y', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='round', ctx=Load()), args=[BinOp(left=BinOp(left=Name(id='M', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='arcsin', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sqrt', ctx=Load()), args=[Name(id='qae', ctx=Load())], keywords=[])], keywords=[])), op=Div(), right=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()))], keywords=[])], keywords=[]))
If(test=Compare(left=Name(id='y', ctx=Load()), ops=[Eq()], comparators=[Num(n=0)]), body=[Assign(targets=[Name(id='right_of_qae', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[BinOp(left=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Mult(), right=BinOp(left=Name(id='y', ctx=Load()), op=Add(), right=Num(n=1))), op=Div(), right=Name(id='M', ctx=Load()))], keywords=[]), op=Pow(), right=Num(n=2))), Assign(targets=[Name(id='bubbles', ctx=Store())], value=List(elts=[Name(id='qae', ctx=Load()), Name(id='right_of_qae', ctx=Load())], ctx=Load()))], orelse=[If(test=Compare(left=Name(id='y', ctx=Load()), ops=[Eq()], comparators=[Call(func=Name(id='int', ctx=Load()), args=[BinOp(left=Name(id='M', ctx=Load()), op=Div(), right=Num(n=2))], keywords=[])]), body=[Assign(targets=[Name(id='left_of_qae', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[BinOp(left=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Mult(), right=BinOp(left=Name(id='y', ctx=Load()), op=Sub(), right=Num(n=1))), op=Div(), right=Name(id='M', ctx=Load()))], keywords=[]), op=Pow(), right=Num(n=2))), Assign(targets=[Name(id='bubbles', ctx=Store())], value=List(elts=[Name(id='left_of_qae', ctx=Load()), Name(id='qae', ctx=Load())], ctx=Load()))], orelse=[Assign(targets=[Name(id='left_of_qae', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[BinOp(left=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Mult(), right=BinOp(left=Name(id='y', ctx=Load()), op=Sub(), right=Num(n=1))), op=Div(), right=Name(id='M', ctx=Load()))], keywords=[]), op=Pow(), right=Num(n=2))), Assign(targets=[Name(id='right_of_qae', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[BinOp(left=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Mult(), right=BinOp(left=Name(id='y', ctx=Load()), op=Add(), right=Num(n=1))), op=Div(), right=Name(id='M', ctx=Load()))], keywords=[]), op=Pow(), right=Num(n=2))), Assign(targets=[Name(id='bubbles', ctx=Store())], value=List(elts=[Name(id='left_of_qae', ctx=Load()), Name(id='qae', ctx=Load()), Name(id='right_of_qae', ctx=Load())], ctx=Load()))])])
Assign(targets=[Name(id='a_opt', ctx=Store())], value=Name(id='qae', ctx=Load()))
Assign(targets=[Name(id='loglik_opt', ctx=Store())], value=Call(func=Name(id='loglikelihood', ctx=Load()), args=[Name(id='a_opt', ctx=Load())], keywords=[]))
For(target=Tuple(elts=[Name(id='a', ctx=Store()), Name(id='b', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='zip', ctx=Load()), args=[Subscript(value=Name(id='bubbles', ctx=Load()), slice=Slice(lower=None, upper=UnaryOp(op=USub(), operand=Num(n=1)), step=None), ctx=Load()), Subscript(value=Name(id='bubbles', ctx=Load()), slice=Slice(lower=Num(n=1), upper=None, step=None), ctx=Load())], keywords=[]), body=[Assign(targets=[Tuple(elts=[Name(id='locmax', ctx=Store()), Name(id='val', ctx=Store())], ctx=Store())], value=Call(func=Name(id='bisect_max', ctx=Load()), args=[Name(id='loglikelihood', ctx=Load()), Name(id='a', ctx=Load()), Name(id='b', ctx=Load())], keywords=[keyword(arg='retval', value=NameConstant(value=True))])), If(test=Compare(left=Name(id='val', ctx=Load()), ops=[Gt()], comparators=[Name(id='loglik_opt', ctx=Load())]), body=[Assign(targets=[Name(id='a_opt', ctx=Store())], value=Name(id='locmax', ctx=Load())), Assign(targets=[Name(id='loglik_opt', ctx=Store())], value=Name(id='val', ctx=Load()))], orelse=[])], orelse=[])
If(test=Name(id='apply_post_processing', ctx=Load()), body=[Return(value=Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='post_processing', ctx=Load()), args=[Name(id='a_opt', ctx=Load())], keywords=[]))], orelse=[])
Return(value=Name(id='a_opt', ctx=Load()))
Name(id='staticmethod', ctx=Load())
Name(id='float', ctx=Load())
arguments(args=[arg(arg='self', annotation=None), arg(arg='estimation_problem', annotation=Name(id='EstimationProblem', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Expr(value=Str(s='Run the amplitude estimation algorithm on provided estimation problem.\n\n        Args:\n            estimation_problem: The estimation problem.\n\n        Returns:\n            An amplitude estimation results object.\n\n        Raises:\n            ValueError: If `state_preparation` or `objective_qubits` are not set in the\n                `estimation_problem`.\n        '))
If(test=Compare(left=Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='state_preparation', ctx=Load()), ops=[Is()], comparators=[NameConstant(value=None)]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Str(s='The state_preparation property of the estimation problem must be set.')], keywords=[]), cause=None)], orelse=[])
If(test=Compare(left=Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='objective_qubits', ctx=Load()), ops=[Is()], comparators=[NameConstant(value=None)]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Str(s='The objective_qubits property of the estimation problem must be set.')], keywords=[]), cause=None)], orelse=[])
Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Name(id='AmplitudeEstimationResult', ctx=Load()), args=[], keywords=[]))
Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='num_evaluation_qubits', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Load()))
Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='post_processing', ctx=Store())], value=Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='post_processing', ctx=Load()))
If(test=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()), attr='is_statevector', ctx=Load()), body=[Assign(targets=[Name(id='circuit', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='construct_circuit', ctx=Load()), args=[Name(id='estimation_problem', ctx=Load())], keywords=[keyword(arg='measurement', value=NameConstant(value=False))])), Assign(targets=[Name(id='statevector', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()), attr='execute', ctx=Load()), args=[Name(id='circuit', ctx=Load())], keywords=[]), attr='get_statevector', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='circuit_results', ctx=Store())], value=Name(id='statevector', ctx=Load())), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='shots', ctx=Store())], value=Num(n=1))], orelse=[Assign(targets=[Name(id='circuit', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='construct_circuit', ctx=Load()), args=[Name(id='estimation_problem', ctx=Load())], keywords=[keyword(arg='measurement', value=NameConstant(value=True))])), Assign(targets=[Name(id='counts', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()), attr='execute', ctx=Load()), args=[Name(id='circuit', ctx=Load())], keywords=[]), attr='get_counts', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='circuit_results', ctx=Store())], value=Name(id='counts', ctx=Load())), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='shots', ctx=Store())], value=Call(func=Name(id='sum', ctx=Load()), args=[Call(func=Attribute(value=Name(id='counts', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[]))])
Assign(targets=[Tuple(elts=[Name(id='samples', ctx=Store()), Name(id='measurements', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='evaluate_measurements', ctx=Load()), args=[Attribute(value=Name(id='result', ctx=Load()), attr='circuit_results', ctx=Load())], keywords=[]))
Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='samples', ctx=Store())], value=Name(id='samples', ctx=Load()))
Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='samples_processed', ctx=Store())], value=DictComp(key=Call(func=Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='post_processing', ctx=Load()), args=[Name(id='a', ctx=Load())], keywords=[]), value=Name(id='p', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='a', ctx=Store()), Name(id='p', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='samples', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), ifs=[], is_async=0)]))
Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='measurements', ctx=Store())], value=Name(id='measurements', ctx=Load()))
Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='max_probability', ctx=Store())], value=Num(n=0))
For(target=Tuple(elts=[Name(id='amplitude', ctx=Store()), Tuple(elts=[Name(id='mapped', ctx=Store()), Name(id='prob', ctx=Store())], ctx=Store())], ctx=Store()), iter=Call(func=Name(id='zip', ctx=Load()), args=[Call(func=Attribute(value=Name(id='samples', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Attribute(value=Name(id='result', ctx=Load()), attr='samples_processed', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='prob', ctx=Load()), ops=[Gt()], comparators=[Attribute(value=Name(id='result', ctx=Load()), attr='max_probability', ctx=Load())]), body=[Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='max_probability', ctx=Store())], value=Name(id='prob', ctx=Load())), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='estimation', ctx=Store())], value=Name(id='amplitude', ctx=Load())), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='estimation_processed', ctx=Store())], value=Name(id='mapped', ctx=Load()))], orelse=[])], orelse=[])
Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='num_oracle_queries', ctx=Store())], value=BinOp(left=Attribute(value=Name(id='result', ctx=Load()), attr='shots', ctx=Load()), op=Mult(), right=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='_M', ctx=Load()), op=Sub(), right=Num(n=1))))
Assign(targets=[Name(id='mle', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='compute_mle', ctx=Load()), args=[Name(id='result', ctx=Load())], keywords=[]))
Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='mle', ctx=Store())], value=Name(id='mle', ctx=Load()))
Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='mle_processed', ctx=Store())], value=Call(func=Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='post_processing', ctx=Load()), args=[Name(id='mle', ctx=Load())], keywords=[]))
Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='confidence_interval', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='compute_confidence_interval', ctx=Load()), args=[Name(id='result', ctx=Load())], keywords=[]))
Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='confidence_interval_processed', ctx=Store())], value=Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='post_processing', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='value', ctx=Store()), iter=Attribute(value=Name(id='result', ctx=Load()), attr='confidence_interval', ctx=Load()), ifs=[], is_async=0)])], keywords=[]))
Return(value=Name(id='result', ctx=Load()))
Str(s='AmplitudeEstimationResult')
arguments(args=[arg(arg='result', annotation=Str(s='AmplitudeEstimationResult')), arg(arg='alpha', annotation=Name(id='float', ctx=Load())), arg(arg='kind', annotation=Name(id='str', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[Num(n=0.05), Str(s='likelihood_ratio')])
Expr(value=Str(s="Compute the (1 - alpha) confidence interval.\n\n        Args:\n            result: An amplitude estimation result for which to compute the confidence interval.\n            alpha: Confidence level: compute the (1 - alpha) confidence interval.\n            kind: The method to compute the confidence interval, can be 'fisher', 'observed_fisher'\n                or 'likelihood_ratio' (default)\n\n        Returns:\n            The (1 - alpha) confidence interval of the specified kind.\n\n        Raises:\n            AquaError: If 'mle' is not in self._ret.keys() (i.e. `run` was not called yet).\n            NotImplementedError: If the confidence interval method `kind` is not implemented.\n        "))
If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Attribute(value=Name(id='result', ctx=Load()), attr='circuit_results', ctx=Load()), Tuple(elts=[Name(id='list', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())], ctx=Load())], keywords=[]), body=[Return(value=Tuple(elts=[Attribute(value=Name(id='result', ctx=Load()), attr='mle', ctx=Load()), Attribute(value=Name(id='result', ctx=Load()), attr='mle', ctx=Load())], ctx=Load()))], orelse=[])
If(test=Compare(left=Name(id='kind', ctx=Load()), ops=[In()], comparators=[List(elts=[Str(s='likelihood_ratio'), Str(s='lr')], ctx=Load())]), body=[Return(value=Call(func=Name(id='_likelihood_ratio_confint', ctx=Load()), args=[Name(id='result', ctx=Load()), Name(id='alpha', ctx=Load())], keywords=[]))], orelse=[])
If(test=Compare(left=Name(id='kind', ctx=Load()), ops=[In()], comparators=[List(elts=[Str(s='fisher'), Str(s='fi')], ctx=Load())]), body=[Return(value=Call(func=Name(id='_fisher_confint', ctx=Load()), args=[Name(id='result', ctx=Load()), Name(id='alpha', ctx=Load())], keywords=[keyword(arg='observed', value=NameConstant(value=False))]))], orelse=[])
If(test=Compare(left=Name(id='kind', ctx=Load()), ops=[In()], comparators=[List(elts=[Str(s='observed_fisher'), Str(s='observed_information'), Str(s='oi')], ctx=Load())]), body=[Return(value=Call(func=Name(id='_fisher_confint', ctx=Load()), args=[Name(id='result', ctx=Load()), Name(id='alpha', ctx=Load())], keywords=[keyword(arg='observed', value=NameConstant(value=True))]))], orelse=[])
Raise(exc=Call(func=Name(id='NotImplementedError', ctx=Load()), args=[JoinedStr(values=[Str(s='CI `'), FormattedValue(value=Name(id='kind', ctx=Load()), conversion=-1, format_spec=None), Str(s='` is not implemented.')])], keywords=[]), cause=None)
Name(id='staticmethod', ctx=Load())
Subscript(value=Name(id='Tuple', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='float', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load())), ctx=Load())
Load()
Str(s='The ``AmplitudeEstimation`` result object.')
arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[]))
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_num_evaluation_qubits', ctx=Store())], value=NameConstant(value=None))
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_mle', ctx=Store())], value=NameConstant(value=None))
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_mle_processed', ctx=Store())], value=NameConstant(value=None))
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_samples', ctx=Store())], value=NameConstant(value=None))
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_samples_processed', ctx=Store())], value=NameConstant(value=None))
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_y_measurements', ctx=Store())], value=NameConstant(value=None))
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_max_probability', ctx=Store())], value=NameConstant(value=None))
NameConstant(value=None)
arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Expr(value=Str(s='Returns the number of evaluation qubits.'))
Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_num_evaluation_qubits', ctx=Load()))
Name(id='property', ctx=Load())
Name(id='int', ctx=Load())
arguments(args=[arg(arg='self', annotation=None), arg(arg='num_evaluation_qubits', annotation=Name(id='int', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Expr(value=Str(s='Set the number of evaluation qubits.'))
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_num_evaluation_qubits', ctx=Store())], value=Name(id='num_evaluation_qubits', ctx=Load()))
Attribute(value=Name(id='num_evaluation_qubits', ctx=Load()), attr='setter', ctx=Load())
NameConstant(value=None)
arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Expr(value=Str(s='Return the post-processed MLE for the amplitude.'))
Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_mle_processed', ctx=Load()))
Name(id='property', ctx=Load())
Name(id='float', ctx=Load())
arguments(args=[arg(arg='self', annotation=None), arg(arg='value', annotation=Name(id='float', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Expr(value=Str(s='Set the post-processed MLE for the amplitude.'))
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_mle_processed', ctx=Store())], value=Name(id='value', ctx=Load()))
Attribute(value=Name(id='mle_processed', ctx=Load()), attr='setter', ctx=Load())
NameConstant(value=None)
arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Expr(value=Str(s='Return the post-processed measurement samples with their measurement probability.'))
Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_samples_processed', ctx=Load()))
Name(id='property', ctx=Load())
Subscript(value=Name(id='Dict', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='float', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load())), ctx=Load())
arguments(args=[arg(arg='self', annotation=None), arg(arg='value', annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='float', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load())), ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Expr(value=Str(s='Set the post-processed measurement samples.'))
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_samples_processed', ctx=Store())], value=Name(id='value', ctx=Load()))
Attribute(value=Name(id='samples_processed', ctx=Load()), attr='setter', ctx=Load())
NameConstant(value=None)
arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Expr(value=Str(s='Return the MLE for the amplitude, in $[0, 1]$.'))
Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_mle', ctx=Load()))
Name(id='property', ctx=Load())
Name(id='float', ctx=Load())
arguments(args=[arg(arg='self', annotation=None), arg(arg='value', annotation=Name(id='float', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Expr(value=Str(s='Set the MLE for the amplitude, in $[0, 1]$.'))
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_mle', ctx=Store())], value=Name(id='value', ctx=Load()))
Attribute(value=Name(id='mle', ctx=Load()), attr='setter', ctx=Load())
NameConstant(value=None)
arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Expr(value=Str(s='Return the measurement samples with their measurement probability.'))
Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_samples', ctx=Load()))
Name(id='property', ctx=Load())
Subscript(value=Name(id='Dict', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='float', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load())), ctx=Load())
arguments(args=[arg(arg='self', annotation=None), arg(arg='value', annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='float', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load())), ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Expr(value=Str(s='Set the measurement samples with their measurement probability.'))
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_samples', ctx=Store())], value=Name(id='value', ctx=Load()))
Attribute(value=Name(id='samples', ctx=Load()), attr='setter', ctx=Load())
NameConstant(value=None)
arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Expr(value=Str(s='Return the measurements as integers with their measurement probability.'))
Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_y_measurements', ctx=Load()))
Name(id='property', ctx=Load())
Subscript(value=Name(id='Dict', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load())), ctx=Load())
arguments(args=[arg(arg='self', annotation=None), arg(arg='value', annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load())), ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Expr(value=Str(s='Set the measurements as integers with their measurement probability.'))
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_y_measurements', ctx=Store())], value=Name(id='value', ctx=Load()))
Attribute(value=Name(id='measurements', ctx=Load()), attr='setter', ctx=Load())
NameConstant(value=None)
arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Expr(value=Str(s='Return the maximum sampling probability.'))
Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_max_probability', ctx=Load()))
Name(id='property', ctx=Load())
Name(id='float', ctx=Load())
arguments(args=[arg(arg='self', annotation=None), arg(arg='value', annotation=Name(id='float', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Expr(value=Str(s='Set the maximum sampling probability.'))
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_max_probability', ctx=Store())], value=Name(id='value', ctx=Load()))
Attribute(value=Name(id='max_probability', ctx=Load()), attr='setter', ctx=Load())
NameConstant(value=None)
arg(arg='result', annotation=Name(id='AmplitudeEstimationResult', ctx=Load()))
arg(arg='observed', annotation=Name(id='bool', ctx=Load()))
NameConstant(value=False)
Str(s='Computes the Fisher information for the output of the previous run.\n\n    Args:\n        result: An amplitude estimation result for which to compute the confidence interval.\n        observed: If True, the observed Fisher information is returned, otherwise\n            the expected Fisher information.\n\n    Returns:\n        The Fisher information.\n    ')
Name(id='fisher_information', ctx=Store())
NameConstant(value=None)
Name(id='mlv', ctx=Store())
Attribute(value=Name(id='result', ctx=Load()), attr='mle', ctx=Load())
Name(id='m', ctx=Store())
Attribute(value=Name(id='result', ctx=Load()), attr='num_evaluation_qubits', ctx=Load())
Name(id='M', ctx=Store())
BinOp(left=Num(n=2), op=Pow(), right=Name(id='m', ctx=Load()))
Name(id='observed', ctx=Load())
Assign(targets=[Name(id='a_i', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='asarray', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='result', ctx=Load()), attr='samples', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[]))
Assign(targets=[Name(id='p_i', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='asarray', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='result', ctx=Load()), attr='samples', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[]))
Assign(targets=[Name(id='fisher_information', ctx=Store())], value=Call(func=Name(id='sum', ctx=Load()), args=[GeneratorExp(elt=BinOp(left=Name(id='p', ctx=Load()), op=Mult(), right=BinOp(left=Call(func=Name(id='derivative_log_pdf_a', ctx=Load()), args=[Name(id='a', ctx=Load()), Name(id='mlv', ctx=Load()), Name(id='m', ctx=Load())], keywords=[]), op=Pow(), right=Num(n=2))), generators=[comprehension(target=Tuple(elts=[Name(id='p', ctx=Store()), Name(id='a', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='zip', ctx=Load()), args=[Name(id='p_i', ctx=Load()), Name(id='a_i', ctx=Load())], keywords=[]), ifs=[], is_async=0)])], keywords=[]))
FunctionDef(name='integrand', args=arguments(args=[arg(arg='x', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Return(value=BinOp(left=BinOp(left=Call(func=Name(id='derivative_log_pdf_a', ctx=Load()), args=[Name(id='x', ctx=Load()), Name(id='mlv', ctx=Load()), Name(id='m', ctx=Load())], keywords=[]), op=Pow(), right=Num(n=2)), op=Mult(), right=Call(func=Name(id='pdf_a', ctx=Load()), args=[Name(id='x', ctx=Load()), Name(id='mlv', ctx=Load()), Name(id='m', ctx=Load())], keywords=[])))], decorator_list=[], returns=None)
Assign(targets=[Name(id='grid', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[BinOp(left=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='arange', ctx=Load()), args=[BinOp(left=BinOp(left=Name(id='M', ctx=Load()), op=Div(), right=Num(n=2)), op=Add(), right=Num(n=1))], keywords=[])), op=Div(), right=Name(id='M', ctx=Load()))], keywords=[]), op=Pow(), right=Num(n=2)))
Assign(targets=[Name(id='fisher_information', ctx=Store())], value=Call(func=Name(id='sum', ctx=Load()), args=[GeneratorExp(elt=Call(func=Name(id='integrand', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='grid', ctx=Load()), ifs=[], is_async=0)])], keywords=[]))
Name(id='fisher_information', ctx=Load())
Load()
arg(arg='result', annotation=Name(id='AmplitudeEstimationResult', ctx=Load()))
arg(arg='alpha', annotation=Name(id='float', ctx=Load()))
arg(arg='observed', annotation=Name(id='bool', ctx=Load()))
NameConstant(value=False)
Str(s='Compute the Fisher information confidence interval for the MLE of the previous run.\n\n    Args:\n        result: An amplitude estimation result for which to compute the confidence interval.\n        alpha: Specifies the (1 - alpha) confidence level (0 < alpha < 1).\n        observed: If True, the observed Fisher information is used to construct the\n            confidence interval, otherwise the expected Fisher information.\n\n    Returns:\n        The Fisher information confidence interval.\n    ')
Name(id='std', ctx=Store())
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sqrt', ctx=Load()), args=[BinOp(left=Attribute(value=Name(id='result', ctx=Load()), attr='shots', ctx=Load()), op=Mult(), right=Call(func=Name(id='_compute_fisher_information', ctx=Load()), args=[Name(id='result', ctx=Load()), Name(id='observed', ctx=Load())], keywords=[]))], keywords=[])
Name(id='confint', ctx=Store())
BinOp(left=Attribute(value=Name(id='result', ctx=Load()), attr='mle', ctx=Load()), op=Add(), right=BinOp(left=BinOp(left=Call(func=Attribute(value=Name(id='norm', ctx=Load()), attr='ppf', ctx=Load()), args=[BinOp(left=Num(n=1), op=Sub(), right=BinOp(left=Name(id='alpha', ctx=Load()), op=Div(), right=Num(n=2)))], keywords=[]), op=Div(), right=Name(id='std', ctx=Load())), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='array', ctx=Load()), args=[List(elts=[UnaryOp(op=USub(), operand=Num(n=1)), Num(n=1)], ctx=Load())], keywords=[])))
Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='post_processing', ctx=Load()), args=[Name(id='bound', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='bound', ctx=Store()), iter=Name(id='confint', ctx=Load()), ifs=[], is_async=0)])], keywords=[])
Name(id='List', ctx=Load())
Index(value=Name(id='float', ctx=Load()))
Load()
arg(arg='result', annotation=Name(id='AmplitudeEstimationResult', ctx=Load()))
arg(arg='alpha', annotation=Name(id='float', ctx=Load()))
Str(s='Compute the likelihood ratio confidence interval for the MLE of the previous run.\n\n    Args:\n        result: An amplitude estimation result for which to compute the confidence interval.\n        alpha: Specifies the (1 - alpha) confidence level (0 < alpha < 1).\n\n    Returns:\n        The likelihood ratio confidence interval.\n    ')
Name(id='m', ctx=Store())
Attribute(value=Name(id='result', ctx=Load()), attr='num_evaluation_qubits', ctx=Load())
Name(id='M', ctx=Store())
BinOp(left=Num(n=2), op=Pow(), right=Name(id='m', ctx=Load()))
Name(id='qae', ctx=Store())
Attribute(value=Name(id='result', ctx=Load()), attr='estimation', ctx=Load())
Name(id='y', ctx=Store())
Call(func=Name(id='int', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='round', ctx=Load()), args=[BinOp(left=BinOp(left=Name(id='M', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='arcsin', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sqrt', ctx=Load()), args=[Name(id='qae', ctx=Load())], keywords=[])], keywords=[])), op=Div(), right=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()))], keywords=[])], keywords=[])
Compare(left=Name(id='y', ctx=Load()), ops=[Eq()], comparators=[Num(n=0)])
Assign(targets=[Name(id='right_of_qae', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[BinOp(left=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Mult(), right=BinOp(left=Name(id='y', ctx=Load()), op=Add(), right=Num(n=1))), op=Div(), right=Name(id='M', ctx=Load()))], keywords=[]), op=Pow(), right=Num(n=2)))
Assign(targets=[Name(id='bubbles', ctx=Store())], value=List(elts=[Name(id='qae', ctx=Load()), Name(id='right_of_qae', ctx=Load())], ctx=Load()))
If(test=Compare(left=Name(id='y', ctx=Load()), ops=[Eq()], comparators=[Call(func=Name(id='int', ctx=Load()), args=[BinOp(left=Name(id='M', ctx=Load()), op=Div(), right=Num(n=2))], keywords=[])]), body=[Assign(targets=[Name(id='left_of_qae', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[BinOp(left=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Mult(), right=BinOp(left=Name(id='y', ctx=Load()), op=Sub(), right=Num(n=1))), op=Div(), right=Name(id='M', ctx=Load()))], keywords=[]), op=Pow(), right=Num(n=2))), Assign(targets=[Name(id='bubbles', ctx=Store())], value=List(elts=[Name(id='left_of_qae', ctx=Load()), Name(id='qae', ctx=Load())], ctx=Load()))], orelse=[Assign(targets=[Name(id='left_of_qae', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[BinOp(left=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Mult(), right=BinOp(left=Name(id='y', ctx=Load()), op=Sub(), right=Num(n=1))), op=Div(), right=Name(id='M', ctx=Load()))], keywords=[]), op=Pow(), right=Num(n=2))), Assign(targets=[Name(id='right_of_qae', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[BinOp(left=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Mult(), right=BinOp(left=Name(id='y', ctx=Load()), op=Add(), right=Num(n=1))), op=Div(), right=Name(id='M', ctx=Load()))], keywords=[]), op=Pow(), right=Num(n=2))), Assign(targets=[Name(id='bubbles', ctx=Store())], value=List(elts=[Name(id='left_of_qae', ctx=Load()), Name(id='qae', ctx=Load()), Name(id='right_of_qae', ctx=Load())], ctx=Load()))])
Name(id='a_i', ctx=Store())
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='asarray', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='result', ctx=Load()), attr='samples', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[])
Name(id='p_i', ctx=Store())
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='asarray', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='result', ctx=Load()), attr='samples', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[])
arguments(args=[arg(arg='a', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Return(value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sum', ctx=Load()), args=[BinOp(left=BinOp(left=Attribute(value=Name(id='result', ctx=Load()), attr='shots', ctx=Load()), op=Mult(), right=Name(id='p_i', ctx=Load())), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='log', ctx=Load()), args=[Call(func=Name(id='pdf_a', ctx=Load()), args=[Name(id='a_i', ctx=Load()), Name(id='a', ctx=Load()), Name(id='m', ctx=Load())], keywords=[])], keywords=[]))], keywords=[]))
Name(id='loglik_mle', ctx=Store())
Call(func=Name(id='loglikelihood', ctx=Load()), args=[Attribute(value=Name(id='result', ctx=Load()), attr='mle', ctx=Load())], keywords=[])
Name(id='thres', ctx=Store())
BinOp(left=Name(id='loglik_mle', ctx=Load()), op=Sub(), right=BinOp(left=Call(func=Attribute(value=Name(id='chi2', ctx=Load()), attr='ppf', ctx=Load()), args=[BinOp(left=Num(n=1), op=Sub(), right=Name(id='alpha', ctx=Load()))], keywords=[keyword(arg='df', value=Num(n=1))]), op=Div(), right=Num(n=2)))
arguments(args=[arg(arg='x', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Return(value=BinOp(left=Call(func=Name(id='loglikelihood', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), op=Sub(), right=Name(id='thres', ctx=Load())))
Name(id='lower', ctx=Store())
Name(id='upper', ctx=Store())
Attribute(value=Name(id='result', ctx=Load()), attr='mle', ctx=Load())
Tuple(elts=[Name(id='a', ctx=Store()), Name(id='b', ctx=Store())], ctx=Store())
Call(func=Name(id='zip', ctx=Load()), args=[Subscript(value=Name(id='bubbles', ctx=Load()), slice=Slice(lower=None, upper=UnaryOp(op=USub(), operand=Num(n=1)), step=None), ctx=Load()), Subscript(value=Name(id='bubbles', ctx=Load()), slice=Slice(lower=Num(n=1), upper=None, step=None), ctx=Load())], keywords=[])
Assign(targets=[Tuple(elts=[Name(id='locmax', ctx=Store()), Name(id='val', ctx=Store())], ctx=Store())], value=Call(func=Name(id='bisect_max', ctx=Load()), args=[Name(id='loglikelihood', ctx=Load()), Name(id='a', ctx=Load()), Name(id='b', ctx=Load())], keywords=[keyword(arg='retval', value=NameConstant(value=True))]))
If(test=Compare(left=Name(id='val', ctx=Load()), ops=[GtE()], comparators=[Name(id='thres', ctx=Load())]), body=[If(test=Compare(left=BinOp(left=Call(func=Name(id='cut', ctx=Load()), args=[Name(id='a', ctx=Load())], keywords=[]), op=Mult(), right=Call(func=Name(id='cut', ctx=Load()), args=[Name(id='locmax', ctx=Load())], keywords=[])), ops=[Lt()], comparators=[Num(n=0)]), body=[Assign(targets=[Name(id='left', ctx=Store())], value=Call(func=Name(id='bisect', ctx=Load()), args=[Name(id='cut', ctx=Load()), Name(id='a', ctx=Load()), Name(id='locmax', ctx=Load())], keywords=[])), Assign(targets=[Name(id='lower', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='minimum', ctx=Load()), args=[Name(id='lower', ctx=Load()), Name(id='left', ctx=Load())], keywords=[]))], orelse=[]), If(test=Compare(left=BinOp(left=Call(func=Name(id='cut', ctx=Load()), args=[Name(id='locmax', ctx=Load())], keywords=[]), op=Mult(), right=Call(func=Name(id='cut', ctx=Load()), args=[Name(id='b', ctx=Load())], keywords=[])), ops=[Lt()], comparators=[Num(n=0)]), body=[Assign(targets=[Name(id='right', ctx=Store())], value=Call(func=Name(id='bisect', ctx=Load()), args=[Name(id='cut', ctx=Load()), Name(id='locmax', ctx=Load()), Name(id='b', ctx=Load())], keywords=[])), Assign(targets=[Name(id='upper', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='maximum', ctx=Load()), args=[Name(id='upper', ctx=Load()), Name(id='right', ctx=Load())], keywords=[]))], orelse=[])], orelse=[])
Name(id='confint', ctx=Store())
List(elts=[Name(id='lower', ctx=Load()), Name(id='upper', ctx=Load())], ctx=Load())
Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='post_processing', ctx=Load()), args=[Name(id='bound', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='bound', ctx=Store()), iter=Name(id='confint', ctx=Load()), ifs=[], is_async=0)])], keywords=[])
Name(id='List', ctx=Load())
Index(value=Name(id='float', ctx=Load()))
Load()
arg(arg='self', annotation=None)
arg(arg='num_eval_qubits', annotation=Name(id='int', ctx=Load()))
arg(arg='phase_estimation_circuit', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Name(id='QuantumCircuit', ctx=Load())), ctx=Load()))
arg(arg='iqft', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Name(id='QuantumCircuit', ctx=Load())), ctx=Load()))
arg(arg='quantum_instance', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='QuantumInstance', ctx=Load()), Name(id='Backend', ctx=Load())], ctx=Load())), ctx=Load())), ctx=Load()))
NameConstant(value=None)
NameConstant(value=None)
NameConstant(value=None)
Str(s='\n        Args:\n            num_eval_qubits: The number of evaluation qubits.\n            phase_estimation_circuit: The phase estimation circuit used to run the algorithm.\n                Defaults to the standard phase estimation circuit from the circuit library,\n                `qiskit.circuit.library.PhaseEstimation` when None.\n            iqft: The inverse quantum Fourier transform component, defaults to using a standard\n                implementation from `qiskit.circuit.library.QFT` when None.\n            quantum_instance: The backend (or `QuantumInstance`) to execute the circuits on.\n\n        Raises:\n            ValueError: If the number of evaluation qubits is smaller than 1.\n        ')
Compare(left=Name(id='num_eval_qubits', ctx=Load()), ops=[Lt()], comparators=[Num(n=1)])
Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Str(s='The number of evaluation qubits must at least be 1.')], keywords=[]), cause=None)
Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[])
Attribute(value=Name(id='self', ctx=Load()), attr='quantum_instance', ctx=Store())
Name(id='quantum_instance', ctx=Load())
Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Store())
Name(id='num_eval_qubits', ctx=Load())
Attribute(value=Name(id='self', ctx=Load()), attr='_M', ctx=Store())
BinOp(left=Num(n=2), op=Pow(), right=Name(id='num_eval_qubits', ctx=Load()))
Attribute(value=Name(id='self', ctx=Load()), attr='_iqft', ctx=Store())
Name(id='iqft', ctx=Load())
Attribute(value=Name(id='self', ctx=Load()), attr='_pec', ctx=Store())
Name(id='phase_estimation_circuit', ctx=Load())
arg(arg='self', annotation=None)
Str(s='Get the quantum instance.\n\n        Returns:\n            The quantum instance used to run this algorithm.\n        ')
Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load())
Load()
Name(id='Optional', ctx=Load())
Index(value=Name(id='QuantumInstance', ctx=Load()))
Load()
arg(arg='self', annotation=None)
arg(arg='quantum_instance', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='QuantumInstance', ctx=Load()), Name(id='Backend', ctx=Load())], ctx=Load())), ctx=Load()))
Str(s='Set quantum instance.\n\n        Args:\n            quantum_instance: The quantum instance used to run this algorithm.\n        ')
Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='quantum_instance', ctx=Load()), Name(id='Backend', ctx=Load())], keywords=[])
Assign(targets=[Name(id='quantum_instance', ctx=Store())], value=Call(func=Name(id='QuantumInstance', ctx=Load()), args=[Name(id='quantum_instance', ctx=Load())], keywords=[]))
Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Store())
Name(id='quantum_instance', ctx=Load())
Name(id='quantum_instance', ctx=Load())
Load()
arg(arg='self', annotation=None)
arg(arg='estimation_problem', annotation=Name(id='EstimationProblem', ctx=Load()))
arg(arg='measurement', annotation=Name(id='bool', ctx=Load()))
NameConstant(value=False)
Str(s='Construct the Amplitude Estimation quantum circuit.\n\n        Args:\n            estimation_problem: The estimation problem for which to construct the QAE circuit.\n            measurement: Boolean flag to indicate if measurements should be included in the circuit.\n\n        Returns:\n            The QuantumCircuit object for the constructed circuit.\n        ')
Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_pec', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)])
Assign(targets=[Name(id='pec', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_pec', ctx=Load()))
ImportFrom(module='qiskit.circuit.library', names=[alias(name='PhaseEstimation', asname=None)], level=0)
Assign(targets=[Name(id='pec', ctx=Store())], value=Call(func=Name(id='PhaseEstimation', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Load()), Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='grover_operator', ctx=Load())], keywords=[keyword(arg='iqft', value=Attribute(value=Name(id='self', ctx=Load()), attr='_iqft', ctx=Load()))]))
Name(id='circuit', ctx=Store())
Call(func=Name(id='QuantumCircuit', ctx=Load()), args=[Starred(value=Attribute(value=Name(id='pec', ctx=Load()), attr='qregs', ctx=Load()), ctx=Load())], keywords=[])
Call(func=Attribute(value=Name(id='circuit', ctx=Load()), attr='compose', ctx=Load()), args=[Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='state_preparation', ctx=Load()), Call(func=Name(id='list', ctx=Load()), args=[Call(func=Name(id='range', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Load()), Attribute(value=Name(id='circuit', ctx=Load()), attr='num_qubits', ctx=Load())], keywords=[])], keywords=[])], keywords=[keyword(arg='inplace', value=NameConstant(value=True))])
Call(func=Attribute(value=Name(id='circuit', ctx=Load()), attr='compose', ctx=Load()), args=[Name(id='pec', ctx=Load())], keywords=[keyword(arg='inplace', value=NameConstant(value=True))])
Name(id='measurement', ctx=Load())
Assign(targets=[Name(id='cr', ctx=Store())], value=Call(func=Name(id='ClassicalRegister', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Load())], keywords=[]))
Expr(value=Call(func=Attribute(value=Name(id='circuit', ctx=Load()), attr='add_register', ctx=Load()), args=[Name(id='cr', ctx=Load())], keywords=[]))
Expr(value=Call(func=Attribute(value=Name(id='circuit', ctx=Load()), attr='measure', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Name(id='range', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Load())], keywords=[])], keywords=[]), Call(func=Name(id='list', ctx=Load()), args=[Call(func=Name(id='range', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Load())], keywords=[])], keywords=[])], keywords=[]))
Name(id='circuit', ctx=Load())
Load()
arg(arg='self', annotation=None)
arg(arg='circuit_results', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Subscript(value=Name(id='Dict', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load())), ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())], ctx=Load())), ctx=Load()))
arg(arg='threshold', annotation=Name(id='float', ctx=Load()))
Num(n=1e-06)
Str(s='Evaluate the results from the circuit simulation.\n\n        Given the probabilities from statevector simulation of the QAE circuit, compute the\n        probabilities that the measurements y/gridpoints a are the best estimate.\n\n        Args:\n            circuit_results: The circuit result from the QAE circuit. Can be either a counts dict\n                or a statevector.\n            threshold: Measurements with probabilities below the threshold are discarded.\n\n        Returns:\n            Dictionaries containing the a gridpoints with respective probabilities and\n                y measurements with respective probabilities, in this order.\n        ')
Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='circuit_results', ctx=Load()), Name(id='dict', ctx=Load())], keywords=[])
Assign(targets=[Tuple(elts=[Name(id='samples', ctx=Store()), Name(id='measurements', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_evaluate_count_results', ctx=Load()), args=[Name(id='circuit_results', ctx=Load())], keywords=[]))
Assign(targets=[Tuple(elts=[Name(id='samples', ctx=Store()), Name(id='measurements', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_evaluate_statevector_results', ctx=Load()), args=[Name(id='circuit_results', ctx=Load())], keywords=[]))
Name(id='samples', ctx=Store())
DictComp(key=Name(id='a', ctx=Load()), value=Name(id='p', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='a', ctx=Store()), Name(id='p', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='samples', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), ifs=[Compare(left=Name(id='p', ctx=Load()), ops=[Gt()], comparators=[Name(id='threshold', ctx=Load())])], is_async=0)])
Name(id='measurements', ctx=Store())
DictComp(key=Name(id='y', ctx=Load()), value=Name(id='p', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='y', ctx=Store()), Name(id='p', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='measurements', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), ifs=[Compare(left=Name(id='p', ctx=Load()), ops=[Gt()], comparators=[Name(id='threshold', ctx=Load())])], is_async=0)])
Tuple(elts=[Name(id='samples', ctx=Load()), Name(id='measurements', ctx=Load())], ctx=Load())
Name(id='Tuple', ctx=Load())
Index(value=Tuple(elts=[Subscript(value=Name(id='Dict', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load())), ctx=Load()), Subscript(value=Name(id='Dict', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='float', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load())), ctx=Load())], ctx=Load()))
Load()
arg(arg='self', annotation=None)
arg(arg='statevector', annotation=None)
Name(id='measurements', ctx=Store())
Call(func=Name(id='OrderedDict', ctx=Load()), args=[], keywords=[])
Name(id='num_qubits', ctx=Store())
Call(func=Name(id='int', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='log2', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='statevector', ctx=Load())], keywords=[])], keywords=[])], keywords=[])
Tuple(elts=[Name(id='i', ctx=Store()), Name(id='amplitude', ctx=Store())], ctx=Store())
Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='statevector', ctx=Load())], keywords=[])
Assign(targets=[Name(id='b', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Subscript(value=Call(func=Name(id='bin', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]), slice=Slice(lower=Num(n=2), upper=None, step=None), ctx=Load()), attr='zfill', ctx=Load()), args=[Name(id='num_qubits', ctx=Load())], keywords=[]), slice=Slice(lower=None, upper=None, step=UnaryOp(op=USub(), operand=Num(n=1))), ctx=Load()))
Assign(targets=[Name(id='y', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='b', ctx=Load()), slice=Slice(lower=None, upper=Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Load()), step=None), ctx=Load()), Num(n=2)], keywords=[]))
Assign(targets=[Subscript(value=Name(id='measurements', ctx=Load()), slice=Index(value=Name(id='y', ctx=Load())), ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='measurements', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='y', ctx=Load()), Num(n=0)], keywords=[]), op=Add(), right=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='abs', ctx=Load()), args=[Name(id='amplitude', ctx=Load())], keywords=[]), op=Pow(), right=Num(n=2))))
Name(id='samples', ctx=Store())
Call(func=Name(id='OrderedDict', ctx=Load()), args=[], keywords=[])
Tuple(elts=[Name(id='y', ctx=Store()), Name(id='probability', ctx=Store())], ctx=Store())
Call(func=Attribute(value=Name(id='measurements', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])
If(test=Compare(left=Name(id='y', ctx=Load()), ops=[GtE()], comparators=[Call(func=Name(id='int', ctx=Load()), args=[BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='_M', ctx=Load()), op=Div(), right=Num(n=2))], keywords=[])]), body=[Assign(targets=[Name(id='y', ctx=Store())], value=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='_M', ctx=Load()), op=Sub(), right=Name(id='y', ctx=Load())))], orelse=[])
Assign(targets=[Name(id='a', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='round', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='power', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[BinOp(left=BinOp(left=Name(id='y', ctx=Load()), op=Mult(), right=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load())), op=Div(), right=BinOp(left=Num(n=2), op=Pow(), right=Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Load())))], keywords=[]), Num(n=2)], keywords=[])], keywords=[keyword(arg='decimals', value=Num(n=7))]))
Assign(targets=[Subscript(value=Name(id='samples', ctx=Load()), slice=Index(value=Name(id='a', ctx=Load())), ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='samples', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='a', ctx=Load()), Num(n=0)], keywords=[]), op=Add(), right=Name(id='probability', ctx=Load())))
Tuple(elts=[Name(id='samples', ctx=Load()), Name(id='measurements', ctx=Load())], ctx=Load())
arg(arg='self', annotation=None)
arg(arg='counts', annotation=None)
Name(id='measurements', ctx=Store())
Call(func=Name(id='OrderedDict', ctx=Load()), args=[], keywords=[])
Name(id='samples', ctx=Store())
Call(func=Name(id='OrderedDict', ctx=Load()), args=[], keywords=[])
Name(id='shots', ctx=Store())
Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()), attr='_run_config', ctx=Load()), attr='shots', ctx=Load())
Tuple(elts=[Name(id='state', ctx=Store()), Name(id='count', ctx=Store())], ctx=Store())
Call(func=Attribute(value=Name(id='counts', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])
Assign(targets=[Name(id='y', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Subscript(value=Call(func=Attribute(value=Name(id='state', ctx=Load()), attr='replace', ctx=Load()), args=[Str(s=' '), Str(s='')], keywords=[]), slice=Slice(lower=None, upper=Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Load()), step=None), ctx=Load()), slice=Slice(lower=None, upper=None, step=UnaryOp(op=USub(), operand=Num(n=1))), ctx=Load()), Num(n=2)], keywords=[]))
Assign(targets=[Name(id='probability', ctx=Store())], value=BinOp(left=Name(id='count', ctx=Load()), op=Div(), right=Name(id='shots', ctx=Load())))
Assign(targets=[Subscript(value=Name(id='measurements', ctx=Load()), slice=Index(value=Name(id='y', ctx=Load())), ctx=Store())], value=Name(id='probability', ctx=Load()))
Assign(targets=[Name(id='a', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='round', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='power', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[BinOp(left=BinOp(left=Name(id='y', ctx=Load()), op=Mult(), right=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load())), op=Div(), right=BinOp(left=Num(n=2), op=Pow(), right=Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Load())))], keywords=[]), Num(n=2)], keywords=[])], keywords=[keyword(arg='decimals', value=Num(n=7))]))
Assign(targets=[Subscript(value=Name(id='samples', ctx=Load()), slice=Index(value=Name(id='a', ctx=Load())), ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='samples', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='a', ctx=Load()), Num(n=0.0)], keywords=[]), op=Add(), right=Name(id='probability', ctx=Load())))
Tuple(elts=[Name(id='samples', ctx=Load()), Name(id='measurements', ctx=Load())], ctx=Load())
arg(arg='result', annotation=Str(s='AmplitudeEstimationResult'))
arg(arg='apply_post_processing', annotation=Name(id='bool', ctx=Load()))
NameConstant(value=False)
Str(s='Compute the Maximum Likelihood Estimator (MLE).\n\n        Args:\n            result: An amplitude estimation result object.\n            apply_post_processing: If True, apply the post processing to the MLE before returning\n                it.\n\n        Returns:\n            The MLE for the provided result object.\n        ')
Name(id='m', ctx=Store())
Attribute(value=Name(id='result', ctx=Load()), attr='num_evaluation_qubits', ctx=Load())
Name(id='M', ctx=Store())
BinOp(left=Num(n=2), op=Pow(), right=Name(id='m', ctx=Load()))
Name(id='qae', ctx=Store())
Attribute(value=Name(id='result', ctx=Load()), attr='estimation', ctx=Load())
Name(id='a_i', ctx=Store())
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='asarray', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='result', ctx=Load()), attr='samples', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[])
Name(id='p_i', ctx=Store())
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='asarray', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='result', ctx=Load()), attr='samples', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[])
arguments(args=[arg(arg='a', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Return(value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sum', ctx=Load()), args=[BinOp(left=BinOp(left=Attribute(value=Name(id='result', ctx=Load()), attr='shots', ctx=Load()), op=Mult(), right=Name(id='p_i', ctx=Load())), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='log', ctx=Load()), args=[Call(func=Name(id='pdf_a', ctx=Load()), args=[Name(id='a_i', ctx=Load()), Name(id='a', ctx=Load()), Name(id='m', ctx=Load())], keywords=[])], keywords=[]))], keywords=[]))
Name(id='y', ctx=Store())
Call(func=Name(id='int', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='round', ctx=Load()), args=[BinOp(left=BinOp(left=Name(id='M', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='arcsin', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sqrt', ctx=Load()), args=[Name(id='qae', ctx=Load())], keywords=[])], keywords=[])), op=Div(), right=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()))], keywords=[])], keywords=[])
Compare(left=Name(id='y', ctx=Load()), ops=[Eq()], comparators=[Num(n=0)])
Assign(targets=[Name(id='right_of_qae', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[BinOp(left=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Mult(), right=BinOp(left=Name(id='y', ctx=Load()), op=Add(), right=Num(n=1))), op=Div(), right=Name(id='M', ctx=Load()))], keywords=[]), op=Pow(), right=Num(n=2)))
Assign(targets=[Name(id='bubbles', ctx=Store())], value=List(elts=[Name(id='qae', ctx=Load()), Name(id='right_of_qae', ctx=Load())], ctx=Load()))
If(test=Compare(left=Name(id='y', ctx=Load()), ops=[Eq()], comparators=[Call(func=Name(id='int', ctx=Load()), args=[BinOp(left=Name(id='M', ctx=Load()), op=Div(), right=Num(n=2))], keywords=[])]), body=[Assign(targets=[Name(id='left_of_qae', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[BinOp(left=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Mult(), right=BinOp(left=Name(id='y', ctx=Load()), op=Sub(), right=Num(n=1))), op=Div(), right=Name(id='M', ctx=Load()))], keywords=[]), op=Pow(), right=Num(n=2))), Assign(targets=[Name(id='bubbles', ctx=Store())], value=List(elts=[Name(id='left_of_qae', ctx=Load()), Name(id='qae', ctx=Load())], ctx=Load()))], orelse=[Assign(targets=[Name(id='left_of_qae', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[BinOp(left=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Mult(), right=BinOp(left=Name(id='y', ctx=Load()), op=Sub(), right=Num(n=1))), op=Div(), right=Name(id='M', ctx=Load()))], keywords=[]), op=Pow(), right=Num(n=2))), Assign(targets=[Name(id='right_of_qae', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[BinOp(left=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Mult(), right=BinOp(left=Name(id='y', ctx=Load()), op=Add(), right=Num(n=1))), op=Div(), right=Name(id='M', ctx=Load()))], keywords=[]), op=Pow(), right=Num(n=2))), Assign(targets=[Name(id='bubbles', ctx=Store())], value=List(elts=[Name(id='left_of_qae', ctx=Load()), Name(id='qae', ctx=Load()), Name(id='right_of_qae', ctx=Load())], ctx=Load()))])
Name(id='a_opt', ctx=Store())
Name(id='qae', ctx=Load())
Name(id='loglik_opt', ctx=Store())
Call(func=Name(id='loglikelihood', ctx=Load()), args=[Name(id='a_opt', ctx=Load())], keywords=[])
Tuple(elts=[Name(id='a', ctx=Store()), Name(id='b', ctx=Store())], ctx=Store())
Call(func=Name(id='zip', ctx=Load()), args=[Subscript(value=Name(id='bubbles', ctx=Load()), slice=Slice(lower=None, upper=UnaryOp(op=USub(), operand=Num(n=1)), step=None), ctx=Load()), Subscript(value=Name(id='bubbles', ctx=Load()), slice=Slice(lower=Num(n=1), upper=None, step=None), ctx=Load())], keywords=[])
Assign(targets=[Tuple(elts=[Name(id='locmax', ctx=Store()), Name(id='val', ctx=Store())], ctx=Store())], value=Call(func=Name(id='bisect_max', ctx=Load()), args=[Name(id='loglikelihood', ctx=Load()), Name(id='a', ctx=Load()), Name(id='b', ctx=Load())], keywords=[keyword(arg='retval', value=NameConstant(value=True))]))
If(test=Compare(left=Name(id='val', ctx=Load()), ops=[Gt()], comparators=[Name(id='loglik_opt', ctx=Load())]), body=[Assign(targets=[Name(id='a_opt', ctx=Store())], value=Name(id='locmax', ctx=Load())), Assign(targets=[Name(id='loglik_opt', ctx=Store())], value=Name(id='val', ctx=Load()))], orelse=[])
Name(id='apply_post_processing', ctx=Load())
Return(value=Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='post_processing', ctx=Load()), args=[Name(id='a_opt', ctx=Load())], keywords=[]))
Name(id='a_opt', ctx=Load())
Load()
Load()
arg(arg='self', annotation=None)
arg(arg='estimation_problem', annotation=Name(id='EstimationProblem', ctx=Load()))
Str(s='Run the amplitude estimation algorithm on provided estimation problem.\n\n        Args:\n            estimation_problem: The estimation problem.\n\n        Returns:\n            An amplitude estimation results object.\n\n        Raises:\n            ValueError: If `state_preparation` or `objective_qubits` are not set in the\n                `estimation_problem`.\n        ')
Compare(left=Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='state_preparation', ctx=Load()), ops=[Is()], comparators=[NameConstant(value=None)])
Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Str(s='The state_preparation property of the estimation problem must be set.')], keywords=[]), cause=None)
Compare(left=Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='objective_qubits', ctx=Load()), ops=[Is()], comparators=[NameConstant(value=None)])
Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Str(s='The objective_qubits property of the estimation problem must be set.')], keywords=[]), cause=None)
Name(id='result', ctx=Store())
Call(func=Name(id='AmplitudeEstimationResult', ctx=Load()), args=[], keywords=[])
Attribute(value=Name(id='result', ctx=Load()), attr='num_evaluation_qubits', ctx=Store())
Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Load())
Attribute(value=Name(id='result', ctx=Load()), attr='post_processing', ctx=Store())
Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='post_processing', ctx=Load())
Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()), attr='is_statevector', ctx=Load())
Assign(targets=[Name(id='circuit', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='construct_circuit', ctx=Load()), args=[Name(id='estimation_problem', ctx=Load())], keywords=[keyword(arg='measurement', value=NameConstant(value=False))]))
Assign(targets=[Name(id='statevector', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()), attr='execute', ctx=Load()), args=[Name(id='circuit', ctx=Load())], keywords=[]), attr='get_statevector', ctx=Load()), args=[], keywords=[]))
Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='circuit_results', ctx=Store())], value=Name(id='statevector', ctx=Load()))
Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='shots', ctx=Store())], value=Num(n=1))
Assign(targets=[Name(id='circuit', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='construct_circuit', ctx=Load()), args=[Name(id='estimation_problem', ctx=Load())], keywords=[keyword(arg='measurement', value=NameConstant(value=True))]))
Assign(targets=[Name(id='counts', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()), attr='execute', ctx=Load()), args=[Name(id='circuit', ctx=Load())], keywords=[]), attr='get_counts', ctx=Load()), args=[], keywords=[]))
Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='circuit_results', ctx=Store())], value=Name(id='counts', ctx=Load()))
Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='shots', ctx=Store())], value=Call(func=Name(id='sum', ctx=Load()), args=[Call(func=Attribute(value=Name(id='counts', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[]))
Tuple(elts=[Name(id='samples', ctx=Store()), Name(id='measurements', ctx=Store())], ctx=Store())
Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='evaluate_measurements', ctx=Load()), args=[Attribute(value=Name(id='result', ctx=Load()), attr='circuit_results', ctx=Load())], keywords=[])
Attribute(value=Name(id='result', ctx=Load()), attr='samples', ctx=Store())
Name(id='samples', ctx=Load())
Attribute(value=Name(id='result', ctx=Load()), attr='samples_processed', ctx=Store())
DictComp(key=Call(func=Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='post_processing', ctx=Load()), args=[Name(id='a', ctx=Load())], keywords=[]), value=Name(id='p', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='a', ctx=Store()), Name(id='p', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='samples', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), ifs=[], is_async=0)])
Attribute(value=Name(id='result', ctx=Load()), attr='measurements', ctx=Store())
Name(id='measurements', ctx=Load())
Attribute(value=Name(id='result', ctx=Load()), attr='max_probability', ctx=Store())
Num(n=0)
Tuple(elts=[Name(id='amplitude', ctx=Store()), Tuple(elts=[Name(id='mapped', ctx=Store()), Name(id='prob', ctx=Store())], ctx=Store())], ctx=Store())
Call(func=Name(id='zip', ctx=Load()), args=[Call(func=Attribute(value=Name(id='samples', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Attribute(value=Name(id='result', ctx=Load()), attr='samples_processed', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[])
If(test=Compare(left=Name(id='prob', ctx=Load()), ops=[Gt()], comparators=[Attribute(value=Name(id='result', ctx=Load()), attr='max_probability', ctx=Load())]), body=[Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='max_probability', ctx=Store())], value=Name(id='prob', ctx=Load())), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='estimation', ctx=Store())], value=Name(id='amplitude', ctx=Load())), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='estimation_processed', ctx=Store())], value=Name(id='mapped', ctx=Load()))], orelse=[])
Attribute(value=Name(id='result', ctx=Load()), attr='num_oracle_queries', ctx=Store())
BinOp(left=Attribute(value=Name(id='result', ctx=Load()), attr='shots', ctx=Load()), op=Mult(), right=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='_M', ctx=Load()), op=Sub(), right=Num(n=1)))
Name(id='mle', ctx=Store())
Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='compute_mle', ctx=Load()), args=[Name(id='result', ctx=Load())], keywords=[])
Attribute(value=Name(id='result', ctx=Load()), attr='mle', ctx=Store())
Name(id='mle', ctx=Load())
Attribute(value=Name(id='result', ctx=Load()), attr='mle_processed', ctx=Store())
Call(func=Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='post_processing', ctx=Load()), args=[Name(id='mle', ctx=Load())], keywords=[])
Attribute(value=Name(id='result', ctx=Load()), attr='confidence_interval', ctx=Store())
Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='compute_confidence_interval', ctx=Load()), args=[Name(id='result', ctx=Load())], keywords=[])
Attribute(value=Name(id='result', ctx=Load()), attr='confidence_interval_processed', ctx=Store())
Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='post_processing', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='value', ctx=Store()), iter=Attribute(value=Name(id='result', ctx=Load()), attr='confidence_interval', ctx=Load()), ifs=[], is_async=0)])], keywords=[])
Name(id='result', ctx=Load())
arg(arg='result', annotation=Str(s='AmplitudeEstimationResult'))
arg(arg='alpha', annotation=Name(id='float', ctx=Load()))
arg(arg='kind', annotation=Name(id='str', ctx=Load()))
Num(n=0.05)
Str(s='likelihood_ratio')
Str(s="Compute the (1 - alpha) confidence interval.\n\n        Args:\n            result: An amplitude estimation result for which to compute the confidence interval.\n            alpha: Confidence level: compute the (1 - alpha) confidence interval.\n            kind: The method to compute the confidence interval, can be 'fisher', 'observed_fisher'\n                or 'likelihood_ratio' (default)\n\n        Returns:\n            The (1 - alpha) confidence interval of the specified kind.\n\n        Raises:\n            AquaError: If 'mle' is not in self._ret.keys() (i.e. `run` was not called yet).\n            NotImplementedError: If the confidence interval method `kind` is not implemented.\n        ")
Call(func=Name(id='isinstance', ctx=Load()), args=[Attribute(value=Name(id='result', ctx=Load()), attr='circuit_results', ctx=Load()), Tuple(elts=[Name(id='list', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())], ctx=Load())], keywords=[])
Return(value=Tuple(elts=[Attribute(value=Name(id='result', ctx=Load()), attr='mle', ctx=Load()), Attribute(value=Name(id='result', ctx=Load()), attr='mle', ctx=Load())], ctx=Load()))
Compare(left=Name(id='kind', ctx=Load()), ops=[In()], comparators=[List(elts=[Str(s='likelihood_ratio'), Str(s='lr')], ctx=Load())])
Return(value=Call(func=Name(id='_likelihood_ratio_confint', ctx=Load()), args=[Name(id='result', ctx=Load()), Name(id='alpha', ctx=Load())], keywords=[]))
Compare(left=Name(id='kind', ctx=Load()), ops=[In()], comparators=[List(elts=[Str(s='fisher'), Str(s='fi')], ctx=Load())])
Return(value=Call(func=Name(id='_fisher_confint', ctx=Load()), args=[Name(id='result', ctx=Load()), Name(id='alpha', ctx=Load())], keywords=[keyword(arg='observed', value=NameConstant(value=False))]))
Compare(left=Name(id='kind', ctx=Load()), ops=[In()], comparators=[List(elts=[Str(s='observed_fisher'), Str(s='observed_information'), Str(s='oi')], ctx=Load())])
Return(value=Call(func=Name(id='_fisher_confint', ctx=Load()), args=[Name(id='result', ctx=Load()), Name(id='alpha', ctx=Load())], keywords=[keyword(arg='observed', value=NameConstant(value=True))]))
Call(func=Name(id='NotImplementedError', ctx=Load()), args=[JoinedStr(values=[Str(s='CI `'), FormattedValue(value=Name(id='kind', ctx=Load()), conversion=-1, format_spec=None), Str(s='` is not implemented.')])], keywords=[])
Load()
Name(id='Tuple', ctx=Load())
Index(value=Tuple(elts=[Name(id='float', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load()))
Load()
arg(arg='self', annotation=None)
Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[])
Attribute(value=Name(id='self', ctx=Load()), attr='_num_evaluation_qubits', ctx=Store())
NameConstant(value=None)
Attribute(value=Name(id='self', ctx=Load()), attr='_mle', ctx=Store())
NameConstant(value=None)
Attribute(value=Name(id='self', ctx=Load()), attr='_mle_processed', ctx=Store())
NameConstant(value=None)
Attribute(value=Name(id='self', ctx=Load()), attr='_samples', ctx=Store())
NameConstant(value=None)
Attribute(value=Name(id='self', ctx=Load()), attr='_samples_processed', ctx=Store())
NameConstant(value=None)
Attribute(value=Name(id='self', ctx=Load()), attr='_y_measurements', ctx=Store())
NameConstant(value=None)
Attribute(value=Name(id='self', ctx=Load()), attr='_max_probability', ctx=Store())
NameConstant(value=None)
arg(arg='self', annotation=None)
Str(s='Returns the number of evaluation qubits.')
Attribute(value=Name(id='self', ctx=Load()), attr='_num_evaluation_qubits', ctx=Load())
Load()
Load()
arg(arg='self', annotation=None)
arg(arg='num_evaluation_qubits', annotation=Name(id='int', ctx=Load()))
Str(s='Set the number of evaluation qubits.')
Attribute(value=Name(id='self', ctx=Load()), attr='_num_evaluation_qubits', ctx=Store())
Name(id='num_evaluation_qubits', ctx=Load())
Name(id='num_evaluation_qubits', ctx=Load())
Load()
arg(arg='self', annotation=None)
Str(s='Return the post-processed MLE for the amplitude.')
Attribute(value=Name(id='self', ctx=Load()), attr='_mle_processed', ctx=Load())
Load()
Load()
arg(arg='self', annotation=None)
arg(arg='value', annotation=Name(id='float', ctx=Load()))
Str(s='Set the post-processed MLE for the amplitude.')
Attribute(value=Name(id='self', ctx=Load()), attr='_mle_processed', ctx=Store())
Name(id='value', ctx=Load())
Name(id='mle_processed', ctx=Load())
Load()
arg(arg='self', annotation=None)
Str(s='Return the post-processed measurement samples with their measurement probability.')
Attribute(value=Name(id='self', ctx=Load()), attr='_samples_processed', ctx=Load())
Load()
Name(id='Dict', ctx=Load())
Index(value=Tuple(elts=[Name(id='float', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load()))
Load()
arg(arg='self', annotation=None)
arg(arg='value', annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='float', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load())), ctx=Load()))
Str(s='Set the post-processed measurement samples.')
Attribute(value=Name(id='self', ctx=Load()), attr='_samples_processed', ctx=Store())
Name(id='value', ctx=Load())
Name(id='samples_processed', ctx=Load())
Load()
arg(arg='self', annotation=None)
Str(s='Return the MLE for the amplitude, in $[0, 1]$.')
Attribute(value=Name(id='self', ctx=Load()), attr='_mle', ctx=Load())
Load()
Load()
arg(arg='self', annotation=None)
arg(arg='value', annotation=Name(id='float', ctx=Load()))
Str(s='Set the MLE for the amplitude, in $[0, 1]$.')
Attribute(value=Name(id='self', ctx=Load()), attr='_mle', ctx=Store())
Name(id='value', ctx=Load())
Name(id='mle', ctx=Load())
Load()
arg(arg='self', annotation=None)
Str(s='Return the measurement samples with their measurement probability.')
Attribute(value=Name(id='self', ctx=Load()), attr='_samples', ctx=Load())
Load()
Name(id='Dict', ctx=Load())
Index(value=Tuple(elts=[Name(id='float', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load()))
Load()
arg(arg='self', annotation=None)
arg(arg='value', annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='float', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load())), ctx=Load()))
Str(s='Set the measurement samples with their measurement probability.')
Attribute(value=Name(id='self', ctx=Load()), attr='_samples', ctx=Store())
Name(id='value', ctx=Load())
Name(id='samples', ctx=Load())
Load()
arg(arg='self', annotation=None)
Str(s='Return the measurements as integers with their measurement probability.')
Attribute(value=Name(id='self', ctx=Load()), attr='_y_measurements', ctx=Load())
Load()
Name(id='Dict', ctx=Load())
Index(value=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load()))
Load()
arg(arg='self', annotation=None)
arg(arg='value', annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load())), ctx=Load()))
Str(s='Set the measurements as integers with their measurement probability.')
Attribute(value=Name(id='self', ctx=Load()), attr='_y_measurements', ctx=Store())
Name(id='value', ctx=Load())
Name(id='measurements', ctx=Load())
Load()
arg(arg='self', annotation=None)
Str(s='Return the maximum sampling probability.')
Attribute(value=Name(id='self', ctx=Load()), attr='_max_probability', ctx=Load())
Load()
Load()
arg(arg='self', annotation=None)
arg(arg='value', annotation=Name(id='float', ctx=Load()))
Str(s='Set the maximum sampling probability.')
Attribute(value=Name(id='self', ctx=Load()), attr='_max_probability', ctx=Store())
Name(id='value', ctx=Load())
Name(id='max_probability', ctx=Load())
Load()
Name(id='AmplitudeEstimationResult', ctx=Load())
Name(id='bool', ctx=Load())
Store()
Store()
Name(id='result', ctx=Load())
Load()
Store()
Name(id='result', ctx=Load())
Load()
Store()
Num(n=2)
Pow()
Name(id='m', ctx=Load())
Load()
Name(id='a_i', ctx=Store())
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='asarray', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='result', ctx=Load()), attr='samples', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[])
Name(id='p_i', ctx=Store())
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='asarray', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='result', ctx=Load()), attr='samples', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[])
Name(id='fisher_information', ctx=Store())
Call(func=Name(id='sum', ctx=Load()), args=[GeneratorExp(elt=BinOp(left=Name(id='p', ctx=Load()), op=Mult(), right=BinOp(left=Call(func=Name(id='derivative_log_pdf_a', ctx=Load()), args=[Name(id='a', ctx=Load()), Name(id='mlv', ctx=Load()), Name(id='m', ctx=Load())], keywords=[]), op=Pow(), right=Num(n=2))), generators=[comprehension(target=Tuple(elts=[Name(id='p', ctx=Store()), Name(id='a', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='zip', ctx=Load()), args=[Name(id='p_i', ctx=Load()), Name(id='a_i', ctx=Load())], keywords=[]), ifs=[], is_async=0)])], keywords=[])
arguments(args=[arg(arg='x', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Return(value=BinOp(left=BinOp(left=Call(func=Name(id='derivative_log_pdf_a', ctx=Load()), args=[Name(id='x', ctx=Load()), Name(id='mlv', ctx=Load()), Name(id='m', ctx=Load())], keywords=[]), op=Pow(), right=Num(n=2)), op=Mult(), right=Call(func=Name(id='pdf_a', ctx=Load()), args=[Name(id='x', ctx=Load()), Name(id='mlv', ctx=Load()), Name(id='m', ctx=Load())], keywords=[])))
Name(id='grid', ctx=Store())
BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[BinOp(left=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='arange', ctx=Load()), args=[BinOp(left=BinOp(left=Name(id='M', ctx=Load()), op=Div(), right=Num(n=2)), op=Add(), right=Num(n=1))], keywords=[])), op=Div(), right=Name(id='M', ctx=Load()))], keywords=[]), op=Pow(), right=Num(n=2))
Name(id='fisher_information', ctx=Store())
Call(func=Name(id='sum', ctx=Load()), args=[GeneratorExp(elt=Call(func=Name(id='integrand', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='grid', ctx=Load()), ifs=[], is_async=0)])], keywords=[])
Load()
Name(id='AmplitudeEstimationResult', ctx=Load())
Name(id='float', ctx=Load())
Name(id='bool', ctx=Load())
Store()
Attribute(value=Name(id='np', ctx=Load()), attr='sqrt', ctx=Load())
BinOp(left=Attribute(value=Name(id='result', ctx=Load()), attr='shots', ctx=Load()), op=Mult(), right=Call(func=Name(id='_compute_fisher_information', ctx=Load()), args=[Name(id='result', ctx=Load()), Name(id='observed', ctx=Load())], keywords=[]))
Store()
Attribute(value=Name(id='result', ctx=Load()), attr='mle', ctx=Load())
Add()
BinOp(left=BinOp(left=Call(func=Attribute(value=Name(id='norm', ctx=Load()), attr='ppf', ctx=Load()), args=[BinOp(left=Num(n=1), op=Sub(), right=BinOp(left=Name(id='alpha', ctx=Load()), op=Div(), right=Num(n=2)))], keywords=[]), op=Div(), right=Name(id='std', ctx=Load())), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='array', ctx=Load()), args=[List(elts=[UnaryOp(op=USub(), operand=Num(n=1)), Num(n=1)], ctx=Load())], keywords=[]))
Name(id='tuple', ctx=Load())
GeneratorExp(elt=Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='post_processing', ctx=Load()), args=[Name(id='bound', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='bound', ctx=Store()), iter=Name(id='confint', ctx=Load()), ifs=[], is_async=0)])
Load()
Name(id='float', ctx=Load())
Name(id='AmplitudeEstimationResult', ctx=Load())
Name(id='float', ctx=Load())
Store()
Name(id='result', ctx=Load())
Load()
Store()
Num(n=2)
Pow()
Name(id='m', ctx=Load())
Store()
Name(id='result', ctx=Load())
Load()
Store()
Name(id='int', ctx=Load())
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='round', ctx=Load()), args=[BinOp(left=BinOp(left=Name(id='M', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='arcsin', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sqrt', ctx=Load()), args=[Name(id='qae', ctx=Load())], keywords=[])], keywords=[])), op=Div(), right=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()))], keywords=[])
Name(id='y', ctx=Load())
Eq()
Num(n=0)
Name(id='right_of_qae', ctx=Store())
BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[BinOp(left=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Mult(), right=BinOp(left=Name(id='y', ctx=Load()), op=Add(), right=Num(n=1))), op=Div(), right=Name(id='M', ctx=Load()))], keywords=[]), op=Pow(), right=Num(n=2))
Name(id='bubbles', ctx=Store())
List(elts=[Name(id='qae', ctx=Load()), Name(id='right_of_qae', ctx=Load())], ctx=Load())
Compare(left=Name(id='y', ctx=Load()), ops=[Eq()], comparators=[Call(func=Name(id='int', ctx=Load()), args=[BinOp(left=Name(id='M', ctx=Load()), op=Div(), right=Num(n=2))], keywords=[])])
Assign(targets=[Name(id='left_of_qae', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[BinOp(left=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Mult(), right=BinOp(left=Name(id='y', ctx=Load()), op=Sub(), right=Num(n=1))), op=Div(), right=Name(id='M', ctx=Load()))], keywords=[]), op=Pow(), right=Num(n=2)))
Assign(targets=[Name(id='bubbles', ctx=Store())], value=List(elts=[Name(id='left_of_qae', ctx=Load()), Name(id='qae', ctx=Load())], ctx=Load()))
Assign(targets=[Name(id='left_of_qae', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[BinOp(left=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Mult(), right=BinOp(left=Name(id='y', ctx=Load()), op=Sub(), right=Num(n=1))), op=Div(), right=Name(id='M', ctx=Load()))], keywords=[]), op=Pow(), right=Num(n=2)))
Assign(targets=[Name(id='right_of_qae', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[BinOp(left=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Mult(), right=BinOp(left=Name(id='y', ctx=Load()), op=Add(), right=Num(n=1))), op=Div(), right=Name(id='M', ctx=Load()))], keywords=[]), op=Pow(), right=Num(n=2)))
Assign(targets=[Name(id='bubbles', ctx=Store())], value=List(elts=[Name(id='left_of_qae', ctx=Load()), Name(id='qae', ctx=Load()), Name(id='right_of_qae', ctx=Load())], ctx=Load()))
Store()
Attribute(value=Name(id='np', ctx=Load()), attr='asarray', ctx=Load())
Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='result', ctx=Load()), attr='samples', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])], keywords=[])
Store()
Attribute(value=Name(id='np', ctx=Load()), attr='asarray', ctx=Load())
Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='result', ctx=Load()), attr='samples', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[])
arg(arg='a', annotation=None)
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sum', ctx=Load()), args=[BinOp(left=BinOp(left=Attribute(value=Name(id='result', ctx=Load()), attr='shots', ctx=Load()), op=Mult(), right=Name(id='p_i', ctx=Load())), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='log', ctx=Load()), args=[Call(func=Name(id='pdf_a', ctx=Load()), args=[Name(id='a_i', ctx=Load()), Name(id='a', ctx=Load()), Name(id='m', ctx=Load())], keywords=[])], keywords=[]))], keywords=[])
Store()
Name(id='loglikelihood', ctx=Load())
Attribute(value=Name(id='result', ctx=Load()), attr='mle', ctx=Load())
Store()
Name(id='loglik_mle', ctx=Load())
Sub()
BinOp(left=Call(func=Attribute(value=Name(id='chi2', ctx=Load()), attr='ppf', ctx=Load()), args=[BinOp(left=Num(n=1), op=Sub(), right=Name(id='alpha', ctx=Load()))], keywords=[keyword(arg='df', value=Num(n=1))]), op=Div(), right=Num(n=2))
arg(arg='x', annotation=None)
BinOp(left=Call(func=Name(id='loglikelihood', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), op=Sub(), right=Name(id='thres', ctx=Load()))
Store()
Store()
Name(id='result', ctx=Load())
Load()
Name(id='a', ctx=Store())
Name(id='b', ctx=Store())
Store()
Name(id='zip', ctx=Load())
Subscript(value=Name(id='bubbles', ctx=Load()), slice=Slice(lower=None, upper=UnaryOp(op=USub(), operand=Num(n=1)), step=None), ctx=Load())
Subscript(value=Name(id='bubbles', ctx=Load()), slice=Slice(lower=Num(n=1), upper=None, step=None), ctx=Load())
Tuple(elts=[Name(id='locmax', ctx=Store()), Name(id='val', ctx=Store())], ctx=Store())
Call(func=Name(id='bisect_max', ctx=Load()), args=[Name(id='loglikelihood', ctx=Load()), Name(id='a', ctx=Load()), Name(id='b', ctx=Load())], keywords=[keyword(arg='retval', value=NameConstant(value=True))])
Compare(left=Name(id='val', ctx=Load()), ops=[GtE()], comparators=[Name(id='thres', ctx=Load())])
If(test=Compare(left=BinOp(left=Call(func=Name(id='cut', ctx=Load()), args=[Name(id='a', ctx=Load())], keywords=[]), op=Mult(), right=Call(func=Name(id='cut', ctx=Load()), args=[Name(id='locmax', ctx=Load())], keywords=[])), ops=[Lt()], comparators=[Num(n=0)]), body=[Assign(targets=[Name(id='left', ctx=Store())], value=Call(func=Name(id='bisect', ctx=Load()), args=[Name(id='cut', ctx=Load()), Name(id='a', ctx=Load()), Name(id='locmax', ctx=Load())], keywords=[])), Assign(targets=[Name(id='lower', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='minimum', ctx=Load()), args=[Name(id='lower', ctx=Load()), Name(id='left', ctx=Load())], keywords=[]))], orelse=[])
If(test=Compare(left=BinOp(left=Call(func=Name(id='cut', ctx=Load()), args=[Name(id='locmax', ctx=Load())], keywords=[]), op=Mult(), right=Call(func=Name(id='cut', ctx=Load()), args=[Name(id='b', ctx=Load())], keywords=[])), ops=[Lt()], comparators=[Num(n=0)]), body=[Assign(targets=[Name(id='right', ctx=Store())], value=Call(func=Name(id='bisect', ctx=Load()), args=[Name(id='cut', ctx=Load()), Name(id='locmax', ctx=Load()), Name(id='b', ctx=Load())], keywords=[])), Assign(targets=[Name(id='upper', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='maximum', ctx=Load()), args=[Name(id='upper', ctx=Load()), Name(id='right', ctx=Load())], keywords=[]))], orelse=[])
Store()
Name(id='lower', ctx=Load())
Name(id='upper', ctx=Load())
Load()
Name(id='tuple', ctx=Load())
GeneratorExp(elt=Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='post_processing', ctx=Load()), args=[Name(id='bound', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='bound', ctx=Store()), iter=Name(id='confint', ctx=Load()), ifs=[], is_async=0)])
Load()
Name(id='float', ctx=Load())
Name(id='int', ctx=Load())
Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Name(id='QuantumCircuit', ctx=Load())), ctx=Load())
Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Name(id='QuantumCircuit', ctx=Load())), ctx=Load())
Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='QuantumInstance', ctx=Load()), Name(id='Backend', ctx=Load())], ctx=Load())), ctx=Load())), ctx=Load())
Name(id='num_eval_qubits', ctx=Load())
Lt()
Num(n=1)
Call(func=Name(id='ValueError', ctx=Load()), args=[Str(s='The number of evaluation qubits must at least be 1.')], keywords=[])
Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load())
Name(id='self', ctx=Load())
Store()
Load()
Name(id='self', ctx=Load())
Store()
Load()
Name(id='self', ctx=Load())
Store()
Num(n=2)
Pow()
Name(id='num_eval_qubits', ctx=Load())
Name(id='self', ctx=Load())
Store()
Load()
Name(id='self', ctx=Load())
Store()
Load()
Name(id='self', ctx=Load())
Load()
Load()
Name(id='QuantumInstance', ctx=Load())
Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='QuantumInstance', ctx=Load()), Name(id='Backend', ctx=Load())], ctx=Load())), ctx=Load())
Name(id='isinstance', ctx=Load())
Name(id='quantum_instance', ctx=Load())
Name(id='Backend', ctx=Load())
Name(id='quantum_instance', ctx=Store())
Call(func=Name(id='QuantumInstance', ctx=Load()), args=[Name(id='quantum_instance', ctx=Load())], keywords=[])
Name(id='self', ctx=Load())
Store()
Load()
Load()
Name(id='EstimationProblem', ctx=Load())
Name(id='bool', ctx=Load())
Attribute(value=Name(id='self', ctx=Load()), attr='_pec', ctx=Load())
IsNot()
NameConstant(value=None)
Name(id='pec', ctx=Store())
Attribute(value=Name(id='self', ctx=Load()), attr='_pec', ctx=Load())
alias(name='PhaseEstimation', asname=None)
Name(id='pec', ctx=Store())
Call(func=Name(id='PhaseEstimation', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Load()), Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='grover_operator', ctx=Load())], keywords=[keyword(arg='iqft', value=Attribute(value=Name(id='self', ctx=Load()), attr='_iqft', ctx=Load()))])
Store()
Name(id='QuantumCircuit', ctx=Load())
Starred(value=Attribute(value=Name(id='pec', ctx=Load()), attr='qregs', ctx=Load()), ctx=Load())
Attribute(value=Name(id='circuit', ctx=Load()), attr='compose', ctx=Load())
Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='state_preparation', ctx=Load())
Call(func=Name(id='list', ctx=Load()), args=[Call(func=Name(id='range', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Load()), Attribute(value=Name(id='circuit', ctx=Load()), attr='num_qubits', ctx=Load())], keywords=[])], keywords=[])
keyword(arg='inplace', value=NameConstant(value=True))
Attribute(value=Name(id='circuit', ctx=Load()), attr='compose', ctx=Load())
Name(id='pec', ctx=Load())
keyword(arg='inplace', value=NameConstant(value=True))
Load()
Name(id='cr', ctx=Store())
Call(func=Name(id='ClassicalRegister', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Load())], keywords=[])
Call(func=Attribute(value=Name(id='circuit', ctx=Load()), attr='add_register', ctx=Load()), args=[Name(id='cr', ctx=Load())], keywords=[])
Call(func=Attribute(value=Name(id='circuit', ctx=Load()), attr='measure', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Name(id='range', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Load())], keywords=[])], keywords=[]), Call(func=Name(id='list', ctx=Load()), args=[Call(func=Name(id='range', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Load())], keywords=[])], keywords=[])], keywords=[])
Load()
Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Subscript(value=Name(id='Dict', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load())), ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())], ctx=Load())), ctx=Load())
Name(id='float', ctx=Load())
Name(id='isinstance', ctx=Load())
Name(id='circuit_results', ctx=Load())
Name(id='dict', ctx=Load())
Tuple(elts=[Name(id='samples', ctx=Store()), Name(id='measurements', ctx=Store())], ctx=Store())
Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_evaluate_count_results', ctx=Load()), args=[Name(id='circuit_results', ctx=Load())], keywords=[])
Tuple(elts=[Name(id='samples', ctx=Store()), Name(id='measurements', ctx=Store())], ctx=Store())
Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_evaluate_statevector_results', ctx=Load()), args=[Name(id='circuit_results', ctx=Load())], keywords=[])
Store()
Name(id='a', ctx=Load())
Name(id='p', ctx=Load())
comprehension(target=Tuple(elts=[Name(id='a', ctx=Store()), Name(id='p', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='samples', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), ifs=[Compare(left=Name(id='p', ctx=Load()), ops=[Gt()], comparators=[Name(id='threshold', ctx=Load())])], is_async=0)
Store()
Name(id='y', ctx=Load())
Name(id='p', ctx=Load())
comprehension(target=Tuple(elts=[Name(id='y', ctx=Store()), Name(id='p', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='measurements', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), ifs=[Compare(left=Name(id='p', ctx=Load()), ops=[Gt()], comparators=[Name(id='threshold', ctx=Load())])], is_async=0)
Name(id='samples', ctx=Load())
Name(id='measurements', ctx=Load())
Load()
Load()
Tuple(elts=[Subscript(value=Name(id='Dict', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load())), ctx=Load()), Subscript(value=Name(id='Dict', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='float', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load())), ctx=Load())], ctx=Load())
Store()
Name(id='OrderedDict', ctx=Load())
Store()
Name(id='int', ctx=Load())
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='log2', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='statevector', ctx=Load())], keywords=[])], keywords=[])
Name(id='i', ctx=Store())
Name(id='amplitude', ctx=Store())
Store()
Name(id='enumerate', ctx=Load())
Name(id='statevector', ctx=Load())
Name(id='b', ctx=Store())
Subscript(value=Call(func=Attribute(value=Subscript(value=Call(func=Name(id='bin', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]), slice=Slice(lower=Num(n=2), upper=None, step=None), ctx=Load()), attr='zfill', ctx=Load()), args=[Name(id='num_qubits', ctx=Load())], keywords=[]), slice=Slice(lower=None, upper=None, step=UnaryOp(op=USub(), operand=Num(n=1))), ctx=Load())
Name(id='y', ctx=Store())
Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='b', ctx=Load()), slice=Slice(lower=None, upper=Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Load()), step=None), ctx=Load()), Num(n=2)], keywords=[])
Subscript(value=Name(id='measurements', ctx=Load()), slice=Index(value=Name(id='y', ctx=Load())), ctx=Store())
BinOp(left=Call(func=Attribute(value=Name(id='measurements', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='y', ctx=Load()), Num(n=0)], keywords=[]), op=Add(), right=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='abs', ctx=Load()), args=[Name(id='amplitude', ctx=Load())], keywords=[]), op=Pow(), right=Num(n=2)))
Store()
Name(id='OrderedDict', ctx=Load())
Name(id='y', ctx=Store())
Name(id='probability', ctx=Store())
Store()
Attribute(value=Name(id='measurements', ctx=Load()), attr='items', ctx=Load())
Compare(left=Name(id='y', ctx=Load()), ops=[GtE()], comparators=[Call(func=Name(id='int', ctx=Load()), args=[BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='_M', ctx=Load()), op=Div(), right=Num(n=2))], keywords=[])])
Assign(targets=[Name(id='y', ctx=Store())], value=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='_M', ctx=Load()), op=Sub(), right=Name(id='y', ctx=Load())))
Name(id='a', ctx=Store())
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='round', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='power', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[BinOp(left=BinOp(left=Name(id='y', ctx=Load()), op=Mult(), right=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load())), op=Div(), right=BinOp(left=Num(n=2), op=Pow(), right=Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Load())))], keywords=[]), Num(n=2)], keywords=[])], keywords=[keyword(arg='decimals', value=Num(n=7))])
Subscript(value=Name(id='samples', ctx=Load()), slice=Index(value=Name(id='a', ctx=Load())), ctx=Store())
BinOp(left=Call(func=Attribute(value=Name(id='samples', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='a', ctx=Load()), Num(n=0)], keywords=[]), op=Add(), right=Name(id='probability', ctx=Load()))
Name(id='samples', ctx=Load())
Name(id='measurements', ctx=Load())
Load()
Store()
Name(id='OrderedDict', ctx=Load())
Store()
Name(id='OrderedDict', ctx=Load())
Store()
Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()), attr='_run_config', ctx=Load())
Load()
Name(id='state', ctx=Store())
Name(id='count', ctx=Store())
Store()
Attribute(value=Name(id='counts', ctx=Load()), attr='items', ctx=Load())
Name(id='y', ctx=Store())
Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Subscript(value=Call(func=Attribute(value=Name(id='state', ctx=Load()), attr='replace', ctx=Load()), args=[Str(s=' '), Str(s='')], keywords=[]), slice=Slice(lower=None, upper=Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Load()), step=None), ctx=Load()), slice=Slice(lower=None, upper=None, step=UnaryOp(op=USub(), operand=Num(n=1))), ctx=Load()), Num(n=2)], keywords=[])
Name(id='probability', ctx=Store())
BinOp(left=Name(id='count', ctx=Load()), op=Div(), right=Name(id='shots', ctx=Load()))
Subscript(value=Name(id='measurements', ctx=Load()), slice=Index(value=Name(id='y', ctx=Load())), ctx=Store())
Name(id='probability', ctx=Load())
Name(id='a', ctx=Store())
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='round', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='power', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[BinOp(left=BinOp(left=Name(id='y', ctx=Load()), op=Mult(), right=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load())), op=Div(), right=BinOp(left=Num(n=2), op=Pow(), right=Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Load())))], keywords=[]), Num(n=2)], keywords=[])], keywords=[keyword(arg='decimals', value=Num(n=7))])
Subscript(value=Name(id='samples', ctx=Load()), slice=Index(value=Name(id='a', ctx=Load())), ctx=Store())
BinOp(left=Call(func=Attribute(value=Name(id='samples', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='a', ctx=Load()), Num(n=0.0)], keywords=[]), op=Add(), right=Name(id='probability', ctx=Load()))
Name(id='samples', ctx=Load())
Name(id='measurements', ctx=Load())
Load()
Str(s='AmplitudeEstimationResult')
Name(id='bool', ctx=Load())
Store()
Name(id='result', ctx=Load())
Load()
Store()
Num(n=2)
Pow()
Name(id='m', ctx=Load())
Store()
Name(id='result', ctx=Load())
Load()
Store()
Attribute(value=Name(id='np', ctx=Load()), attr='asarray', ctx=Load())
Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='result', ctx=Load()), attr='samples', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])], keywords=[])
Store()
Attribute(value=Name(id='np', ctx=Load()), attr='asarray', ctx=Load())
Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='result', ctx=Load()), attr='samples', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[])
arg(arg='a', annotation=None)
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sum', ctx=Load()), args=[BinOp(left=BinOp(left=Attribute(value=Name(id='result', ctx=Load()), attr='shots', ctx=Load()), op=Mult(), right=Name(id='p_i', ctx=Load())), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='log', ctx=Load()), args=[Call(func=Name(id='pdf_a', ctx=Load()), args=[Name(id='a_i', ctx=Load()), Name(id='a', ctx=Load()), Name(id='m', ctx=Load())], keywords=[])], keywords=[]))], keywords=[])
Store()
Name(id='int', ctx=Load())
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='round', ctx=Load()), args=[BinOp(left=BinOp(left=Name(id='M', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='arcsin', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sqrt', ctx=Load()), args=[Name(id='qae', ctx=Load())], keywords=[])], keywords=[])), op=Div(), right=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()))], keywords=[])
Name(id='y', ctx=Load())
Eq()
Num(n=0)
Name(id='right_of_qae', ctx=Store())
BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[BinOp(left=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Mult(), right=BinOp(left=Name(id='y', ctx=Load()), op=Add(), right=Num(n=1))), op=Div(), right=Name(id='M', ctx=Load()))], keywords=[]), op=Pow(), right=Num(n=2))
Name(id='bubbles', ctx=Store())
List(elts=[Name(id='qae', ctx=Load()), Name(id='right_of_qae', ctx=Load())], ctx=Load())
Compare(left=Name(id='y', ctx=Load()), ops=[Eq()], comparators=[Call(func=Name(id='int', ctx=Load()), args=[BinOp(left=Name(id='M', ctx=Load()), op=Div(), right=Num(n=2))], keywords=[])])
Assign(targets=[Name(id='left_of_qae', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[BinOp(left=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Mult(), right=BinOp(left=Name(id='y', ctx=Load()), op=Sub(), right=Num(n=1))), op=Div(), right=Name(id='M', ctx=Load()))], keywords=[]), op=Pow(), right=Num(n=2)))
Assign(targets=[Name(id='bubbles', ctx=Store())], value=List(elts=[Name(id='left_of_qae', ctx=Load()), Name(id='qae', ctx=Load())], ctx=Load()))
Assign(targets=[Name(id='left_of_qae', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[BinOp(left=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Mult(), right=BinOp(left=Name(id='y', ctx=Load()), op=Sub(), right=Num(n=1))), op=Div(), right=Name(id='M', ctx=Load()))], keywords=[]), op=Pow(), right=Num(n=2)))
Assign(targets=[Name(id='right_of_qae', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[BinOp(left=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Mult(), right=BinOp(left=Name(id='y', ctx=Load()), op=Add(), right=Num(n=1))), op=Div(), right=Name(id='M', ctx=Load()))], keywords=[]), op=Pow(), right=Num(n=2)))
Assign(targets=[Name(id='bubbles', ctx=Store())], value=List(elts=[Name(id='left_of_qae', ctx=Load()), Name(id='qae', ctx=Load()), Name(id='right_of_qae', ctx=Load())], ctx=Load()))
Store()
Load()
Store()
Name(id='loglikelihood', ctx=Load())
Name(id='a_opt', ctx=Load())
Name(id='a', ctx=Store())
Name(id='b', ctx=Store())
Store()
Name(id='zip', ctx=Load())
Subscript(value=Name(id='bubbles', ctx=Load()), slice=Slice(lower=None, upper=UnaryOp(op=USub(), operand=Num(n=1)), step=None), ctx=Load())
Subscript(value=Name(id='bubbles', ctx=Load()), slice=Slice(lower=Num(n=1), upper=None, step=None), ctx=Load())
Tuple(elts=[Name(id='locmax', ctx=Store()), Name(id='val', ctx=Store())], ctx=Store())
Call(func=Name(id='bisect_max', ctx=Load()), args=[Name(id='loglikelihood', ctx=Load()), Name(id='a', ctx=Load()), Name(id='b', ctx=Load())], keywords=[keyword(arg='retval', value=NameConstant(value=True))])
Compare(left=Name(id='val', ctx=Load()), ops=[Gt()], comparators=[Name(id='loglik_opt', ctx=Load())])
Assign(targets=[Name(id='a_opt', ctx=Store())], value=Name(id='locmax', ctx=Load()))
Assign(targets=[Name(id='loglik_opt', ctx=Store())], value=Name(id='val', ctx=Load()))
Load()
Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='post_processing', ctx=Load()), args=[Name(id='a_opt', ctx=Load())], keywords=[])
Load()
Name(id='EstimationProblem', ctx=Load())
Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='state_preparation', ctx=Load())
Is()
NameConstant(value=None)
Call(func=Name(id='ValueError', ctx=Load()), args=[Str(s='The state_preparation property of the estimation problem must be set.')], keywords=[])
Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='objective_qubits', ctx=Load())
Is()
NameConstant(value=None)
Call(func=Name(id='ValueError', ctx=Load()), args=[Str(s='The objective_qubits property of the estimation problem must be set.')], keywords=[])
Store()
Name(id='AmplitudeEstimationResult', ctx=Load())
Name(id='result', ctx=Load())
Store()
Name(id='self', ctx=Load())
Load()
Name(id='result', ctx=Load())
Store()
Name(id='estimation_problem', ctx=Load())
Load()
Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load())
Load()
Name(id='circuit', ctx=Store())
Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='construct_circuit', ctx=Load()), args=[Name(id='estimation_problem', ctx=Load())], keywords=[keyword(arg='measurement', value=NameConstant(value=False))])
Name(id='statevector', ctx=Store())
Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()), attr='execute', ctx=Load()), args=[Name(id='circuit', ctx=Load())], keywords=[]), attr='get_statevector', ctx=Load()), args=[], keywords=[])
Attribute(value=Name(id='result', ctx=Load()), attr='circuit_results', ctx=Store())
Name(id='statevector', ctx=Load())
Attribute(value=Name(id='result', ctx=Load()), attr='shots', ctx=Store())
Num(n=1)
Name(id='circuit', ctx=Store())
Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='construct_circuit', ctx=Load()), args=[Name(id='estimation_problem', ctx=Load())], keywords=[keyword(arg='measurement', value=NameConstant(value=True))])
Name(id='counts', ctx=Store())
Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()), attr='execute', ctx=Load()), args=[Name(id='circuit', ctx=Load())], keywords=[]), attr='get_counts', ctx=Load()), args=[], keywords=[])
Attribute(value=Name(id='result', ctx=Load()), attr='circuit_results', ctx=Store())
Name(id='counts', ctx=Load())
Attribute(value=Name(id='result', ctx=Load()), attr='shots', ctx=Store())
Call(func=Name(id='sum', ctx=Load()), args=[Call(func=Attribute(value=Name(id='counts', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[])
Name(id='samples', ctx=Store())
Name(id='measurements', ctx=Store())
Store()
Attribute(value=Name(id='self', ctx=Load()), attr='evaluate_measurements', ctx=Load())
Attribute(value=Name(id='result', ctx=Load()), attr='circuit_results', ctx=Load())
Name(id='result', ctx=Load())
Store()
Load()
Name(id='result', ctx=Load())
Store()
Call(func=Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='post_processing', ctx=Load()), args=[Name(id='a', ctx=Load())], keywords=[])
Name(id='p', ctx=Load())
comprehension(target=Tuple(elts=[Name(id='a', ctx=Store()), Name(id='p', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='samples', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), ifs=[], is_async=0)
Name(id='result', ctx=Load())
Store()
Load()
Name(id='result', ctx=Load())
Store()
Name(id='amplitude', ctx=Store())
Tuple(elts=[Name(id='mapped', ctx=Store()), Name(id='prob', ctx=Store())], ctx=Store())
Store()
Name(id='zip', ctx=Load())
Call(func=Attribute(value=Name(id='samples', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])
Call(func=Attribute(value=Attribute(value=Name(id='result', ctx=Load()), attr='samples_processed', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])
Compare(left=Name(id='prob', ctx=Load()), ops=[Gt()], comparators=[Attribute(value=Name(id='result', ctx=Load()), attr='max_probability', ctx=Load())])
Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='max_probability', ctx=Store())], value=Name(id='prob', ctx=Load()))
Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='estimation', ctx=Store())], value=Name(id='amplitude', ctx=Load()))
Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='estimation_processed', ctx=Store())], value=Name(id='mapped', ctx=Load()))
Name(id='result', ctx=Load())
Store()
Attribute(value=Name(id='result', ctx=Load()), attr='shots', ctx=Load())
Mult()
BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='_M', ctx=Load()), op=Sub(), right=Num(n=1))
Store()
Attribute(value=Name(id='self', ctx=Load()), attr='compute_mle', ctx=Load())
Name(id='result', ctx=Load())
Name(id='result', ctx=Load())
Store()
Load()
Name(id='result', ctx=Load())
Store()
Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='post_processing', ctx=Load())
Name(id='mle', ctx=Load())
Name(id='result', ctx=Load())
Store()
Attribute(value=Name(id='self', ctx=Load()), attr='compute_confidence_interval', ctx=Load())
Name(id='result', ctx=Load())
Name(id='result', ctx=Load())
Store()
Name(id='tuple', ctx=Load())
GeneratorExp(elt=Call(func=Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='post_processing', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='value', ctx=Store()), iter=Attribute(value=Name(id='result', ctx=Load()), attr='confidence_interval', ctx=Load()), ifs=[], is_async=0)])
Load()
Str(s='AmplitudeEstimationResult')
Name(id='float', ctx=Load())
Name(id='str', ctx=Load())
Name(id='isinstance', ctx=Load())
Attribute(value=Name(id='result', ctx=Load()), attr='circuit_results', ctx=Load())
Tuple(elts=[Name(id='list', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())], ctx=Load())
Tuple(elts=[Attribute(value=Name(id='result', ctx=Load()), attr='mle', ctx=Load()), Attribute(value=Name(id='result', ctx=Load()), attr='mle', ctx=Load())], ctx=Load())
Name(id='kind', ctx=Load())
In()
List(elts=[Str(s='likelihood_ratio'), Str(s='lr')], ctx=Load())
Call(func=Name(id='_likelihood_ratio_confint', ctx=Load()), args=[Name(id='result', ctx=Load()), Name(id='alpha', ctx=Load())], keywords=[])
Name(id='kind', ctx=Load())
In()
List(elts=[Str(s='fisher'), Str(s='fi')], ctx=Load())
Call(func=Name(id='_fisher_confint', ctx=Load()), args=[Name(id='result', ctx=Load()), Name(id='alpha', ctx=Load())], keywords=[keyword(arg='observed', value=NameConstant(value=False))])
Name(id='kind', ctx=Load())
In()
List(elts=[Str(s='observed_fisher'), Str(s='observed_information'), Str(s='oi')], ctx=Load())
Call(func=Name(id='_fisher_confint', ctx=Load()), args=[Name(id='result', ctx=Load()), Name(id='alpha', ctx=Load())], keywords=[keyword(arg='observed', value=NameConstant(value=True))])
Name(id='NotImplementedError', ctx=Load())
JoinedStr(values=[Str(s='CI `'), FormattedValue(value=Name(id='kind', ctx=Load()), conversion=-1, format_spec=None), Str(s='` is not implemented.')])
Load()
Tuple(elts=[Name(id='float', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load())
Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load())
Name(id='self', ctx=Load())
Store()
Name(id='self', ctx=Load())
Store()
Name(id='self', ctx=Load())
Store()
Name(id='self', ctx=Load())
Store()
Name(id='self', ctx=Load())
Store()
Name(id='self', ctx=Load())
Store()
Name(id='self', ctx=Load())
Store()
Name(id='self', ctx=Load())
Load()
Name(id='int', ctx=Load())
Name(id='self', ctx=Load())
Store()
Load()
Load()
Name(id='self', ctx=Load())
Load()
Name(id='float', ctx=Load())
Name(id='self', ctx=Load())
Store()
Load()
Load()
Name(id='self', ctx=Load())
Load()
Load()
Tuple(elts=[Name(id='float', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load())
Subscript(value=Name(id='Dict', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='float', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load())), ctx=Load())
Name(id='self', ctx=Load())
Store()
Load()
Load()
Name(id='self', ctx=Load())
Load()
Name(id='float', ctx=Load())
Name(id='self', ctx=Load())
Store()
Load()
Load()
Name(id='self', ctx=Load())
Load()
Load()
Tuple(elts=[Name(id='float', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load())
Subscript(value=Name(id='Dict', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='float', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load())), ctx=Load())
Name(id='self', ctx=Load())
Store()
Load()
Load()
Name(id='self', ctx=Load())
Load()
Load()
Tuple(elts=[Name(id='int', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load())
Subscript(value=Name(id='Dict', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load())), ctx=Load())
Name(id='self', ctx=Load())
Store()
Load()
Load()
Name(id='self', ctx=Load())
Load()
Name(id='float', ctx=Load())
Name(id='self', ctx=Load())
Store()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Store()
Attribute(value=Name(id='np', ctx=Load()), attr='asarray', ctx=Load())
Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='result', ctx=Load()), attr='samples', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])], keywords=[])
Store()
Attribute(value=Name(id='np', ctx=Load()), attr='asarray', ctx=Load())
Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='result', ctx=Load()), attr='samples', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[])
Store()
Name(id='sum', ctx=Load())
GeneratorExp(elt=BinOp(left=Name(id='p', ctx=Load()), op=Mult(), right=BinOp(left=Call(func=Name(id='derivative_log_pdf_a', ctx=Load()), args=[Name(id='a', ctx=Load()), Name(id='mlv', ctx=Load()), Name(id='m', ctx=Load())], keywords=[]), op=Pow(), right=Num(n=2))), generators=[comprehension(target=Tuple(elts=[Name(id='p', ctx=Store()), Name(id='a', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='zip', ctx=Load()), args=[Name(id='p_i', ctx=Load()), Name(id='a_i', ctx=Load())], keywords=[]), ifs=[], is_async=0)])
arg(arg='x', annotation=None)
BinOp(left=BinOp(left=Call(func=Name(id='derivative_log_pdf_a', ctx=Load()), args=[Name(id='x', ctx=Load()), Name(id='mlv', ctx=Load()), Name(id='m', ctx=Load())], keywords=[]), op=Pow(), right=Num(n=2)), op=Mult(), right=Call(func=Name(id='pdf_a', ctx=Load()), args=[Name(id='x', ctx=Load()), Name(id='mlv', ctx=Load()), Name(id='m', ctx=Load())], keywords=[]))
Store()
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[BinOp(left=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='arange', ctx=Load()), args=[BinOp(left=BinOp(left=Name(id='M', ctx=Load()), op=Div(), right=Num(n=2)), op=Add(), right=Num(n=1))], keywords=[])), op=Div(), right=Name(id='M', ctx=Load()))], keywords=[])
Pow()
Num(n=2)
Store()
Name(id='sum', ctx=Load())
GeneratorExp(elt=Call(func=Name(id='integrand', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='grid', ctx=Load()), ifs=[], is_async=0)])
Load()
Load()
Load()
Name(id='np', ctx=Load())
Load()
Attribute(value=Name(id='result', ctx=Load()), attr='shots', ctx=Load())
Mult()
Call(func=Name(id='_compute_fisher_information', ctx=Load()), args=[Name(id='result', ctx=Load()), Name(id='observed', ctx=Load())], keywords=[])
Name(id='result', ctx=Load())
Load()
BinOp(left=Call(func=Attribute(value=Name(id='norm', ctx=Load()), attr='ppf', ctx=Load()), args=[BinOp(left=Num(n=1), op=Sub(), right=BinOp(left=Name(id='alpha', ctx=Load()), op=Div(), right=Num(n=2)))], keywords=[]), op=Div(), right=Name(id='std', ctx=Load()))
Mult()
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='array', ctx=Load()), args=[List(elts=[UnaryOp(op=USub(), operand=Num(n=1)), Num(n=1)], ctx=Load())], keywords=[])
Load()
Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='post_processing', ctx=Load()), args=[Name(id='bound', ctx=Load())], keywords=[])
comprehension(target=Name(id='bound', ctx=Store()), iter=Name(id='confint', ctx=Load()), ifs=[], is_async=0)
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Attribute(value=Name(id='np', ctx=Load()), attr='round', ctx=Load())
BinOp(left=BinOp(left=Name(id='M', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='arcsin', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sqrt', ctx=Load()), args=[Name(id='qae', ctx=Load())], keywords=[])], keywords=[])), op=Div(), right=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()))
Load()
Store()
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[BinOp(left=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Mult(), right=BinOp(left=Name(id='y', ctx=Load()), op=Add(), right=Num(n=1))), op=Div(), right=Name(id='M', ctx=Load()))], keywords=[])
Pow()
Num(n=2)
Store()
Name(id='qae', ctx=Load())
Name(id='right_of_qae', ctx=Load())
Load()
Name(id='y', ctx=Load())
Eq()
Call(func=Name(id='int', ctx=Load()), args=[BinOp(left=Name(id='M', ctx=Load()), op=Div(), right=Num(n=2))], keywords=[])
Name(id='left_of_qae', ctx=Store())
BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[BinOp(left=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Mult(), right=BinOp(left=Name(id='y', ctx=Load()), op=Sub(), right=Num(n=1))), op=Div(), right=Name(id='M', ctx=Load()))], keywords=[]), op=Pow(), right=Num(n=2))
Name(id='bubbles', ctx=Store())
List(elts=[Name(id='left_of_qae', ctx=Load()), Name(id='qae', ctx=Load())], ctx=Load())
Name(id='left_of_qae', ctx=Store())
BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[BinOp(left=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Mult(), right=BinOp(left=Name(id='y', ctx=Load()), op=Sub(), right=Num(n=1))), op=Div(), right=Name(id='M', ctx=Load()))], keywords=[]), op=Pow(), right=Num(n=2))
Name(id='right_of_qae', ctx=Store())
BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[BinOp(left=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Mult(), right=BinOp(left=Name(id='y', ctx=Load()), op=Add(), right=Num(n=1))), op=Div(), right=Name(id='M', ctx=Load()))], keywords=[]), op=Pow(), right=Num(n=2))
Name(id='bubbles', ctx=Store())
List(elts=[Name(id='left_of_qae', ctx=Load()), Name(id='qae', ctx=Load()), Name(id='right_of_qae', ctx=Load())], ctx=Load())
Name(id='np', ctx=Load())
Load()
Name(id='list', ctx=Load())
Call(func=Attribute(value=Attribute(value=Name(id='result', ctx=Load()), attr='samples', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])
Name(id='np', ctx=Load())
Load()
Name(id='list', ctx=Load())
Call(func=Attribute(value=Attribute(value=Name(id='result', ctx=Load()), attr='samples', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])
Attribute(value=Name(id='np', ctx=Load()), attr='sum', ctx=Load())
BinOp(left=BinOp(left=Attribute(value=Name(id='result', ctx=Load()), attr='shots', ctx=Load()), op=Mult(), right=Name(id='p_i', ctx=Load())), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='log', ctx=Load()), args=[Call(func=Name(id='pdf_a', ctx=Load()), args=[Name(id='a_i', ctx=Load()), Name(id='a', ctx=Load()), Name(id='m', ctx=Load())], keywords=[])], keywords=[]))
Load()
Name(id='result', ctx=Load())
Load()
Load()
Call(func=Attribute(value=Name(id='chi2', ctx=Load()), attr='ppf', ctx=Load()), args=[BinOp(left=Num(n=1), op=Sub(), right=Name(id='alpha', ctx=Load()))], keywords=[keyword(arg='df', value=Num(n=1))])
Div()
Num(n=2)
Call(func=Name(id='loglikelihood', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[])
Sub()
Name(id='thres', ctx=Load())
Load()
Store()
Store()
Load()
Name(id='bubbles', ctx=Load())
Slice(lower=None, upper=UnaryOp(op=USub(), operand=Num(n=1)), step=None)
Load()
Name(id='bubbles', ctx=Load())
Slice(lower=Num(n=1), upper=None, step=None)
Load()
Name(id='locmax', ctx=Store())
Name(id='val', ctx=Store())
Store()
Name(id='bisect_max', ctx=Load())
Name(id='loglikelihood', ctx=Load())
Name(id='a', ctx=Load())
Name(id='b', ctx=Load())
keyword(arg='retval', value=NameConstant(value=True))
Name(id='val', ctx=Load())
GtE()
Name(id='thres', ctx=Load())
Compare(left=BinOp(left=Call(func=Name(id='cut', ctx=Load()), args=[Name(id='a', ctx=Load())], keywords=[]), op=Mult(), right=Call(func=Name(id='cut', ctx=Load()), args=[Name(id='locmax', ctx=Load())], keywords=[])), ops=[Lt()], comparators=[Num(n=0)])
Assign(targets=[Name(id='left', ctx=Store())], value=Call(func=Name(id='bisect', ctx=Load()), args=[Name(id='cut', ctx=Load()), Name(id='a', ctx=Load()), Name(id='locmax', ctx=Load())], keywords=[]))
Assign(targets=[Name(id='lower', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='minimum', ctx=Load()), args=[Name(id='lower', ctx=Load()), Name(id='left', ctx=Load())], keywords=[]))
Compare(left=BinOp(left=Call(func=Name(id='cut', ctx=Load()), args=[Name(id='locmax', ctx=Load())], keywords=[]), op=Mult(), right=Call(func=Name(id='cut', ctx=Load()), args=[Name(id='b', ctx=Load())], keywords=[])), ops=[Lt()], comparators=[Num(n=0)])
Assign(targets=[Name(id='right', ctx=Store())], value=Call(func=Name(id='bisect', ctx=Load()), args=[Name(id='cut', ctx=Load()), Name(id='locmax', ctx=Load()), Name(id='b', ctx=Load())], keywords=[]))
Assign(targets=[Name(id='upper', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='maximum', ctx=Load()), args=[Name(id='upper', ctx=Load()), Name(id='right', ctx=Load())], keywords=[]))
Load()
Load()
Load()
Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='post_processing', ctx=Load()), args=[Name(id='bound', ctx=Load())], keywords=[])
comprehension(target=Name(id='bound', ctx=Store()), iter=Name(id='confint', ctx=Load()), ifs=[], is_async=0)
Load()
Load()
Name(id='Optional', ctx=Load())
Index(value=Name(id='QuantumCircuit', ctx=Load()))
Load()
Name(id='Optional', ctx=Load())
Index(value=Name(id='QuantumCircuit', ctx=Load()))
Load()
Name(id='Optional', ctx=Load())
Index(value=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='QuantumInstance', ctx=Load()), Name(id='Backend', ctx=Load())], ctx=Load())), ctx=Load()))
Load()
Load()
Name(id='ValueError', ctx=Load())
Str(s='The number of evaluation qubits must at least be 1.')
Call(func=Name(id='super', ctx=Load()), args=[], keywords=[])
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Name(id='Union', ctx=Load())
Index(value=Tuple(elts=[Name(id='QuantumInstance', ctx=Load()), Name(id='Backend', ctx=Load())], ctx=Load()))
Load()
Load()
Load()
Load()
Store()
Name(id='QuantumInstance', ctx=Load())
Name(id='quantum_instance', ctx=Load())
Load()
Load()
Load()
Name(id='self', ctx=Load())
Load()
Store()
Name(id='self', ctx=Load())
Load()
Store()
Name(id='PhaseEstimation', ctx=Load())
Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Load())
Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='grover_operator', ctx=Load())
keyword(arg='iqft', value=Attribute(value=Name(id='self', ctx=Load()), attr='_iqft', ctx=Load()))
Load()
Attribute(value=Name(id='pec', ctx=Load()), attr='qregs', ctx=Load())
Load()
Name(id='circuit', ctx=Load())
Load()
Name(id='estimation_problem', ctx=Load())
Load()
Name(id='list', ctx=Load())
Call(func=Name(id='range', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Load()), Attribute(value=Name(id='circuit', ctx=Load()), attr='num_qubits', ctx=Load())], keywords=[])
NameConstant(value=True)
Name(id='circuit', ctx=Load())
Load()
Load()
NameConstant(value=True)
Store()
Name(id='ClassicalRegister', ctx=Load())
Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Load())
Attribute(value=Name(id='circuit', ctx=Load()), attr='add_register', ctx=Load())
Name(id='cr', ctx=Load())
Attribute(value=Name(id='circuit', ctx=Load()), attr='measure', ctx=Load())
Call(func=Name(id='list', ctx=Load()), args=[Call(func=Name(id='range', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Load())], keywords=[])], keywords=[])
Call(func=Name(id='list', ctx=Load()), args=[Call(func=Name(id='range', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Load())], keywords=[])], keywords=[])
Name(id='Union', ctx=Load())
Index(value=Tuple(elts=[Subscript(value=Name(id='Dict', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load())), ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())], ctx=Load()))
Load()
Load()
Load()
Load()
Load()
Name(id='samples', ctx=Store())
Name(id='measurements', ctx=Store())
Store()
Attribute(value=Name(id='self', ctx=Load()), attr='_evaluate_count_results', ctx=Load())
Name(id='circuit_results', ctx=Load())
Name(id='samples', ctx=Store())
Name(id='measurements', ctx=Store())
Store()
Attribute(value=Name(id='self', ctx=Load()), attr='_evaluate_statevector_results', ctx=Load())
Name(id='circuit_results', ctx=Load())
Load()
Load()
Tuple(elts=[Name(id='a', ctx=Store()), Name(id='p', ctx=Store())], ctx=Store())
Call(func=Attribute(value=Name(id='samples', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])
Compare(left=Name(id='p', ctx=Load()), ops=[Gt()], comparators=[Name(id='threshold', ctx=Load())])
Load()
Load()
Tuple(elts=[Name(id='y', ctx=Store()), Name(id='p', ctx=Store())], ctx=Store())
Call(func=Attribute(value=Name(id='measurements', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])
Compare(left=Name(id='p', ctx=Load()), ops=[Gt()], comparators=[Name(id='threshold', ctx=Load())])
Load()
Load()
Subscript(value=Name(id='Dict', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load())), ctx=Load())
Subscript(value=Name(id='Dict', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='float', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load())), ctx=Load())
Load()
Load()
Load()
Attribute(value=Name(id='np', ctx=Load()), attr='log2', ctx=Load())
Call(func=Name(id='len', ctx=Load()), args=[Name(id='statevector', ctx=Load())], keywords=[])
Store()
Store()
Load()
Load()
Store()
Call(func=Attribute(value=Subscript(value=Call(func=Name(id='bin', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]), slice=Slice(lower=Num(n=2), upper=None, step=None), ctx=Load()), attr='zfill', ctx=Load()), args=[Name(id='num_qubits', ctx=Load())], keywords=[])
Slice(lower=None, upper=None, step=UnaryOp(op=USub(), operand=Num(n=1)))
Load()
Store()
Name(id='int', ctx=Load())
Subscript(value=Name(id='b', ctx=Load()), slice=Slice(lower=None, upper=Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Load()), step=None), ctx=Load())
Num(n=2)
Name(id='measurements', ctx=Load())
Index(value=Name(id='y', ctx=Load()))
Store()
Call(func=Attribute(value=Name(id='measurements', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='y', ctx=Load()), Num(n=0)], keywords=[])
Add()
BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='abs', ctx=Load()), args=[Name(id='amplitude', ctx=Load())], keywords=[]), op=Pow(), right=Num(n=2))
Load()
Store()
Store()
Name(id='measurements', ctx=Load())
Load()
Name(id='y', ctx=Load())
GtE()
Call(func=Name(id='int', ctx=Load()), args=[BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='_M', ctx=Load()), op=Div(), right=Num(n=2))], keywords=[])
Name(id='y', ctx=Store())
BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='_M', ctx=Load()), op=Sub(), right=Name(id='y', ctx=Load()))
Store()
Attribute(value=Name(id='np', ctx=Load()), attr='round', ctx=Load())
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='power', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[BinOp(left=BinOp(left=Name(id='y', ctx=Load()), op=Mult(), right=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load())), op=Div(), right=BinOp(left=Num(n=2), op=Pow(), right=Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Load())))], keywords=[]), Num(n=2)], keywords=[])
keyword(arg='decimals', value=Num(n=7))
Name(id='samples', ctx=Load())
Index(value=Name(id='a', ctx=Load()))
Store()
Call(func=Attribute(value=Name(id='samples', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='a', ctx=Load()), Num(n=0)], keywords=[])
Add()
Name(id='probability', ctx=Load())
Load()
Load()
Load()
Load()
Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load())
Load()
Store()
Store()
Name(id='counts', ctx=Load())
Load()
Store()
Name(id='int', ctx=Load())
Subscript(value=Subscript(value=Call(func=Attribute(value=Name(id='state', ctx=Load()), attr='replace', ctx=Load()), args=[Str(s=' '), Str(s='')], keywords=[]), slice=Slice(lower=None, upper=Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Load()), step=None), ctx=Load()), slice=Slice(lower=None, upper=None, step=UnaryOp(op=USub(), operand=Num(n=1))), ctx=Load())
Num(n=2)
Store()
Name(id='count', ctx=Load())
Div()
Name(id='shots', ctx=Load())
Name(id='measurements', ctx=Load())
Index(value=Name(id='y', ctx=Load()))
Store()
Load()
Store()
Attribute(value=Name(id='np', ctx=Load()), attr='round', ctx=Load())
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='power', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[BinOp(left=BinOp(left=Name(id='y', ctx=Load()), op=Mult(), right=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load())), op=Div(), right=BinOp(left=Num(n=2), op=Pow(), right=Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Load())))], keywords=[]), Num(n=2)], keywords=[])
keyword(arg='decimals', value=Num(n=7))
Name(id='samples', ctx=Load())
Index(value=Name(id='a', ctx=Load()))
Store()
Call(func=Attribute(value=Name(id='samples', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='a', ctx=Load()), Num(n=0.0)], keywords=[])
Add()
Name(id='probability', ctx=Load())
Load()
Load()
Load()
Load()
Load()
Load()
Name(id='np', ctx=Load())
Load()
Name(id='list', ctx=Load())
Call(func=Attribute(value=Attribute(value=Name(id='result', ctx=Load()), attr='samples', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])
Name(id='np', ctx=Load())
Load()
Name(id='list', ctx=Load())
Call(func=Attribute(value=Attribute(value=Name(id='result', ctx=Load()), attr='samples', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])
Attribute(value=Name(id='np', ctx=Load()), attr='sum', ctx=Load())
BinOp(left=BinOp(left=Attribute(value=Name(id='result', ctx=Load()), attr='shots', ctx=Load()), op=Mult(), right=Name(id='p_i', ctx=Load())), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='log', ctx=Load()), args=[Call(func=Name(id='pdf_a', ctx=Load()), args=[Name(id='a_i', ctx=Load()), Name(id='a', ctx=Load()), Name(id='m', ctx=Load())], keywords=[])], keywords=[]))
Load()
Attribute(value=Name(id='np', ctx=Load()), attr='round', ctx=Load())
BinOp(left=BinOp(left=Name(id='M', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='arcsin', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sqrt', ctx=Load()), args=[Name(id='qae', ctx=Load())], keywords=[])], keywords=[])), op=Div(), right=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()))
Load()
Store()
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[BinOp(left=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Mult(), right=BinOp(left=Name(id='y', ctx=Load()), op=Add(), right=Num(n=1))), op=Div(), right=Name(id='M', ctx=Load()))], keywords=[])
Pow()
Num(n=2)
Store()
Name(id='qae', ctx=Load())
Name(id='right_of_qae', ctx=Load())
Load()
Name(id='y', ctx=Load())
Eq()
Call(func=Name(id='int', ctx=Load()), args=[BinOp(left=Name(id='M', ctx=Load()), op=Div(), right=Num(n=2))], keywords=[])
Name(id='left_of_qae', ctx=Store())
BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[BinOp(left=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Mult(), right=BinOp(left=Name(id='y', ctx=Load()), op=Sub(), right=Num(n=1))), op=Div(), right=Name(id='M', ctx=Load()))], keywords=[]), op=Pow(), right=Num(n=2))
Name(id='bubbles', ctx=Store())
List(elts=[Name(id='left_of_qae', ctx=Load()), Name(id='qae', ctx=Load())], ctx=Load())
Name(id='left_of_qae', ctx=Store())
BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[BinOp(left=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Mult(), right=BinOp(left=Name(id='y', ctx=Load()), op=Sub(), right=Num(n=1))), op=Div(), right=Name(id='M', ctx=Load()))], keywords=[]), op=Pow(), right=Num(n=2))
Name(id='right_of_qae', ctx=Store())
BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[BinOp(left=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Mult(), right=BinOp(left=Name(id='y', ctx=Load()), op=Add(), right=Num(n=1))), op=Div(), right=Name(id='M', ctx=Load()))], keywords=[]), op=Pow(), right=Num(n=2))
Name(id='bubbles', ctx=Store())
List(elts=[Name(id='left_of_qae', ctx=Load()), Name(id='qae', ctx=Load()), Name(id='right_of_qae', ctx=Load())], ctx=Load())
Load()
Load()
Store()
Store()
Load()
Name(id='bubbles', ctx=Load())
Slice(lower=None, upper=UnaryOp(op=USub(), operand=Num(n=1)), step=None)
Load()
Name(id='bubbles', ctx=Load())
Slice(lower=Num(n=1), upper=None, step=None)
Load()
Name(id='locmax', ctx=Store())
Name(id='val', ctx=Store())
Store()
Name(id='bisect_max', ctx=Load())
Name(id='loglikelihood', ctx=Load())
Name(id='a', ctx=Load())
Name(id='b', ctx=Load())
keyword(arg='retval', value=NameConstant(value=True))
Name(id='val', ctx=Load())
Gt()
Name(id='loglik_opt', ctx=Load())
Name(id='a_opt', ctx=Store())
Name(id='locmax', ctx=Load())
Name(id='loglik_opt', ctx=Store())
Name(id='val', ctx=Load())
Attribute(value=Name(id='result', ctx=Load()), attr='post_processing', ctx=Load())
Name(id='a_opt', ctx=Load())
Load()
Name(id='estimation_problem', ctx=Load())
Load()
Name(id='ValueError', ctx=Load())
Str(s='The state_preparation property of the estimation problem must be set.')
Name(id='estimation_problem', ctx=Load())
Load()
Name(id='ValueError', ctx=Load())
Str(s='The objective_qubits property of the estimation problem must be set.')
Load()
Load()
Load()
Load()
Load()
Name(id='self', ctx=Load())
Load()
Store()
Attribute(value=Name(id='self', ctx=Load()), attr='construct_circuit', ctx=Load())
Name(id='estimation_problem', ctx=Load())
keyword(arg='measurement', value=NameConstant(value=False))
Store()
Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()), attr='execute', ctx=Load()), args=[Name(id='circuit', ctx=Load())], keywords=[]), attr='get_statevector', ctx=Load())
Name(id='result', ctx=Load())
Store()
Load()
Name(id='result', ctx=Load())
Store()
Store()
Attribute(value=Name(id='self', ctx=Load()), attr='construct_circuit', ctx=Load())
Name(id='estimation_problem', ctx=Load())
keyword(arg='measurement', value=NameConstant(value=True))
Store()
Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()), attr='execute', ctx=Load()), args=[Name(id='circuit', ctx=Load())], keywords=[]), attr='get_counts', ctx=Load())
Name(id='result', ctx=Load())
Store()
Load()
Name(id='result', ctx=Load())
Store()
Name(id='sum', ctx=Load())
Call(func=Attribute(value=Name(id='counts', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])
Store()
Store()
Name(id='self', ctx=Load())
Load()
Name(id='result', ctx=Load())
Load()
Load()
Load()
Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='post_processing', ctx=Load())
Name(id='a', ctx=Load())
Load()
Tuple(elts=[Name(id='a', ctx=Store()), Name(id='p', ctx=Store())], ctx=Store())
Call(func=Attribute(value=Name(id='samples', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])
Load()
Load()
Store()
Name(id='mapped', ctx=Store())
Name(id='prob', ctx=Store())
Store()
Load()
Attribute(value=Name(id='samples', ctx=Load()), attr='keys', ctx=Load())
Attribute(value=Attribute(value=Name(id='result', ctx=Load()), attr='samples_processed', ctx=Load()), attr='items', ctx=Load())
Name(id='prob', ctx=Load())
Gt()
Attribute(value=Name(id='result', ctx=Load()), attr='max_probability', ctx=Load())
Attribute(value=Name(id='result', ctx=Load()), attr='max_probability', ctx=Store())
Name(id='prob', ctx=Load())
Attribute(value=Name(id='result', ctx=Load()), attr='estimation', ctx=Store())
Name(id='amplitude', ctx=Load())
Attribute(value=Name(id='result', ctx=Load()), attr='estimation_processed', ctx=Store())
Name(id='mapped', ctx=Load())
Load()
Name(id='result', ctx=Load())
Load()
Attribute(value=Name(id='self', ctx=Load()), attr='_M', ctx=Load())
Sub()
Num(n=1)
Name(id='self', ctx=Load())
Load()
Load()
Load()
Load()
Name(id='estimation_problem', ctx=Load())
Load()
Load()
Load()
Name(id='self', ctx=Load())
Load()
Load()
Load()
Load()
Call(func=Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='post_processing', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[])
comprehension(target=Name(id='value', ctx=Store()), iter=Attribute(value=Name(id='result', ctx=Load()), attr='confidence_interval', ctx=Load()), ifs=[], is_async=0)
Load()
Load()
Load()
Name(id='result', ctx=Load())
Load()
Name(id='list', ctx=Load())
Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())
Load()
Attribute(value=Name(id='result', ctx=Load()), attr='mle', ctx=Load())
Attribute(value=Name(id='result', ctx=Load()), attr='mle', ctx=Load())
Load()
Load()
Str(s='likelihood_ratio')
Str(s='lr')
Load()
Name(id='_likelihood_ratio_confint', ctx=Load())
Name(id='result', ctx=Load())
Name(id='alpha', ctx=Load())
Load()
Str(s='fisher')
Str(s='fi')
Load()
Name(id='_fisher_confint', ctx=Load())
Name(id='result', ctx=Load())
Name(id='alpha', ctx=Load())
keyword(arg='observed', value=NameConstant(value=False))
Load()
Str(s='observed_fisher')
Str(s='observed_information')
Str(s='oi')
Load()
Name(id='_fisher_confint', ctx=Load())
Name(id='result', ctx=Load())
Name(id='alpha', ctx=Load())
keyword(arg='observed', value=NameConstant(value=True))
Load()
Str(s='CI `')
FormattedValue(value=Name(id='kind', ctx=Load()), conversion=-1, format_spec=None)
Str(s='` is not implemented.')
Name(id='float', ctx=Load())
Name(id='float', ctx=Load())
Load()
Call(func=Name(id='super', ctx=Load()), args=[], keywords=[])
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Name(id='float', ctx=Load())
Name(id='float', ctx=Load())
Load()
Name(id='Dict', ctx=Load())
Index(value=Tuple(elts=[Name(id='float', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load()))
Load()
Load()
Load()
Load()
Load()
Load()
Name(id='float', ctx=Load())
Name(id='float', ctx=Load())
Load()
Name(id='Dict', ctx=Load())
Index(value=Tuple(elts=[Name(id='float', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load()))
Load()
Load()
Load()
Name(id='int', ctx=Load())
Name(id='float', ctx=Load())
Load()
Name(id='Dict', ctx=Load())
Index(value=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load()))
Load()
Load()
Load()
Load()
Load()
Name(id='np', ctx=Load())
Load()
Name(id='list', ctx=Load())
Call(func=Attribute(value=Attribute(value=Name(id='result', ctx=Load()), attr='samples', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])
Name(id='np', ctx=Load())
Load()
Name(id='list', ctx=Load())
Call(func=Attribute(value=Attribute(value=Name(id='result', ctx=Load()), attr='samples', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])
Load()
BinOp(left=Name(id='p', ctx=Load()), op=Mult(), right=BinOp(left=Call(func=Name(id='derivative_log_pdf_a', ctx=Load()), args=[Name(id='a', ctx=Load()), Name(id='mlv', ctx=Load()), Name(id='m', ctx=Load())], keywords=[]), op=Pow(), right=Num(n=2)))
comprehension(target=Tuple(elts=[Name(id='p', ctx=Store()), Name(id='a', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='zip', ctx=Load()), args=[Name(id='p_i', ctx=Load()), Name(id='a_i', ctx=Load())], keywords=[]), ifs=[], is_async=0)
BinOp(left=Call(func=Name(id='derivative_log_pdf_a', ctx=Load()), args=[Name(id='x', ctx=Load()), Name(id='mlv', ctx=Load()), Name(id='m', ctx=Load())], keywords=[]), op=Pow(), right=Num(n=2))
Mult()
Call(func=Name(id='pdf_a', ctx=Load()), args=[Name(id='x', ctx=Load()), Name(id='mlv', ctx=Load()), Name(id='m', ctx=Load())], keywords=[])
Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load())
BinOp(left=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='arange', ctx=Load()), args=[BinOp(left=BinOp(left=Name(id='M', ctx=Load()), op=Div(), right=Num(n=2)), op=Add(), right=Num(n=1))], keywords=[])), op=Div(), right=Name(id='M', ctx=Load()))
Load()
Call(func=Name(id='integrand', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[])
comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='grid', ctx=Load()), ifs=[], is_async=0)
Load()
Name(id='result', ctx=Load())
Load()
Name(id='_compute_fisher_information', ctx=Load())
Name(id='result', ctx=Load())
Name(id='observed', ctx=Load())
Load()
Call(func=Attribute(value=Name(id='norm', ctx=Load()), attr='ppf', ctx=Load()), args=[BinOp(left=Num(n=1), op=Sub(), right=BinOp(left=Name(id='alpha', ctx=Load()), op=Div(), right=Num(n=2)))], keywords=[])
Div()
Name(id='std', ctx=Load())
Attribute(value=Name(id='np', ctx=Load()), attr='array', ctx=Load())
List(elts=[UnaryOp(op=USub(), operand=Num(n=1)), Num(n=1)], ctx=Load())
Attribute(value=Name(id='result', ctx=Load()), attr='post_processing', ctx=Load())
Name(id='bound', ctx=Load())
Name(id='bound', ctx=Store())
Name(id='confint', ctx=Load())
Name(id='np', ctx=Load())
Load()
BinOp(left=Name(id='M', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='arcsin', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sqrt', ctx=Load()), args=[Name(id='qae', ctx=Load())], keywords=[])], keywords=[]))
Div()
Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load())
Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load())
BinOp(left=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Mult(), right=BinOp(left=Name(id='y', ctx=Load()), op=Add(), right=Num(n=1))), op=Div(), right=Name(id='M', ctx=Load()))
Load()
Load()
Load()
Name(id='int', ctx=Load())
BinOp(left=Name(id='M', ctx=Load()), op=Div(), right=Num(n=2))
Store()
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[BinOp(left=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Mult(), right=BinOp(left=Name(id='y', ctx=Load()), op=Sub(), right=Num(n=1))), op=Div(), right=Name(id='M', ctx=Load()))], keywords=[])
Pow()
Num(n=2)
Store()
Name(id='left_of_qae', ctx=Load())
Name(id='qae', ctx=Load())
Load()
Store()
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[BinOp(left=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Mult(), right=BinOp(left=Name(id='y', ctx=Load()), op=Sub(), right=Num(n=1))), op=Div(), right=Name(id='M', ctx=Load()))], keywords=[])
Pow()
Num(n=2)
Store()
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[BinOp(left=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Mult(), right=BinOp(left=Name(id='y', ctx=Load()), op=Add(), right=Num(n=1))), op=Div(), right=Name(id='M', ctx=Load()))], keywords=[])
Pow()
Num(n=2)
Store()
Name(id='left_of_qae', ctx=Load())
Name(id='qae', ctx=Load())
Name(id='right_of_qae', ctx=Load())
Load()
Load()
Load()
Attribute(value=Attribute(value=Name(id='result', ctx=Load()), attr='samples', ctx=Load()), attr='keys', ctx=Load())
Load()
Load()
Attribute(value=Attribute(value=Name(id='result', ctx=Load()), attr='samples', ctx=Load()), attr='values', ctx=Load())
Name(id='np', ctx=Load())
Load()
BinOp(left=Attribute(value=Name(id='result', ctx=Load()), attr='shots', ctx=Load()), op=Mult(), right=Name(id='p_i', ctx=Load()))
Mult()
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='log', ctx=Load()), args=[Call(func=Name(id='pdf_a', ctx=Load()), args=[Name(id='a_i', ctx=Load()), Name(id='a', ctx=Load()), Name(id='m', ctx=Load())], keywords=[])], keywords=[])
Load()
Attribute(value=Name(id='chi2', ctx=Load()), attr='ppf', ctx=Load())
BinOp(left=Num(n=1), op=Sub(), right=Name(id='alpha', ctx=Load()))
keyword(arg='df', value=Num(n=1))
Name(id='loglikelihood', ctx=Load())
Name(id='x', ctx=Load())
Load()
Load()
UnaryOp(op=USub(), operand=Num(n=1))
Load()
Num(n=1)
Store()
Store()
Load()
Load()
Load()
Load()
NameConstant(value=True)
Load()
Load()
BinOp(left=Call(func=Name(id='cut', ctx=Load()), args=[Name(id='a', ctx=Load())], keywords=[]), op=Mult(), right=Call(func=Name(id='cut', ctx=Load()), args=[Name(id='locmax', ctx=Load())], keywords=[]))
Lt()
Num(n=0)
Name(id='left', ctx=Store())
Call(func=Name(id='bisect', ctx=Load()), args=[Name(id='cut', ctx=Load()), Name(id='a', ctx=Load()), Name(id='locmax', ctx=Load())], keywords=[])
Name(id='lower', ctx=Store())
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='minimum', ctx=Load()), args=[Name(id='lower', ctx=Load()), Name(id='left', ctx=Load())], keywords=[])
BinOp(left=Call(func=Name(id='cut', ctx=Load()), args=[Name(id='locmax', ctx=Load())], keywords=[]), op=Mult(), right=Call(func=Name(id='cut', ctx=Load()), args=[Name(id='b', ctx=Load())], keywords=[]))
Lt()
Num(n=0)
Name(id='right', ctx=Store())
Call(func=Name(id='bisect', ctx=Load()), args=[Name(id='cut', ctx=Load()), Name(id='locmax', ctx=Load()), Name(id='b', ctx=Load())], keywords=[])
Name(id='upper', ctx=Store())
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='maximum', ctx=Load()), args=[Name(id='upper', ctx=Load()), Name(id='right', ctx=Load())], keywords=[])
Attribute(value=Name(id='result', ctx=Load()), attr='post_processing', ctx=Load())
Name(id='bound', ctx=Load())
Name(id='bound', ctx=Store())
Name(id='confint', ctx=Load())
Load()
Name(id='QuantumCircuit', ctx=Load())
Load()
Name(id='QuantumCircuit', ctx=Load())
Load()
Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='QuantumInstance', ctx=Load()), Name(id='Backend', ctx=Load())], ctx=Load())), ctx=Load())
Load()
Name(id='super', ctx=Load())
Load()
Tuple(elts=[Name(id='QuantumInstance', ctx=Load()), Name(id='Backend', ctx=Load())], ctx=Load())
Load()
Load()
Load()
Load()
Load()
Name(id='self', ctx=Load())
Load()
Name(id='estimation_problem', ctx=Load())
Load()
Attribute(value=Name(id='self', ctx=Load()), attr='_iqft', ctx=Load())
Name(id='pec', ctx=Load())
Load()
Load()
Load()
Load()
Name(id='range', ctx=Load())
Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Load())
Attribute(value=Name(id='circuit', ctx=Load()), attr='num_qubits', ctx=Load())
Load()
Load()
Name(id='self', ctx=Load())
Load()
Name(id='circuit', ctx=Load())
Load()
Load()
Name(id='circuit', ctx=Load())
Load()
Name(id='list', ctx=Load())
Call(func=Name(id='range', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Load())], keywords=[])
Name(id='list', ctx=Load())
Call(func=Name(id='range', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Load())], keywords=[])
Load()
Tuple(elts=[Subscript(value=Name(id='Dict', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load())), ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())], ctx=Load())
Store()
Store()
Name(id='self', ctx=Load())
Load()
Load()
Store()
Store()
Name(id='self', ctx=Load())
Load()
Load()
Name(id='a', ctx=Store())
Name(id='p', ctx=Store())
Store()
Attribute(value=Name(id='samples', ctx=Load()), attr='items', ctx=Load())
Name(id='p', ctx=Load())
Gt()
Name(id='threshold', ctx=Load())
Name(id='y', ctx=Store())
Name(id='p', ctx=Store())
Store()
Attribute(value=Name(id='measurements', ctx=Load()), attr='items', ctx=Load())
Name(id='p', ctx=Load())
Gt()
Name(id='threshold', ctx=Load())
Name(id='Dict', ctx=Load())
Index(value=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load()))
Load()
Name(id='Dict', ctx=Load())
Index(value=Tuple(elts=[Name(id='float', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load()))
Load()
Name(id='np', ctx=Load())
Load()
Name(id='len', ctx=Load())
Name(id='statevector', ctx=Load())
Attribute(value=Subscript(value=Call(func=Name(id='bin', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]), slice=Slice(lower=Num(n=2), upper=None, step=None), ctx=Load()), attr='zfill', ctx=Load())
Name(id='num_qubits', ctx=Load())
UnaryOp(op=USub(), operand=Num(n=1))
Load()
Name(id='b', ctx=Load())
Slice(lower=None, upper=Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Load()), step=None)
Load()
Load()
Name(id='y', ctx=Load())
Attribute(value=Name(id='measurements', ctx=Load()), attr='get', ctx=Load())
Name(id='y', ctx=Load())
Num(n=0)
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='abs', ctx=Load()), args=[Name(id='amplitude', ctx=Load())], keywords=[])
Pow()
Num(n=2)
Load()
Load()
Name(id='int', ctx=Load())
BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='_M', ctx=Load()), op=Div(), right=Num(n=2))
Store()
Attribute(value=Name(id='self', ctx=Load()), attr='_M', ctx=Load())
Sub()
Name(id='y', ctx=Load())
Name(id='np', ctx=Load())
Load()
Attribute(value=Name(id='np', ctx=Load()), attr='power', ctx=Load())
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[BinOp(left=BinOp(left=Name(id='y', ctx=Load()), op=Mult(), right=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load())), op=Div(), right=BinOp(left=Num(n=2), op=Pow(), right=Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Load())))], keywords=[])
Num(n=2)
Num(n=7)
Load()
Name(id='a', ctx=Load())
Attribute(value=Name(id='samples', ctx=Load()), attr='get', ctx=Load())
Name(id='a', ctx=Load())
Num(n=0)
Load()
Name(id='self', ctx=Load())
Load()
Load()
Load()
Subscript(value=Call(func=Attribute(value=Name(id='state', ctx=Load()), attr='replace', ctx=Load()), args=[Str(s=' '), Str(s='')], keywords=[]), slice=Slice(lower=None, upper=Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Load()), step=None), ctx=Load())
Slice(lower=None, upper=None, step=UnaryOp(op=USub(), operand=Num(n=1)))
Load()
Load()
Load()
Load()
Name(id='y', ctx=Load())
Name(id='np', ctx=Load())
Load()
Attribute(value=Name(id='np', ctx=Load()), attr='power', ctx=Load())
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[BinOp(left=BinOp(left=Name(id='y', ctx=Load()), op=Mult(), right=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load())), op=Div(), right=BinOp(left=Num(n=2), op=Pow(), right=Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Load())))], keywords=[])
Num(n=2)
Num(n=7)
Load()
Name(id='a', ctx=Load())
Attribute(value=Name(id='samples', ctx=Load()), attr='get', ctx=Load())
Name(id='a', ctx=Load())
Num(n=0.0)
Load()
Load()
Load()
Attribute(value=Attribute(value=Name(id='result', ctx=Load()), attr='samples', ctx=Load()), attr='keys', ctx=Load())
Load()
Load()
Attribute(value=Attribute(value=Name(id='result', ctx=Load()), attr='samples', ctx=Load()), attr='values', ctx=Load())
Name(id='np', ctx=Load())
Load()
BinOp(left=Attribute(value=Name(id='result', ctx=Load()), attr='shots', ctx=Load()), op=Mult(), right=Name(id='p_i', ctx=Load()))
Mult()
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='log', ctx=Load()), args=[Call(func=Name(id='pdf_a', ctx=Load()), args=[Name(id='a_i', ctx=Load()), Name(id='a', ctx=Load()), Name(id='m', ctx=Load())], keywords=[])], keywords=[])
Name(id='np', ctx=Load())
Load()
BinOp(left=Name(id='M', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='arcsin', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sqrt', ctx=Load()), args=[Name(id='qae', ctx=Load())], keywords=[])], keywords=[]))
Div()
Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load())
Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load())
BinOp(left=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Mult(), right=BinOp(left=Name(id='y', ctx=Load()), op=Add(), right=Num(n=1))), op=Div(), right=Name(id='M', ctx=Load()))
Load()
Load()
Load()
Name(id='int', ctx=Load())
BinOp(left=Name(id='M', ctx=Load()), op=Div(), right=Num(n=2))
Store()
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[BinOp(left=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Mult(), right=BinOp(left=Name(id='y', ctx=Load()), op=Sub(), right=Num(n=1))), op=Div(), right=Name(id='M', ctx=Load()))], keywords=[])
Pow()
Num(n=2)
Store()
Name(id='left_of_qae', ctx=Load())
Name(id='qae', ctx=Load())
Load()
Store()
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[BinOp(left=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Mult(), right=BinOp(left=Name(id='y', ctx=Load()), op=Sub(), right=Num(n=1))), op=Div(), right=Name(id='M', ctx=Load()))], keywords=[])
Pow()
Num(n=2)
Store()
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load()), args=[BinOp(left=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Mult(), right=BinOp(left=Name(id='y', ctx=Load()), op=Add(), right=Num(n=1))), op=Div(), right=Name(id='M', ctx=Load()))], keywords=[])
Pow()
Num(n=2)
Store()
Name(id='left_of_qae', ctx=Load())
Name(id='qae', ctx=Load())
Name(id='right_of_qae', ctx=Load())
Load()
Load()
UnaryOp(op=USub(), operand=Num(n=1))
Load()
Num(n=1)
Store()
Store()
Load()
Load()
Load()
Load()
NameConstant(value=True)
Load()
Load()
Store()
Load()
Store()
Load()
Name(id='result', ctx=Load())
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Name(id='self', ctx=Load())
Load()
Load()
NameConstant(value=False)
Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()), attr='execute', ctx=Load()), args=[Name(id='circuit', ctx=Load())], keywords=[])
Load()
Load()
Load()
Name(id='self', ctx=Load())
Load()
Load()
NameConstant(value=True)
Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()), attr='execute', ctx=Load()), args=[Name(id='circuit', ctx=Load())], keywords=[])
Load()
Load()
Load()
Load()
Attribute(value=Name(id='counts', ctx=Load()), attr='values', ctx=Load())
Load()
Load()
Name(id='estimation_problem', ctx=Load())
Load()
Load()
Name(id='a', ctx=Store())
Name(id='p', ctx=Store())
Store()
Attribute(value=Name(id='samples', ctx=Load()), attr='items', ctx=Load())
Store()
Store()
Name(id='samples', ctx=Load())
Load()
Attribute(value=Name(id='result', ctx=Load()), attr='samples_processed', ctx=Load())
Load()
Load()
Name(id='result', ctx=Load())
Load()
Name(id='result', ctx=Load())
Store()
Load()
Name(id='result', ctx=Load())
Store()
Load()
Name(id='result', ctx=Load())
Store()
Load()
Load()
Name(id='self', ctx=Load())
Load()
Load()
Load()
Load()
Attribute(value=Name(id='estimation_problem', ctx=Load()), attr='post_processing', ctx=Load())
Name(id='value', ctx=Load())
Name(id='value', ctx=Store())
Attribute(value=Name(id='result', ctx=Load()), attr='confidence_interval', ctx=Load())
Load()
Load()
Name(id='np', ctx=Load())
Load()
Name(id='result', ctx=Load())
Load()
Name(id='result', ctx=Load())
Load()
Load()
Load()
Load()
Load()
Load()
Load()
NameConstant(value=False)
Load()
Load()
Load()
NameConstant(value=True)
Name(id='kind', ctx=Load())
Load()
Load()
Name(id='super', ctx=Load())
Load()
Load()
Load()
Tuple(elts=[Name(id='float', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load())
Load()
Load()
Load()
Tuple(elts=[Name(id='float', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load())
Load()
Load()
Load()
Tuple(elts=[Name(id='int', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load())
Load()
Load()
Attribute(value=Attribute(value=Name(id='result', ctx=Load()), attr='samples', ctx=Load()), attr='keys', ctx=Load())
Load()
Load()
Attribute(value=Attribute(value=Name(id='result', ctx=Load()), attr='samples', ctx=Load()), attr='values', ctx=Load())
Name(id='p', ctx=Load())
Mult()
BinOp(left=Call(func=Name(id='derivative_log_pdf_a', ctx=Load()), args=[Name(id='a', ctx=Load()), Name(id='mlv', ctx=Load()), Name(id='m', ctx=Load())], keywords=[]), op=Pow(), right=Num(n=2))
Tuple(elts=[Name(id='p', ctx=Store()), Name(id='a', ctx=Store())], ctx=Store())
Call(func=Name(id='zip', ctx=Load()), args=[Name(id='p_i', ctx=Load()), Name(id='a_i', ctx=Load())], keywords=[])
Call(func=Name(id='derivative_log_pdf_a', ctx=Load()), args=[Name(id='x', ctx=Load()), Name(id='mlv', ctx=Load()), Name(id='m', ctx=Load())], keywords=[])
Pow()
Num(n=2)
Name(id='pdf_a', ctx=Load())
Name(id='x', ctx=Load())
Name(id='mlv', ctx=Load())
Name(id='m', ctx=Load())
Name(id='np', ctx=Load())
Load()
BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='arange', ctx=Load()), args=[BinOp(left=BinOp(left=Name(id='M', ctx=Load()), op=Div(), right=Num(n=2)), op=Add(), right=Num(n=1))], keywords=[]))
Div()
Name(id='M', ctx=Load())
Name(id='integrand', ctx=Load())
Name(id='x', ctx=Load())
Name(id='x', ctx=Store())
Name(id='grid', ctx=Load())
Load()
Load()
Load()
Load()
Attribute(value=Name(id='norm', ctx=Load()), attr='ppf', ctx=Load())
BinOp(left=Num(n=1), op=Sub(), right=BinOp(left=Name(id='alpha', ctx=Load()), op=Div(), right=Num(n=2)))
Load()
Name(id='np', ctx=Load())
Load()
UnaryOp(op=USub(), operand=Num(n=1))
Num(n=1)
Load()
Name(id='result', ctx=Load())
Load()
Load()
Store()
Load()
Load()
Name(id='M', ctx=Load())
Mult()
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='arcsin', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sqrt', ctx=Load()), args=[Name(id='qae', ctx=Load())], keywords=[])], keywords=[])
Name(id='np', ctx=Load())
Load()
Name(id='np', ctx=Load())
Load()
BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Mult(), right=BinOp(left=Name(id='y', ctx=Load()), op=Add(), right=Num(n=1)))
Div()
Name(id='M', ctx=Load())
Load()
Name(id='M', ctx=Load())
Div()
Num(n=2)
Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load())
BinOp(left=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Mult(), right=BinOp(left=Name(id='y', ctx=Load()), op=Sub(), right=Num(n=1))), op=Div(), right=Name(id='M', ctx=Load()))
Load()
Load()
Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load())
BinOp(left=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Mult(), right=BinOp(left=Name(id='y', ctx=Load()), op=Sub(), right=Num(n=1))), op=Div(), right=Name(id='M', ctx=Load()))
Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load())
BinOp(left=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Mult(), right=BinOp(left=Name(id='y', ctx=Load()), op=Add(), right=Num(n=1))), op=Div(), right=Name(id='M', ctx=Load()))
Load()
Load()
Load()
Attribute(value=Name(id='result', ctx=Load()), attr='samples', ctx=Load())
Load()
Attribute(value=Name(id='result', ctx=Load()), attr='samples', ctx=Load())
Load()
Load()
Attribute(value=Name(id='result', ctx=Load()), attr='shots', ctx=Load())
Mult()
Name(id='p_i', ctx=Load())
Attribute(value=Name(id='np', ctx=Load()), attr='log', ctx=Load())
Call(func=Name(id='pdf_a', ctx=Load()), args=[Name(id='a_i', ctx=Load()), Name(id='a', ctx=Load()), Name(id='m', ctx=Load())], keywords=[])
Name(id='chi2', ctx=Load())
Load()
Num(n=1)
Sub()
Name(id='alpha', ctx=Load())
Num(n=1)
Load()
Load()
USub()
Num(n=1)
Call(func=Name(id='cut', ctx=Load()), args=[Name(id='a', ctx=Load())], keywords=[])
Mult()
Call(func=Name(id='cut', ctx=Load()), args=[Name(id='locmax', ctx=Load())], keywords=[])
Store()
Name(id='bisect', ctx=Load())
Name(id='cut', ctx=Load())
Name(id='a', ctx=Load())
Name(id='locmax', ctx=Load())
Store()
Attribute(value=Name(id='np', ctx=Load()), attr='minimum', ctx=Load())
Name(id='lower', ctx=Load())
Name(id='left', ctx=Load())
Call(func=Name(id='cut', ctx=Load()), args=[Name(id='locmax', ctx=Load())], keywords=[])
Mult()
Call(func=Name(id='cut', ctx=Load()), args=[Name(id='b', ctx=Load())], keywords=[])
Store()
Name(id='bisect', ctx=Load())
Name(id='cut', ctx=Load())
Name(id='locmax', ctx=Load())
Name(id='b', ctx=Load())
Store()
Attribute(value=Name(id='np', ctx=Load()), attr='maximum', ctx=Load())
Name(id='upper', ctx=Load())
Name(id='right', ctx=Load())
Name(id='result', ctx=Load())
Load()
Load()
Store()
Load()
Load()
Load()
Name(id='Union', ctx=Load())
Index(value=Tuple(elts=[Name(id='QuantumInstance', ctx=Load()), Name(id='Backend', ctx=Load())], ctx=Load()))
Load()
Load()
Name(id='QuantumInstance', ctx=Load())
Name(id='Backend', ctx=Load())
Load()
Load()
Load()
Name(id='self', ctx=Load())
Load()
Load()
Load()
Name(id='self', ctx=Load())
Load()
Name(id='circuit', ctx=Load())
Load()
Load()
Load()
Load()
Load()
Name(id='range', ctx=Load())
Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Load())
Load()
Name(id='range', ctx=Load())
Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Load())
Subscript(value=Name(id='Dict', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load())), ctx=Load())
Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())
Load()
Load()
Load()
Store()
Store()
Name(id='samples', ctx=Load())
Load()
Load()
Load()
Store()
Store()
Name(id='measurements', ctx=Load())
Load()
Load()
Load()
Load()
Tuple(elts=[Name(id='int', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load())
Load()
Tuple(elts=[Name(id='float', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load())
Load()
Load()
Load()
Subscript(value=Call(func=Name(id='bin', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]), slice=Slice(lower=Num(n=2), upper=None, step=None), ctx=Load())
Load()
Load()
USub()
Num(n=1)
Load()
Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Load())
Load()
Name(id='measurements', ctx=Load())
Load()
Load()
Attribute(value=Name(id='np', ctx=Load()), attr='abs', ctx=Load())
Name(id='amplitude', ctx=Load())
Load()
Attribute(value=Name(id='self', ctx=Load()), attr='_M', ctx=Load())
Div()
Num(n=2)
Name(id='self', ctx=Load())
Load()
Load()
Load()
Name(id='np', ctx=Load())
Load()
Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load())
BinOp(left=BinOp(left=Name(id='y', ctx=Load()), op=Mult(), right=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load())), op=Div(), right=BinOp(left=Num(n=2), op=Pow(), right=Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Load())))
Load()
Name(id='samples', ctx=Load())
Load()
Load()
Load()
Call(func=Attribute(value=Name(id='state', ctx=Load()), attr='replace', ctx=Load()), args=[Str(s=' '), Str(s='')], keywords=[])
Slice(lower=None, upper=Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Load()), step=None)
Load()
UnaryOp(op=USub(), operand=Num(n=1))
Load()
Load()
Name(id='np', ctx=Load())
Load()
Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load())
BinOp(left=BinOp(left=Name(id='y', ctx=Load()), op=Mult(), right=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load())), op=Div(), right=BinOp(left=Num(n=2), op=Pow(), right=Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Load())))
Load()
Name(id='samples', ctx=Load())
Load()
Load()
Attribute(value=Name(id='result', ctx=Load()), attr='samples', ctx=Load())
Load()
Attribute(value=Name(id='result', ctx=Load()), attr='samples', ctx=Load())
Load()
Load()
Attribute(value=Name(id='result', ctx=Load()), attr='shots', ctx=Load())
Mult()
Name(id='p_i', ctx=Load())
Attribute(value=Name(id='np', ctx=Load()), attr='log', ctx=Load())
Call(func=Name(id='pdf_a', ctx=Load()), args=[Name(id='a_i', ctx=Load()), Name(id='a', ctx=Load()), Name(id='m', ctx=Load())], keywords=[])
Load()
Name(id='M', ctx=Load())
Mult()
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='arcsin', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sqrt', ctx=Load()), args=[Name(id='qae', ctx=Load())], keywords=[])], keywords=[])
Name(id='np', ctx=Load())
Load()
Name(id='np', ctx=Load())
Load()
BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Mult(), right=BinOp(left=Name(id='y', ctx=Load()), op=Add(), right=Num(n=1)))
Div()
Name(id='M', ctx=Load())
Load()
Name(id='M', ctx=Load())
Div()
Num(n=2)
Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load())
BinOp(left=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Mult(), right=BinOp(left=Name(id='y', ctx=Load()), op=Sub(), right=Num(n=1))), op=Div(), right=Name(id='M', ctx=Load()))
Load()
Load()
Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load())
BinOp(left=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Mult(), right=BinOp(left=Name(id='y', ctx=Load()), op=Sub(), right=Num(n=1))), op=Div(), right=Name(id='M', ctx=Load()))
Attribute(value=Name(id='np', ctx=Load()), attr='sin', ctx=Load())
BinOp(left=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Mult(), right=BinOp(left=Name(id='y', ctx=Load()), op=Add(), right=Num(n=1))), op=Div(), right=Name(id='M', ctx=Load()))
Load()
Load()
Load()
USub()
Num(n=1)
Load()
Load()
Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()), attr='execute', ctx=Load())
Name(id='circuit', ctx=Load())
Load()
Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()), attr='execute', ctx=Load())
Name(id='circuit', ctx=Load())
Name(id='counts', ctx=Load())
Load()
Load()
Store()
Store()
Name(id='samples', ctx=Load())
Load()
Load()
Name(id='result', ctx=Load())
Load()
Load()
Load()
Load()
Load()
Load()
Name(id='estimation_problem', ctx=Load())
Load()
Load()
Store()
Name(id='result', ctx=Load())
Load()
Load()
Load()
Load()
Load()
Load()
Name(id='float', ctx=Load())
Name(id='float', ctx=Load())
Load()
Name(id='float', ctx=Load())
Name(id='float', ctx=Load())
Load()
Name(id='int', ctx=Load())
Name(id='float', ctx=Load())
Load()
Attribute(value=Name(id='result', ctx=Load()), attr='samples', ctx=Load())
Load()
Attribute(value=Name(id='result', ctx=Load()), attr='samples', ctx=Load())
Load()
Load()
Call(func=Name(id='derivative_log_pdf_a', ctx=Load()), args=[Name(id='a', ctx=Load()), Name(id='mlv', ctx=Load()), Name(id='m', ctx=Load())], keywords=[])
Pow()
Num(n=2)
Name(id='p', ctx=Store())
Name(id='a', ctx=Store())
Store()
Name(id='zip', ctx=Load())
Name(id='p_i', ctx=Load())
Name(id='a_i', ctx=Load())
Name(id='derivative_log_pdf_a', ctx=Load())
Name(id='x', ctx=Load())
Name(id='mlv', ctx=Load())
Name(id='m', ctx=Load())
Load()
Load()
Load()
Load()
Load()
Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load())
Mult()
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='arange', ctx=Load()), args=[BinOp(left=BinOp(left=Name(id='M', ctx=Load()), op=Div(), right=Num(n=2)), op=Add(), right=Num(n=1))], keywords=[])
Load()
Load()
Load()
Store()
Load()
Name(id='norm', ctx=Load())
Load()
Num(n=1)
Sub()
BinOp(left=Name(id='alpha', ctx=Load()), op=Div(), right=Num(n=2))
Load()
USub()
Num(n=1)
Load()
Load()
Attribute(value=Name(id='np', ctx=Load()), attr='arcsin', ctx=Load())
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sqrt', ctx=Load()), args=[Name(id='qae', ctx=Load())], keywords=[])
Load()
Load()
Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load())
Mult()
BinOp(left=Name(id='y', ctx=Load()), op=Add(), right=Num(n=1))
Load()
Load()
Name(id='np', ctx=Load())
Load()
BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Mult(), right=BinOp(left=Name(id='y', ctx=Load()), op=Sub(), right=Num(n=1)))
Div()
Name(id='M', ctx=Load())
Name(id='np', ctx=Load())
Load()
BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Mult(), right=BinOp(left=Name(id='y', ctx=Load()), op=Sub(), right=Num(n=1)))
Div()
Name(id='M', ctx=Load())
Name(id='np', ctx=Load())
Load()
BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Mult(), right=BinOp(left=Name(id='y', ctx=Load()), op=Add(), right=Num(n=1)))
Div()
Name(id='M', ctx=Load())
Name(id='result', ctx=Load())
Load()
Name(id='result', ctx=Load())
Load()
Name(id='result', ctx=Load())
Load()
Load()
Name(id='np', ctx=Load())
Load()
Name(id='pdf_a', ctx=Load())
Name(id='a_i', ctx=Load())
Name(id='a', ctx=Load())
Name(id='m', ctx=Load())
Load()
Load()
Name(id='cut', ctx=Load())
Name(id='a', ctx=Load())
Name(id='cut', ctx=Load())
Name(id='locmax', ctx=Load())
Load()
Load()
Load()
Load()
Name(id='np', ctx=Load())
Load()
Load()
Load()
Name(id='cut', ctx=Load())
Name(id='locmax', ctx=Load())
Name(id='cut', ctx=Load())
Name(id='b', ctx=Load())
Load()
Load()
Load()
Load()
Name(id='np', ctx=Load())
Load()
Load()
Load()
Load()
Load()
Tuple(elts=[Name(id='QuantumInstance', ctx=Load()), Name(id='Backend', ctx=Load())], ctx=Load())
Load()
Load()
Load()
Load()
Load()
Load()
Name(id='self', ctx=Load())
Load()
Load()
Name(id='self', ctx=Load())
Load()
Name(id='Dict', ctx=Load())
Index(value=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()))
Load()
Name(id='np', ctx=Load())
Load()
Load()
Load()
Name(id='int', ctx=Load())
Name(id='float', ctx=Load())
Load()
Name(id='float', ctx=Load())
Name(id='float', ctx=Load())
Load()
Call(func=Name(id='bin', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[])
Slice(lower=Num(n=2), upper=None, step=None)
Load()
Name(id='self', ctx=Load())
Load()
Load()
Name(id='np', ctx=Load())
Load()
Load()
Name(id='self', ctx=Load())
Load()
Load()
Load()
Name(id='np', ctx=Load())
Load()
BinOp(left=Name(id='y', ctx=Load()), op=Mult(), right=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()))
Div()
BinOp(left=Num(n=2), op=Pow(), right=Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Load()))
Load()
Attribute(value=Name(id='state', ctx=Load()), attr='replace', ctx=Load())
Str(s=' ')
Str(s='')
Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Load())
USub()
Num(n=1)
Load()
Name(id='np', ctx=Load())
Load()
BinOp(left=Name(id='y', ctx=Load()), op=Mult(), right=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()))
Div()
BinOp(left=Num(n=2), op=Pow(), right=Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Load()))
Load()
Name(id='result', ctx=Load())
Load()
Name(id='result', ctx=Load())
Load()
Name(id='result', ctx=Load())
Load()
Load()
Name(id='np', ctx=Load())
Load()
Name(id='pdf_a', ctx=Load())
Name(id='a_i', ctx=Load())
Name(id='a', ctx=Load())
Name(id='m', ctx=Load())
Load()
Attribute(value=Name(id='np', ctx=Load()), attr='arcsin', ctx=Load())
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sqrt', ctx=Load()), args=[Name(id='qae', ctx=Load())], keywords=[])
Load()
Load()
Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load())
Mult()
BinOp(left=Name(id='y', ctx=Load()), op=Add(), right=Num(n=1))
Load()
Load()
Name(id='np', ctx=Load())
Load()
BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Mult(), right=BinOp(left=Name(id='y', ctx=Load()), op=Sub(), right=Num(n=1)))
Div()
Name(id='M', ctx=Load())
Name(id='np', ctx=Load())
Load()
BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Mult(), right=BinOp(left=Name(id='y', ctx=Load()), op=Sub(), right=Num(n=1)))
Div()
Name(id='M', ctx=Load())
Name(id='np', ctx=Load())
Load()
BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load()), op=Mult(), right=BinOp(left=Name(id='y', ctx=Load()), op=Add(), right=Num(n=1)))
Div()
Name(id='M', ctx=Load())
Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load())
Load()
Load()
Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load())
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Name(id='result', ctx=Load())
Load()
Name(id='result', ctx=Load())
Load()
Name(id='derivative_log_pdf_a', ctx=Load())
Name(id='a', ctx=Load())
Name(id='mlv', ctx=Load())
Name(id='m', ctx=Load())
Store()
Store()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Name(id='np', ctx=Load())
Load()
Attribute(value=Name(id='np', ctx=Load()), attr='arange', ctx=Load())
BinOp(left=BinOp(left=Name(id='M', ctx=Load()), op=Div(), right=Num(n=2)), op=Add(), right=Num(n=1))
Load()
Name(id='alpha', ctx=Load())
Div()
Num(n=2)
Name(id='np', ctx=Load())
Load()
Attribute(value=Name(id='np', ctx=Load()), attr='sqrt', ctx=Load())
Name(id='qae', ctx=Load())
Name(id='np', ctx=Load())
Load()
Name(id='y', ctx=Load())
Add()
Num(n=1)
Load()
Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load())
Mult()
BinOp(left=Name(id='y', ctx=Load()), op=Sub(), right=Num(n=1))
Load()
Load()
Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load())
Mult()
BinOp(left=Name(id='y', ctx=Load()), op=Sub(), right=Num(n=1))
Load()
Load()
Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load())
Mult()
BinOp(left=Name(id='y', ctx=Load()), op=Add(), right=Num(n=1))
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Name(id='QuantumInstance', ctx=Load())
Name(id='Backend', ctx=Load())
Load()
Load()
Load()
Load()
Tuple(elts=[Name(id='str', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load())
Load()
Load()
Load()
Load()
Load()
Name(id='bin', ctx=Load())
Name(id='i', ctx=Load())
Num(n=2)
Load()
Load()
Load()
Load()
Name(id='y', ctx=Load())
Mult()
Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load())
Num(n=2)
Pow()
Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Load())
Name(id='state', ctx=Load())
Load()
Name(id='self', ctx=Load())
Load()
Load()
Name(id='y', ctx=Load())
Mult()
Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load())
Num(n=2)
Pow()
Attribute(value=Name(id='self', ctx=Load()), attr='_m', ctx=Load())
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Name(id='np', ctx=Load())
Load()
Attribute(value=Name(id='np', ctx=Load()), attr='sqrt', ctx=Load())
Name(id='qae', ctx=Load())
Name(id='np', ctx=Load())
Load()
Name(id='y', ctx=Load())
Add()
Num(n=1)
Load()
Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load())
Mult()
BinOp(left=Name(id='y', ctx=Load()), op=Sub(), right=Num(n=1))
Load()
Load()
Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load())
Mult()
BinOp(left=Name(id='y', ctx=Load()), op=Sub(), right=Num(n=1))
Load()
Load()
Attribute(value=Name(id='np', ctx=Load()), attr='pi', ctx=Load())
Mult()
BinOp(left=Name(id='y', ctx=Load()), op=Add(), right=Num(n=1))
Load()
Name(id='self', ctx=Load())
Load()
Name(id='self', ctx=Load())
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Name(id='np', ctx=Load())
Load()
BinOp(left=Name(id='M', ctx=Load()), op=Div(), right=Num(n=2))
Add()
Num(n=1)
Load()
Load()
Name(id='np', ctx=Load())
Load()
Load()
Load()
Load()
Name(id='np', ctx=Load())
Load()
Name(id='y', ctx=Load())
Sub()
Num(n=1)
Name(id='np', ctx=Load())
Load()
Name(id='y', ctx=Load())
Sub()
Num(n=1)
Name(id='np', ctx=Load())
Load()
Name(id='y', ctx=Load())
Add()
Num(n=1)
Load()
Load()
Name(id='str', ctx=Load())
Name(id='int', ctx=Load())
Load()
Load()
Load()
Load()
Name(id='np', ctx=Load())
Load()
Name(id='self', ctx=Load())
Load()
Load()
Load()
Load()
Name(id='np', ctx=Load())
Load()
Name(id='self', ctx=Load())
Load()
Load()
Name(id='np', ctx=Load())
Load()
Load()
Load()
Load()
Name(id='np', ctx=Load())
Load()
Name(id='y', ctx=Load())
Sub()
Num(n=1)
Name(id='np', ctx=Load())
Load()
Name(id='y', ctx=Load())
Sub()
Num(n=1)
Name(id='np', ctx=Load())
Load()
Name(id='y', ctx=Load())
Add()
Num(n=1)
Load()
Load()
Load()
Name(id='M', ctx=Load())
Div()
Num(n=2)
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
  metric  value
0     NC      2
DONE!
