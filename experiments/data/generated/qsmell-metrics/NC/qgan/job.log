Python 3.7.8
Module(body=[Expr(value=Str(s='Quantum Generative Adversarial Network.')), ImportFrom(module='typing', names=[alias(name='Optional', asname=None), alias(name='Union', asname=None), alias(name='List', asname=None), alias(name='Dict', asname=None), alias(name='Any', asname=None), alias(name='Callable', asname=None)], level=0), ImportFrom(module='types', names=[alias(name='FunctionType', asname=None)], level=0), Import(names=[alias(name='csv', asname=None)]), Import(names=[alias(name='os', asname=None)]), Import(names=[alias(name='logging', asname=None)]), Import(names=[alias(name='numpy', asname='np')]), ImportFrom(module='scipy.stats', names=[alias(name='entropy', asname=None)], level=0), ImportFrom(module='qiskit.circuit', names=[alias(name='QuantumCircuit', asname=None)], level=0), ImportFrom(module='qiskit.providers', names=[alias(name='Backend', asname=None)], level=0), ImportFrom(module='qiskit.utils', names=[alias(name='QuantumInstance', asname=None), alias(name='algorithm_globals', asname=None)], level=0), ImportFrom(module='qiskit.algorithms.optimizers', names=[alias(name='Optimizer', asname=None)], level=0), ImportFrom(module='qiskit.opflow.gradients', names=[alias(name='Gradient', asname=None)], level=0), ImportFrom(module='qiskit.utils.validation', names=[alias(name='validate_min', asname=None)], level=0), ImportFrom(module='datasets.dataset_helper', names=[alias(name='discretize_and_truncate', asname=None)], level=4), ImportFrom(module='exceptions', names=[alias(name='QiskitMachineLearningError', asname=None)], level=4), ImportFrom(module='discriminative_network', names=[alias(name='DiscriminativeNetwork', asname=None)], level=1), ImportFrom(module='generative_network', names=[alias(name='GenerativeNetwork', asname=None)], level=1), ImportFrom(module='quantum_generator', names=[alias(name='QuantumGenerator', asname=None)], level=1), ImportFrom(module='numpy_discriminator', names=[alias(name='NumPyDiscriminator', asname=None)], level=1), Assign(targets=[Name(id='logger', ctx=Store())], value=Call(func=Attribute(value=Name(id='logging', ctx=Load()), attr='getLogger', ctx=Load()), args=[Name(id='__name__', ctx=Load())], keywords=[])), ClassDef(name='QGAN', bases=[], keywords=[], body=[Expr(value=Str(s="The Quantum Generative Adversarial Network algorithm.\n\n    The qGAN [1] is a hybrid quantum-classical algorithm used for generative modeling tasks.\n\n    This adaptive algorithm uses the interplay of a generative\n    :class:`~qiskit_machine_learning.neural_networks.GenerativeNetwork` and a\n    discriminative :class:`~qiskit_machine_learning.neural_networks.DiscriminativeNetwork`\n    network to learn the probability distribution underlying given training data.\n\n    These networks are trained in alternating optimization steps, where the discriminator tries to\n    differentiate between training data samples and data samples from the generator and the\n    generator aims at generating samples which the discriminator classifies as training data\n    samples. Eventually, the quantum generator learns the training data's underlying probability\n    distribution. The trained quantum generator loads a quantum state which is a model of the\n    target distribution.\n\n    **References:**\n\n    [1] Zoufal et al.,\n        `Quantum Generative Adversarial Networks for learning and loading random distributions\n        <https://www.nature.com/articles/s41534-019-0223-2>`_\n    ")), FunctionDef(name='__init__', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='data', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Name(id='List', ctx=Load())], ctx=Load())), ctx=Load())), arg(arg='bounds', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Name(id='List', ctx=Load())], ctx=Load())), ctx=Load())), ctx=Load())), arg(arg='num_qubits', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Name(id='List', ctx=Load())], ctx=Load())), ctx=Load())), ctx=Load())), arg(arg='batch_size', annotation=Name(id='int', ctx=Load())), arg(arg='num_epochs', annotation=Name(id='int', ctx=Load())), arg(arg='seed', annotation=Name(id='int', ctx=Load())), arg(arg='discriminator', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Name(id='DiscriminativeNetwork', ctx=Load())), ctx=Load())), arg(arg='generator', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Name(id='GenerativeNetwork', ctx=Load())), ctx=Load())), arg(arg='tol_rel_ent', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Name(id='float', ctx=Load())), ctx=Load())), arg(arg='snapshot_dir', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Name(id='str', ctx=Load())), ctx=Load())), arg(arg='quantum_instance', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='QuantumInstance', ctx=Load()), Name(id='Backend', ctx=Load())], ctx=Load())), ctx=Load())), ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[NameConstant(value=None), NameConstant(value=None), Num(n=500), Num(n=3000), Num(n=7), NameConstant(value=None), NameConstant(value=None), NameConstant(value=None), NameConstant(value=None), NameConstant(value=None)]), body=[Expr(value=Str(s="\n\n        Args:\n            data: Training data of dimension k\n            bounds: k min/max data values [[min_0,max_0],...,[min_k-1,max_k-1]]\n                if univariate data: [min_0,max_0]\n            num_qubits: k numbers of qubits to determine representation resolution,\n                i.e. n qubits enable the representation of 2**n values\n                [num_qubits_0,..., num_qubits_k-1]\n            batch_size: Batch size, has a min. value of 1.\n            num_epochs: Number of training epochs\n            seed: Random number seed\n            discriminator: Discriminates between real and fake data samples\n            generator: Generates 'fake' data samples\n            tol_rel_ent: Set tolerance level for relative entropy.\n                If the training achieves relative entropy equal or lower than tolerance it finishes.\n            snapshot_dir: Directory in to which to store cvs file with parameters,\n                if None (default) then no cvs file is created.\n            quantum_instance: Quantum Instance or Backend\n        Raises:\n            QiskitMachineLearningError: invalid input\n        ")), Expr(value=Call(func=Name(id='validate_min', ctx=Load()), args=[Str(s='batch_size'), Name(id='batch_size', ctx=Load()), Num(n=1)], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Store())], value=NameConstant(value=None)), If(test=Name(id='quantum_instance', ctx=Load()), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='quantum_instance', ctx=Store())], value=Name(id='quantum_instance', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='data', ctx=Load()), ops=[Is()], comparators=[NameConstant(value=None)]), body=[Raise(exc=Call(func=Name(id='QiskitMachineLearningError', ctx=Load()), args=[Str(s='Training data not given.')], keywords=[]), cause=None)], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_data', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='array', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='bounds', ctx=Load()), ops=[Is()], comparators=[NameConstant(value=None)]), body=[Assign(targets=[Name(id='bounds_min', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='percentile', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_data', ctx=Load()), Num(n=5)], keywords=[keyword(arg='axis', value=Num(n=0))])), Assign(targets=[Name(id='bounds_max', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='percentile', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_data', ctx=Load()), Num(n=95)], keywords=[keyword(arg='axis', value=Num(n=0))])), Assign(targets=[Name(id='bounds', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='_', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='bounds_min', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='bounds', ctx=Load()), attr='append', ctx=Load()), args=[List(elts=[Subscript(value=Name(id='bounds_min', ctx=Load()), slice=Index(value=Name(id='i', ctx=Load())), ctx=Load()), Subscript(value=Name(id='bounds_max', ctx=Load()), slice=Index(value=Name(id='i', ctx=Load())), ctx=Load())], ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), If(test=Compare(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='ndim', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Num(n=1)]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='bounds', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[BoolOp(op=Or(), values=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='num_qubits', ctx=Load())], keywords=[]), Call(func=Name(id='len', ctx=Load()), args=[Subscript(value=Name(id='data', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())], keywords=[])])]), body=[Raise(exc=Call(func=Name(id='QiskitMachineLearningError', ctx=Load()), args=[Str(s='Dimensions of the data, the length of the data bounds and the numbers of qubits per dimension are incompatible.')], keywords=[]), cause=None)], orelse=[])], orelse=[If(test=Compare(left=BoolOp(op=Or(), values=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='ndim', ctx=Load()), args=[Name(id='bounds', ctx=Load())], keywords=[]), Call(func=Name(id='len', ctx=Load()), args=[Name(id='num_qubits', ctx=Load())], keywords=[])]), ops=[NotEq()], comparators=[Num(n=1)]), body=[Raise(exc=Call(func=Name(id='QiskitMachineLearningError', ctx=Load()), args=[Str(s='Dimensions of the data, the length of the data bounds and the numbers of qubits per dimension are incompatible.')], keywords=[]), cause=None)], orelse=[])]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_bounds', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='array', ctx=Load()), args=[Name(id='bounds', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_num_qubits', ctx=Store())], value=Name(id='num_qubits', ctx=Load())), If(test=Compare(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='ndim', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Num(n=1)]), body=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_num_qubits', ctx=Load()), ops=[Is()], comparators=[NameConstant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_num_qubits', ctx=Store())], value=BinOp(left=Subscript(value=Attribute(value=Name(id='np', ctx=Load()), attr='ones', ctx=Load()), slice=Index(value=Call(func=Name(id='len', ctx=Load()), args=[Subscript(value=Name(id='data', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())], keywords=[])), ctx=Load()), op=Mult(), right=Num(n=3)))], orelse=[])], orelse=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_num_qubits', ctx=Load()), ops=[Is()], comparators=[NameConstant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_num_qubits', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='array', ctx=Load()), args=[List(elts=[Num(n=3)], ctx=Load())], keywords=[]))], orelse=[])]), Assign(targets=[Tuple(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='_data', ctx=Store()), Attribute(value=Name(id='self', ctx=Load()), attr='_data_grid', ctx=Store()), Attribute(value=Name(id='self', ctx=Load()), attr='_grid_elements', ctx=Store()), Attribute(value=Name(id='self', ctx=Load()), attr='_prob_data', ctx=Store())], ctx=Store())], value=Call(func=Name(id='discretize_and_truncate', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_data', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_bounds', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_num_qubits', ctx=Load())], keywords=[keyword(arg='return_data_grid_elements', value=NameConstant(value=True)), keyword(arg='return_prob', value=NameConstant(value=True)), keyword(arg='prob_non_zero', value=NameConstant(value=True))])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_batch_size', ctx=Store())], value=Name(id='batch_size', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_num_epochs', ctx=Store())], value=Name(id='num_epochs', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_snapshot_dir', ctx=Store())], value=Name(id='snapshot_dir', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_g_loss', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_d_loss', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_rel_entr', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_tol_rel_ent', ctx=Store())], value=Name(id='tol_rel_ent', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_random_seed', ctx=Store())], value=Name(id='seed', ctx=Load())), If(test=Compare(left=Name(id='generator', ctx=Load()), ops=[Is()], comparators=[NameConstant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='set_generator', ctx=Load()), args=[], keywords=[]))], orelse=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_generator', ctx=Store())], value=Name(id='generator', ctx=Load()))]), If(test=Compare(left=Name(id='discriminator', ctx=Load()), ops=[Is()], comparators=[NameConstant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='set_discriminator', ctx=Load()), args=[], keywords=[]))], orelse=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_discriminator', ctx=Store())], value=Name(id='discriminator', ctx=Load()))]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='seed', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_random_seed', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_ret', ctx=Store())], value=Dict(keys=[], values=[]))], decorator_list=[], returns=NameConstant(value=None)), FunctionDef(name='random', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Return a numpy random.')), Return(value=Attribute(value=Name(id='algorithm_globals', ctx=Load()), attr='random', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=None), FunctionDef(name='run', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='quantum_instance', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='QuantumInstance', ctx=Load()), Name(id='Backend', ctx=Load())], ctx=Load())), ctx=Load())), ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs', annotation=None), defaults=[NameConstant(value=None)]), body=[Expr(value=Str(s='Execute the algorithm with selected backend.\n        Args:\n            quantum_instance: the experimental setting.\n            **kwargs (dict): kwargs\n        Returns:\n            dict: results of an algorithm.\n        Raises:\n            QiskitMachineLearningError: If a quantum instance or\n                                        backend has not been provided\n        ')), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='quantum_instance', ctx=Load()), ops=[Is()], comparators=[NameConstant(value=None)]), Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='quantum_instance', ctx=Load()), ops=[Is()], comparators=[NameConstant(value=None)])]), body=[Raise(exc=Call(func=Name(id='QiskitMachineLearningError', ctx=Load()), args=[Str(s='A QuantumInstance or Backend must be supplied to run the quantum algorithm.')], keywords=[]), cause=None)], orelse=[]), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='quantum_instance', ctx=Load()), Name(id='Backend', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='set_backend', ctx=Load()), args=[Name(id='quantum_instance', ctx=Load())], keywords=[keyword(arg=None, value=Name(id='kwargs', ctx=Load()))]))], orelse=[If(test=Compare(left=Name(id='quantum_instance', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='quantum_instance', ctx=Store())], value=Name(id='quantum_instance', ctx=Load()))], orelse=[])]), Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_run', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Name(id='Dict', ctx=Load())), FunctionDef(name='quantum_instance', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Returns quantum instance.')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Name(id='QuantumInstance', ctx=Load())), ctx=Load())), FunctionDef(name='quantum_instance', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='quantum_instance', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='QuantumInstance', ctx=Load()), Name(id='Backend', ctx=Load())], ctx=Load())), ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Sets quantum instance.')), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='quantum_instance', ctx=Load()), Name(id='Backend', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='quantum_instance', ctx=Store())], value=Call(func=Name(id='QuantumInstance', ctx=Load()), args=[Name(id='quantum_instance', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Store())], value=Name(id='quantum_instance', ctx=Load()))], decorator_list=[Attribute(value=Name(id='quantum_instance', ctx=Load()), attr='setter', ctx=Load())], returns=NameConstant(value=None)), FunctionDef(name='set_backend', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='backend', annotation=Name(id='Backend', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs', annotation=None), defaults=[]), body=[Expr(value=Str(s='Sets backend with configuration.')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='quantum_instance', ctx=Store())], value=Call(func=Name(id='QuantumInstance', ctx=Load()), args=[Name(id='backend', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='quantum_instance', ctx=Load()), attr='set_config', ctx=Load()), args=[], keywords=[keyword(arg=None, value=Name(id='kwargs', ctx=Load()))]))], decorator_list=[], returns=NameConstant(value=None)), FunctionDef(name='backend', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Returns backend.')), Return(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='quantum_instance', ctx=Load()), attr='backend', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='Backend', ctx=Load())), FunctionDef(name='backend', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='backend', annotation=Name(id='Backend', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Sets backend without additional configuration.')), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='set_backend', ctx=Load()), args=[Name(id='backend', ctx=Load())], keywords=[]))], decorator_list=[Attribute(value=Name(id='backend', ctx=Load()), attr='setter', ctx=Load())], returns=None), FunctionDef(name='seed', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Returns random seed')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_random_seed', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=None), FunctionDef(name='seed', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='s', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='\n        Sets the random seed for QGAN and updates the algorithm_globals seed\n        at the same time\n\n        Args:\n            s (int): random seed\n        ')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_random_seed', ctx=Store())], value=Name(id='s', ctx=Load())), Assign(targets=[Attribute(value=Name(id='algorithm_globals', ctx=Load()), attr='random_seed', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_random_seed', ctx=Load())), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_discriminator', ctx=Load()), attr='set_seed', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_random_seed', ctx=Load())], keywords=[]))], decorator_list=[Attribute(value=Name(id='seed', ctx=Load()), attr='setter', ctx=Load())], returns=None), FunctionDef(name='tol_rel_ent', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Returns tolerance for relative entropy')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_tol_rel_ent', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=None), FunctionDef(name='tol_rel_ent', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='t', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='\n        Set tolerance for relative entropy\n\n        Args:\n            t (float): or None, Set tolerance level for relative entropy.\n                If the training achieves relative\n                entropy equal or lower than tolerance it finishes.\n        ')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_tol_rel_ent', ctx=Store())], value=Name(id='t', ctx=Load()))], decorator_list=[Attribute(value=Name(id='tol_rel_ent', ctx=Load()), attr='setter', ctx=Load())], returns=None), FunctionDef(name='generator', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Returns generator')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_generator', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=None), FunctionDef(name='set_generator', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='generator_circuit', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Name(id='QuantumCircuit', ctx=Load())), ctx=Load())), arg(arg='generator_init_params', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), ctx=Load())), arg(arg='generator_optimizer', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Name(id='Optimizer', ctx=Load())), ctx=Load())), arg(arg='generator_gradient', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='Callable', ctx=Load()), Name(id='Gradient', ctx=Load())], ctx=Load())), ctx=Load())), ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[NameConstant(value=None), NameConstant(value=None), NameConstant(value=None), NameConstant(value=None)]), body=[Expr(value=Str(s='Initialize generator.\n\n        Args:\n            generator_circuit: parameterized quantum circuit which sets\n                the structure of the quantum generator\n            generator_init_params: initial parameters for the generator circuit\n            generator_optimizer: optimizer to be used for the training of the generator\n            generator_gradient: A Gradient object, or a function returning partial\n                derivatives of the loss function w.r.t. the generator variational\n                params.\n        Raises:\n            QiskitMachineLearningError: invalid input\n        ')), If(test=Name(id='generator_gradient', ctx=Load()), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='generator_gradient', ctx=Load()), Tuple(elts=[Name(id='Gradient', ctx=Load()), Name(id='FunctionType', ctx=Load())], ctx=Load())], keywords=[])), body=[Raise(exc=Call(func=Name(id='QiskitMachineLearningError', ctx=Load()), args=[Str(s='Please pass either a Gradient object or a function as the generator_gradient argument.')], keywords=[]), cause=None)], orelse=[])], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_generator', ctx=Store())], value=Call(func=Name(id='QuantumGenerator', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_bounds', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_num_qubits', ctx=Load()), Name(id='generator_circuit', ctx=Load()), Name(id='generator_init_params', ctx=Load()), Name(id='generator_optimizer', ctx=Load()), Name(id='generator_gradient', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_snapshot_dir', ctx=Load())], keywords=[]))], decorator_list=[], returns=None), FunctionDef(name='discriminator', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Returns discriminator')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_discriminator', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=None), FunctionDef(name='set_discriminator', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='discriminator', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[NameConstant(value=None)]), body=[Expr(value=Str(s='\n        Initialize discriminator.\n\n        Args:\n            discriminator (Discriminator): discriminator\n        ')), If(test=Compare(left=Name(id='discriminator', ctx=Load()), ops=[Is()], comparators=[NameConstant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_discriminator', ctx=Store())], value=Call(func=Name(id='NumPyDiscriminator', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_num_qubits', ctx=Load())], keywords=[])], keywords=[]))], orelse=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_discriminator', ctx=Store())], value=Name(id='discriminator', ctx=Load()))]), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_discriminator', ctx=Load()), attr='set_seed', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_random_seed', ctx=Load())], keywords=[]))], decorator_list=[], returns=None), FunctionDef(name='g_loss', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Returns generator loss')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_g_loss', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='float', ctx=Load())), ctx=Load())), FunctionDef(name='d_loss', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Returns discriminator loss')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_d_loss', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='float', ctx=Load())), ctx=Load())), FunctionDef(name='rel_entr', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Returns relative entropy between target and trained distribution')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_rel_entr', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='float', ctx=Load())), ctx=Load())), FunctionDef(name='get_rel_entr', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Get relative entropy between target and trained distribution')), Assign(targets=[Tuple(elts=[Name(id='samples_gen', ctx=Store()), Name(id='prob_gen', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_generator', ctx=Load()), attr='get_output', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load())], keywords=[])), Assign(targets=[Name(id='temp', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='zeros', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_grid_elements', ctx=Load())], keywords=[])], keywords=[])), For(target=Tuple(elts=[Name(id='j', ctx=Store()), Name(id='sample', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='samples_gen', ctx=Load())], keywords=[]), body=[For(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='element', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_grid_elements', ctx=Load())], keywords=[]), body=[If(test=Compare(left=Name(id='sample', ctx=Load()), ops=[Eq()], comparators=[Name(id='element', ctx=Load())]), body=[AugAssign(target=Subscript(value=Name(id='temp', ctx=Load()), slice=Index(value=Name(id='i', ctx=Load())), ctx=Store()), op=Add(), value=Subscript(value=Name(id='prob_gen', ctx=Load()), slice=Index(value=Name(id='j', ctx=Load())), ctx=Load()))], orelse=[])], orelse=[])], orelse=[]), Assign(targets=[Name(id='prob_gen', ctx=Store())], value=ListComp(elt=IfExp(test=Compare(left=Name(id='x', ctx=Load()), ops=[Eq()], comparators=[Num(n=0)]), body=Num(n=1e-08), orelse=Name(id='x', ctx=Load())), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='temp', ctx=Load()), ifs=[], is_async=0)])), Assign(targets=[Name(id='rel_entr', ctx=Store())], value=Call(func=Name(id='entropy', ctx=Load()), args=[Name(id='prob_gen', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_prob_data', ctx=Load())], keywords=[])), Return(value=Name(id='rel_entr', ctx=Load()))], decorator_list=[], returns=Name(id='float', ctx=Load())), FunctionDef(name='_store_params', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='e', annotation=None), arg(arg='d_loss', annotation=None), arg(arg='g_loss', annotation=None), arg(arg='rel_entr', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_snapshot_dir', ctx=Load()), Str(s='output.csv')], keywords=[])], keywords=[keyword(arg='mode', value=Str(s='a')), keyword(arg='encoding', value=Str(s='utf8'))]), optional_vars=Name(id='csv_file', ctx=Store()))], body=[Assign(targets=[Name(id='fieldnames', ctx=Store())], value=List(elts=[Str(s='epoch'), Str(s='loss_discriminator'), Str(s='loss_generator'), Str(s='params_generator'), Str(s='rel_entropy')], ctx=Load())), Assign(targets=[Name(id='writer', ctx=Store())], value=Call(func=Attribute(value=Name(id='csv', ctx=Load()), attr='DictWriter', ctx=Load()), args=[Name(id='csv_file', ctx=Load())], keywords=[keyword(arg='fieldnames', value=Name(id='fieldnames', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='writer', ctx=Load()), attr='writerow', ctx=Load()), args=[Dict(keys=[Str(s='epoch'), Str(s='loss_discriminator'), Str(s='loss_generator'), Str(s='params_generator'), Str(s='rel_entropy')], values=[Name(id='e', ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='average', ctx=Load()), args=[Name(id='d_loss', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='average', ctx=Load()), args=[Name(id='g_loss', ctx=Load())], keywords=[]), Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_generator', ctx=Load()), attr='parameter_values', ctx=Load()), Name(id='rel_entr', ctx=Load())])], keywords=[]))]), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_discriminator', ctx=Load()), attr='save_model', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_snapshot_dir', ctx=Load())], keywords=[]))], decorator_list=[], returns=None), FunctionDef(name='train', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='\n        Train the qGAN\n\n        Raises:\n            QiskitMachineLearningError: Batch size bigger than the number of\n                                        items in the truncated data set\n        ')), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_snapshot_dir', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=[With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_snapshot_dir', ctx=Load()), Str(s='output.csv')], keywords=[])], keywords=[keyword(arg='mode', value=Str(s='w')), keyword(arg='encoding', value=Str(s='utf8'))]), optional_vars=Name(id='csv_file', ctx=Store()))], body=[Assign(targets=[Name(id='fieldnames', ctx=Store())], value=List(elts=[Str(s='epoch'), Str(s='loss_discriminator'), Str(s='loss_generator'), Str(s='params_generator'), Str(s='rel_entropy')], ctx=Load())), Assign(targets=[Name(id='writer', ctx=Store())], value=Call(func=Attribute(value=Name(id='csv', ctx=Load()), attr='DictWriter', ctx=Load()), args=[Name(id='csv_file', ctx=Load())], keywords=[keyword(arg='fieldnames', value=Name(id='fieldnames', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='writer', ctx=Load()), attr='writeheader', ctx=Load()), args=[], keywords=[]))])], orelse=[]), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_data', ctx=Load())], keywords=[]), ops=[Lt()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='_batch_size', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='QiskitMachineLearningError', ctx=Load()), args=[JoinedStr(values=[Str(s='The batch size needs to be less than the truncated data size of '), FormattedValue(value=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_data', ctx=Load())], keywords=[]), conversion=-1, format_spec=None)])], keywords=[]), cause=None)], orelse=[]), For(target=Name(id='e', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_num_epochs', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='algorithm_globals', ctx=Load()), attr='random', ctx=Load()), attr='shuffle', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_data', ctx=Load())], keywords=[])), Assign(targets=[Name(id='index', ctx=Store())], value=Num(n=0)), While(test=Compare(left=BinOp(left=Name(id='index', ctx=Load()), op=Add(), right=Attribute(value=Name(id='self', ctx=Load()), attr='_batch_size', ctx=Load())), ops=[LtE()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_data', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='real_batch', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_data', ctx=Load()), slice=Slice(lower=Name(id='index', ctx=Load()), upper=BinOp(left=Name(id='index', ctx=Load()), op=Add(), right=Attribute(value=Name(id='self', ctx=Load()), attr='_batch_size', ctx=Load())), step=None), ctx=Load())), AugAssign(target=Name(id='index', ctx=Store()), op=Add(), value=Attribute(value=Name(id='self', ctx=Load()), attr='_batch_size', ctx=Load())), Assign(targets=[Tuple(elts=[Name(id='generated_batch', ctx=Store()), Name(id='generated_prob', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_generator', ctx=Load()), attr='get_output', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load())], keywords=[keyword(arg='shots', value=Attribute(value=Name(id='self', ctx=Load()), attr='_batch_size', ctx=Load()))])), Assign(targets=[Name(id='ret_d', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_discriminator', ctx=Load()), attr='train', ctx=Load()), args=[List(elts=[Name(id='real_batch', ctx=Load()), Name(id='generated_batch', ctx=Load())], ctx=Load()), List(elts=[BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='ones', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='real_batch', ctx=Load())], keywords=[])], keywords=[]), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='real_batch', ctx=Load())], keywords=[])), Name(id='generated_prob', ctx=Load())], ctx=Load())], keywords=[])), Assign(targets=[Name(id='d_loss_min', ctx=Store())], value=Subscript(value=Name(id='ret_d', ctx=Load()), slice=Index(value=Str(s='loss')), ctx=Load())), Assign(targets=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_generator', ctx=Load()), attr='discriminator', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_discriminator', ctx=Load())), Assign(targets=[Name(id='ret_g', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_generator', ctx=Load()), attr='train', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load())], keywords=[keyword(arg='shots', value=Attribute(value=Name(id='self', ctx=Load()), attr='_batch_size', ctx=Load()))])), Assign(targets=[Name(id='g_loss_min', ctx=Store())], value=Subscript(value=Name(id='ret_g', ctx=Load()), slice=Index(value=Str(s='loss')), ctx=Load()))], orelse=[]), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_d_loss', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load()), args=[Call(func=Name(id='float', ctx=Load()), args=[Name(id='d_loss_min', ctx=Load())], keywords=[]), Num(n=4)], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_g_loss', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load()), args=[Name(id='g_loss_min', ctx=Load()), Num(n=4)], keywords=[])], keywords=[])), Assign(targets=[Name(id='rel_entr', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_rel_entr', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_rel_entr', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load()), args=[Name(id='rel_entr', ctx=Load()), Num(n=4)], keywords=[])], keywords=[])), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_ret', ctx=Load()), slice=Index(value=Str(s='params_d')), ctx=Store())], value=Subscript(value=Name(id='ret_d', ctx=Load()), slice=Index(value=Str(s='params')), ctx=Load())), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_ret', ctx=Load()), slice=Index(value=Str(s='params_g')), ctx=Store())], value=Subscript(value=Name(id='ret_g', ctx=Load()), slice=Index(value=Str(s='params')), ctx=Load())), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_ret', ctx=Load()), slice=Index(value=Str(s='loss_d')), ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load()), args=[Call(func=Name(id='float', ctx=Load()), args=[Name(id='d_loss_min', ctx=Load())], keywords=[]), Num(n=4)], keywords=[])), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_ret', ctx=Load()), slice=Index(value=Str(s='loss_g')), ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load()), args=[Name(id='g_loss_min', ctx=Load()), Num(n=4)], keywords=[])), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_ret', ctx=Load()), slice=Index(value=Str(s='rel_entr')), ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load()), args=[Name(id='rel_entr', ctx=Load()), Num(n=4)], keywords=[])), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_snapshot_dir', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_store_params', ctx=Load()), args=[Name(id='e', ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load()), args=[Name(id='d_loss_min', ctx=Load()), Num(n=4)], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load()), args=[Name(id='g_loss_min', ctx=Load()), Num(n=4)], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load()), args=[Name(id='rel_entr', ctx=Load()), Num(n=4)], keywords=[])], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Str(s='Epoch %s/%s...'), BinOp(left=Name(id='e', ctx=Load()), op=Add(), right=Num(n=1)), Attribute(value=Name(id='self', ctx=Load()), attr='_num_epochs', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Str(s='Loss Discriminator: %s'), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load()), args=[Call(func=Name(id='float', ctx=Load()), args=[Name(id='d_loss_min', ctx=Load())], keywords=[]), Num(n=4)], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Str(s='Loss Generator: %s'), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load()), args=[Name(id='g_loss_min', ctx=Load()), Num(n=4)], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Str(s='Relative Entropy: %s'), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load()), args=[Name(id='rel_entr', ctx=Load()), Num(n=4)], keywords=[])], keywords=[])), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_tol_rel_ent', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=[If(test=Compare(left=Name(id='rel_entr', ctx=Load()), ops=[LtE()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='_tol_rel_ent', ctx=Load())]), body=[Break()], orelse=[])], orelse=[])], orelse=[])], decorator_list=[], returns=None), FunctionDef(name='_run', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='\n        Run qGAN training\n\n        Returns:\n            dict: with generator(discriminator) parameters & loss, relative entropy\n        Raises:\n            QiskitMachineLearningError: invalid backend\n        ')), If(test=Compare(left=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()), attr='backend_name', ctx=Load()), ops=[Eq()], comparators=[BoolOp(op=Or(), values=[Str(s='unitary_simulator'), Str(s='clifford_simulator')])]), body=[Raise(exc=Call(func=Name(id='QiskitMachineLearningError', ctx=Load()), args=[Str(s='Chosen backend not supported - Set backend either to statevector_simulator, qasm_simulator or actual quantum hardware')], keywords=[]), cause=None)], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='train', ctx=Load()), args=[], keywords=[])), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_ret', ctx=Load()))], decorator_list=[], returns=None)], decorator_list=[])])
Expr(value=Str(s='Quantum Generative Adversarial Network.'))
ImportFrom(module='typing', names=[alias(name='Optional', asname=None), alias(name='Union', asname=None), alias(name='List', asname=None), alias(name='Dict', asname=None), alias(name='Any', asname=None), alias(name='Callable', asname=None)], level=0)
ImportFrom(module='types', names=[alias(name='FunctionType', asname=None)], level=0)
Import(names=[alias(name='csv', asname=None)])
Import(names=[alias(name='os', asname=None)])
Import(names=[alias(name='logging', asname=None)])
Import(names=[alias(name='numpy', asname='np')])
ImportFrom(module='scipy.stats', names=[alias(name='entropy', asname=None)], level=0)
ImportFrom(module='qiskit.circuit', names=[alias(name='QuantumCircuit', asname=None)], level=0)
ImportFrom(module='qiskit.providers', names=[alias(name='Backend', asname=None)], level=0)
ImportFrom(module='qiskit.utils', names=[alias(name='QuantumInstance', asname=None), alias(name='algorithm_globals', asname=None)], level=0)
ImportFrom(module='qiskit.algorithms.optimizers', names=[alias(name='Optimizer', asname=None)], level=0)
ImportFrom(module='qiskit.opflow.gradients', names=[alias(name='Gradient', asname=None)], level=0)
ImportFrom(module='qiskit.utils.validation', names=[alias(name='validate_min', asname=None)], level=0)
ImportFrom(module='datasets.dataset_helper', names=[alias(name='discretize_and_truncate', asname=None)], level=4)
ImportFrom(module='exceptions', names=[alias(name='QiskitMachineLearningError', asname=None)], level=4)
ImportFrom(module='discriminative_network', names=[alias(name='DiscriminativeNetwork', asname=None)], level=1)
ImportFrom(module='generative_network', names=[alias(name='GenerativeNetwork', asname=None)], level=1)
ImportFrom(module='quantum_generator', names=[alias(name='QuantumGenerator', asname=None)], level=1)
ImportFrom(module='numpy_discriminator', names=[alias(name='NumPyDiscriminator', asname=None)], level=1)
Assign(targets=[Name(id='logger', ctx=Store())], value=Call(func=Attribute(value=Name(id='logging', ctx=Load()), attr='getLogger', ctx=Load()), args=[Name(id='__name__', ctx=Load())], keywords=[]))
ClassDef(name='QGAN', bases=[], keywords=[], body=[Expr(value=Str(s="The Quantum Generative Adversarial Network algorithm.\n\n    The qGAN [1] is a hybrid quantum-classical algorithm used for generative modeling tasks.\n\n    This adaptive algorithm uses the interplay of a generative\n    :class:`~qiskit_machine_learning.neural_networks.GenerativeNetwork` and a\n    discriminative :class:`~qiskit_machine_learning.neural_networks.DiscriminativeNetwork`\n    network to learn the probability distribution underlying given training data.\n\n    These networks are trained in alternating optimization steps, where the discriminator tries to\n    differentiate between training data samples and data samples from the generator and the\n    generator aims at generating samples which the discriminator classifies as training data\n    samples. Eventually, the quantum generator learns the training data's underlying probability\n    distribution. The trained quantum generator loads a quantum state which is a model of the\n    target distribution.\n\n    **References:**\n\n    [1] Zoufal et al.,\n        `Quantum Generative Adversarial Networks for learning and loading random distributions\n        <https://www.nature.com/articles/s41534-019-0223-2>`_\n    ")), FunctionDef(name='__init__', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='data', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Name(id='List', ctx=Load())], ctx=Load())), ctx=Load())), arg(arg='bounds', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Name(id='List', ctx=Load())], ctx=Load())), ctx=Load())), ctx=Load())), arg(arg='num_qubits', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Name(id='List', ctx=Load())], ctx=Load())), ctx=Load())), ctx=Load())), arg(arg='batch_size', annotation=Name(id='int', ctx=Load())), arg(arg='num_epochs', annotation=Name(id='int', ctx=Load())), arg(arg='seed', annotation=Name(id='int', ctx=Load())), arg(arg='discriminator', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Name(id='DiscriminativeNetwork', ctx=Load())), ctx=Load())), arg(arg='generator', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Name(id='GenerativeNetwork', ctx=Load())), ctx=Load())), arg(arg='tol_rel_ent', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Name(id='float', ctx=Load())), ctx=Load())), arg(arg='snapshot_dir', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Name(id='str', ctx=Load())), ctx=Load())), arg(arg='quantum_instance', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='QuantumInstance', ctx=Load()), Name(id='Backend', ctx=Load())], ctx=Load())), ctx=Load())), ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[NameConstant(value=None), NameConstant(value=None), Num(n=500), Num(n=3000), Num(n=7), NameConstant(value=None), NameConstant(value=None), NameConstant(value=None), NameConstant(value=None), NameConstant(value=None)]), body=[Expr(value=Str(s="\n\n        Args:\n            data: Training data of dimension k\n            bounds: k min/max data values [[min_0,max_0],...,[min_k-1,max_k-1]]\n                if univariate data: [min_0,max_0]\n            num_qubits: k numbers of qubits to determine representation resolution,\n                i.e. n qubits enable the representation of 2**n values\n                [num_qubits_0,..., num_qubits_k-1]\n            batch_size: Batch size, has a min. value of 1.\n            num_epochs: Number of training epochs\n            seed: Random number seed\n            discriminator: Discriminates between real and fake data samples\n            generator: Generates 'fake' data samples\n            tol_rel_ent: Set tolerance level for relative entropy.\n                If the training achieves relative entropy equal or lower than tolerance it finishes.\n            snapshot_dir: Directory in to which to store cvs file with parameters,\n                if None (default) then no cvs file is created.\n            quantum_instance: Quantum Instance or Backend\n        Raises:\n            QiskitMachineLearningError: invalid input\n        ")), Expr(value=Call(func=Name(id='validate_min', ctx=Load()), args=[Str(s='batch_size'), Name(id='batch_size', ctx=Load()), Num(n=1)], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Store())], value=NameConstant(value=None)), If(test=Name(id='quantum_instance', ctx=Load()), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='quantum_instance', ctx=Store())], value=Name(id='quantum_instance', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='data', ctx=Load()), ops=[Is()], comparators=[NameConstant(value=None)]), body=[Raise(exc=Call(func=Name(id='QiskitMachineLearningError', ctx=Load()), args=[Str(s='Training data not given.')], keywords=[]), cause=None)], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_data', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='array', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='bounds', ctx=Load()), ops=[Is()], comparators=[NameConstant(value=None)]), body=[Assign(targets=[Name(id='bounds_min', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='percentile', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_data', ctx=Load()), Num(n=5)], keywords=[keyword(arg='axis', value=Num(n=0))])), Assign(targets=[Name(id='bounds_max', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='percentile', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_data', ctx=Load()), Num(n=95)], keywords=[keyword(arg='axis', value=Num(n=0))])), Assign(targets=[Name(id='bounds', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='_', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='bounds_min', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='bounds', ctx=Load()), attr='append', ctx=Load()), args=[List(elts=[Subscript(value=Name(id='bounds_min', ctx=Load()), slice=Index(value=Name(id='i', ctx=Load())), ctx=Load()), Subscript(value=Name(id='bounds_max', ctx=Load()), slice=Index(value=Name(id='i', ctx=Load())), ctx=Load())], ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), If(test=Compare(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='ndim', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Num(n=1)]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='bounds', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[BoolOp(op=Or(), values=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='num_qubits', ctx=Load())], keywords=[]), Call(func=Name(id='len', ctx=Load()), args=[Subscript(value=Name(id='data', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())], keywords=[])])]), body=[Raise(exc=Call(func=Name(id='QiskitMachineLearningError', ctx=Load()), args=[Str(s='Dimensions of the data, the length of the data bounds and the numbers of qubits per dimension are incompatible.')], keywords=[]), cause=None)], orelse=[])], orelse=[If(test=Compare(left=BoolOp(op=Or(), values=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='ndim', ctx=Load()), args=[Name(id='bounds', ctx=Load())], keywords=[]), Call(func=Name(id='len', ctx=Load()), args=[Name(id='num_qubits', ctx=Load())], keywords=[])]), ops=[NotEq()], comparators=[Num(n=1)]), body=[Raise(exc=Call(func=Name(id='QiskitMachineLearningError', ctx=Load()), args=[Str(s='Dimensions of the data, the length of the data bounds and the numbers of qubits per dimension are incompatible.')], keywords=[]), cause=None)], orelse=[])]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_bounds', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='array', ctx=Load()), args=[Name(id='bounds', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_num_qubits', ctx=Store())], value=Name(id='num_qubits', ctx=Load())), If(test=Compare(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='ndim', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Num(n=1)]), body=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_num_qubits', ctx=Load()), ops=[Is()], comparators=[NameConstant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_num_qubits', ctx=Store())], value=BinOp(left=Subscript(value=Attribute(value=Name(id='np', ctx=Load()), attr='ones', ctx=Load()), slice=Index(value=Call(func=Name(id='len', ctx=Load()), args=[Subscript(value=Name(id='data', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())], keywords=[])), ctx=Load()), op=Mult(), right=Num(n=3)))], orelse=[])], orelse=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_num_qubits', ctx=Load()), ops=[Is()], comparators=[NameConstant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_num_qubits', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='array', ctx=Load()), args=[List(elts=[Num(n=3)], ctx=Load())], keywords=[]))], orelse=[])]), Assign(targets=[Tuple(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='_data', ctx=Store()), Attribute(value=Name(id='self', ctx=Load()), attr='_data_grid', ctx=Store()), Attribute(value=Name(id='self', ctx=Load()), attr='_grid_elements', ctx=Store()), Attribute(value=Name(id='self', ctx=Load()), attr='_prob_data', ctx=Store())], ctx=Store())], value=Call(func=Name(id='discretize_and_truncate', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_data', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_bounds', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_num_qubits', ctx=Load())], keywords=[keyword(arg='return_data_grid_elements', value=NameConstant(value=True)), keyword(arg='return_prob', value=NameConstant(value=True)), keyword(arg='prob_non_zero', value=NameConstant(value=True))])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_batch_size', ctx=Store())], value=Name(id='batch_size', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_num_epochs', ctx=Store())], value=Name(id='num_epochs', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_snapshot_dir', ctx=Store())], value=Name(id='snapshot_dir', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_g_loss', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_d_loss', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_rel_entr', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_tol_rel_ent', ctx=Store())], value=Name(id='tol_rel_ent', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_random_seed', ctx=Store())], value=Name(id='seed', ctx=Load())), If(test=Compare(left=Name(id='generator', ctx=Load()), ops=[Is()], comparators=[NameConstant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='set_generator', ctx=Load()), args=[], keywords=[]))], orelse=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_generator', ctx=Store())], value=Name(id='generator', ctx=Load()))]), If(test=Compare(left=Name(id='discriminator', ctx=Load()), ops=[Is()], comparators=[NameConstant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='set_discriminator', ctx=Load()), args=[], keywords=[]))], orelse=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_discriminator', ctx=Store())], value=Name(id='discriminator', ctx=Load()))]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='seed', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_random_seed', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_ret', ctx=Store())], value=Dict(keys=[], values=[]))], decorator_list=[], returns=NameConstant(value=None)), FunctionDef(name='random', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Return a numpy random.')), Return(value=Attribute(value=Name(id='algorithm_globals', ctx=Load()), attr='random', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=None), FunctionDef(name='run', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='quantum_instance', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='QuantumInstance', ctx=Load()), Name(id='Backend', ctx=Load())], ctx=Load())), ctx=Load())), ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs', annotation=None), defaults=[NameConstant(value=None)]), body=[Expr(value=Str(s='Execute the algorithm with selected backend.\n        Args:\n            quantum_instance: the experimental setting.\n            **kwargs (dict): kwargs\n        Returns:\n            dict: results of an algorithm.\n        Raises:\n            QiskitMachineLearningError: If a quantum instance or\n                                        backend has not been provided\n        ')), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='quantum_instance', ctx=Load()), ops=[Is()], comparators=[NameConstant(value=None)]), Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='quantum_instance', ctx=Load()), ops=[Is()], comparators=[NameConstant(value=None)])]), body=[Raise(exc=Call(func=Name(id='QiskitMachineLearningError', ctx=Load()), args=[Str(s='A QuantumInstance or Backend must be supplied to run the quantum algorithm.')], keywords=[]), cause=None)], orelse=[]), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='quantum_instance', ctx=Load()), Name(id='Backend', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='set_backend', ctx=Load()), args=[Name(id='quantum_instance', ctx=Load())], keywords=[keyword(arg=None, value=Name(id='kwargs', ctx=Load()))]))], orelse=[If(test=Compare(left=Name(id='quantum_instance', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='quantum_instance', ctx=Store())], value=Name(id='quantum_instance', ctx=Load()))], orelse=[])]), Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_run', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Name(id='Dict', ctx=Load())), FunctionDef(name='quantum_instance', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Returns quantum instance.')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Name(id='QuantumInstance', ctx=Load())), ctx=Load())), FunctionDef(name='quantum_instance', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='quantum_instance', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='QuantumInstance', ctx=Load()), Name(id='Backend', ctx=Load())], ctx=Load())), ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Sets quantum instance.')), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='quantum_instance', ctx=Load()), Name(id='Backend', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='quantum_instance', ctx=Store())], value=Call(func=Name(id='QuantumInstance', ctx=Load()), args=[Name(id='quantum_instance', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Store())], value=Name(id='quantum_instance', ctx=Load()))], decorator_list=[Attribute(value=Name(id='quantum_instance', ctx=Load()), attr='setter', ctx=Load())], returns=NameConstant(value=None)), FunctionDef(name='set_backend', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='backend', annotation=Name(id='Backend', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs', annotation=None), defaults=[]), body=[Expr(value=Str(s='Sets backend with configuration.')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='quantum_instance', ctx=Store())], value=Call(func=Name(id='QuantumInstance', ctx=Load()), args=[Name(id='backend', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='quantum_instance', ctx=Load()), attr='set_config', ctx=Load()), args=[], keywords=[keyword(arg=None, value=Name(id='kwargs', ctx=Load()))]))], decorator_list=[], returns=NameConstant(value=None)), FunctionDef(name='backend', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Returns backend.')), Return(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='quantum_instance', ctx=Load()), attr='backend', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='Backend', ctx=Load())), FunctionDef(name='backend', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='backend', annotation=Name(id='Backend', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Sets backend without additional configuration.')), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='set_backend', ctx=Load()), args=[Name(id='backend', ctx=Load())], keywords=[]))], decorator_list=[Attribute(value=Name(id='backend', ctx=Load()), attr='setter', ctx=Load())], returns=None), FunctionDef(name='seed', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Returns random seed')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_random_seed', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=None), FunctionDef(name='seed', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='s', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='\n        Sets the random seed for QGAN and updates the algorithm_globals seed\n        at the same time\n\n        Args:\n            s (int): random seed\n        ')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_random_seed', ctx=Store())], value=Name(id='s', ctx=Load())), Assign(targets=[Attribute(value=Name(id='algorithm_globals', ctx=Load()), attr='random_seed', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_random_seed', ctx=Load())), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_discriminator', ctx=Load()), attr='set_seed', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_random_seed', ctx=Load())], keywords=[]))], decorator_list=[Attribute(value=Name(id='seed', ctx=Load()), attr='setter', ctx=Load())], returns=None), FunctionDef(name='tol_rel_ent', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Returns tolerance for relative entropy')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_tol_rel_ent', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=None), FunctionDef(name='tol_rel_ent', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='t', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='\n        Set tolerance for relative entropy\n\n        Args:\n            t (float): or None, Set tolerance level for relative entropy.\n                If the training achieves relative\n                entropy equal or lower than tolerance it finishes.\n        ')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_tol_rel_ent', ctx=Store())], value=Name(id='t', ctx=Load()))], decorator_list=[Attribute(value=Name(id='tol_rel_ent', ctx=Load()), attr='setter', ctx=Load())], returns=None), FunctionDef(name='generator', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Returns generator')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_generator', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=None), FunctionDef(name='set_generator', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='generator_circuit', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Name(id='QuantumCircuit', ctx=Load())), ctx=Load())), arg(arg='generator_init_params', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), ctx=Load())), arg(arg='generator_optimizer', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Name(id='Optimizer', ctx=Load())), ctx=Load())), arg(arg='generator_gradient', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='Callable', ctx=Load()), Name(id='Gradient', ctx=Load())], ctx=Load())), ctx=Load())), ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[NameConstant(value=None), NameConstant(value=None), NameConstant(value=None), NameConstant(value=None)]), body=[Expr(value=Str(s='Initialize generator.\n\n        Args:\n            generator_circuit: parameterized quantum circuit which sets\n                the structure of the quantum generator\n            generator_init_params: initial parameters for the generator circuit\n            generator_optimizer: optimizer to be used for the training of the generator\n            generator_gradient: A Gradient object, or a function returning partial\n                derivatives of the loss function w.r.t. the generator variational\n                params.\n        Raises:\n            QiskitMachineLearningError: invalid input\n        ')), If(test=Name(id='generator_gradient', ctx=Load()), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='generator_gradient', ctx=Load()), Tuple(elts=[Name(id='Gradient', ctx=Load()), Name(id='FunctionType', ctx=Load())], ctx=Load())], keywords=[])), body=[Raise(exc=Call(func=Name(id='QiskitMachineLearningError', ctx=Load()), args=[Str(s='Please pass either a Gradient object or a function as the generator_gradient argument.')], keywords=[]), cause=None)], orelse=[])], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_generator', ctx=Store())], value=Call(func=Name(id='QuantumGenerator', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_bounds', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_num_qubits', ctx=Load()), Name(id='generator_circuit', ctx=Load()), Name(id='generator_init_params', ctx=Load()), Name(id='generator_optimizer', ctx=Load()), Name(id='generator_gradient', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_snapshot_dir', ctx=Load())], keywords=[]))], decorator_list=[], returns=None), FunctionDef(name='discriminator', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Returns discriminator')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_discriminator', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=None), FunctionDef(name='set_discriminator', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='discriminator', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[NameConstant(value=None)]), body=[Expr(value=Str(s='\n        Initialize discriminator.\n\n        Args:\n            discriminator (Discriminator): discriminator\n        ')), If(test=Compare(left=Name(id='discriminator', ctx=Load()), ops=[Is()], comparators=[NameConstant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_discriminator', ctx=Store())], value=Call(func=Name(id='NumPyDiscriminator', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_num_qubits', ctx=Load())], keywords=[])], keywords=[]))], orelse=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_discriminator', ctx=Store())], value=Name(id='discriminator', ctx=Load()))]), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_discriminator', ctx=Load()), attr='set_seed', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_random_seed', ctx=Load())], keywords=[]))], decorator_list=[], returns=None), FunctionDef(name='g_loss', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Returns generator loss')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_g_loss', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='float', ctx=Load())), ctx=Load())), FunctionDef(name='d_loss', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Returns discriminator loss')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_d_loss', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='float', ctx=Load())), ctx=Load())), FunctionDef(name='rel_entr', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Returns relative entropy between target and trained distribution')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_rel_entr', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='float', ctx=Load())), ctx=Load())), FunctionDef(name='get_rel_entr', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Get relative entropy between target and trained distribution')), Assign(targets=[Tuple(elts=[Name(id='samples_gen', ctx=Store()), Name(id='prob_gen', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_generator', ctx=Load()), attr='get_output', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load())], keywords=[])), Assign(targets=[Name(id='temp', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='zeros', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_grid_elements', ctx=Load())], keywords=[])], keywords=[])), For(target=Tuple(elts=[Name(id='j', ctx=Store()), Name(id='sample', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='samples_gen', ctx=Load())], keywords=[]), body=[For(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='element', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_grid_elements', ctx=Load())], keywords=[]), body=[If(test=Compare(left=Name(id='sample', ctx=Load()), ops=[Eq()], comparators=[Name(id='element', ctx=Load())]), body=[AugAssign(target=Subscript(value=Name(id='temp', ctx=Load()), slice=Index(value=Name(id='i', ctx=Load())), ctx=Store()), op=Add(), value=Subscript(value=Name(id='prob_gen', ctx=Load()), slice=Index(value=Name(id='j', ctx=Load())), ctx=Load()))], orelse=[])], orelse=[])], orelse=[]), Assign(targets=[Name(id='prob_gen', ctx=Store())], value=ListComp(elt=IfExp(test=Compare(left=Name(id='x', ctx=Load()), ops=[Eq()], comparators=[Num(n=0)]), body=Num(n=1e-08), orelse=Name(id='x', ctx=Load())), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='temp', ctx=Load()), ifs=[], is_async=0)])), Assign(targets=[Name(id='rel_entr', ctx=Store())], value=Call(func=Name(id='entropy', ctx=Load()), args=[Name(id='prob_gen', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_prob_data', ctx=Load())], keywords=[])), Return(value=Name(id='rel_entr', ctx=Load()))], decorator_list=[], returns=Name(id='float', ctx=Load())), FunctionDef(name='_store_params', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='e', annotation=None), arg(arg='d_loss', annotation=None), arg(arg='g_loss', annotation=None), arg(arg='rel_entr', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_snapshot_dir', ctx=Load()), Str(s='output.csv')], keywords=[])], keywords=[keyword(arg='mode', value=Str(s='a')), keyword(arg='encoding', value=Str(s='utf8'))]), optional_vars=Name(id='csv_file', ctx=Store()))], body=[Assign(targets=[Name(id='fieldnames', ctx=Store())], value=List(elts=[Str(s='epoch'), Str(s='loss_discriminator'), Str(s='loss_generator'), Str(s='params_generator'), Str(s='rel_entropy')], ctx=Load())), Assign(targets=[Name(id='writer', ctx=Store())], value=Call(func=Attribute(value=Name(id='csv', ctx=Load()), attr='DictWriter', ctx=Load()), args=[Name(id='csv_file', ctx=Load())], keywords=[keyword(arg='fieldnames', value=Name(id='fieldnames', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='writer', ctx=Load()), attr='writerow', ctx=Load()), args=[Dict(keys=[Str(s='epoch'), Str(s='loss_discriminator'), Str(s='loss_generator'), Str(s='params_generator'), Str(s='rel_entropy')], values=[Name(id='e', ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='average', ctx=Load()), args=[Name(id='d_loss', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='average', ctx=Load()), args=[Name(id='g_loss', ctx=Load())], keywords=[]), Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_generator', ctx=Load()), attr='parameter_values', ctx=Load()), Name(id='rel_entr', ctx=Load())])], keywords=[]))]), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_discriminator', ctx=Load()), attr='save_model', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_snapshot_dir', ctx=Load())], keywords=[]))], decorator_list=[], returns=None), FunctionDef(name='train', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='\n        Train the qGAN\n\n        Raises:\n            QiskitMachineLearningError: Batch size bigger than the number of\n                                        items in the truncated data set\n        ')), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_snapshot_dir', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=[With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_snapshot_dir', ctx=Load()), Str(s='output.csv')], keywords=[])], keywords=[keyword(arg='mode', value=Str(s='w')), keyword(arg='encoding', value=Str(s='utf8'))]), optional_vars=Name(id='csv_file', ctx=Store()))], body=[Assign(targets=[Name(id='fieldnames', ctx=Store())], value=List(elts=[Str(s='epoch'), Str(s='loss_discriminator'), Str(s='loss_generator'), Str(s='params_generator'), Str(s='rel_entropy')], ctx=Load())), Assign(targets=[Name(id='writer', ctx=Store())], value=Call(func=Attribute(value=Name(id='csv', ctx=Load()), attr='DictWriter', ctx=Load()), args=[Name(id='csv_file', ctx=Load())], keywords=[keyword(arg='fieldnames', value=Name(id='fieldnames', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='writer', ctx=Load()), attr='writeheader', ctx=Load()), args=[], keywords=[]))])], orelse=[]), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_data', ctx=Load())], keywords=[]), ops=[Lt()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='_batch_size', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='QiskitMachineLearningError', ctx=Load()), args=[JoinedStr(values=[Str(s='The batch size needs to be less than the truncated data size of '), FormattedValue(value=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_data', ctx=Load())], keywords=[]), conversion=-1, format_spec=None)])], keywords=[]), cause=None)], orelse=[]), For(target=Name(id='e', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_num_epochs', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='algorithm_globals', ctx=Load()), attr='random', ctx=Load()), attr='shuffle', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_data', ctx=Load())], keywords=[])), Assign(targets=[Name(id='index', ctx=Store())], value=Num(n=0)), While(test=Compare(left=BinOp(left=Name(id='index', ctx=Load()), op=Add(), right=Attribute(value=Name(id='self', ctx=Load()), attr='_batch_size', ctx=Load())), ops=[LtE()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_data', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='real_batch', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_data', ctx=Load()), slice=Slice(lower=Name(id='index', ctx=Load()), upper=BinOp(left=Name(id='index', ctx=Load()), op=Add(), right=Attribute(value=Name(id='self', ctx=Load()), attr='_batch_size', ctx=Load())), step=None), ctx=Load())), AugAssign(target=Name(id='index', ctx=Store()), op=Add(), value=Attribute(value=Name(id='self', ctx=Load()), attr='_batch_size', ctx=Load())), Assign(targets=[Tuple(elts=[Name(id='generated_batch', ctx=Store()), Name(id='generated_prob', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_generator', ctx=Load()), attr='get_output', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load())], keywords=[keyword(arg='shots', value=Attribute(value=Name(id='self', ctx=Load()), attr='_batch_size', ctx=Load()))])), Assign(targets=[Name(id='ret_d', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_discriminator', ctx=Load()), attr='train', ctx=Load()), args=[List(elts=[Name(id='real_batch', ctx=Load()), Name(id='generated_batch', ctx=Load())], ctx=Load()), List(elts=[BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='ones', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='real_batch', ctx=Load())], keywords=[])], keywords=[]), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='real_batch', ctx=Load())], keywords=[])), Name(id='generated_prob', ctx=Load())], ctx=Load())], keywords=[])), Assign(targets=[Name(id='d_loss_min', ctx=Store())], value=Subscript(value=Name(id='ret_d', ctx=Load()), slice=Index(value=Str(s='loss')), ctx=Load())), Assign(targets=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_generator', ctx=Load()), attr='discriminator', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_discriminator', ctx=Load())), Assign(targets=[Name(id='ret_g', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_generator', ctx=Load()), attr='train', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load())], keywords=[keyword(arg='shots', value=Attribute(value=Name(id='self', ctx=Load()), attr='_batch_size', ctx=Load()))])), Assign(targets=[Name(id='g_loss_min', ctx=Store())], value=Subscript(value=Name(id='ret_g', ctx=Load()), slice=Index(value=Str(s='loss')), ctx=Load()))], orelse=[]), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_d_loss', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load()), args=[Call(func=Name(id='float', ctx=Load()), args=[Name(id='d_loss_min', ctx=Load())], keywords=[]), Num(n=4)], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_g_loss', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load()), args=[Name(id='g_loss_min', ctx=Load()), Num(n=4)], keywords=[])], keywords=[])), Assign(targets=[Name(id='rel_entr', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_rel_entr', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_rel_entr', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load()), args=[Name(id='rel_entr', ctx=Load()), Num(n=4)], keywords=[])], keywords=[])), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_ret', ctx=Load()), slice=Index(value=Str(s='params_d')), ctx=Store())], value=Subscript(value=Name(id='ret_d', ctx=Load()), slice=Index(value=Str(s='params')), ctx=Load())), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_ret', ctx=Load()), slice=Index(value=Str(s='params_g')), ctx=Store())], value=Subscript(value=Name(id='ret_g', ctx=Load()), slice=Index(value=Str(s='params')), ctx=Load())), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_ret', ctx=Load()), slice=Index(value=Str(s='loss_d')), ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load()), args=[Call(func=Name(id='float', ctx=Load()), args=[Name(id='d_loss_min', ctx=Load())], keywords=[]), Num(n=4)], keywords=[])), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_ret', ctx=Load()), slice=Index(value=Str(s='loss_g')), ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load()), args=[Name(id='g_loss_min', ctx=Load()), Num(n=4)], keywords=[])), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_ret', ctx=Load()), slice=Index(value=Str(s='rel_entr')), ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load()), args=[Name(id='rel_entr', ctx=Load()), Num(n=4)], keywords=[])), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_snapshot_dir', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_store_params', ctx=Load()), args=[Name(id='e', ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load()), args=[Name(id='d_loss_min', ctx=Load()), Num(n=4)], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load()), args=[Name(id='g_loss_min', ctx=Load()), Num(n=4)], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load()), args=[Name(id='rel_entr', ctx=Load()), Num(n=4)], keywords=[])], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Str(s='Epoch %s/%s...'), BinOp(left=Name(id='e', ctx=Load()), op=Add(), right=Num(n=1)), Attribute(value=Name(id='self', ctx=Load()), attr='_num_epochs', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Str(s='Loss Discriminator: %s'), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load()), args=[Call(func=Name(id='float', ctx=Load()), args=[Name(id='d_loss_min', ctx=Load())], keywords=[]), Num(n=4)], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Str(s='Loss Generator: %s'), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load()), args=[Name(id='g_loss_min', ctx=Load()), Num(n=4)], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Str(s='Relative Entropy: %s'), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load()), args=[Name(id='rel_entr', ctx=Load()), Num(n=4)], keywords=[])], keywords=[])), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_tol_rel_ent', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=[If(test=Compare(left=Name(id='rel_entr', ctx=Load()), ops=[LtE()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='_tol_rel_ent', ctx=Load())]), body=[Break()], orelse=[])], orelse=[])], orelse=[])], decorator_list=[], returns=None), FunctionDef(name='_run', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='\n        Run qGAN training\n\n        Returns:\n            dict: with generator(discriminator) parameters & loss, relative entropy\n        Raises:\n            QiskitMachineLearningError: invalid backend\n        ')), If(test=Compare(left=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()), attr='backend_name', ctx=Load()), ops=[Eq()], comparators=[BoolOp(op=Or(), values=[Str(s='unitary_simulator'), Str(s='clifford_simulator')])]), body=[Raise(exc=Call(func=Name(id='QiskitMachineLearningError', ctx=Load()), args=[Str(s='Chosen backend not supported - Set backend either to statevector_simulator, qasm_simulator or actual quantum hardware')], keywords=[]), cause=None)], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='train', ctx=Load()), args=[], keywords=[])), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_ret', ctx=Load()))], decorator_list=[], returns=None)], decorator_list=[])
Str(s='Quantum Generative Adversarial Network.')
alias(name='Optional', asname=None)
alias(name='Union', asname=None)
alias(name='List', asname=None)
alias(name='Dict', asname=None)
alias(name='Any', asname=None)
alias(name='Callable', asname=None)
alias(name='FunctionType', asname=None)
alias(name='csv', asname=None)
alias(name='os', asname=None)
alias(name='logging', asname=None)
alias(name='numpy', asname='np')
alias(name='entropy', asname=None)
alias(name='QuantumCircuit', asname=None)
alias(name='Backend', asname=None)
alias(name='QuantumInstance', asname=None)
alias(name='algorithm_globals', asname=None)
alias(name='Optimizer', asname=None)
alias(name='Gradient', asname=None)
alias(name='validate_min', asname=None)
alias(name='discretize_and_truncate', asname=None)
alias(name='QiskitMachineLearningError', asname=None)
alias(name='DiscriminativeNetwork', asname=None)
alias(name='GenerativeNetwork', asname=None)
alias(name='QuantumGenerator', asname=None)
alias(name='NumPyDiscriminator', asname=None)
Name(id='logger', ctx=Store())
Call(func=Attribute(value=Name(id='logging', ctx=Load()), attr='getLogger', ctx=Load()), args=[Name(id='__name__', ctx=Load())], keywords=[])
Expr(value=Str(s="The Quantum Generative Adversarial Network algorithm.\n\n    The qGAN [1] is a hybrid quantum-classical algorithm used for generative modeling tasks.\n\n    This adaptive algorithm uses the interplay of a generative\n    :class:`~qiskit_machine_learning.neural_networks.GenerativeNetwork` and a\n    discriminative :class:`~qiskit_machine_learning.neural_networks.DiscriminativeNetwork`\n    network to learn the probability distribution underlying given training data.\n\n    These networks are trained in alternating optimization steps, where the discriminator tries to\n    differentiate between training data samples and data samples from the generator and the\n    generator aims at generating samples which the discriminator classifies as training data\n    samples. Eventually, the quantum generator learns the training data's underlying probability\n    distribution. The trained quantum generator loads a quantum state which is a model of the\n    target distribution.\n\n    **References:**\n\n    [1] Zoufal et al.,\n        `Quantum Generative Adversarial Networks for learning and loading random distributions\n        <https://www.nature.com/articles/s41534-019-0223-2>`_\n    "))
FunctionDef(name='__init__', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='data', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Name(id='List', ctx=Load())], ctx=Load())), ctx=Load())), arg(arg='bounds', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Name(id='List', ctx=Load())], ctx=Load())), ctx=Load())), ctx=Load())), arg(arg='num_qubits', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Name(id='List', ctx=Load())], ctx=Load())), ctx=Load())), ctx=Load())), arg(arg='batch_size', annotation=Name(id='int', ctx=Load())), arg(arg='num_epochs', annotation=Name(id='int', ctx=Load())), arg(arg='seed', annotation=Name(id='int', ctx=Load())), arg(arg='discriminator', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Name(id='DiscriminativeNetwork', ctx=Load())), ctx=Load())), arg(arg='generator', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Name(id='GenerativeNetwork', ctx=Load())), ctx=Load())), arg(arg='tol_rel_ent', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Name(id='float', ctx=Load())), ctx=Load())), arg(arg='snapshot_dir', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Name(id='str', ctx=Load())), ctx=Load())), arg(arg='quantum_instance', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='QuantumInstance', ctx=Load()), Name(id='Backend', ctx=Load())], ctx=Load())), ctx=Load())), ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[NameConstant(value=None), NameConstant(value=None), Num(n=500), Num(n=3000), Num(n=7), NameConstant(value=None), NameConstant(value=None), NameConstant(value=None), NameConstant(value=None), NameConstant(value=None)]), body=[Expr(value=Str(s="\n\n        Args:\n            data: Training data of dimension k\n            bounds: k min/max data values [[min_0,max_0],...,[min_k-1,max_k-1]]\n                if univariate data: [min_0,max_0]\n            num_qubits: k numbers of qubits to determine representation resolution,\n                i.e. n qubits enable the representation of 2**n values\n                [num_qubits_0,..., num_qubits_k-1]\n            batch_size: Batch size, has a min. value of 1.\n            num_epochs: Number of training epochs\n            seed: Random number seed\n            discriminator: Discriminates between real and fake data samples\n            generator: Generates 'fake' data samples\n            tol_rel_ent: Set tolerance level for relative entropy.\n                If the training achieves relative entropy equal or lower than tolerance it finishes.\n            snapshot_dir: Directory in to which to store cvs file with parameters,\n                if None (default) then no cvs file is created.\n            quantum_instance: Quantum Instance or Backend\n        Raises:\n            QiskitMachineLearningError: invalid input\n        ")), Expr(value=Call(func=Name(id='validate_min', ctx=Load()), args=[Str(s='batch_size'), Name(id='batch_size', ctx=Load()), Num(n=1)], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Store())], value=NameConstant(value=None)), If(test=Name(id='quantum_instance', ctx=Load()), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='quantum_instance', ctx=Store())], value=Name(id='quantum_instance', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='data', ctx=Load()), ops=[Is()], comparators=[NameConstant(value=None)]), body=[Raise(exc=Call(func=Name(id='QiskitMachineLearningError', ctx=Load()), args=[Str(s='Training data not given.')], keywords=[]), cause=None)], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_data', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='array', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='bounds', ctx=Load()), ops=[Is()], comparators=[NameConstant(value=None)]), body=[Assign(targets=[Name(id='bounds_min', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='percentile', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_data', ctx=Load()), Num(n=5)], keywords=[keyword(arg='axis', value=Num(n=0))])), Assign(targets=[Name(id='bounds_max', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='percentile', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_data', ctx=Load()), Num(n=95)], keywords=[keyword(arg='axis', value=Num(n=0))])), Assign(targets=[Name(id='bounds', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='_', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='bounds_min', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='bounds', ctx=Load()), attr='append', ctx=Load()), args=[List(elts=[Subscript(value=Name(id='bounds_min', ctx=Load()), slice=Index(value=Name(id='i', ctx=Load())), ctx=Load()), Subscript(value=Name(id='bounds_max', ctx=Load()), slice=Index(value=Name(id='i', ctx=Load())), ctx=Load())], ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), If(test=Compare(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='ndim', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Num(n=1)]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='bounds', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[BoolOp(op=Or(), values=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='num_qubits', ctx=Load())], keywords=[]), Call(func=Name(id='len', ctx=Load()), args=[Subscript(value=Name(id='data', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())], keywords=[])])]), body=[Raise(exc=Call(func=Name(id='QiskitMachineLearningError', ctx=Load()), args=[Str(s='Dimensions of the data, the length of the data bounds and the numbers of qubits per dimension are incompatible.')], keywords=[]), cause=None)], orelse=[])], orelse=[If(test=Compare(left=BoolOp(op=Or(), values=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='ndim', ctx=Load()), args=[Name(id='bounds', ctx=Load())], keywords=[]), Call(func=Name(id='len', ctx=Load()), args=[Name(id='num_qubits', ctx=Load())], keywords=[])]), ops=[NotEq()], comparators=[Num(n=1)]), body=[Raise(exc=Call(func=Name(id='QiskitMachineLearningError', ctx=Load()), args=[Str(s='Dimensions of the data, the length of the data bounds and the numbers of qubits per dimension are incompatible.')], keywords=[]), cause=None)], orelse=[])]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_bounds', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='array', ctx=Load()), args=[Name(id='bounds', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_num_qubits', ctx=Store())], value=Name(id='num_qubits', ctx=Load())), If(test=Compare(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='ndim', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Num(n=1)]), body=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_num_qubits', ctx=Load()), ops=[Is()], comparators=[NameConstant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_num_qubits', ctx=Store())], value=BinOp(left=Subscript(value=Attribute(value=Name(id='np', ctx=Load()), attr='ones', ctx=Load()), slice=Index(value=Call(func=Name(id='len', ctx=Load()), args=[Subscript(value=Name(id='data', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())], keywords=[])), ctx=Load()), op=Mult(), right=Num(n=3)))], orelse=[])], orelse=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_num_qubits', ctx=Load()), ops=[Is()], comparators=[NameConstant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_num_qubits', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='array', ctx=Load()), args=[List(elts=[Num(n=3)], ctx=Load())], keywords=[]))], orelse=[])]), Assign(targets=[Tuple(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='_data', ctx=Store()), Attribute(value=Name(id='self', ctx=Load()), attr='_data_grid', ctx=Store()), Attribute(value=Name(id='self', ctx=Load()), attr='_grid_elements', ctx=Store()), Attribute(value=Name(id='self', ctx=Load()), attr='_prob_data', ctx=Store())], ctx=Store())], value=Call(func=Name(id='discretize_and_truncate', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_data', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_bounds', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_num_qubits', ctx=Load())], keywords=[keyword(arg='return_data_grid_elements', value=NameConstant(value=True)), keyword(arg='return_prob', value=NameConstant(value=True)), keyword(arg='prob_non_zero', value=NameConstant(value=True))])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_batch_size', ctx=Store())], value=Name(id='batch_size', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_num_epochs', ctx=Store())], value=Name(id='num_epochs', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_snapshot_dir', ctx=Store())], value=Name(id='snapshot_dir', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_g_loss', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_d_loss', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_rel_entr', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_tol_rel_ent', ctx=Store())], value=Name(id='tol_rel_ent', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_random_seed', ctx=Store())], value=Name(id='seed', ctx=Load())), If(test=Compare(left=Name(id='generator', ctx=Load()), ops=[Is()], comparators=[NameConstant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='set_generator', ctx=Load()), args=[], keywords=[]))], orelse=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_generator', ctx=Store())], value=Name(id='generator', ctx=Load()))]), If(test=Compare(left=Name(id='discriminator', ctx=Load()), ops=[Is()], comparators=[NameConstant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='set_discriminator', ctx=Load()), args=[], keywords=[]))], orelse=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_discriminator', ctx=Store())], value=Name(id='discriminator', ctx=Load()))]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='seed', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_random_seed', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_ret', ctx=Store())], value=Dict(keys=[], values=[]))], decorator_list=[], returns=NameConstant(value=None))
FunctionDef(name='random', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Return a numpy random.')), Return(value=Attribute(value=Name(id='algorithm_globals', ctx=Load()), attr='random', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=None)
FunctionDef(name='run', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='quantum_instance', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='QuantumInstance', ctx=Load()), Name(id='Backend', ctx=Load())], ctx=Load())), ctx=Load())), ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs', annotation=None), defaults=[NameConstant(value=None)]), body=[Expr(value=Str(s='Execute the algorithm with selected backend.\n        Args:\n            quantum_instance: the experimental setting.\n            **kwargs (dict): kwargs\n        Returns:\n            dict: results of an algorithm.\n        Raises:\n            QiskitMachineLearningError: If a quantum instance or\n                                        backend has not been provided\n        ')), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='quantum_instance', ctx=Load()), ops=[Is()], comparators=[NameConstant(value=None)]), Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='quantum_instance', ctx=Load()), ops=[Is()], comparators=[NameConstant(value=None)])]), body=[Raise(exc=Call(func=Name(id='QiskitMachineLearningError', ctx=Load()), args=[Str(s='A QuantumInstance or Backend must be supplied to run the quantum algorithm.')], keywords=[]), cause=None)], orelse=[]), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='quantum_instance', ctx=Load()), Name(id='Backend', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='set_backend', ctx=Load()), args=[Name(id='quantum_instance', ctx=Load())], keywords=[keyword(arg=None, value=Name(id='kwargs', ctx=Load()))]))], orelse=[If(test=Compare(left=Name(id='quantum_instance', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='quantum_instance', ctx=Store())], value=Name(id='quantum_instance', ctx=Load()))], orelse=[])]), Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_run', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Name(id='Dict', ctx=Load()))
FunctionDef(name='quantum_instance', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Returns quantum instance.')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Name(id='QuantumInstance', ctx=Load())), ctx=Load()))
FunctionDef(name='quantum_instance', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='quantum_instance', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='QuantumInstance', ctx=Load()), Name(id='Backend', ctx=Load())], ctx=Load())), ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Sets quantum instance.')), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='quantum_instance', ctx=Load()), Name(id='Backend', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='quantum_instance', ctx=Store())], value=Call(func=Name(id='QuantumInstance', ctx=Load()), args=[Name(id='quantum_instance', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Store())], value=Name(id='quantum_instance', ctx=Load()))], decorator_list=[Attribute(value=Name(id='quantum_instance', ctx=Load()), attr='setter', ctx=Load())], returns=NameConstant(value=None))
FunctionDef(name='set_backend', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='backend', annotation=Name(id='Backend', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs', annotation=None), defaults=[]), body=[Expr(value=Str(s='Sets backend with configuration.')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='quantum_instance', ctx=Store())], value=Call(func=Name(id='QuantumInstance', ctx=Load()), args=[Name(id='backend', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='quantum_instance', ctx=Load()), attr='set_config', ctx=Load()), args=[], keywords=[keyword(arg=None, value=Name(id='kwargs', ctx=Load()))]))], decorator_list=[], returns=NameConstant(value=None))
FunctionDef(name='backend', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Returns backend.')), Return(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='quantum_instance', ctx=Load()), attr='backend', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='Backend', ctx=Load()))
FunctionDef(name='backend', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='backend', annotation=Name(id='Backend', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Sets backend without additional configuration.')), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='set_backend', ctx=Load()), args=[Name(id='backend', ctx=Load())], keywords=[]))], decorator_list=[Attribute(value=Name(id='backend', ctx=Load()), attr='setter', ctx=Load())], returns=None)
FunctionDef(name='seed', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Returns random seed')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_random_seed', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=None)
FunctionDef(name='seed', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='s', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='\n        Sets the random seed for QGAN and updates the algorithm_globals seed\n        at the same time\n\n        Args:\n            s (int): random seed\n        ')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_random_seed', ctx=Store())], value=Name(id='s', ctx=Load())), Assign(targets=[Attribute(value=Name(id='algorithm_globals', ctx=Load()), attr='random_seed', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_random_seed', ctx=Load())), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_discriminator', ctx=Load()), attr='set_seed', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_random_seed', ctx=Load())], keywords=[]))], decorator_list=[Attribute(value=Name(id='seed', ctx=Load()), attr='setter', ctx=Load())], returns=None)
FunctionDef(name='tol_rel_ent', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Returns tolerance for relative entropy')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_tol_rel_ent', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=None)
FunctionDef(name='tol_rel_ent', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='t', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='\n        Set tolerance for relative entropy\n\n        Args:\n            t (float): or None, Set tolerance level for relative entropy.\n                If the training achieves relative\n                entropy equal or lower than tolerance it finishes.\n        ')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_tol_rel_ent', ctx=Store())], value=Name(id='t', ctx=Load()))], decorator_list=[Attribute(value=Name(id='tol_rel_ent', ctx=Load()), attr='setter', ctx=Load())], returns=None)
FunctionDef(name='generator', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Returns generator')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_generator', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=None)
FunctionDef(name='set_generator', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='generator_circuit', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Name(id='QuantumCircuit', ctx=Load())), ctx=Load())), arg(arg='generator_init_params', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), ctx=Load())), arg(arg='generator_optimizer', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Name(id='Optimizer', ctx=Load())), ctx=Load())), arg(arg='generator_gradient', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='Callable', ctx=Load()), Name(id='Gradient', ctx=Load())], ctx=Load())), ctx=Load())), ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[NameConstant(value=None), NameConstant(value=None), NameConstant(value=None), NameConstant(value=None)]), body=[Expr(value=Str(s='Initialize generator.\n\n        Args:\n            generator_circuit: parameterized quantum circuit which sets\n                the structure of the quantum generator\n            generator_init_params: initial parameters for the generator circuit\n            generator_optimizer: optimizer to be used for the training of the generator\n            generator_gradient: A Gradient object, or a function returning partial\n                derivatives of the loss function w.r.t. the generator variational\n                params.\n        Raises:\n            QiskitMachineLearningError: invalid input\n        ')), If(test=Name(id='generator_gradient', ctx=Load()), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='generator_gradient', ctx=Load()), Tuple(elts=[Name(id='Gradient', ctx=Load()), Name(id='FunctionType', ctx=Load())], ctx=Load())], keywords=[])), body=[Raise(exc=Call(func=Name(id='QiskitMachineLearningError', ctx=Load()), args=[Str(s='Please pass either a Gradient object or a function as the generator_gradient argument.')], keywords=[]), cause=None)], orelse=[])], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_generator', ctx=Store())], value=Call(func=Name(id='QuantumGenerator', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_bounds', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_num_qubits', ctx=Load()), Name(id='generator_circuit', ctx=Load()), Name(id='generator_init_params', ctx=Load()), Name(id='generator_optimizer', ctx=Load()), Name(id='generator_gradient', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_snapshot_dir', ctx=Load())], keywords=[]))], decorator_list=[], returns=None)
FunctionDef(name='discriminator', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Returns discriminator')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_discriminator', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=None)
FunctionDef(name='set_discriminator', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='discriminator', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[NameConstant(value=None)]), body=[Expr(value=Str(s='\n        Initialize discriminator.\n\n        Args:\n            discriminator (Discriminator): discriminator\n        ')), If(test=Compare(left=Name(id='discriminator', ctx=Load()), ops=[Is()], comparators=[NameConstant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_discriminator', ctx=Store())], value=Call(func=Name(id='NumPyDiscriminator', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_num_qubits', ctx=Load())], keywords=[])], keywords=[]))], orelse=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_discriminator', ctx=Store())], value=Name(id='discriminator', ctx=Load()))]), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_discriminator', ctx=Load()), attr='set_seed', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_random_seed', ctx=Load())], keywords=[]))], decorator_list=[], returns=None)
FunctionDef(name='g_loss', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Returns generator loss')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_g_loss', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='float', ctx=Load())), ctx=Load()))
FunctionDef(name='d_loss', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Returns discriminator loss')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_d_loss', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='float', ctx=Load())), ctx=Load()))
FunctionDef(name='rel_entr', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Returns relative entropy between target and trained distribution')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_rel_entr', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='float', ctx=Load())), ctx=Load()))
FunctionDef(name='get_rel_entr', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Get relative entropy between target and trained distribution')), Assign(targets=[Tuple(elts=[Name(id='samples_gen', ctx=Store()), Name(id='prob_gen', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_generator', ctx=Load()), attr='get_output', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load())], keywords=[])), Assign(targets=[Name(id='temp', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='zeros', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_grid_elements', ctx=Load())], keywords=[])], keywords=[])), For(target=Tuple(elts=[Name(id='j', ctx=Store()), Name(id='sample', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='samples_gen', ctx=Load())], keywords=[]), body=[For(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='element', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_grid_elements', ctx=Load())], keywords=[]), body=[If(test=Compare(left=Name(id='sample', ctx=Load()), ops=[Eq()], comparators=[Name(id='element', ctx=Load())]), body=[AugAssign(target=Subscript(value=Name(id='temp', ctx=Load()), slice=Index(value=Name(id='i', ctx=Load())), ctx=Store()), op=Add(), value=Subscript(value=Name(id='prob_gen', ctx=Load()), slice=Index(value=Name(id='j', ctx=Load())), ctx=Load()))], orelse=[])], orelse=[])], orelse=[]), Assign(targets=[Name(id='prob_gen', ctx=Store())], value=ListComp(elt=IfExp(test=Compare(left=Name(id='x', ctx=Load()), ops=[Eq()], comparators=[Num(n=0)]), body=Num(n=1e-08), orelse=Name(id='x', ctx=Load())), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='temp', ctx=Load()), ifs=[], is_async=0)])), Assign(targets=[Name(id='rel_entr', ctx=Store())], value=Call(func=Name(id='entropy', ctx=Load()), args=[Name(id='prob_gen', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_prob_data', ctx=Load())], keywords=[])), Return(value=Name(id='rel_entr', ctx=Load()))], decorator_list=[], returns=Name(id='float', ctx=Load()))
FunctionDef(name='_store_params', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='e', annotation=None), arg(arg='d_loss', annotation=None), arg(arg='g_loss', annotation=None), arg(arg='rel_entr', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_snapshot_dir', ctx=Load()), Str(s='output.csv')], keywords=[])], keywords=[keyword(arg='mode', value=Str(s='a')), keyword(arg='encoding', value=Str(s='utf8'))]), optional_vars=Name(id='csv_file', ctx=Store()))], body=[Assign(targets=[Name(id='fieldnames', ctx=Store())], value=List(elts=[Str(s='epoch'), Str(s='loss_discriminator'), Str(s='loss_generator'), Str(s='params_generator'), Str(s='rel_entropy')], ctx=Load())), Assign(targets=[Name(id='writer', ctx=Store())], value=Call(func=Attribute(value=Name(id='csv', ctx=Load()), attr='DictWriter', ctx=Load()), args=[Name(id='csv_file', ctx=Load())], keywords=[keyword(arg='fieldnames', value=Name(id='fieldnames', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='writer', ctx=Load()), attr='writerow', ctx=Load()), args=[Dict(keys=[Str(s='epoch'), Str(s='loss_discriminator'), Str(s='loss_generator'), Str(s='params_generator'), Str(s='rel_entropy')], values=[Name(id='e', ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='average', ctx=Load()), args=[Name(id='d_loss', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='average', ctx=Load()), args=[Name(id='g_loss', ctx=Load())], keywords=[]), Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_generator', ctx=Load()), attr='parameter_values', ctx=Load()), Name(id='rel_entr', ctx=Load())])], keywords=[]))]), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_discriminator', ctx=Load()), attr='save_model', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_snapshot_dir', ctx=Load())], keywords=[]))], decorator_list=[], returns=None)
FunctionDef(name='train', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='\n        Train the qGAN\n\n        Raises:\n            QiskitMachineLearningError: Batch size bigger than the number of\n                                        items in the truncated data set\n        ')), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_snapshot_dir', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=[With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_snapshot_dir', ctx=Load()), Str(s='output.csv')], keywords=[])], keywords=[keyword(arg='mode', value=Str(s='w')), keyword(arg='encoding', value=Str(s='utf8'))]), optional_vars=Name(id='csv_file', ctx=Store()))], body=[Assign(targets=[Name(id='fieldnames', ctx=Store())], value=List(elts=[Str(s='epoch'), Str(s='loss_discriminator'), Str(s='loss_generator'), Str(s='params_generator'), Str(s='rel_entropy')], ctx=Load())), Assign(targets=[Name(id='writer', ctx=Store())], value=Call(func=Attribute(value=Name(id='csv', ctx=Load()), attr='DictWriter', ctx=Load()), args=[Name(id='csv_file', ctx=Load())], keywords=[keyword(arg='fieldnames', value=Name(id='fieldnames', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='writer', ctx=Load()), attr='writeheader', ctx=Load()), args=[], keywords=[]))])], orelse=[]), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_data', ctx=Load())], keywords=[]), ops=[Lt()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='_batch_size', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='QiskitMachineLearningError', ctx=Load()), args=[JoinedStr(values=[Str(s='The batch size needs to be less than the truncated data size of '), FormattedValue(value=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_data', ctx=Load())], keywords=[]), conversion=-1, format_spec=None)])], keywords=[]), cause=None)], orelse=[]), For(target=Name(id='e', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_num_epochs', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='algorithm_globals', ctx=Load()), attr='random', ctx=Load()), attr='shuffle', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_data', ctx=Load())], keywords=[])), Assign(targets=[Name(id='index', ctx=Store())], value=Num(n=0)), While(test=Compare(left=BinOp(left=Name(id='index', ctx=Load()), op=Add(), right=Attribute(value=Name(id='self', ctx=Load()), attr='_batch_size', ctx=Load())), ops=[LtE()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_data', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='real_batch', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_data', ctx=Load()), slice=Slice(lower=Name(id='index', ctx=Load()), upper=BinOp(left=Name(id='index', ctx=Load()), op=Add(), right=Attribute(value=Name(id='self', ctx=Load()), attr='_batch_size', ctx=Load())), step=None), ctx=Load())), AugAssign(target=Name(id='index', ctx=Store()), op=Add(), value=Attribute(value=Name(id='self', ctx=Load()), attr='_batch_size', ctx=Load())), Assign(targets=[Tuple(elts=[Name(id='generated_batch', ctx=Store()), Name(id='generated_prob', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_generator', ctx=Load()), attr='get_output', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load())], keywords=[keyword(arg='shots', value=Attribute(value=Name(id='self', ctx=Load()), attr='_batch_size', ctx=Load()))])), Assign(targets=[Name(id='ret_d', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_discriminator', ctx=Load()), attr='train', ctx=Load()), args=[List(elts=[Name(id='real_batch', ctx=Load()), Name(id='generated_batch', ctx=Load())], ctx=Load()), List(elts=[BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='ones', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='real_batch', ctx=Load())], keywords=[])], keywords=[]), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='real_batch', ctx=Load())], keywords=[])), Name(id='generated_prob', ctx=Load())], ctx=Load())], keywords=[])), Assign(targets=[Name(id='d_loss_min', ctx=Store())], value=Subscript(value=Name(id='ret_d', ctx=Load()), slice=Index(value=Str(s='loss')), ctx=Load())), Assign(targets=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_generator', ctx=Load()), attr='discriminator', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_discriminator', ctx=Load())), Assign(targets=[Name(id='ret_g', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_generator', ctx=Load()), attr='train', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load())], keywords=[keyword(arg='shots', value=Attribute(value=Name(id='self', ctx=Load()), attr='_batch_size', ctx=Load()))])), Assign(targets=[Name(id='g_loss_min', ctx=Store())], value=Subscript(value=Name(id='ret_g', ctx=Load()), slice=Index(value=Str(s='loss')), ctx=Load()))], orelse=[]), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_d_loss', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load()), args=[Call(func=Name(id='float', ctx=Load()), args=[Name(id='d_loss_min', ctx=Load())], keywords=[]), Num(n=4)], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_g_loss', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load()), args=[Name(id='g_loss_min', ctx=Load()), Num(n=4)], keywords=[])], keywords=[])), Assign(targets=[Name(id='rel_entr', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_rel_entr', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_rel_entr', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load()), args=[Name(id='rel_entr', ctx=Load()), Num(n=4)], keywords=[])], keywords=[])), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_ret', ctx=Load()), slice=Index(value=Str(s='params_d')), ctx=Store())], value=Subscript(value=Name(id='ret_d', ctx=Load()), slice=Index(value=Str(s='params')), ctx=Load())), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_ret', ctx=Load()), slice=Index(value=Str(s='params_g')), ctx=Store())], value=Subscript(value=Name(id='ret_g', ctx=Load()), slice=Index(value=Str(s='params')), ctx=Load())), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_ret', ctx=Load()), slice=Index(value=Str(s='loss_d')), ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load()), args=[Call(func=Name(id='float', ctx=Load()), args=[Name(id='d_loss_min', ctx=Load())], keywords=[]), Num(n=4)], keywords=[])), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_ret', ctx=Load()), slice=Index(value=Str(s='loss_g')), ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load()), args=[Name(id='g_loss_min', ctx=Load()), Num(n=4)], keywords=[])), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_ret', ctx=Load()), slice=Index(value=Str(s='rel_entr')), ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load()), args=[Name(id='rel_entr', ctx=Load()), Num(n=4)], keywords=[])), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_snapshot_dir', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_store_params', ctx=Load()), args=[Name(id='e', ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load()), args=[Name(id='d_loss_min', ctx=Load()), Num(n=4)], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load()), args=[Name(id='g_loss_min', ctx=Load()), Num(n=4)], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load()), args=[Name(id='rel_entr', ctx=Load()), Num(n=4)], keywords=[])], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Str(s='Epoch %s/%s...'), BinOp(left=Name(id='e', ctx=Load()), op=Add(), right=Num(n=1)), Attribute(value=Name(id='self', ctx=Load()), attr='_num_epochs', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Str(s='Loss Discriminator: %s'), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load()), args=[Call(func=Name(id='float', ctx=Load()), args=[Name(id='d_loss_min', ctx=Load())], keywords=[]), Num(n=4)], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Str(s='Loss Generator: %s'), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load()), args=[Name(id='g_loss_min', ctx=Load()), Num(n=4)], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Str(s='Relative Entropy: %s'), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load()), args=[Name(id='rel_entr', ctx=Load()), Num(n=4)], keywords=[])], keywords=[])), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_tol_rel_ent', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=[If(test=Compare(left=Name(id='rel_entr', ctx=Load()), ops=[LtE()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='_tol_rel_ent', ctx=Load())]), body=[Break()], orelse=[])], orelse=[])], orelse=[])], decorator_list=[], returns=None)
FunctionDef(name='_run', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='\n        Run qGAN training\n\n        Returns:\n            dict: with generator(discriminator) parameters & loss, relative entropy\n        Raises:\n            QiskitMachineLearningError: invalid backend\n        ')), If(test=Compare(left=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()), attr='backend_name', ctx=Load()), ops=[Eq()], comparators=[BoolOp(op=Or(), values=[Str(s='unitary_simulator'), Str(s='clifford_simulator')])]), body=[Raise(exc=Call(func=Name(id='QiskitMachineLearningError', ctx=Load()), args=[Str(s='Chosen backend not supported - Set backend either to statevector_simulator, qasm_simulator or actual quantum hardware')], keywords=[]), cause=None)], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='train', ctx=Load()), args=[], keywords=[])), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_ret', ctx=Load()))], decorator_list=[], returns=None)
Store()
Attribute(value=Name(id='logging', ctx=Load()), attr='getLogger', ctx=Load())
Name(id='__name__', ctx=Load())
Str(s="The Quantum Generative Adversarial Network algorithm.\n\n    The qGAN [1] is a hybrid quantum-classical algorithm used for generative modeling tasks.\n\n    This adaptive algorithm uses the interplay of a generative\n    :class:`~qiskit_machine_learning.neural_networks.GenerativeNetwork` and a\n    discriminative :class:`~qiskit_machine_learning.neural_networks.DiscriminativeNetwork`\n    network to learn the probability distribution underlying given training data.\n\n    These networks are trained in alternating optimization steps, where the discriminator tries to\n    differentiate between training data samples and data samples from the generator and the\n    generator aims at generating samples which the discriminator classifies as training data\n    samples. Eventually, the quantum generator learns the training data's underlying probability\n    distribution. The trained quantum generator loads a quantum state which is a model of the\n    target distribution.\n\n    **References:**\n\n    [1] Zoufal et al.,\n        `Quantum Generative Adversarial Networks for learning and loading random distributions\n        <https://www.nature.com/articles/s41534-019-0223-2>`_\n    ")
arguments(args=[arg(arg='self', annotation=None), arg(arg='data', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Name(id='List', ctx=Load())], ctx=Load())), ctx=Load())), arg(arg='bounds', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Name(id='List', ctx=Load())], ctx=Load())), ctx=Load())), ctx=Load())), arg(arg='num_qubits', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Name(id='List', ctx=Load())], ctx=Load())), ctx=Load())), ctx=Load())), arg(arg='batch_size', annotation=Name(id='int', ctx=Load())), arg(arg='num_epochs', annotation=Name(id='int', ctx=Load())), arg(arg='seed', annotation=Name(id='int', ctx=Load())), arg(arg='discriminator', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Name(id='DiscriminativeNetwork', ctx=Load())), ctx=Load())), arg(arg='generator', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Name(id='GenerativeNetwork', ctx=Load())), ctx=Load())), arg(arg='tol_rel_ent', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Name(id='float', ctx=Load())), ctx=Load())), arg(arg='snapshot_dir', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Name(id='str', ctx=Load())), ctx=Load())), arg(arg='quantum_instance', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='QuantumInstance', ctx=Load()), Name(id='Backend', ctx=Load())], ctx=Load())), ctx=Load())), ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[NameConstant(value=None), NameConstant(value=None), Num(n=500), Num(n=3000), Num(n=7), NameConstant(value=None), NameConstant(value=None), NameConstant(value=None), NameConstant(value=None), NameConstant(value=None)])
Expr(value=Str(s="\n\n        Args:\n            data: Training data of dimension k\n            bounds: k min/max data values [[min_0,max_0],...,[min_k-1,max_k-1]]\n                if univariate data: [min_0,max_0]\n            num_qubits: k numbers of qubits to determine representation resolution,\n                i.e. n qubits enable the representation of 2**n values\n                [num_qubits_0,..., num_qubits_k-1]\n            batch_size: Batch size, has a min. value of 1.\n            num_epochs: Number of training epochs\n            seed: Random number seed\n            discriminator: Discriminates between real and fake data samples\n            generator: Generates 'fake' data samples\n            tol_rel_ent: Set tolerance level for relative entropy.\n                If the training achieves relative entropy equal or lower than tolerance it finishes.\n            snapshot_dir: Directory in to which to store cvs file with parameters,\n                if None (default) then no cvs file is created.\n            quantum_instance: Quantum Instance or Backend\n        Raises:\n            QiskitMachineLearningError: invalid input\n        "))
Expr(value=Call(func=Name(id='validate_min', ctx=Load()), args=[Str(s='batch_size'), Name(id='batch_size', ctx=Load()), Num(n=1)], keywords=[]))
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Store())], value=NameConstant(value=None))
If(test=Name(id='quantum_instance', ctx=Load()), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='quantum_instance', ctx=Store())], value=Name(id='quantum_instance', ctx=Load()))], orelse=[])
If(test=Compare(left=Name(id='data', ctx=Load()), ops=[Is()], comparators=[NameConstant(value=None)]), body=[Raise(exc=Call(func=Name(id='QiskitMachineLearningError', ctx=Load()), args=[Str(s='Training data not given.')], keywords=[]), cause=None)], orelse=[])
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_data', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='array', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[]))
If(test=Compare(left=Name(id='bounds', ctx=Load()), ops=[Is()], comparators=[NameConstant(value=None)]), body=[Assign(targets=[Name(id='bounds_min', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='percentile', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_data', ctx=Load()), Num(n=5)], keywords=[keyword(arg='axis', value=Num(n=0))])), Assign(targets=[Name(id='bounds_max', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='percentile', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_data', ctx=Load()), Num(n=95)], keywords=[keyword(arg='axis', value=Num(n=0))])), Assign(targets=[Name(id='bounds', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='_', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='bounds_min', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='bounds', ctx=Load()), attr='append', ctx=Load()), args=[List(elts=[Subscript(value=Name(id='bounds_min', ctx=Load()), slice=Index(value=Name(id='i', ctx=Load())), ctx=Load()), Subscript(value=Name(id='bounds_max', ctx=Load()), slice=Index(value=Name(id='i', ctx=Load())), ctx=Load())], ctx=Load())], keywords=[]))], orelse=[])], orelse=[])
If(test=Compare(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='ndim', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Num(n=1)]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='bounds', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[BoolOp(op=Or(), values=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='num_qubits', ctx=Load())], keywords=[]), Call(func=Name(id='len', ctx=Load()), args=[Subscript(value=Name(id='data', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())], keywords=[])])]), body=[Raise(exc=Call(func=Name(id='QiskitMachineLearningError', ctx=Load()), args=[Str(s='Dimensions of the data, the length of the data bounds and the numbers of qubits per dimension are incompatible.')], keywords=[]), cause=None)], orelse=[])], orelse=[If(test=Compare(left=BoolOp(op=Or(), values=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='ndim', ctx=Load()), args=[Name(id='bounds', ctx=Load())], keywords=[]), Call(func=Name(id='len', ctx=Load()), args=[Name(id='num_qubits', ctx=Load())], keywords=[])]), ops=[NotEq()], comparators=[Num(n=1)]), body=[Raise(exc=Call(func=Name(id='QiskitMachineLearningError', ctx=Load()), args=[Str(s='Dimensions of the data, the length of the data bounds and the numbers of qubits per dimension are incompatible.')], keywords=[]), cause=None)], orelse=[])])
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_bounds', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='array', ctx=Load()), args=[Name(id='bounds', ctx=Load())], keywords=[]))
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_num_qubits', ctx=Store())], value=Name(id='num_qubits', ctx=Load()))
If(test=Compare(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='ndim', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Num(n=1)]), body=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_num_qubits', ctx=Load()), ops=[Is()], comparators=[NameConstant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_num_qubits', ctx=Store())], value=BinOp(left=Subscript(value=Attribute(value=Name(id='np', ctx=Load()), attr='ones', ctx=Load()), slice=Index(value=Call(func=Name(id='len', ctx=Load()), args=[Subscript(value=Name(id='data', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())], keywords=[])), ctx=Load()), op=Mult(), right=Num(n=3)))], orelse=[])], orelse=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_num_qubits', ctx=Load()), ops=[Is()], comparators=[NameConstant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_num_qubits', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='array', ctx=Load()), args=[List(elts=[Num(n=3)], ctx=Load())], keywords=[]))], orelse=[])])
Assign(targets=[Tuple(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='_data', ctx=Store()), Attribute(value=Name(id='self', ctx=Load()), attr='_data_grid', ctx=Store()), Attribute(value=Name(id='self', ctx=Load()), attr='_grid_elements', ctx=Store()), Attribute(value=Name(id='self', ctx=Load()), attr='_prob_data', ctx=Store())], ctx=Store())], value=Call(func=Name(id='discretize_and_truncate', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_data', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_bounds', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_num_qubits', ctx=Load())], keywords=[keyword(arg='return_data_grid_elements', value=NameConstant(value=True)), keyword(arg='return_prob', value=NameConstant(value=True)), keyword(arg='prob_non_zero', value=NameConstant(value=True))]))
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_batch_size', ctx=Store())], value=Name(id='batch_size', ctx=Load()))
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_num_epochs', ctx=Store())], value=Name(id='num_epochs', ctx=Load()))
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_snapshot_dir', ctx=Store())], value=Name(id='snapshot_dir', ctx=Load()))
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_g_loss', ctx=Store())], value=List(elts=[], ctx=Load()))
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_d_loss', ctx=Store())], value=List(elts=[], ctx=Load()))
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_rel_entr', ctx=Store())], value=List(elts=[], ctx=Load()))
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_tol_rel_ent', ctx=Store())], value=Name(id='tol_rel_ent', ctx=Load()))
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_random_seed', ctx=Store())], value=Name(id='seed', ctx=Load()))
If(test=Compare(left=Name(id='generator', ctx=Load()), ops=[Is()], comparators=[NameConstant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='set_generator', ctx=Load()), args=[], keywords=[]))], orelse=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_generator', ctx=Store())], value=Name(id='generator', ctx=Load()))])
If(test=Compare(left=Name(id='discriminator', ctx=Load()), ops=[Is()], comparators=[NameConstant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='set_discriminator', ctx=Load()), args=[], keywords=[]))], orelse=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_discriminator', ctx=Store())], value=Name(id='discriminator', ctx=Load()))])
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='seed', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_random_seed', ctx=Load()))
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_ret', ctx=Store())], value=Dict(keys=[], values=[]))
NameConstant(value=None)
arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Expr(value=Str(s='Return a numpy random.'))
Return(value=Attribute(value=Name(id='algorithm_globals', ctx=Load()), attr='random', ctx=Load()))
Name(id='property', ctx=Load())
arguments(args=[arg(arg='self', annotation=None), arg(arg='quantum_instance', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='QuantumInstance', ctx=Load()), Name(id='Backend', ctx=Load())], ctx=Load())), ctx=Load())), ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs', annotation=None), defaults=[NameConstant(value=None)])
Expr(value=Str(s='Execute the algorithm with selected backend.\n        Args:\n            quantum_instance: the experimental setting.\n            **kwargs (dict): kwargs\n        Returns:\n            dict: results of an algorithm.\n        Raises:\n            QiskitMachineLearningError: If a quantum instance or\n                                        backend has not been provided\n        '))
If(test=BoolOp(op=And(), values=[Compare(left=Name(id='quantum_instance', ctx=Load()), ops=[Is()], comparators=[NameConstant(value=None)]), Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='quantum_instance', ctx=Load()), ops=[Is()], comparators=[NameConstant(value=None)])]), body=[Raise(exc=Call(func=Name(id='QiskitMachineLearningError', ctx=Load()), args=[Str(s='A QuantumInstance or Backend must be supplied to run the quantum algorithm.')], keywords=[]), cause=None)], orelse=[])
If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='quantum_instance', ctx=Load()), Name(id='Backend', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='set_backend', ctx=Load()), args=[Name(id='quantum_instance', ctx=Load())], keywords=[keyword(arg=None, value=Name(id='kwargs', ctx=Load()))]))], orelse=[If(test=Compare(left=Name(id='quantum_instance', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='quantum_instance', ctx=Store())], value=Name(id='quantum_instance', ctx=Load()))], orelse=[])])
Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_run', ctx=Load()), args=[], keywords=[]))
Name(id='Dict', ctx=Load())
arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Expr(value=Str(s='Returns quantum instance.'))
Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()))
Name(id='property', ctx=Load())
Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Name(id='QuantumInstance', ctx=Load())), ctx=Load())
arguments(args=[arg(arg='self', annotation=None), arg(arg='quantum_instance', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='QuantumInstance', ctx=Load()), Name(id='Backend', ctx=Load())], ctx=Load())), ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Expr(value=Str(s='Sets quantum instance.'))
If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='quantum_instance', ctx=Load()), Name(id='Backend', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='quantum_instance', ctx=Store())], value=Call(func=Name(id='QuantumInstance', ctx=Load()), args=[Name(id='quantum_instance', ctx=Load())], keywords=[]))], orelse=[])
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Store())], value=Name(id='quantum_instance', ctx=Load()))
Attribute(value=Name(id='quantum_instance', ctx=Load()), attr='setter', ctx=Load())
NameConstant(value=None)
arguments(args=[arg(arg='self', annotation=None), arg(arg='backend', annotation=Name(id='Backend', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs', annotation=None), defaults=[])
Expr(value=Str(s='Sets backend with configuration.'))
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='quantum_instance', ctx=Store())], value=Call(func=Name(id='QuantumInstance', ctx=Load()), args=[Name(id='backend', ctx=Load())], keywords=[]))
Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='quantum_instance', ctx=Load()), attr='set_config', ctx=Load()), args=[], keywords=[keyword(arg=None, value=Name(id='kwargs', ctx=Load()))]))
NameConstant(value=None)
arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Expr(value=Str(s='Returns backend.'))
Return(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='quantum_instance', ctx=Load()), attr='backend', ctx=Load()))
Name(id='property', ctx=Load())
Name(id='Backend', ctx=Load())
arguments(args=[arg(arg='self', annotation=None), arg(arg='backend', annotation=Name(id='Backend', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Expr(value=Str(s='Sets backend without additional configuration.'))
Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='set_backend', ctx=Load()), args=[Name(id='backend', ctx=Load())], keywords=[]))
Attribute(value=Name(id='backend', ctx=Load()), attr='setter', ctx=Load())
arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Expr(value=Str(s='Returns random seed'))
Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_random_seed', ctx=Load()))
Name(id='property', ctx=Load())
arguments(args=[arg(arg='self', annotation=None), arg(arg='s', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Expr(value=Str(s='\n        Sets the random seed for QGAN and updates the algorithm_globals seed\n        at the same time\n\n        Args:\n            s (int): random seed\n        '))
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_random_seed', ctx=Store())], value=Name(id='s', ctx=Load()))
Assign(targets=[Attribute(value=Name(id='algorithm_globals', ctx=Load()), attr='random_seed', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_random_seed', ctx=Load()))
Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_discriminator', ctx=Load()), attr='set_seed', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_random_seed', ctx=Load())], keywords=[]))
Attribute(value=Name(id='seed', ctx=Load()), attr='setter', ctx=Load())
arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Expr(value=Str(s='Returns tolerance for relative entropy'))
Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_tol_rel_ent', ctx=Load()))
Name(id='property', ctx=Load())
arguments(args=[arg(arg='self', annotation=None), arg(arg='t', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Expr(value=Str(s='\n        Set tolerance for relative entropy\n\n        Args:\n            t (float): or None, Set tolerance level for relative entropy.\n                If the training achieves relative\n                entropy equal or lower than tolerance it finishes.\n        '))
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_tol_rel_ent', ctx=Store())], value=Name(id='t', ctx=Load()))
Attribute(value=Name(id='tol_rel_ent', ctx=Load()), attr='setter', ctx=Load())
arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Expr(value=Str(s='Returns generator'))
Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_generator', ctx=Load()))
Name(id='property', ctx=Load())
arguments(args=[arg(arg='self', annotation=None), arg(arg='generator_circuit', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Name(id='QuantumCircuit', ctx=Load())), ctx=Load())), arg(arg='generator_init_params', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), ctx=Load())), arg(arg='generator_optimizer', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Name(id='Optimizer', ctx=Load())), ctx=Load())), arg(arg='generator_gradient', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='Callable', ctx=Load()), Name(id='Gradient', ctx=Load())], ctx=Load())), ctx=Load())), ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[NameConstant(value=None), NameConstant(value=None), NameConstant(value=None), NameConstant(value=None)])
Expr(value=Str(s='Initialize generator.\n\n        Args:\n            generator_circuit: parameterized quantum circuit which sets\n                the structure of the quantum generator\n            generator_init_params: initial parameters for the generator circuit\n            generator_optimizer: optimizer to be used for the training of the generator\n            generator_gradient: A Gradient object, or a function returning partial\n                derivatives of the loss function w.r.t. the generator variational\n                params.\n        Raises:\n            QiskitMachineLearningError: invalid input\n        '))
If(test=Name(id='generator_gradient', ctx=Load()), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='generator_gradient', ctx=Load()), Tuple(elts=[Name(id='Gradient', ctx=Load()), Name(id='FunctionType', ctx=Load())], ctx=Load())], keywords=[])), body=[Raise(exc=Call(func=Name(id='QiskitMachineLearningError', ctx=Load()), args=[Str(s='Please pass either a Gradient object or a function as the generator_gradient argument.')], keywords=[]), cause=None)], orelse=[])], orelse=[])
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_generator', ctx=Store())], value=Call(func=Name(id='QuantumGenerator', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_bounds', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_num_qubits', ctx=Load()), Name(id='generator_circuit', ctx=Load()), Name(id='generator_init_params', ctx=Load()), Name(id='generator_optimizer', ctx=Load()), Name(id='generator_gradient', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_snapshot_dir', ctx=Load())], keywords=[]))
arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Expr(value=Str(s='Returns discriminator'))
Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_discriminator', ctx=Load()))
Name(id='property', ctx=Load())
arguments(args=[arg(arg='self', annotation=None), arg(arg='discriminator', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[NameConstant(value=None)])
Expr(value=Str(s='\n        Initialize discriminator.\n\n        Args:\n            discriminator (Discriminator): discriminator\n        '))
If(test=Compare(left=Name(id='discriminator', ctx=Load()), ops=[Is()], comparators=[NameConstant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_discriminator', ctx=Store())], value=Call(func=Name(id='NumPyDiscriminator', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_num_qubits', ctx=Load())], keywords=[])], keywords=[]))], orelse=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_discriminator', ctx=Store())], value=Name(id='discriminator', ctx=Load()))])
Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_discriminator', ctx=Load()), attr='set_seed', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_random_seed', ctx=Load())], keywords=[]))
arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Expr(value=Str(s='Returns generator loss'))
Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_g_loss', ctx=Load()))
Name(id='property', ctx=Load())
Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='float', ctx=Load())), ctx=Load())
arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Expr(value=Str(s='Returns discriminator loss'))
Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_d_loss', ctx=Load()))
Name(id='property', ctx=Load())
Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='float', ctx=Load())), ctx=Load())
arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Expr(value=Str(s='Returns relative entropy between target and trained distribution'))
Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_rel_entr', ctx=Load()))
Name(id='property', ctx=Load())
Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='float', ctx=Load())), ctx=Load())
arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Expr(value=Str(s='Get relative entropy between target and trained distribution'))
Assign(targets=[Tuple(elts=[Name(id='samples_gen', ctx=Store()), Name(id='prob_gen', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_generator', ctx=Load()), attr='get_output', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load())], keywords=[]))
Assign(targets=[Name(id='temp', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='zeros', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_grid_elements', ctx=Load())], keywords=[])], keywords=[]))
For(target=Tuple(elts=[Name(id='j', ctx=Store()), Name(id='sample', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='samples_gen', ctx=Load())], keywords=[]), body=[For(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='element', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_grid_elements', ctx=Load())], keywords=[]), body=[If(test=Compare(left=Name(id='sample', ctx=Load()), ops=[Eq()], comparators=[Name(id='element', ctx=Load())]), body=[AugAssign(target=Subscript(value=Name(id='temp', ctx=Load()), slice=Index(value=Name(id='i', ctx=Load())), ctx=Store()), op=Add(), value=Subscript(value=Name(id='prob_gen', ctx=Load()), slice=Index(value=Name(id='j', ctx=Load())), ctx=Load()))], orelse=[])], orelse=[])], orelse=[])
Assign(targets=[Name(id='prob_gen', ctx=Store())], value=ListComp(elt=IfExp(test=Compare(left=Name(id='x', ctx=Load()), ops=[Eq()], comparators=[Num(n=0)]), body=Num(n=1e-08), orelse=Name(id='x', ctx=Load())), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='temp', ctx=Load()), ifs=[], is_async=0)]))
Assign(targets=[Name(id='rel_entr', ctx=Store())], value=Call(func=Name(id='entropy', ctx=Load()), args=[Name(id='prob_gen', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_prob_data', ctx=Load())], keywords=[]))
Return(value=Name(id='rel_entr', ctx=Load()))
Name(id='float', ctx=Load())
arguments(args=[arg(arg='self', annotation=None), arg(arg='e', annotation=None), arg(arg='d_loss', annotation=None), arg(arg='g_loss', annotation=None), arg(arg='rel_entr', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_snapshot_dir', ctx=Load()), Str(s='output.csv')], keywords=[])], keywords=[keyword(arg='mode', value=Str(s='a')), keyword(arg='encoding', value=Str(s='utf8'))]), optional_vars=Name(id='csv_file', ctx=Store()))], body=[Assign(targets=[Name(id='fieldnames', ctx=Store())], value=List(elts=[Str(s='epoch'), Str(s='loss_discriminator'), Str(s='loss_generator'), Str(s='params_generator'), Str(s='rel_entropy')], ctx=Load())), Assign(targets=[Name(id='writer', ctx=Store())], value=Call(func=Attribute(value=Name(id='csv', ctx=Load()), attr='DictWriter', ctx=Load()), args=[Name(id='csv_file', ctx=Load())], keywords=[keyword(arg='fieldnames', value=Name(id='fieldnames', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='writer', ctx=Load()), attr='writerow', ctx=Load()), args=[Dict(keys=[Str(s='epoch'), Str(s='loss_discriminator'), Str(s='loss_generator'), Str(s='params_generator'), Str(s='rel_entropy')], values=[Name(id='e', ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='average', ctx=Load()), args=[Name(id='d_loss', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='average', ctx=Load()), args=[Name(id='g_loss', ctx=Load())], keywords=[]), Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_generator', ctx=Load()), attr='parameter_values', ctx=Load()), Name(id='rel_entr', ctx=Load())])], keywords=[]))])
Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_discriminator', ctx=Load()), attr='save_model', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_snapshot_dir', ctx=Load())], keywords=[]))
arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Expr(value=Str(s='\n        Train the qGAN\n\n        Raises:\n            QiskitMachineLearningError: Batch size bigger than the number of\n                                        items in the truncated data set\n        '))
If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_snapshot_dir', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=[With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_snapshot_dir', ctx=Load()), Str(s='output.csv')], keywords=[])], keywords=[keyword(arg='mode', value=Str(s='w')), keyword(arg='encoding', value=Str(s='utf8'))]), optional_vars=Name(id='csv_file', ctx=Store()))], body=[Assign(targets=[Name(id='fieldnames', ctx=Store())], value=List(elts=[Str(s='epoch'), Str(s='loss_discriminator'), Str(s='loss_generator'), Str(s='params_generator'), Str(s='rel_entropy')], ctx=Load())), Assign(targets=[Name(id='writer', ctx=Store())], value=Call(func=Attribute(value=Name(id='csv', ctx=Load()), attr='DictWriter', ctx=Load()), args=[Name(id='csv_file', ctx=Load())], keywords=[keyword(arg='fieldnames', value=Name(id='fieldnames', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='writer', ctx=Load()), attr='writeheader', ctx=Load()), args=[], keywords=[]))])], orelse=[])
If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_data', ctx=Load())], keywords=[]), ops=[Lt()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='_batch_size', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='QiskitMachineLearningError', ctx=Load()), args=[JoinedStr(values=[Str(s='The batch size needs to be less than the truncated data size of '), FormattedValue(value=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_data', ctx=Load())], keywords=[]), conversion=-1, format_spec=None)])], keywords=[]), cause=None)], orelse=[])
For(target=Name(id='e', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_num_epochs', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='algorithm_globals', ctx=Load()), attr='random', ctx=Load()), attr='shuffle', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_data', ctx=Load())], keywords=[])), Assign(targets=[Name(id='index', ctx=Store())], value=Num(n=0)), While(test=Compare(left=BinOp(left=Name(id='index', ctx=Load()), op=Add(), right=Attribute(value=Name(id='self', ctx=Load()), attr='_batch_size', ctx=Load())), ops=[LtE()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_data', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='real_batch', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_data', ctx=Load()), slice=Slice(lower=Name(id='index', ctx=Load()), upper=BinOp(left=Name(id='index', ctx=Load()), op=Add(), right=Attribute(value=Name(id='self', ctx=Load()), attr='_batch_size', ctx=Load())), step=None), ctx=Load())), AugAssign(target=Name(id='index', ctx=Store()), op=Add(), value=Attribute(value=Name(id='self', ctx=Load()), attr='_batch_size', ctx=Load())), Assign(targets=[Tuple(elts=[Name(id='generated_batch', ctx=Store()), Name(id='generated_prob', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_generator', ctx=Load()), attr='get_output', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load())], keywords=[keyword(arg='shots', value=Attribute(value=Name(id='self', ctx=Load()), attr='_batch_size', ctx=Load()))])), Assign(targets=[Name(id='ret_d', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_discriminator', ctx=Load()), attr='train', ctx=Load()), args=[List(elts=[Name(id='real_batch', ctx=Load()), Name(id='generated_batch', ctx=Load())], ctx=Load()), List(elts=[BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='ones', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='real_batch', ctx=Load())], keywords=[])], keywords=[]), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='real_batch', ctx=Load())], keywords=[])), Name(id='generated_prob', ctx=Load())], ctx=Load())], keywords=[])), Assign(targets=[Name(id='d_loss_min', ctx=Store())], value=Subscript(value=Name(id='ret_d', ctx=Load()), slice=Index(value=Str(s='loss')), ctx=Load())), Assign(targets=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_generator', ctx=Load()), attr='discriminator', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_discriminator', ctx=Load())), Assign(targets=[Name(id='ret_g', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_generator', ctx=Load()), attr='train', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load())], keywords=[keyword(arg='shots', value=Attribute(value=Name(id='self', ctx=Load()), attr='_batch_size', ctx=Load()))])), Assign(targets=[Name(id='g_loss_min', ctx=Store())], value=Subscript(value=Name(id='ret_g', ctx=Load()), slice=Index(value=Str(s='loss')), ctx=Load()))], orelse=[]), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_d_loss', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load()), args=[Call(func=Name(id='float', ctx=Load()), args=[Name(id='d_loss_min', ctx=Load())], keywords=[]), Num(n=4)], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_g_loss', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load()), args=[Name(id='g_loss_min', ctx=Load()), Num(n=4)], keywords=[])], keywords=[])), Assign(targets=[Name(id='rel_entr', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_rel_entr', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_rel_entr', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load()), args=[Name(id='rel_entr', ctx=Load()), Num(n=4)], keywords=[])], keywords=[])), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_ret', ctx=Load()), slice=Index(value=Str(s='params_d')), ctx=Store())], value=Subscript(value=Name(id='ret_d', ctx=Load()), slice=Index(value=Str(s='params')), ctx=Load())), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_ret', ctx=Load()), slice=Index(value=Str(s='params_g')), ctx=Store())], value=Subscript(value=Name(id='ret_g', ctx=Load()), slice=Index(value=Str(s='params')), ctx=Load())), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_ret', ctx=Load()), slice=Index(value=Str(s='loss_d')), ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load()), args=[Call(func=Name(id='float', ctx=Load()), args=[Name(id='d_loss_min', ctx=Load())], keywords=[]), Num(n=4)], keywords=[])), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_ret', ctx=Load()), slice=Index(value=Str(s='loss_g')), ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load()), args=[Name(id='g_loss_min', ctx=Load()), Num(n=4)], keywords=[])), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_ret', ctx=Load()), slice=Index(value=Str(s='rel_entr')), ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load()), args=[Name(id='rel_entr', ctx=Load()), Num(n=4)], keywords=[])), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_snapshot_dir', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_store_params', ctx=Load()), args=[Name(id='e', ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load()), args=[Name(id='d_loss_min', ctx=Load()), Num(n=4)], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load()), args=[Name(id='g_loss_min', ctx=Load()), Num(n=4)], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load()), args=[Name(id='rel_entr', ctx=Load()), Num(n=4)], keywords=[])], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Str(s='Epoch %s/%s...'), BinOp(left=Name(id='e', ctx=Load()), op=Add(), right=Num(n=1)), Attribute(value=Name(id='self', ctx=Load()), attr='_num_epochs', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Str(s='Loss Discriminator: %s'), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load()), args=[Call(func=Name(id='float', ctx=Load()), args=[Name(id='d_loss_min', ctx=Load())], keywords=[]), Num(n=4)], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Str(s='Loss Generator: %s'), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load()), args=[Name(id='g_loss_min', ctx=Load()), Num(n=4)], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Str(s='Relative Entropy: %s'), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load()), args=[Name(id='rel_entr', ctx=Load()), Num(n=4)], keywords=[])], keywords=[])), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_tol_rel_ent', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=[If(test=Compare(left=Name(id='rel_entr', ctx=Load()), ops=[LtE()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='_tol_rel_ent', ctx=Load())]), body=[Break()], orelse=[])], orelse=[])], orelse=[])
arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Expr(value=Str(s='\n        Run qGAN training\n\n        Returns:\n            dict: with generator(discriminator) parameters & loss, relative entropy\n        Raises:\n            QiskitMachineLearningError: invalid backend\n        '))
If(test=Compare(left=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()), attr='backend_name', ctx=Load()), ops=[Eq()], comparators=[BoolOp(op=Or(), values=[Str(s='unitary_simulator'), Str(s='clifford_simulator')])]), body=[Raise(exc=Call(func=Name(id='QiskitMachineLearningError', ctx=Load()), args=[Str(s='Chosen backend not supported - Set backend either to statevector_simulator, qasm_simulator or actual quantum hardware')], keywords=[]), cause=None)], orelse=[])
Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='train', ctx=Load()), args=[], keywords=[]))
Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_ret', ctx=Load()))
Name(id='logging', ctx=Load())
Load()
Load()
arg(arg='self', annotation=None)
arg(arg='data', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Name(id='List', ctx=Load())], ctx=Load())), ctx=Load()))
arg(arg='bounds', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Name(id='List', ctx=Load())], ctx=Load())), ctx=Load())), ctx=Load()))
arg(arg='num_qubits', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Name(id='List', ctx=Load())], ctx=Load())), ctx=Load())), ctx=Load()))
arg(arg='batch_size', annotation=Name(id='int', ctx=Load()))
arg(arg='num_epochs', annotation=Name(id='int', ctx=Load()))
arg(arg='seed', annotation=Name(id='int', ctx=Load()))
arg(arg='discriminator', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Name(id='DiscriminativeNetwork', ctx=Load())), ctx=Load()))
arg(arg='generator', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Name(id='GenerativeNetwork', ctx=Load())), ctx=Load()))
arg(arg='tol_rel_ent', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Name(id='float', ctx=Load())), ctx=Load()))
arg(arg='snapshot_dir', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Name(id='str', ctx=Load())), ctx=Load()))
arg(arg='quantum_instance', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='QuantumInstance', ctx=Load()), Name(id='Backend', ctx=Load())], ctx=Load())), ctx=Load())), ctx=Load()))
NameConstant(value=None)
NameConstant(value=None)
Num(n=500)
Num(n=3000)
Num(n=7)
NameConstant(value=None)
NameConstant(value=None)
NameConstant(value=None)
NameConstant(value=None)
NameConstant(value=None)
Str(s="\n\n        Args:\n            data: Training data of dimension k\n            bounds: k min/max data values [[min_0,max_0],...,[min_k-1,max_k-1]]\n                if univariate data: [min_0,max_0]\n            num_qubits: k numbers of qubits to determine representation resolution,\n                i.e. n qubits enable the representation of 2**n values\n                [num_qubits_0,..., num_qubits_k-1]\n            batch_size: Batch size, has a min. value of 1.\n            num_epochs: Number of training epochs\n            seed: Random number seed\n            discriminator: Discriminates between real and fake data samples\n            generator: Generates 'fake' data samples\n            tol_rel_ent: Set tolerance level for relative entropy.\n                If the training achieves relative entropy equal or lower than tolerance it finishes.\n            snapshot_dir: Directory in to which to store cvs file with parameters,\n                if None (default) then no cvs file is created.\n            quantum_instance: Quantum Instance or Backend\n        Raises:\n            QiskitMachineLearningError: invalid input\n        ")
Call(func=Name(id='validate_min', ctx=Load()), args=[Str(s='batch_size'), Name(id='batch_size', ctx=Load()), Num(n=1)], keywords=[])
Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Store())
NameConstant(value=None)
Name(id='quantum_instance', ctx=Load())
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='quantum_instance', ctx=Store())], value=Name(id='quantum_instance', ctx=Load()))
Compare(left=Name(id='data', ctx=Load()), ops=[Is()], comparators=[NameConstant(value=None)])
Raise(exc=Call(func=Name(id='QiskitMachineLearningError', ctx=Load()), args=[Str(s='Training data not given.')], keywords=[]), cause=None)
Attribute(value=Name(id='self', ctx=Load()), attr='_data', ctx=Store())
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='array', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[])
Compare(left=Name(id='bounds', ctx=Load()), ops=[Is()], comparators=[NameConstant(value=None)])
Assign(targets=[Name(id='bounds_min', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='percentile', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_data', ctx=Load()), Num(n=5)], keywords=[keyword(arg='axis', value=Num(n=0))]))
Assign(targets=[Name(id='bounds_max', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='percentile', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_data', ctx=Load()), Num(n=95)], keywords=[keyword(arg='axis', value=Num(n=0))]))
Assign(targets=[Name(id='bounds', ctx=Store())], value=List(elts=[], ctx=Load()))
For(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='_', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='bounds_min', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='bounds', ctx=Load()), attr='append', ctx=Load()), args=[List(elts=[Subscript(value=Name(id='bounds_min', ctx=Load()), slice=Index(value=Name(id='i', ctx=Load())), ctx=Load()), Subscript(value=Name(id='bounds_max', ctx=Load()), slice=Index(value=Name(id='i', ctx=Load())), ctx=Load())], ctx=Load())], keywords=[]))], orelse=[])
Compare(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='ndim', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Num(n=1)])
If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='bounds', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[BoolOp(op=Or(), values=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='num_qubits', ctx=Load())], keywords=[]), Call(func=Name(id='len', ctx=Load()), args=[Subscript(value=Name(id='data', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())], keywords=[])])]), body=[Raise(exc=Call(func=Name(id='QiskitMachineLearningError', ctx=Load()), args=[Str(s='Dimensions of the data, the length of the data bounds and the numbers of qubits per dimension are incompatible.')], keywords=[]), cause=None)], orelse=[])
If(test=Compare(left=BoolOp(op=Or(), values=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='ndim', ctx=Load()), args=[Name(id='bounds', ctx=Load())], keywords=[]), Call(func=Name(id='len', ctx=Load()), args=[Name(id='num_qubits', ctx=Load())], keywords=[])]), ops=[NotEq()], comparators=[Num(n=1)]), body=[Raise(exc=Call(func=Name(id='QiskitMachineLearningError', ctx=Load()), args=[Str(s='Dimensions of the data, the length of the data bounds and the numbers of qubits per dimension are incompatible.')], keywords=[]), cause=None)], orelse=[])
Attribute(value=Name(id='self', ctx=Load()), attr='_bounds', ctx=Store())
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='array', ctx=Load()), args=[Name(id='bounds', ctx=Load())], keywords=[])
Attribute(value=Name(id='self', ctx=Load()), attr='_num_qubits', ctx=Store())
Name(id='num_qubits', ctx=Load())
Compare(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='ndim', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Num(n=1)])
If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_num_qubits', ctx=Load()), ops=[Is()], comparators=[NameConstant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_num_qubits', ctx=Store())], value=BinOp(left=Subscript(value=Attribute(value=Name(id='np', ctx=Load()), attr='ones', ctx=Load()), slice=Index(value=Call(func=Name(id='len', ctx=Load()), args=[Subscript(value=Name(id='data', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())], keywords=[])), ctx=Load()), op=Mult(), right=Num(n=3)))], orelse=[])
If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_num_qubits', ctx=Load()), ops=[Is()], comparators=[NameConstant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_num_qubits', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='array', ctx=Load()), args=[List(elts=[Num(n=3)], ctx=Load())], keywords=[]))], orelse=[])
Tuple(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='_data', ctx=Store()), Attribute(value=Name(id='self', ctx=Load()), attr='_data_grid', ctx=Store()), Attribute(value=Name(id='self', ctx=Load()), attr='_grid_elements', ctx=Store()), Attribute(value=Name(id='self', ctx=Load()), attr='_prob_data', ctx=Store())], ctx=Store())
Call(func=Name(id='discretize_and_truncate', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_data', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_bounds', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_num_qubits', ctx=Load())], keywords=[keyword(arg='return_data_grid_elements', value=NameConstant(value=True)), keyword(arg='return_prob', value=NameConstant(value=True)), keyword(arg='prob_non_zero', value=NameConstant(value=True))])
Attribute(value=Name(id='self', ctx=Load()), attr='_batch_size', ctx=Store())
Name(id='batch_size', ctx=Load())
Attribute(value=Name(id='self', ctx=Load()), attr='_num_epochs', ctx=Store())
Name(id='num_epochs', ctx=Load())
Attribute(value=Name(id='self', ctx=Load()), attr='_snapshot_dir', ctx=Store())
Name(id='snapshot_dir', ctx=Load())
Attribute(value=Name(id='self', ctx=Load()), attr='_g_loss', ctx=Store())
List(elts=[], ctx=Load())
Attribute(value=Name(id='self', ctx=Load()), attr='_d_loss', ctx=Store())
List(elts=[], ctx=Load())
Attribute(value=Name(id='self', ctx=Load()), attr='_rel_entr', ctx=Store())
List(elts=[], ctx=Load())
Attribute(value=Name(id='self', ctx=Load()), attr='_tol_rel_ent', ctx=Store())
Name(id='tol_rel_ent', ctx=Load())
Attribute(value=Name(id='self', ctx=Load()), attr='_random_seed', ctx=Store())
Name(id='seed', ctx=Load())
Compare(left=Name(id='generator', ctx=Load()), ops=[Is()], comparators=[NameConstant(value=None)])
Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='set_generator', ctx=Load()), args=[], keywords=[]))
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_generator', ctx=Store())], value=Name(id='generator', ctx=Load()))
Compare(left=Name(id='discriminator', ctx=Load()), ops=[Is()], comparators=[NameConstant(value=None)])
Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='set_discriminator', ctx=Load()), args=[], keywords=[]))
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_discriminator', ctx=Store())], value=Name(id='discriminator', ctx=Load()))
Attribute(value=Name(id='self', ctx=Load()), attr='seed', ctx=Store())
Attribute(value=Name(id='self', ctx=Load()), attr='_random_seed', ctx=Load())
Attribute(value=Name(id='self', ctx=Load()), attr='_ret', ctx=Store())
Dict(keys=[], values=[])
arg(arg='self', annotation=None)
Str(s='Return a numpy random.')
Attribute(value=Name(id='algorithm_globals', ctx=Load()), attr='random', ctx=Load())
Load()
arg(arg='self', annotation=None)
arg(arg='quantum_instance', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='QuantumInstance', ctx=Load()), Name(id='Backend', ctx=Load())], ctx=Load())), ctx=Load())), ctx=Load()))
arg(arg='kwargs', annotation=None)
NameConstant(value=None)
Str(s='Execute the algorithm with selected backend.\n        Args:\n            quantum_instance: the experimental setting.\n            **kwargs (dict): kwargs\n        Returns:\n            dict: results of an algorithm.\n        Raises:\n            QiskitMachineLearningError: If a quantum instance or\n                                        backend has not been provided\n        ')
BoolOp(op=And(), values=[Compare(left=Name(id='quantum_instance', ctx=Load()), ops=[Is()], comparators=[NameConstant(value=None)]), Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='quantum_instance', ctx=Load()), ops=[Is()], comparators=[NameConstant(value=None)])])
Raise(exc=Call(func=Name(id='QiskitMachineLearningError', ctx=Load()), args=[Str(s='A QuantumInstance or Backend must be supplied to run the quantum algorithm.')], keywords=[]), cause=None)
Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='quantum_instance', ctx=Load()), Name(id='Backend', ctx=Load())], keywords=[])
Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='set_backend', ctx=Load()), args=[Name(id='quantum_instance', ctx=Load())], keywords=[keyword(arg=None, value=Name(id='kwargs', ctx=Load()))]))
If(test=Compare(left=Name(id='quantum_instance', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='quantum_instance', ctx=Store())], value=Name(id='quantum_instance', ctx=Load()))], orelse=[])
Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_run', ctx=Load()), args=[], keywords=[])
Load()
arg(arg='self', annotation=None)
Str(s='Returns quantum instance.')
Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load())
Load()
Name(id='Optional', ctx=Load())
Index(value=Name(id='QuantumInstance', ctx=Load()))
Load()
arg(arg='self', annotation=None)
arg(arg='quantum_instance', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='QuantumInstance', ctx=Load()), Name(id='Backend', ctx=Load())], ctx=Load())), ctx=Load()))
Str(s='Sets quantum instance.')
Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='quantum_instance', ctx=Load()), Name(id='Backend', ctx=Load())], keywords=[])
Assign(targets=[Name(id='quantum_instance', ctx=Store())], value=Call(func=Name(id='QuantumInstance', ctx=Load()), args=[Name(id='quantum_instance', ctx=Load())], keywords=[]))
Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Store())
Name(id='quantum_instance', ctx=Load())
Name(id='quantum_instance', ctx=Load())
Load()
arg(arg='self', annotation=None)
arg(arg='backend', annotation=Name(id='Backend', ctx=Load()))
arg(arg='kwargs', annotation=None)
Str(s='Sets backend with configuration.')
Attribute(value=Name(id='self', ctx=Load()), attr='quantum_instance', ctx=Store())
Call(func=Name(id='QuantumInstance', ctx=Load()), args=[Name(id='backend', ctx=Load())], keywords=[])
Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='quantum_instance', ctx=Load()), attr='set_config', ctx=Load()), args=[], keywords=[keyword(arg=None, value=Name(id='kwargs', ctx=Load()))])
arg(arg='self', annotation=None)
Str(s='Returns backend.')
Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='quantum_instance', ctx=Load()), attr='backend', ctx=Load())
Load()
Load()
arg(arg='self', annotation=None)
arg(arg='backend', annotation=Name(id='Backend', ctx=Load()))
Str(s='Sets backend without additional configuration.')
Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='set_backend', ctx=Load()), args=[Name(id='backend', ctx=Load())], keywords=[])
Name(id='backend', ctx=Load())
Load()
arg(arg='self', annotation=None)
Str(s='Returns random seed')
Attribute(value=Name(id='self', ctx=Load()), attr='_random_seed', ctx=Load())
Load()
arg(arg='self', annotation=None)
arg(arg='s', annotation=None)
Str(s='\n        Sets the random seed for QGAN and updates the algorithm_globals seed\n        at the same time\n\n        Args:\n            s (int): random seed\n        ')
Attribute(value=Name(id='self', ctx=Load()), attr='_random_seed', ctx=Store())
Name(id='s', ctx=Load())
Attribute(value=Name(id='algorithm_globals', ctx=Load()), attr='random_seed', ctx=Store())
Attribute(value=Name(id='self', ctx=Load()), attr='_random_seed', ctx=Load())
Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_discriminator', ctx=Load()), attr='set_seed', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_random_seed', ctx=Load())], keywords=[])
Name(id='seed', ctx=Load())
Load()
arg(arg='self', annotation=None)
Str(s='Returns tolerance for relative entropy')
Attribute(value=Name(id='self', ctx=Load()), attr='_tol_rel_ent', ctx=Load())
Load()
arg(arg='self', annotation=None)
arg(arg='t', annotation=None)
Str(s='\n        Set tolerance for relative entropy\n\n        Args:\n            t (float): or None, Set tolerance level for relative entropy.\n                If the training achieves relative\n                entropy equal or lower than tolerance it finishes.\n        ')
Attribute(value=Name(id='self', ctx=Load()), attr='_tol_rel_ent', ctx=Store())
Name(id='t', ctx=Load())
Name(id='tol_rel_ent', ctx=Load())
Load()
arg(arg='self', annotation=None)
Str(s='Returns generator')
Attribute(value=Name(id='self', ctx=Load()), attr='_generator', ctx=Load())
Load()
arg(arg='self', annotation=None)
arg(arg='generator_circuit', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Name(id='QuantumCircuit', ctx=Load())), ctx=Load()))
arg(arg='generator_init_params', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), ctx=Load()))
arg(arg='generator_optimizer', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Name(id='Optimizer', ctx=Load())), ctx=Load()))
arg(arg='generator_gradient', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='Callable', ctx=Load()), Name(id='Gradient', ctx=Load())], ctx=Load())), ctx=Load())), ctx=Load()))
NameConstant(value=None)
NameConstant(value=None)
NameConstant(value=None)
NameConstant(value=None)
Str(s='Initialize generator.\n\n        Args:\n            generator_circuit: parameterized quantum circuit which sets\n                the structure of the quantum generator\n            generator_init_params: initial parameters for the generator circuit\n            generator_optimizer: optimizer to be used for the training of the generator\n            generator_gradient: A Gradient object, or a function returning partial\n                derivatives of the loss function w.r.t. the generator variational\n                params.\n        Raises:\n            QiskitMachineLearningError: invalid input\n        ')
Name(id='generator_gradient', ctx=Load())
If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='generator_gradient', ctx=Load()), Tuple(elts=[Name(id='Gradient', ctx=Load()), Name(id='FunctionType', ctx=Load())], ctx=Load())], keywords=[])), body=[Raise(exc=Call(func=Name(id='QiskitMachineLearningError', ctx=Load()), args=[Str(s='Please pass either a Gradient object or a function as the generator_gradient argument.')], keywords=[]), cause=None)], orelse=[])
Attribute(value=Name(id='self', ctx=Load()), attr='_generator', ctx=Store())
Call(func=Name(id='QuantumGenerator', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_bounds', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_num_qubits', ctx=Load()), Name(id='generator_circuit', ctx=Load()), Name(id='generator_init_params', ctx=Load()), Name(id='generator_optimizer', ctx=Load()), Name(id='generator_gradient', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_snapshot_dir', ctx=Load())], keywords=[])
arg(arg='self', annotation=None)
Str(s='Returns discriminator')
Attribute(value=Name(id='self', ctx=Load()), attr='_discriminator', ctx=Load())
Load()
arg(arg='self', annotation=None)
arg(arg='discriminator', annotation=None)
NameConstant(value=None)
Str(s='\n        Initialize discriminator.\n\n        Args:\n            discriminator (Discriminator): discriminator\n        ')
Compare(left=Name(id='discriminator', ctx=Load()), ops=[Is()], comparators=[NameConstant(value=None)])
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_discriminator', ctx=Store())], value=Call(func=Name(id='NumPyDiscriminator', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_num_qubits', ctx=Load())], keywords=[])], keywords=[]))
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_discriminator', ctx=Store())], value=Name(id='discriminator', ctx=Load()))
Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_discriminator', ctx=Load()), attr='set_seed', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_random_seed', ctx=Load())], keywords=[])
arg(arg='self', annotation=None)
Str(s='Returns generator loss')
Attribute(value=Name(id='self', ctx=Load()), attr='_g_loss', ctx=Load())
Load()
Name(id='List', ctx=Load())
Index(value=Name(id='float', ctx=Load()))
Load()
arg(arg='self', annotation=None)
Str(s='Returns discriminator loss')
Attribute(value=Name(id='self', ctx=Load()), attr='_d_loss', ctx=Load())
Load()
Name(id='List', ctx=Load())
Index(value=Name(id='float', ctx=Load()))
Load()
arg(arg='self', annotation=None)
Str(s='Returns relative entropy between target and trained distribution')
Attribute(value=Name(id='self', ctx=Load()), attr='_rel_entr', ctx=Load())
Load()
Name(id='List', ctx=Load())
Index(value=Name(id='float', ctx=Load()))
Load()
arg(arg='self', annotation=None)
Str(s='Get relative entropy between target and trained distribution')
Tuple(elts=[Name(id='samples_gen', ctx=Store()), Name(id='prob_gen', ctx=Store())], ctx=Store())
Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_generator', ctx=Load()), attr='get_output', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load())], keywords=[])
Name(id='temp', ctx=Store())
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='zeros', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_grid_elements', ctx=Load())], keywords=[])], keywords=[])
Tuple(elts=[Name(id='j', ctx=Store()), Name(id='sample', ctx=Store())], ctx=Store())
Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='samples_gen', ctx=Load())], keywords=[])
For(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='element', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_grid_elements', ctx=Load())], keywords=[]), body=[If(test=Compare(left=Name(id='sample', ctx=Load()), ops=[Eq()], comparators=[Name(id='element', ctx=Load())]), body=[AugAssign(target=Subscript(value=Name(id='temp', ctx=Load()), slice=Index(value=Name(id='i', ctx=Load())), ctx=Store()), op=Add(), value=Subscript(value=Name(id='prob_gen', ctx=Load()), slice=Index(value=Name(id='j', ctx=Load())), ctx=Load()))], orelse=[])], orelse=[])
Name(id='prob_gen', ctx=Store())
ListComp(elt=IfExp(test=Compare(left=Name(id='x', ctx=Load()), ops=[Eq()], comparators=[Num(n=0)]), body=Num(n=1e-08), orelse=Name(id='x', ctx=Load())), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='temp', ctx=Load()), ifs=[], is_async=0)])
Name(id='rel_entr', ctx=Store())
Call(func=Name(id='entropy', ctx=Load()), args=[Name(id='prob_gen', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_prob_data', ctx=Load())], keywords=[])
Name(id='rel_entr', ctx=Load())
Load()
arg(arg='self', annotation=None)
arg(arg='e', annotation=None)
arg(arg='d_loss', annotation=None)
arg(arg='g_loss', annotation=None)
arg(arg='rel_entr', annotation=None)
withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_snapshot_dir', ctx=Load()), Str(s='output.csv')], keywords=[])], keywords=[keyword(arg='mode', value=Str(s='a')), keyword(arg='encoding', value=Str(s='utf8'))]), optional_vars=Name(id='csv_file', ctx=Store()))
Assign(targets=[Name(id='fieldnames', ctx=Store())], value=List(elts=[Str(s='epoch'), Str(s='loss_discriminator'), Str(s='loss_generator'), Str(s='params_generator'), Str(s='rel_entropy')], ctx=Load()))
Assign(targets=[Name(id='writer', ctx=Store())], value=Call(func=Attribute(value=Name(id='csv', ctx=Load()), attr='DictWriter', ctx=Load()), args=[Name(id='csv_file', ctx=Load())], keywords=[keyword(arg='fieldnames', value=Name(id='fieldnames', ctx=Load()))]))
Expr(value=Call(func=Attribute(value=Name(id='writer', ctx=Load()), attr='writerow', ctx=Load()), args=[Dict(keys=[Str(s='epoch'), Str(s='loss_discriminator'), Str(s='loss_generator'), Str(s='params_generator'), Str(s='rel_entropy')], values=[Name(id='e', ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='average', ctx=Load()), args=[Name(id='d_loss', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='average', ctx=Load()), args=[Name(id='g_loss', ctx=Load())], keywords=[]), Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_generator', ctx=Load()), attr='parameter_values', ctx=Load()), Name(id='rel_entr', ctx=Load())])], keywords=[]))
Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_discriminator', ctx=Load()), attr='save_model', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_snapshot_dir', ctx=Load())], keywords=[])
arg(arg='self', annotation=None)
Str(s='\n        Train the qGAN\n\n        Raises:\n            QiskitMachineLearningError: Batch size bigger than the number of\n                                        items in the truncated data set\n        ')
Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_snapshot_dir', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)])
With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_snapshot_dir', ctx=Load()), Str(s='output.csv')], keywords=[])], keywords=[keyword(arg='mode', value=Str(s='w')), keyword(arg='encoding', value=Str(s='utf8'))]), optional_vars=Name(id='csv_file', ctx=Store()))], body=[Assign(targets=[Name(id='fieldnames', ctx=Store())], value=List(elts=[Str(s='epoch'), Str(s='loss_discriminator'), Str(s='loss_generator'), Str(s='params_generator'), Str(s='rel_entropy')], ctx=Load())), Assign(targets=[Name(id='writer', ctx=Store())], value=Call(func=Attribute(value=Name(id='csv', ctx=Load()), attr='DictWriter', ctx=Load()), args=[Name(id='csv_file', ctx=Load())], keywords=[keyword(arg='fieldnames', value=Name(id='fieldnames', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='writer', ctx=Load()), attr='writeheader', ctx=Load()), args=[], keywords=[]))])
Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_data', ctx=Load())], keywords=[]), ops=[Lt()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='_batch_size', ctx=Load())])
Raise(exc=Call(func=Name(id='QiskitMachineLearningError', ctx=Load()), args=[JoinedStr(values=[Str(s='The batch size needs to be less than the truncated data size of '), FormattedValue(value=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_data', ctx=Load())], keywords=[]), conversion=-1, format_spec=None)])], keywords=[]), cause=None)
Name(id='e', ctx=Store())
Call(func=Name(id='range', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_num_epochs', ctx=Load())], keywords=[])
Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='algorithm_globals', ctx=Load()), attr='random', ctx=Load()), attr='shuffle', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_data', ctx=Load())], keywords=[]))
Assign(targets=[Name(id='index', ctx=Store())], value=Num(n=0))
While(test=Compare(left=BinOp(left=Name(id='index', ctx=Load()), op=Add(), right=Attribute(value=Name(id='self', ctx=Load()), attr='_batch_size', ctx=Load())), ops=[LtE()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_data', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='real_batch', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_data', ctx=Load()), slice=Slice(lower=Name(id='index', ctx=Load()), upper=BinOp(left=Name(id='index', ctx=Load()), op=Add(), right=Attribute(value=Name(id='self', ctx=Load()), attr='_batch_size', ctx=Load())), step=None), ctx=Load())), AugAssign(target=Name(id='index', ctx=Store()), op=Add(), value=Attribute(value=Name(id='self', ctx=Load()), attr='_batch_size', ctx=Load())), Assign(targets=[Tuple(elts=[Name(id='generated_batch', ctx=Store()), Name(id='generated_prob', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_generator', ctx=Load()), attr='get_output', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load())], keywords=[keyword(arg='shots', value=Attribute(value=Name(id='self', ctx=Load()), attr='_batch_size', ctx=Load()))])), Assign(targets=[Name(id='ret_d', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_discriminator', ctx=Load()), attr='train', ctx=Load()), args=[List(elts=[Name(id='real_batch', ctx=Load()), Name(id='generated_batch', ctx=Load())], ctx=Load()), List(elts=[BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='ones', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='real_batch', ctx=Load())], keywords=[])], keywords=[]), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='real_batch', ctx=Load())], keywords=[])), Name(id='generated_prob', ctx=Load())], ctx=Load())], keywords=[])), Assign(targets=[Name(id='d_loss_min', ctx=Store())], value=Subscript(value=Name(id='ret_d', ctx=Load()), slice=Index(value=Str(s='loss')), ctx=Load())), Assign(targets=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_generator', ctx=Load()), attr='discriminator', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_discriminator', ctx=Load())), Assign(targets=[Name(id='ret_g', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_generator', ctx=Load()), attr='train', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load())], keywords=[keyword(arg='shots', value=Attribute(value=Name(id='self', ctx=Load()), attr='_batch_size', ctx=Load()))])), Assign(targets=[Name(id='g_loss_min', ctx=Store())], value=Subscript(value=Name(id='ret_g', ctx=Load()), slice=Index(value=Str(s='loss')), ctx=Load()))], orelse=[])
Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_d_loss', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load()), args=[Call(func=Name(id='float', ctx=Load()), args=[Name(id='d_loss_min', ctx=Load())], keywords=[]), Num(n=4)], keywords=[])], keywords=[]))
Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_g_loss', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load()), args=[Name(id='g_loss_min', ctx=Load()), Num(n=4)], keywords=[])], keywords=[]))
Assign(targets=[Name(id='rel_entr', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_rel_entr', ctx=Load()), args=[], keywords=[]))
Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_rel_entr', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load()), args=[Name(id='rel_entr', ctx=Load()), Num(n=4)], keywords=[])], keywords=[]))
Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_ret', ctx=Load()), slice=Index(value=Str(s='params_d')), ctx=Store())], value=Subscript(value=Name(id='ret_d', ctx=Load()), slice=Index(value=Str(s='params')), ctx=Load()))
Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_ret', ctx=Load()), slice=Index(value=Str(s='params_g')), ctx=Store())], value=Subscript(value=Name(id='ret_g', ctx=Load()), slice=Index(value=Str(s='params')), ctx=Load()))
Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_ret', ctx=Load()), slice=Index(value=Str(s='loss_d')), ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load()), args=[Call(func=Name(id='float', ctx=Load()), args=[Name(id='d_loss_min', ctx=Load())], keywords=[]), Num(n=4)], keywords=[]))
Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_ret', ctx=Load()), slice=Index(value=Str(s='loss_g')), ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load()), args=[Name(id='g_loss_min', ctx=Load()), Num(n=4)], keywords=[]))
Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_ret', ctx=Load()), slice=Index(value=Str(s='rel_entr')), ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load()), args=[Name(id='rel_entr', ctx=Load()), Num(n=4)], keywords=[]))
If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_snapshot_dir', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_store_params', ctx=Load()), args=[Name(id='e', ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load()), args=[Name(id='d_loss_min', ctx=Load()), Num(n=4)], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load()), args=[Name(id='g_loss_min', ctx=Load()), Num(n=4)], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load()), args=[Name(id='rel_entr', ctx=Load()), Num(n=4)], keywords=[])], keywords=[]))], orelse=[])
Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Str(s='Epoch %s/%s...'), BinOp(left=Name(id='e', ctx=Load()), op=Add(), right=Num(n=1)), Attribute(value=Name(id='self', ctx=Load()), attr='_num_epochs', ctx=Load())], keywords=[]))
Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Str(s='Loss Discriminator: %s'), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load()), args=[Call(func=Name(id='float', ctx=Load()), args=[Name(id='d_loss_min', ctx=Load())], keywords=[]), Num(n=4)], keywords=[])], keywords=[]))
Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Str(s='Loss Generator: %s'), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load()), args=[Name(id='g_loss_min', ctx=Load()), Num(n=4)], keywords=[])], keywords=[]))
Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Str(s='Relative Entropy: %s'), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load()), args=[Name(id='rel_entr', ctx=Load()), Num(n=4)], keywords=[])], keywords=[]))
If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_tol_rel_ent', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=[If(test=Compare(left=Name(id='rel_entr', ctx=Load()), ops=[LtE()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='_tol_rel_ent', ctx=Load())]), body=[Break()], orelse=[])], orelse=[])
arg(arg='self', annotation=None)
Str(s='\n        Run qGAN training\n\n        Returns:\n            dict: with generator(discriminator) parameters & loss, relative entropy\n        Raises:\n            QiskitMachineLearningError: invalid backend\n        ')
Compare(left=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()), attr='backend_name', ctx=Load()), ops=[Eq()], comparators=[BoolOp(op=Or(), values=[Str(s='unitary_simulator'), Str(s='clifford_simulator')])])
Raise(exc=Call(func=Name(id='QiskitMachineLearningError', ctx=Load()), args=[Str(s='Chosen backend not supported - Set backend either to statevector_simulator, qasm_simulator or actual quantum hardware')], keywords=[]), cause=None)
Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='train', ctx=Load()), args=[], keywords=[])
Attribute(value=Name(id='self', ctx=Load()), attr='_ret', ctx=Load())
Load()
Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Name(id='List', ctx=Load())], ctx=Load())), ctx=Load())
Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Name(id='List', ctx=Load())], ctx=Load())), ctx=Load())), ctx=Load())
Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Name(id='List', ctx=Load())], ctx=Load())), ctx=Load())), ctx=Load())
Name(id='int', ctx=Load())
Name(id='int', ctx=Load())
Name(id='int', ctx=Load())
Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Name(id='DiscriminativeNetwork', ctx=Load())), ctx=Load())
Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Name(id='GenerativeNetwork', ctx=Load())), ctx=Load())
Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Name(id='float', ctx=Load())), ctx=Load())
Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Name(id='str', ctx=Load())), ctx=Load())
Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='QuantumInstance', ctx=Load()), Name(id='Backend', ctx=Load())], ctx=Load())), ctx=Load())), ctx=Load())
Name(id='validate_min', ctx=Load())
Str(s='batch_size')
Name(id='batch_size', ctx=Load())
Num(n=1)
Name(id='self', ctx=Load())
Store()
Load()
Attribute(value=Name(id='self', ctx=Load()), attr='quantum_instance', ctx=Store())
Name(id='quantum_instance', ctx=Load())
Name(id='data', ctx=Load())
Is()
NameConstant(value=None)
Call(func=Name(id='QiskitMachineLearningError', ctx=Load()), args=[Str(s='Training data not given.')], keywords=[])
Name(id='self', ctx=Load())
Store()
Attribute(value=Name(id='np', ctx=Load()), attr='array', ctx=Load())
Name(id='data', ctx=Load())
Name(id='bounds', ctx=Load())
Is()
NameConstant(value=None)
Name(id='bounds_min', ctx=Store())
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='percentile', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_data', ctx=Load()), Num(n=5)], keywords=[keyword(arg='axis', value=Num(n=0))])
Name(id='bounds_max', ctx=Store())
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='percentile', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_data', ctx=Load()), Num(n=95)], keywords=[keyword(arg='axis', value=Num(n=0))])
Name(id='bounds', ctx=Store())
List(elts=[], ctx=Load())
Tuple(elts=[Name(id='i', ctx=Store()), Name(id='_', ctx=Store())], ctx=Store())
Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='bounds_min', ctx=Load())], keywords=[])
Expr(value=Call(func=Attribute(value=Name(id='bounds', ctx=Load()), attr='append', ctx=Load()), args=[List(elts=[Subscript(value=Name(id='bounds_min', ctx=Load()), slice=Index(value=Name(id='i', ctx=Load())), ctx=Load()), Subscript(value=Name(id='bounds_max', ctx=Load()), slice=Index(value=Name(id='i', ctx=Load())), ctx=Load())], ctx=Load())], keywords=[]))
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='ndim', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[])
Gt()
Num(n=1)
Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='bounds', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[BoolOp(op=Or(), values=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='num_qubits', ctx=Load())], keywords=[]), Call(func=Name(id='len', ctx=Load()), args=[Subscript(value=Name(id='data', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())], keywords=[])])])
Raise(exc=Call(func=Name(id='QiskitMachineLearningError', ctx=Load()), args=[Str(s='Dimensions of the data, the length of the data bounds and the numbers of qubits per dimension are incompatible.')], keywords=[]), cause=None)
Compare(left=BoolOp(op=Or(), values=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='ndim', ctx=Load()), args=[Name(id='bounds', ctx=Load())], keywords=[]), Call(func=Name(id='len', ctx=Load()), args=[Name(id='num_qubits', ctx=Load())], keywords=[])]), ops=[NotEq()], comparators=[Num(n=1)])
Raise(exc=Call(func=Name(id='QiskitMachineLearningError', ctx=Load()), args=[Str(s='Dimensions of the data, the length of the data bounds and the numbers of qubits per dimension are incompatible.')], keywords=[]), cause=None)
Name(id='self', ctx=Load())
Store()
Attribute(value=Name(id='np', ctx=Load()), attr='array', ctx=Load())
Name(id='bounds', ctx=Load())
Name(id='self', ctx=Load())
Store()
Load()
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='ndim', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[])
Gt()
Num(n=1)
Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_num_qubits', ctx=Load()), ops=[Is()], comparators=[NameConstant(value=None)])
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_num_qubits', ctx=Store())], value=BinOp(left=Subscript(value=Attribute(value=Name(id='np', ctx=Load()), attr='ones', ctx=Load()), slice=Index(value=Call(func=Name(id='len', ctx=Load()), args=[Subscript(value=Name(id='data', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())], keywords=[])), ctx=Load()), op=Mult(), right=Num(n=3)))
Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_num_qubits', ctx=Load()), ops=[Is()], comparators=[NameConstant(value=None)])
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_num_qubits', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='array', ctx=Load()), args=[List(elts=[Num(n=3)], ctx=Load())], keywords=[]))
Attribute(value=Name(id='self', ctx=Load()), attr='_data', ctx=Store())
Attribute(value=Name(id='self', ctx=Load()), attr='_data_grid', ctx=Store())
Attribute(value=Name(id='self', ctx=Load()), attr='_grid_elements', ctx=Store())
Attribute(value=Name(id='self', ctx=Load()), attr='_prob_data', ctx=Store())
Store()
Name(id='discretize_and_truncate', ctx=Load())
Attribute(value=Name(id='self', ctx=Load()), attr='_data', ctx=Load())
Attribute(value=Name(id='self', ctx=Load()), attr='_bounds', ctx=Load())
Attribute(value=Name(id='self', ctx=Load()), attr='_num_qubits', ctx=Load())
keyword(arg='return_data_grid_elements', value=NameConstant(value=True))
keyword(arg='return_prob', value=NameConstant(value=True))
keyword(arg='prob_non_zero', value=NameConstant(value=True))
Name(id='self', ctx=Load())
Store()
Load()
Name(id='self', ctx=Load())
Store()
Load()
Name(id='self', ctx=Load())
Store()
Load()
Name(id='self', ctx=Load())
Store()
Load()
Name(id='self', ctx=Load())
Store()
Load()
Name(id='self', ctx=Load())
Store()
Load()
Name(id='self', ctx=Load())
Store()
Load()
Name(id='self', ctx=Load())
Store()
Load()
Name(id='generator', ctx=Load())
Is()
NameConstant(value=None)
Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='set_generator', ctx=Load()), args=[], keywords=[])
Attribute(value=Name(id='self', ctx=Load()), attr='_generator', ctx=Store())
Name(id='generator', ctx=Load())
Name(id='discriminator', ctx=Load())
Is()
NameConstant(value=None)
Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='set_discriminator', ctx=Load()), args=[], keywords=[])
Attribute(value=Name(id='self', ctx=Load()), attr='_discriminator', ctx=Store())
Name(id='discriminator', ctx=Load())
Name(id='self', ctx=Load())
Store()
Name(id='self', ctx=Load())
Load()
Name(id='self', ctx=Load())
Store()
Name(id='algorithm_globals', ctx=Load())
Load()
Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='QuantumInstance', ctx=Load()), Name(id='Backend', ctx=Load())], ctx=Load())), ctx=Load())), ctx=Load())
And()
Compare(left=Name(id='quantum_instance', ctx=Load()), ops=[Is()], comparators=[NameConstant(value=None)])
Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='quantum_instance', ctx=Load()), ops=[Is()], comparators=[NameConstant(value=None)])
Call(func=Name(id='QiskitMachineLearningError', ctx=Load()), args=[Str(s='A QuantumInstance or Backend must be supplied to run the quantum algorithm.')], keywords=[])
Name(id='isinstance', ctx=Load())
Name(id='quantum_instance', ctx=Load())
Name(id='Backend', ctx=Load())
Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='set_backend', ctx=Load()), args=[Name(id='quantum_instance', ctx=Load())], keywords=[keyword(arg=None, value=Name(id='kwargs', ctx=Load()))])
Compare(left=Name(id='quantum_instance', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)])
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='quantum_instance', ctx=Store())], value=Name(id='quantum_instance', ctx=Load()))
Attribute(value=Name(id='self', ctx=Load()), attr='_run', ctx=Load())
Name(id='self', ctx=Load())
Load()
Load()
Name(id='QuantumInstance', ctx=Load())
Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='QuantumInstance', ctx=Load()), Name(id='Backend', ctx=Load())], ctx=Load())), ctx=Load())
Name(id='isinstance', ctx=Load())
Name(id='quantum_instance', ctx=Load())
Name(id='Backend', ctx=Load())
Name(id='quantum_instance', ctx=Store())
Call(func=Name(id='QuantumInstance', ctx=Load()), args=[Name(id='quantum_instance', ctx=Load())], keywords=[])
Name(id='self', ctx=Load())
Store()
Load()
Load()
Name(id='Backend', ctx=Load())
Name(id='self', ctx=Load())
Store()
Name(id='QuantumInstance', ctx=Load())
Name(id='backend', ctx=Load())
Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='quantum_instance', ctx=Load()), attr='set_config', ctx=Load())
keyword(arg=None, value=Name(id='kwargs', ctx=Load()))
Attribute(value=Name(id='self', ctx=Load()), attr='quantum_instance', ctx=Load())
Load()
Name(id='Backend', ctx=Load())
Attribute(value=Name(id='self', ctx=Load()), attr='set_backend', ctx=Load())
Name(id='backend', ctx=Load())
Load()
Name(id='self', ctx=Load())
Load()
Name(id='self', ctx=Load())
Store()
Load()
Name(id='algorithm_globals', ctx=Load())
Store()
Name(id='self', ctx=Load())
Load()
Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_discriminator', ctx=Load()), attr='set_seed', ctx=Load())
Attribute(value=Name(id='self', ctx=Load()), attr='_random_seed', ctx=Load())
Load()
Name(id='self', ctx=Load())
Load()
Name(id='self', ctx=Load())
Store()
Load()
Load()
Name(id='self', ctx=Load())
Load()
Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Name(id='QuantumCircuit', ctx=Load())), ctx=Load())
Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), ctx=Load())
Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Name(id='Optimizer', ctx=Load())), ctx=Load())
Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='Callable', ctx=Load()), Name(id='Gradient', ctx=Load())], ctx=Load())), ctx=Load())), ctx=Load())
Load()
UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='generator_gradient', ctx=Load()), Tuple(elts=[Name(id='Gradient', ctx=Load()), Name(id='FunctionType', ctx=Load())], ctx=Load())], keywords=[]))
Raise(exc=Call(func=Name(id='QiskitMachineLearningError', ctx=Load()), args=[Str(s='Please pass either a Gradient object or a function as the generator_gradient argument.')], keywords=[]), cause=None)
Name(id='self', ctx=Load())
Store()
Name(id='QuantumGenerator', ctx=Load())
Attribute(value=Name(id='self', ctx=Load()), attr='_bounds', ctx=Load())
Attribute(value=Name(id='self', ctx=Load()), attr='_num_qubits', ctx=Load())
Name(id='generator_circuit', ctx=Load())
Name(id='generator_init_params', ctx=Load())
Name(id='generator_optimizer', ctx=Load())
Name(id='generator_gradient', ctx=Load())
Attribute(value=Name(id='self', ctx=Load()), attr='_snapshot_dir', ctx=Load())
Name(id='self', ctx=Load())
Load()
Name(id='discriminator', ctx=Load())
Is()
NameConstant(value=None)
Attribute(value=Name(id='self', ctx=Load()), attr='_discriminator', ctx=Store())
Call(func=Name(id='NumPyDiscriminator', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_num_qubits', ctx=Load())], keywords=[])], keywords=[])
Attribute(value=Name(id='self', ctx=Load()), attr='_discriminator', ctx=Store())
Name(id='discriminator', ctx=Load())
Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_discriminator', ctx=Load()), attr='set_seed', ctx=Load())
Attribute(value=Name(id='self', ctx=Load()), attr='_random_seed', ctx=Load())
Name(id='self', ctx=Load())
Load()
Load()
Name(id='float', ctx=Load())
Name(id='self', ctx=Load())
Load()
Load()
Name(id='float', ctx=Load())
Name(id='self', ctx=Load())
Load()
Load()
Name(id='float', ctx=Load())
Name(id='samples_gen', ctx=Store())
Name(id='prob_gen', ctx=Store())
Store()
Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_generator', ctx=Load()), attr='get_output', ctx=Load())
Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load())
Store()
Attribute(value=Name(id='np', ctx=Load()), attr='zeros', ctx=Load())
Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_grid_elements', ctx=Load())], keywords=[])
Name(id='j', ctx=Store())
Name(id='sample', ctx=Store())
Store()
Name(id='enumerate', ctx=Load())
Name(id='samples_gen', ctx=Load())
Tuple(elts=[Name(id='i', ctx=Store()), Name(id='element', ctx=Store())], ctx=Store())
Call(func=Name(id='enumerate', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_grid_elements', ctx=Load())], keywords=[])
If(test=Compare(left=Name(id='sample', ctx=Load()), ops=[Eq()], comparators=[Name(id='element', ctx=Load())]), body=[AugAssign(target=Subscript(value=Name(id='temp', ctx=Load()), slice=Index(value=Name(id='i', ctx=Load())), ctx=Store()), op=Add(), value=Subscript(value=Name(id='prob_gen', ctx=Load()), slice=Index(value=Name(id='j', ctx=Load())), ctx=Load()))], orelse=[])
Store()
IfExp(test=Compare(left=Name(id='x', ctx=Load()), ops=[Eq()], comparators=[Num(n=0)]), body=Num(n=1e-08), orelse=Name(id='x', ctx=Load()))
comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='temp', ctx=Load()), ifs=[], is_async=0)
Store()
Name(id='entropy', ctx=Load())
Name(id='prob_gen', ctx=Load())
Attribute(value=Name(id='self', ctx=Load()), attr='_prob_data', ctx=Load())
Load()
Call(func=Name(id='open', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_snapshot_dir', ctx=Load()), Str(s='output.csv')], keywords=[])], keywords=[keyword(arg='mode', value=Str(s='a')), keyword(arg='encoding', value=Str(s='utf8'))])
Name(id='csv_file', ctx=Store())
Name(id='fieldnames', ctx=Store())
List(elts=[Str(s='epoch'), Str(s='loss_discriminator'), Str(s='loss_generator'), Str(s='params_generator'), Str(s='rel_entropy')], ctx=Load())
Name(id='writer', ctx=Store())
Call(func=Attribute(value=Name(id='csv', ctx=Load()), attr='DictWriter', ctx=Load()), args=[Name(id='csv_file', ctx=Load())], keywords=[keyword(arg='fieldnames', value=Name(id='fieldnames', ctx=Load()))])
Call(func=Attribute(value=Name(id='writer', ctx=Load()), attr='writerow', ctx=Load()), args=[Dict(keys=[Str(s='epoch'), Str(s='loss_discriminator'), Str(s='loss_generator'), Str(s='params_generator'), Str(s='rel_entropy')], values=[Name(id='e', ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='average', ctx=Load()), args=[Name(id='d_loss', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='average', ctx=Load()), args=[Name(id='g_loss', ctx=Load())], keywords=[]), Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_generator', ctx=Load()), attr='parameter_values', ctx=Load()), Name(id='rel_entr', ctx=Load())])], keywords=[])
Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_discriminator', ctx=Load()), attr='save_model', ctx=Load())
Attribute(value=Name(id='self', ctx=Load()), attr='_snapshot_dir', ctx=Load())
Attribute(value=Name(id='self', ctx=Load()), attr='_snapshot_dir', ctx=Load())
IsNot()
NameConstant(value=None)
withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_snapshot_dir', ctx=Load()), Str(s='output.csv')], keywords=[])], keywords=[keyword(arg='mode', value=Str(s='w')), keyword(arg='encoding', value=Str(s='utf8'))]), optional_vars=Name(id='csv_file', ctx=Store()))
Assign(targets=[Name(id='fieldnames', ctx=Store())], value=List(elts=[Str(s='epoch'), Str(s='loss_discriminator'), Str(s='loss_generator'), Str(s='params_generator'), Str(s='rel_entropy')], ctx=Load()))
Assign(targets=[Name(id='writer', ctx=Store())], value=Call(func=Attribute(value=Name(id='csv', ctx=Load()), attr='DictWriter', ctx=Load()), args=[Name(id='csv_file', ctx=Load())], keywords=[keyword(arg='fieldnames', value=Name(id='fieldnames', ctx=Load()))]))
Expr(value=Call(func=Attribute(value=Name(id='writer', ctx=Load()), attr='writeheader', ctx=Load()), args=[], keywords=[]))
Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_data', ctx=Load())], keywords=[])
Lt()
Attribute(value=Name(id='self', ctx=Load()), attr='_batch_size', ctx=Load())
Call(func=Name(id='QiskitMachineLearningError', ctx=Load()), args=[JoinedStr(values=[Str(s='The batch size needs to be less than the truncated data size of '), FormattedValue(value=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_data', ctx=Load())], keywords=[]), conversion=-1, format_spec=None)])], keywords=[])
Store()
Name(id='range', ctx=Load())
Attribute(value=Name(id='self', ctx=Load()), attr='_num_epochs', ctx=Load())
Call(func=Attribute(value=Attribute(value=Name(id='algorithm_globals', ctx=Load()), attr='random', ctx=Load()), attr='shuffle', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_data', ctx=Load())], keywords=[])
Name(id='index', ctx=Store())
Num(n=0)
Compare(left=BinOp(left=Name(id='index', ctx=Load()), op=Add(), right=Attribute(value=Name(id='self', ctx=Load()), attr='_batch_size', ctx=Load())), ops=[LtE()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_data', ctx=Load())], keywords=[])])
Assign(targets=[Name(id='real_batch', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_data', ctx=Load()), slice=Slice(lower=Name(id='index', ctx=Load()), upper=BinOp(left=Name(id='index', ctx=Load()), op=Add(), right=Attribute(value=Name(id='self', ctx=Load()), attr='_batch_size', ctx=Load())), step=None), ctx=Load()))
AugAssign(target=Name(id='index', ctx=Store()), op=Add(), value=Attribute(value=Name(id='self', ctx=Load()), attr='_batch_size', ctx=Load()))
Assign(targets=[Tuple(elts=[Name(id='generated_batch', ctx=Store()), Name(id='generated_prob', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_generator', ctx=Load()), attr='get_output', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load())], keywords=[keyword(arg='shots', value=Attribute(value=Name(id='self', ctx=Load()), attr='_batch_size', ctx=Load()))]))
Assign(targets=[Name(id='ret_d', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_discriminator', ctx=Load()), attr='train', ctx=Load()), args=[List(elts=[Name(id='real_batch', ctx=Load()), Name(id='generated_batch', ctx=Load())], ctx=Load()), List(elts=[BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='ones', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='real_batch', ctx=Load())], keywords=[])], keywords=[]), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='real_batch', ctx=Load())], keywords=[])), Name(id='generated_prob', ctx=Load())], ctx=Load())], keywords=[]))
Assign(targets=[Name(id='d_loss_min', ctx=Store())], value=Subscript(value=Name(id='ret_d', ctx=Load()), slice=Index(value=Str(s='loss')), ctx=Load()))
Assign(targets=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_generator', ctx=Load()), attr='discriminator', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_discriminator', ctx=Load()))
Assign(targets=[Name(id='ret_g', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_generator', ctx=Load()), attr='train', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load())], keywords=[keyword(arg='shots', value=Attribute(value=Name(id='self', ctx=Load()), attr='_batch_size', ctx=Load()))]))
Assign(targets=[Name(id='g_loss_min', ctx=Store())], value=Subscript(value=Name(id='ret_g', ctx=Load()), slice=Index(value=Str(s='loss')), ctx=Load()))
Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_d_loss', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load()), args=[Call(func=Name(id='float', ctx=Load()), args=[Name(id='d_loss_min', ctx=Load())], keywords=[]), Num(n=4)], keywords=[])], keywords=[])
Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_g_loss', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load()), args=[Name(id='g_loss_min', ctx=Load()), Num(n=4)], keywords=[])], keywords=[])
Name(id='rel_entr', ctx=Store())
Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_rel_entr', ctx=Load()), args=[], keywords=[])
Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_rel_entr', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load()), args=[Name(id='rel_entr', ctx=Load()), Num(n=4)], keywords=[])], keywords=[])
Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_ret', ctx=Load()), slice=Index(value=Str(s='params_d')), ctx=Store())
Subscript(value=Name(id='ret_d', ctx=Load()), slice=Index(value=Str(s='params')), ctx=Load())
Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_ret', ctx=Load()), slice=Index(value=Str(s='params_g')), ctx=Store())
Subscript(value=Name(id='ret_g', ctx=Load()), slice=Index(value=Str(s='params')), ctx=Load())
Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_ret', ctx=Load()), slice=Index(value=Str(s='loss_d')), ctx=Store())
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load()), args=[Call(func=Name(id='float', ctx=Load()), args=[Name(id='d_loss_min', ctx=Load())], keywords=[]), Num(n=4)], keywords=[])
Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_ret', ctx=Load()), slice=Index(value=Str(s='loss_g')), ctx=Store())
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load()), args=[Name(id='g_loss_min', ctx=Load()), Num(n=4)], keywords=[])
Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_ret', ctx=Load()), slice=Index(value=Str(s='rel_entr')), ctx=Store())
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load()), args=[Name(id='rel_entr', ctx=Load()), Num(n=4)], keywords=[])
Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_snapshot_dir', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)])
Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_store_params', ctx=Load()), args=[Name(id='e', ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load()), args=[Name(id='d_loss_min', ctx=Load()), Num(n=4)], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load()), args=[Name(id='g_loss_min', ctx=Load()), Num(n=4)], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load()), args=[Name(id='rel_entr', ctx=Load()), Num(n=4)], keywords=[])], keywords=[]))
Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Str(s='Epoch %s/%s...'), BinOp(left=Name(id='e', ctx=Load()), op=Add(), right=Num(n=1)), Attribute(value=Name(id='self', ctx=Load()), attr='_num_epochs', ctx=Load())], keywords=[])
Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Str(s='Loss Discriminator: %s'), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load()), args=[Call(func=Name(id='float', ctx=Load()), args=[Name(id='d_loss_min', ctx=Load())], keywords=[]), Num(n=4)], keywords=[])], keywords=[])
Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Str(s='Loss Generator: %s'), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load()), args=[Name(id='g_loss_min', ctx=Load()), Num(n=4)], keywords=[])], keywords=[])
Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Str(s='Relative Entropy: %s'), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load()), args=[Name(id='rel_entr', ctx=Load()), Num(n=4)], keywords=[])], keywords=[])
Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_tol_rel_ent', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)])
If(test=Compare(left=Name(id='rel_entr', ctx=Load()), ops=[LtE()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='_tol_rel_ent', ctx=Load())]), body=[Break()], orelse=[])
Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()), attr='backend_name', ctx=Load())
Eq()
BoolOp(op=Or(), values=[Str(s='unitary_simulator'), Str(s='clifford_simulator')])
Call(func=Name(id='QiskitMachineLearningError', ctx=Load()), args=[Str(s='Chosen backend not supported - Set backend either to statevector_simulator, qasm_simulator or actual quantum hardware')], keywords=[])
Attribute(value=Name(id='self', ctx=Load()), attr='train', ctx=Load())
Name(id='self', ctx=Load())
Load()
Name(id='Union', ctx=Load())
Index(value=Tuple(elts=[Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Name(id='List', ctx=Load())], ctx=Load()))
Load()
Name(id='Optional', ctx=Load())
Index(value=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Name(id='List', ctx=Load())], ctx=Load())), ctx=Load()))
Load()
Name(id='Optional', ctx=Load())
Index(value=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Name(id='List', ctx=Load())], ctx=Load())), ctx=Load()))
Load()
Load()
Load()
Load()
Name(id='Optional', ctx=Load())
Index(value=Name(id='DiscriminativeNetwork', ctx=Load()))
Load()
Name(id='Optional', ctx=Load())
Index(value=Name(id='GenerativeNetwork', ctx=Load()))
Load()
Name(id='Optional', ctx=Load())
Index(value=Name(id='float', ctx=Load()))
Load()
Name(id='Optional', ctx=Load())
Index(value=Name(id='str', ctx=Load()))
Load()
Name(id='Optional', ctx=Load())
Index(value=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='QuantumInstance', ctx=Load()), Name(id='Backend', ctx=Load())], ctx=Load())), ctx=Load()))
Load()
Load()
Load()
Load()
Name(id='self', ctx=Load())
Store()
Load()
Load()
Name(id='QiskitMachineLearningError', ctx=Load())
Str(s='Training data not given.')
Load()
Name(id='np', ctx=Load())
Load()
Load()
Load()
Store()
Attribute(value=Name(id='np', ctx=Load()), attr='percentile', ctx=Load())
Attribute(value=Name(id='self', ctx=Load()), attr='_data', ctx=Load())
Num(n=5)
keyword(arg='axis', value=Num(n=0))
Store()
Attribute(value=Name(id='np', ctx=Load()), attr='percentile', ctx=Load())
Attribute(value=Name(id='self', ctx=Load()), attr='_data', ctx=Load())
Num(n=95)
keyword(arg='axis', value=Num(n=0))
Store()
Load()
Name(id='i', ctx=Store())
Name(id='_', ctx=Store())
Store()
Name(id='enumerate', ctx=Load())
Name(id='bounds_min', ctx=Load())
Call(func=Attribute(value=Name(id='bounds', ctx=Load()), attr='append', ctx=Load()), args=[List(elts=[Subscript(value=Name(id='bounds_min', ctx=Load()), slice=Index(value=Name(id='i', ctx=Load())), ctx=Load()), Subscript(value=Name(id='bounds_max', ctx=Load()), slice=Index(value=Name(id='i', ctx=Load())), ctx=Load())], ctx=Load())], keywords=[])
Attribute(value=Name(id='np', ctx=Load()), attr='ndim', ctx=Load())
Name(id='data', ctx=Load())
Call(func=Name(id='len', ctx=Load()), args=[Name(id='bounds', ctx=Load())], keywords=[])
NotEq()
BoolOp(op=Or(), values=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='num_qubits', ctx=Load())], keywords=[]), Call(func=Name(id='len', ctx=Load()), args=[Subscript(value=Name(id='data', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())], keywords=[])])
Call(func=Name(id='QiskitMachineLearningError', ctx=Load()), args=[Str(s='Dimensions of the data, the length of the data bounds and the numbers of qubits per dimension are incompatible.')], keywords=[])
BoolOp(op=Or(), values=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='ndim', ctx=Load()), args=[Name(id='bounds', ctx=Load())], keywords=[]), Call(func=Name(id='len', ctx=Load()), args=[Name(id='num_qubits', ctx=Load())], keywords=[])])
NotEq()
Num(n=1)
Call(func=Name(id='QiskitMachineLearningError', ctx=Load()), args=[Str(s='Dimensions of the data, the length of the data bounds and the numbers of qubits per dimension are incompatible.')], keywords=[])
Load()
Name(id='np', ctx=Load())
Load()
Load()
Load()
Attribute(value=Name(id='np', ctx=Load()), attr='ndim', ctx=Load())
Name(id='data', ctx=Load())
Attribute(value=Name(id='self', ctx=Load()), attr='_num_qubits', ctx=Load())
Is()
NameConstant(value=None)
Attribute(value=Name(id='self', ctx=Load()), attr='_num_qubits', ctx=Store())
BinOp(left=Subscript(value=Attribute(value=Name(id='np', ctx=Load()), attr='ones', ctx=Load()), slice=Index(value=Call(func=Name(id='len', ctx=Load()), args=[Subscript(value=Name(id='data', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())], keywords=[])), ctx=Load()), op=Mult(), right=Num(n=3))
Attribute(value=Name(id='self', ctx=Load()), attr='_num_qubits', ctx=Load())
Is()
NameConstant(value=None)
Attribute(value=Name(id='self', ctx=Load()), attr='_num_qubits', ctx=Store())
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='array', ctx=Load()), args=[List(elts=[Num(n=3)], ctx=Load())], keywords=[])
Name(id='self', ctx=Load())
Store()
Name(id='self', ctx=Load())
Store()
Name(id='self', ctx=Load())
Store()
Name(id='self', ctx=Load())
Store()
Load()
Name(id='self', ctx=Load())
Load()
Name(id='self', ctx=Load())
Load()
Name(id='self', ctx=Load())
Load()
NameConstant(value=True)
NameConstant(value=True)
NameConstant(value=True)
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Attribute(value=Name(id='self', ctx=Load()), attr='set_generator', ctx=Load())
Name(id='self', ctx=Load())
Store()
Load()
Load()
Attribute(value=Name(id='self', ctx=Load()), attr='set_discriminator', ctx=Load())
Name(id='self', ctx=Load())
Store()
Load()
Load()
Load()
Load()
Load()
Name(id='Optional', ctx=Load())
Index(value=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='QuantumInstance', ctx=Load()), Name(id='Backend', ctx=Load())], ctx=Load())), ctx=Load()))
Load()
Name(id='quantum_instance', ctx=Load())
Is()
NameConstant(value=None)
Attribute(value=Name(id='self', ctx=Load()), attr='quantum_instance', ctx=Load())
Is()
NameConstant(value=None)
Name(id='QiskitMachineLearningError', ctx=Load())
Str(s='A QuantumInstance or Backend must be supplied to run the quantum algorithm.')
Load()
Load()
Load()
Attribute(value=Name(id='self', ctx=Load()), attr='set_backend', ctx=Load())
Name(id='quantum_instance', ctx=Load())
keyword(arg=None, value=Name(id='kwargs', ctx=Load()))
Name(id='quantum_instance', ctx=Load())
IsNot()
NameConstant(value=None)
Attribute(value=Name(id='self', ctx=Load()), attr='quantum_instance', ctx=Store())
Name(id='quantum_instance', ctx=Load())
Name(id='self', ctx=Load())
Load()
Load()
Load()
Name(id='Union', ctx=Load())
Index(value=Tuple(elts=[Name(id='QuantumInstance', ctx=Load()), Name(id='Backend', ctx=Load())], ctx=Load()))
Load()
Load()
Load()
Load()
Store()
Name(id='QuantumInstance', ctx=Load())
Name(id='quantum_instance', ctx=Load())
Load()
Load()
Load()
Load()
Load()
Attribute(value=Name(id='self', ctx=Load()), attr='quantum_instance', ctx=Load())
Load()
Name(id='kwargs', ctx=Load())
Name(id='self', ctx=Load())
Load()
Load()
Name(id='self', ctx=Load())
Load()
Load()
Load()
Load()
Load()
Load()
Attribute(value=Name(id='self', ctx=Load()), attr='_discriminator', ctx=Load())
Load()
Name(id='self', ctx=Load())
Load()
Load()
Load()
Load()
Name(id='Optional', ctx=Load())
Index(value=Name(id='QuantumCircuit', ctx=Load()))
Load()
Name(id='Optional', ctx=Load())
Index(value=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()))
Load()
Name(id='Optional', ctx=Load())
Index(value=Name(id='Optimizer', ctx=Load()))
Load()
Name(id='Optional', ctx=Load())
Index(value=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='Callable', ctx=Load()), Name(id='Gradient', ctx=Load())], ctx=Load())), ctx=Load()))
Load()
Not()
Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='generator_gradient', ctx=Load()), Tuple(elts=[Name(id='Gradient', ctx=Load()), Name(id='FunctionType', ctx=Load())], ctx=Load())], keywords=[])
Call(func=Name(id='QiskitMachineLearningError', ctx=Load()), args=[Str(s='Please pass either a Gradient object or a function as the generator_gradient argument.')], keywords=[])
Load()
Load()
Name(id='self', ctx=Load())
Load()
Name(id='self', ctx=Load())
Load()
Load()
Load()
Load()
Load()
Name(id='self', ctx=Load())
Load()
Load()
Load()
Name(id='self', ctx=Load())
Store()
Name(id='NumPyDiscriminator', ctx=Load())
Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_num_qubits', ctx=Load())], keywords=[])
Name(id='self', ctx=Load())
Store()
Load()
Attribute(value=Name(id='self', ctx=Load()), attr='_discriminator', ctx=Load())
Load()
Name(id='self', ctx=Load())
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Store()
Store()
Attribute(value=Name(id='self', ctx=Load()), attr='_generator', ctx=Load())
Load()
Name(id='self', ctx=Load())
Load()
Name(id='np', ctx=Load())
Load()
Name(id='len', ctx=Load())
Attribute(value=Name(id='self', ctx=Load()), attr='_grid_elements', ctx=Load())
Store()
Store()
Load()
Load()
Name(id='i', ctx=Store())
Name(id='element', ctx=Store())
Store()
Name(id='enumerate', ctx=Load())
Attribute(value=Name(id='self', ctx=Load()), attr='_grid_elements', ctx=Load())
Compare(left=Name(id='sample', ctx=Load()), ops=[Eq()], comparators=[Name(id='element', ctx=Load())])
AugAssign(target=Subscript(value=Name(id='temp', ctx=Load()), slice=Index(value=Name(id='i', ctx=Load())), ctx=Store()), op=Add(), value=Subscript(value=Name(id='prob_gen', ctx=Load()), slice=Index(value=Name(id='j', ctx=Load())), ctx=Load()))
Compare(left=Name(id='x', ctx=Load()), ops=[Eq()], comparators=[Num(n=0)])
Num(n=1e-08)
Name(id='x', ctx=Load())
Name(id='x', ctx=Store())
Name(id='temp', ctx=Load())
Load()
Load()
Name(id='self', ctx=Load())
Load()
Name(id='open', ctx=Load())
Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_snapshot_dir', ctx=Load()), Str(s='output.csv')], keywords=[])
keyword(arg='mode', value=Str(s='a'))
keyword(arg='encoding', value=Str(s='utf8'))
Store()
Store()
Str(s='epoch')
Str(s='loss_discriminator')
Str(s='loss_generator')
Str(s='params_generator')
Str(s='rel_entropy')
Load()
Store()
Attribute(value=Name(id='csv', ctx=Load()), attr='DictWriter', ctx=Load())
Name(id='csv_file', ctx=Load())
keyword(arg='fieldnames', value=Name(id='fieldnames', ctx=Load()))
Attribute(value=Name(id='writer', ctx=Load()), attr='writerow', ctx=Load())
Dict(keys=[Str(s='epoch'), Str(s='loss_discriminator'), Str(s='loss_generator'), Str(s='params_generator'), Str(s='rel_entropy')], values=[Name(id='e', ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='average', ctx=Load()), args=[Name(id='d_loss', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='average', ctx=Load()), args=[Name(id='g_loss', ctx=Load())], keywords=[]), Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_generator', ctx=Load()), attr='parameter_values', ctx=Load()), Name(id='rel_entr', ctx=Load())])
Attribute(value=Name(id='self', ctx=Load()), attr='_discriminator', ctx=Load())
Load()
Name(id='self', ctx=Load())
Load()
Name(id='self', ctx=Load())
Load()
Call(func=Name(id='open', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_snapshot_dir', ctx=Load()), Str(s='output.csv')], keywords=[])], keywords=[keyword(arg='mode', value=Str(s='w')), keyword(arg='encoding', value=Str(s='utf8'))])
Name(id='csv_file', ctx=Store())
Name(id='fieldnames', ctx=Store())
List(elts=[Str(s='epoch'), Str(s='loss_discriminator'), Str(s='loss_generator'), Str(s='params_generator'), Str(s='rel_entropy')], ctx=Load())
Name(id='writer', ctx=Store())
Call(func=Attribute(value=Name(id='csv', ctx=Load()), attr='DictWriter', ctx=Load()), args=[Name(id='csv_file', ctx=Load())], keywords=[keyword(arg='fieldnames', value=Name(id='fieldnames', ctx=Load()))])
Call(func=Attribute(value=Name(id='writer', ctx=Load()), attr='writeheader', ctx=Load()), args=[], keywords=[])
Name(id='len', ctx=Load())
Attribute(value=Name(id='self', ctx=Load()), attr='_data', ctx=Load())
Name(id='self', ctx=Load())
Load()
Name(id='QiskitMachineLearningError', ctx=Load())
JoinedStr(values=[Str(s='The batch size needs to be less than the truncated data size of '), FormattedValue(value=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_data', ctx=Load())], keywords=[]), conversion=-1, format_spec=None)])
Load()
Name(id='self', ctx=Load())
Load()
Attribute(value=Attribute(value=Name(id='algorithm_globals', ctx=Load()), attr='random', ctx=Load()), attr='shuffle', ctx=Load())
Attribute(value=Name(id='self', ctx=Load()), attr='_data', ctx=Load())
Store()
BinOp(left=Name(id='index', ctx=Load()), op=Add(), right=Attribute(value=Name(id='self', ctx=Load()), attr='_batch_size', ctx=Load()))
LtE()
Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_data', ctx=Load())], keywords=[])
Name(id='real_batch', ctx=Store())
Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_data', ctx=Load()), slice=Slice(lower=Name(id='index', ctx=Load()), upper=BinOp(left=Name(id='index', ctx=Load()), op=Add(), right=Attribute(value=Name(id='self', ctx=Load()), attr='_batch_size', ctx=Load())), step=None), ctx=Load())
Name(id='index', ctx=Store())
Add()
Attribute(value=Name(id='self', ctx=Load()), attr='_batch_size', ctx=Load())
Tuple(elts=[Name(id='generated_batch', ctx=Store()), Name(id='generated_prob', ctx=Store())], ctx=Store())
Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_generator', ctx=Load()), attr='get_output', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load())], keywords=[keyword(arg='shots', value=Attribute(value=Name(id='self', ctx=Load()), attr='_batch_size', ctx=Load()))])
Name(id='ret_d', ctx=Store())
Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_discriminator', ctx=Load()), attr='train', ctx=Load()), args=[List(elts=[Name(id='real_batch', ctx=Load()), Name(id='generated_batch', ctx=Load())], ctx=Load()), List(elts=[BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='ones', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='real_batch', ctx=Load())], keywords=[])], keywords=[]), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='real_batch', ctx=Load())], keywords=[])), Name(id='generated_prob', ctx=Load())], ctx=Load())], keywords=[])
Name(id='d_loss_min', ctx=Store())
Subscript(value=Name(id='ret_d', ctx=Load()), slice=Index(value=Str(s='loss')), ctx=Load())
Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_generator', ctx=Load()), attr='discriminator', ctx=Store())
Attribute(value=Name(id='self', ctx=Load()), attr='_discriminator', ctx=Load())
Name(id='ret_g', ctx=Store())
Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_generator', ctx=Load()), attr='train', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load())], keywords=[keyword(arg='shots', value=Attribute(value=Name(id='self', ctx=Load()), attr='_batch_size', ctx=Load()))])
Name(id='g_loss_min', ctx=Store())
Subscript(value=Name(id='ret_g', ctx=Load()), slice=Index(value=Str(s='loss')), ctx=Load())
Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_d_loss', ctx=Load()), attr='append', ctx=Load())
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load()), args=[Call(func=Name(id='float', ctx=Load()), args=[Name(id='d_loss_min', ctx=Load())], keywords=[]), Num(n=4)], keywords=[])
Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_g_loss', ctx=Load()), attr='append', ctx=Load())
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load()), args=[Name(id='g_loss_min', ctx=Load()), Num(n=4)], keywords=[])
Store()
Attribute(value=Name(id='self', ctx=Load()), attr='get_rel_entr', ctx=Load())
Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_rel_entr', ctx=Load()), attr='append', ctx=Load())
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load()), args=[Name(id='rel_entr', ctx=Load()), Num(n=4)], keywords=[])
Attribute(value=Name(id='self', ctx=Load()), attr='_ret', ctx=Load())
Index(value=Str(s='params_d'))
Store()
Name(id='ret_d', ctx=Load())
Index(value=Str(s='params'))
Load()
Attribute(value=Name(id='self', ctx=Load()), attr='_ret', ctx=Load())
Index(value=Str(s='params_g'))
Store()
Name(id='ret_g', ctx=Load())
Index(value=Str(s='params'))
Load()
Attribute(value=Name(id='self', ctx=Load()), attr='_ret', ctx=Load())
Index(value=Str(s='loss_d'))
Store()
Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load())
Call(func=Name(id='float', ctx=Load()), args=[Name(id='d_loss_min', ctx=Load())], keywords=[])
Num(n=4)
Attribute(value=Name(id='self', ctx=Load()), attr='_ret', ctx=Load())
Index(value=Str(s='loss_g'))
Store()
Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load())
Name(id='g_loss_min', ctx=Load())
Num(n=4)
Attribute(value=Name(id='self', ctx=Load()), attr='_ret', ctx=Load())
Index(value=Str(s='rel_entr'))
Store()
Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load())
Name(id='rel_entr', ctx=Load())
Num(n=4)
Attribute(value=Name(id='self', ctx=Load()), attr='_snapshot_dir', ctx=Load())
IsNot()
NameConstant(value=None)
Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_store_params', ctx=Load()), args=[Name(id='e', ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load()), args=[Name(id='d_loss_min', ctx=Load()), Num(n=4)], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load()), args=[Name(id='g_loss_min', ctx=Load()), Num(n=4)], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load()), args=[Name(id='rel_entr', ctx=Load()), Num(n=4)], keywords=[])], keywords=[])
Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load())
Str(s='Epoch %s/%s...')
BinOp(left=Name(id='e', ctx=Load()), op=Add(), right=Num(n=1))
Attribute(value=Name(id='self', ctx=Load()), attr='_num_epochs', ctx=Load())
Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load())
Str(s='Loss Discriminator: %s')
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load()), args=[Call(func=Name(id='float', ctx=Load()), args=[Name(id='d_loss_min', ctx=Load())], keywords=[]), Num(n=4)], keywords=[])
Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load())
Str(s='Loss Generator: %s')
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load()), args=[Name(id='g_loss_min', ctx=Load()), Num(n=4)], keywords=[])
Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load())
Str(s='Relative Entropy: %s')
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load()), args=[Name(id='rel_entr', ctx=Load()), Num(n=4)], keywords=[])
Attribute(value=Name(id='self', ctx=Load()), attr='_tol_rel_ent', ctx=Load())
IsNot()
NameConstant(value=None)
Compare(left=Name(id='rel_entr', ctx=Load()), ops=[LtE()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='_tol_rel_ent', ctx=Load())])
Break()
Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load())
Load()
Or()
Str(s='unitary_simulator')
Str(s='clifford_simulator')
Name(id='QiskitMachineLearningError', ctx=Load())
Str(s='Chosen backend not supported - Set backend either to statevector_simulator, qasm_simulator or actual quantum hardware')
Name(id='self', ctx=Load())
Load()
Load()
Load()
Tuple(elts=[Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Name(id='List', ctx=Load())], ctx=Load())
Load()
Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Name(id='List', ctx=Load())], ctx=Load())), ctx=Load())
Load()
Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Name(id='List', ctx=Load())], ctx=Load())), ctx=Load())
Load()
Name(id='DiscriminativeNetwork', ctx=Load())
Load()
Name(id='GenerativeNetwork', ctx=Load())
Load()
Name(id='float', ctx=Load())
Load()
Name(id='str', ctx=Load())
Load()
Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='QuantumInstance', ctx=Load()), Name(id='Backend', ctx=Load())], ctx=Load())), ctx=Load())
Load()
Load()
Load()
Name(id='np', ctx=Load())
Load()
Name(id='self', ctx=Load())
Load()
Num(n=0)
Name(id='np', ctx=Load())
Load()
Name(id='self', ctx=Load())
Load()
Num(n=0)
Store()
Store()
Load()
Load()
Attribute(value=Name(id='bounds', ctx=Load()), attr='append', ctx=Load())
List(elts=[Subscript(value=Name(id='bounds_min', ctx=Load()), slice=Index(value=Name(id='i', ctx=Load())), ctx=Load()), Subscript(value=Name(id='bounds_max', ctx=Load()), slice=Index(value=Name(id='i', ctx=Load())), ctx=Load())], ctx=Load())
Name(id='np', ctx=Load())
Load()
Load()
Name(id='len', ctx=Load())
Name(id='bounds', ctx=Load())
Or()
Call(func=Name(id='len', ctx=Load()), args=[Name(id='num_qubits', ctx=Load())], keywords=[])
Call(func=Name(id='len', ctx=Load()), args=[Subscript(value=Name(id='data', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())], keywords=[])
Name(id='QiskitMachineLearningError', ctx=Load())
Str(s='Dimensions of the data, the length of the data bounds and the numbers of qubits per dimension are incompatible.')
Or()
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='ndim', ctx=Load()), args=[Name(id='bounds', ctx=Load())], keywords=[])
Call(func=Name(id='len', ctx=Load()), args=[Name(id='num_qubits', ctx=Load())], keywords=[])
Name(id='QiskitMachineLearningError', ctx=Load())
Str(s='Dimensions of the data, the length of the data bounds and the numbers of qubits per dimension are incompatible.')
Load()
Name(id='np', ctx=Load())
Load()
Load()
Name(id='self', ctx=Load())
Load()
Name(id='self', ctx=Load())
Store()
Subscript(value=Attribute(value=Name(id='np', ctx=Load()), attr='ones', ctx=Load()), slice=Index(value=Call(func=Name(id='len', ctx=Load()), args=[Subscript(value=Name(id='data', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())], keywords=[])), ctx=Load())
Mult()
Num(n=3)
Name(id='self', ctx=Load())
Load()
Name(id='self', ctx=Load())
Store()
Attribute(value=Name(id='np', ctx=Load()), attr='array', ctx=Load())
List(elts=[Num(n=3)], ctx=Load())
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Name(id='self', ctx=Load())
Load()
Load()
Name(id='self', ctx=Load())
Load()
Load()
Load()
Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='QuantumInstance', ctx=Load()), Name(id='Backend', ctx=Load())], ctx=Load())), ctx=Load())
Load()
Name(id='self', ctx=Load())
Load()
Load()
Name(id='self', ctx=Load())
Load()
Load()
Name(id='kwargs', ctx=Load())
Load()
Name(id='self', ctx=Load())
Store()
Load()
Load()
Load()
Tuple(elts=[Name(id='QuantumInstance', ctx=Load()), Name(id='Backend', ctx=Load())], ctx=Load())
Load()
Load()
Name(id='self', ctx=Load())
Load()
Load()
Load()
Load()
Name(id='self', ctx=Load())
Load()
Load()
Load()
Name(id='QuantumCircuit', ctx=Load())
Load()
Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())
Load()
Name(id='Optimizer', ctx=Load())
Load()
Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='Callable', ctx=Load()), Name(id='Gradient', ctx=Load())], ctx=Load())), ctx=Load())
Name(id='isinstance', ctx=Load())
Name(id='generator_gradient', ctx=Load())
Tuple(elts=[Name(id='Gradient', ctx=Load()), Name(id='FunctionType', ctx=Load())], ctx=Load())
Name(id='QiskitMachineLearningError', ctx=Load())
Str(s='Please pass either a Gradient object or a function as the generator_gradient argument.')
Load()
Load()
Load()
Load()
Load()
Name(id='len', ctx=Load())
Attribute(value=Name(id='self', ctx=Load()), attr='_num_qubits', ctx=Load())
Load()
Name(id='self', ctx=Load())
Load()
Load()
Name(id='self', ctx=Load())
Load()
Load()
Load()
Load()
Name(id='self', ctx=Load())
Load()
Store()
Store()
Load()
Name(id='self', ctx=Load())
Load()
Name(id='sample', ctx=Load())
Eq()
Name(id='element', ctx=Load())
Subscript(value=Name(id='temp', ctx=Load()), slice=Index(value=Name(id='i', ctx=Load())), ctx=Store())
Add()
Subscript(value=Name(id='prob_gen', ctx=Load()), slice=Index(value=Name(id='j', ctx=Load())), ctx=Load())
Name(id='x', ctx=Load())
Eq()
Num(n=0)
Load()
Store()
Load()
Load()
Load()
Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load())
Attribute(value=Name(id='self', ctx=Load()), attr='_snapshot_dir', ctx=Load())
Str(s='output.csv')
Str(s='a')
Str(s='utf8')
Name(id='csv', ctx=Load())
Load()
Load()
Name(id='fieldnames', ctx=Load())
Name(id='writer', ctx=Load())
Load()
Str(s='epoch')
Str(s='loss_discriminator')
Str(s='loss_generator')
Str(s='params_generator')
Str(s='rel_entropy')
Name(id='e', ctx=Load())
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='average', ctx=Load()), args=[Name(id='d_loss', ctx=Load())], keywords=[])
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='average', ctx=Load()), args=[Name(id='g_loss', ctx=Load())], keywords=[])
Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_generator', ctx=Load()), attr='parameter_values', ctx=Load())
Name(id='rel_entr', ctx=Load())
Name(id='self', ctx=Load())
Load()
Load()
Load()
Name(id='open', ctx=Load())
Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_snapshot_dir', ctx=Load()), Str(s='output.csv')], keywords=[])
keyword(arg='mode', value=Str(s='w'))
keyword(arg='encoding', value=Str(s='utf8'))
Store()
Store()
Str(s='epoch')
Str(s='loss_discriminator')
Str(s='loss_generator')
Str(s='params_generator')
Str(s='rel_entropy')
Load()
Store()
Attribute(value=Name(id='csv', ctx=Load()), attr='DictWriter', ctx=Load())
Name(id='csv_file', ctx=Load())
keyword(arg='fieldnames', value=Name(id='fieldnames', ctx=Load()))
Attribute(value=Name(id='writer', ctx=Load()), attr='writeheader', ctx=Load())
Load()
Name(id='self', ctx=Load())
Load()
Load()
Load()
Str(s='The batch size needs to be less than the truncated data size of ')
FormattedValue(value=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_data', ctx=Load())], keywords=[]), conversion=-1, format_spec=None)
Load()
Attribute(value=Name(id='algorithm_globals', ctx=Load()), attr='random', ctx=Load())
Load()
Name(id='self', ctx=Load())
Load()
Name(id='index', ctx=Load())
Add()
Attribute(value=Name(id='self', ctx=Load()), attr='_batch_size', ctx=Load())
Name(id='len', ctx=Load())
Attribute(value=Name(id='self', ctx=Load()), attr='_data', ctx=Load())
Store()
Attribute(value=Name(id='self', ctx=Load()), attr='_data', ctx=Load())
Slice(lower=Name(id='index', ctx=Load()), upper=BinOp(left=Name(id='index', ctx=Load()), op=Add(), right=Attribute(value=Name(id='self', ctx=Load()), attr='_batch_size', ctx=Load())), step=None)
Load()
Store()
Name(id='self', ctx=Load())
Load()
Name(id='generated_batch', ctx=Store())
Name(id='generated_prob', ctx=Store())
Store()
Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_generator', ctx=Load()), attr='get_output', ctx=Load())
Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load())
keyword(arg='shots', value=Attribute(value=Name(id='self', ctx=Load()), attr='_batch_size', ctx=Load()))
Store()
Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_discriminator', ctx=Load()), attr='train', ctx=Load())
List(elts=[Name(id='real_batch', ctx=Load()), Name(id='generated_batch', ctx=Load())], ctx=Load())
List(elts=[BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='ones', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='real_batch', ctx=Load())], keywords=[])], keywords=[]), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='real_batch', ctx=Load())], keywords=[])), Name(id='generated_prob', ctx=Load())], ctx=Load())
Store()
Name(id='ret_d', ctx=Load())
Index(value=Str(s='loss'))
Load()
Attribute(value=Name(id='self', ctx=Load()), attr='_generator', ctx=Load())
Store()
Name(id='self', ctx=Load())
Load()
Store()
Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_generator', ctx=Load()), attr='train', ctx=Load())
Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load())
keyword(arg='shots', value=Attribute(value=Name(id='self', ctx=Load()), attr='_batch_size', ctx=Load()))
Store()
Name(id='ret_g', ctx=Load())
Index(value=Str(s='loss'))
Load()
Attribute(value=Name(id='self', ctx=Load()), attr='_d_loss', ctx=Load())
Load()
Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load())
Call(func=Name(id='float', ctx=Load()), args=[Name(id='d_loss_min', ctx=Load())], keywords=[])
Num(n=4)
Attribute(value=Name(id='self', ctx=Load()), attr='_g_loss', ctx=Load())
Load()
Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load())
Name(id='g_loss_min', ctx=Load())
Num(n=4)
Name(id='self', ctx=Load())
Load()
Attribute(value=Name(id='self', ctx=Load()), attr='_rel_entr', ctx=Load())
Load()
Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load())
Name(id='rel_entr', ctx=Load())
Num(n=4)
Name(id='self', ctx=Load())
Load()
Str(s='params_d')
Load()
Str(s='params')
Name(id='self', ctx=Load())
Load()
Str(s='params_g')
Load()
Str(s='params')
Name(id='self', ctx=Load())
Load()
Str(s='loss_d')
Name(id='np', ctx=Load())
Load()
Name(id='float', ctx=Load())
Name(id='d_loss_min', ctx=Load())
Name(id='self', ctx=Load())
Load()
Str(s='loss_g')
Name(id='np', ctx=Load())
Load()
Load()
Name(id='self', ctx=Load())
Load()
Str(s='rel_entr')
Name(id='np', ctx=Load())
Load()
Load()
Name(id='self', ctx=Load())
Load()
Attribute(value=Name(id='self', ctx=Load()), attr='_store_params', ctx=Load())
Name(id='e', ctx=Load())
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load()), args=[Name(id='d_loss_min', ctx=Load()), Num(n=4)], keywords=[])
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load()), args=[Name(id='g_loss_min', ctx=Load()), Num(n=4)], keywords=[])
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load()), args=[Name(id='rel_entr', ctx=Load()), Num(n=4)], keywords=[])
Name(id='logger', ctx=Load())
Load()
Name(id='e', ctx=Load())
Add()
Num(n=1)
Name(id='self', ctx=Load())
Load()
Name(id='logger', ctx=Load())
Load()
Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load())
Call(func=Name(id='float', ctx=Load()), args=[Name(id='d_loss_min', ctx=Load())], keywords=[])
Num(n=4)
Name(id='logger', ctx=Load())
Load()
Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load())
Name(id='g_loss_min', ctx=Load())
Num(n=4)
Name(id='logger', ctx=Load())
Load()
Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load())
Name(id='rel_entr', ctx=Load())
Num(n=4)
Name(id='self', ctx=Load())
Load()
Name(id='rel_entr', ctx=Load())
LtE()
Attribute(value=Name(id='self', ctx=Load()), attr='_tol_rel_ent', ctx=Load())
Name(id='self', ctx=Load())
Load()
Load()
Load()
Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())
Name(id='List', ctx=Load())
Load()
Name(id='Union', ctx=Load())
Index(value=Tuple(elts=[Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Name(id='List', ctx=Load())], ctx=Load()))
Load()
Name(id='Union', ctx=Load())
Index(value=Tuple(elts=[Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Name(id='List', ctx=Load())], ctx=Load()))
Load()
Load()
Load()
Load()
Load()
Name(id='Union', ctx=Load())
Index(value=Tuple(elts=[Name(id='QuantumInstance', ctx=Load()), Name(id='Backend', ctx=Load())], ctx=Load()))
Load()
Load()
Load()
Load()
Load()
Name(id='bounds', ctx=Load())
Load()
Subscript(value=Name(id='bounds_min', ctx=Load()), slice=Index(value=Name(id='i', ctx=Load())), ctx=Load())
Subscript(value=Name(id='bounds_max', ctx=Load()), slice=Index(value=Name(id='i', ctx=Load())), ctx=Load())
Load()
Load()
Load()
Load()
Name(id='len', ctx=Load())
Name(id='num_qubits', ctx=Load())
Name(id='len', ctx=Load())
Subscript(value=Name(id='data', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())
Load()
Attribute(value=Name(id='np', ctx=Load()), attr='ndim', ctx=Load())
Name(id='bounds', ctx=Load())
Name(id='len', ctx=Load())
Name(id='num_qubits', ctx=Load())
Load()
Load()
Load()
Load()
Attribute(value=Name(id='np', ctx=Load()), attr='ones', ctx=Load())
Index(value=Call(func=Name(id='len', ctx=Load()), args=[Subscript(value=Name(id='data', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())], keywords=[]))
Load()
Load()
Load()
Name(id='np', ctx=Load())
Load()
Num(n=3)
Load()
Load()
Load()
Name(id='Union', ctx=Load())
Index(value=Tuple(elts=[Name(id='QuantumInstance', ctx=Load()), Name(id='Backend', ctx=Load())], ctx=Load()))
Load()
Load()
Load()
Load()
Load()
Name(id='QuantumInstance', ctx=Load())
Name(id='Backend', ctx=Load())
Load()
Load()
Load()
Load()
Name(id='np', ctx=Load())
Load()
Load()
Name(id='Union', ctx=Load())
Index(value=Tuple(elts=[Name(id='Callable', ctx=Load()), Name(id='Gradient', ctx=Load())], ctx=Load()))
Load()
Load()
Load()
Name(id='Gradient', ctx=Load())
Name(id='FunctionType', ctx=Load())
Load()
Load()
Load()
Name(id='self', ctx=Load())
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Name(id='temp', ctx=Load())
Index(value=Name(id='i', ctx=Load()))
Store()
Name(id='prob_gen', ctx=Load())
Index(value=Name(id='j', ctx=Load()))
Load()
Load()
Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load())
Load()
Name(id='self', ctx=Load())
Load()
Load()
Load()
Load()
Load()
Attribute(value=Name(id='np', ctx=Load()), attr='average', ctx=Load())
Name(id='d_loss', ctx=Load())
Attribute(value=Name(id='np', ctx=Load()), attr='average', ctx=Load())
Name(id='g_loss', ctx=Load())
Attribute(value=Name(id='self', ctx=Load()), attr='_generator', ctx=Load())
Load()
Load()
Load()
Load()
Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load())
Attribute(value=Name(id='self', ctx=Load()), attr='_snapshot_dir', ctx=Load())
Str(s='output.csv')
Str(s='w')
Str(s='utf8')
Name(id='csv', ctx=Load())
Load()
Load()
Name(id='fieldnames', ctx=Load())
Name(id='writer', ctx=Load())
Load()
Load()
Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_data', ctx=Load())], keywords=[])
Name(id='algorithm_globals', ctx=Load())
Load()
Load()
Load()
Name(id='self', ctx=Load())
Load()
Load()
Name(id='self', ctx=Load())
Load()
Name(id='self', ctx=Load())
Load()
Name(id='index', ctx=Load())
BinOp(left=Name(id='index', ctx=Load()), op=Add(), right=Attribute(value=Name(id='self', ctx=Load()), attr='_batch_size', ctx=Load()))
Load()
Store()
Store()
Attribute(value=Name(id='self', ctx=Load()), attr='_generator', ctx=Load())
Load()
Name(id='self', ctx=Load())
Load()
Attribute(value=Name(id='self', ctx=Load()), attr='_batch_size', ctx=Load())
Attribute(value=Name(id='self', ctx=Load()), attr='_discriminator', ctx=Load())
Load()
Name(id='real_batch', ctx=Load())
Name(id='generated_batch', ctx=Load())
Load()
BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='ones', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='real_batch', ctx=Load())], keywords=[])], keywords=[]), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='real_batch', ctx=Load())], keywords=[]))
Name(id='generated_prob', ctx=Load())
Load()
Load()
Str(s='loss')
Name(id='self', ctx=Load())
Load()
Load()
Attribute(value=Name(id='self', ctx=Load()), attr='_generator', ctx=Load())
Load()
Name(id='self', ctx=Load())
Load()
Attribute(value=Name(id='self', ctx=Load()), attr='_batch_size', ctx=Load())
Load()
Str(s='loss')
Name(id='self', ctx=Load())
Load()
Name(id='np', ctx=Load())
Load()
Name(id='float', ctx=Load())
Name(id='d_loss_min', ctx=Load())
Name(id='self', ctx=Load())
Load()
Name(id='np', ctx=Load())
Load()
Load()
Load()
Name(id='self', ctx=Load())
Load()
Name(id='np', ctx=Load())
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Name(id='self', ctx=Load())
Load()
Load()
Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load())
Name(id='d_loss_min', ctx=Load())
Num(n=4)
Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load())
Name(id='g_loss_min', ctx=Load())
Num(n=4)
Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load())
Name(id='rel_entr', ctx=Load())
Num(n=4)
Load()
Load()
Load()
Load()
Name(id='np', ctx=Load())
Load()
Name(id='float', ctx=Load())
Name(id='d_loss_min', ctx=Load())
Load()
Name(id='np', ctx=Load())
Load()
Load()
Load()
Name(id='np', ctx=Load())
Load()
Load()
Load()
Load()
Name(id='self', ctx=Load())
Load()
Load()
Name(id='np', ctx=Load())
Load()
Load()
Load()
Tuple(elts=[Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Name(id='List', ctx=Load())], ctx=Load())
Load()
Tuple(elts=[Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Name(id='List', ctx=Load())], ctx=Load())
Load()
Tuple(elts=[Name(id='QuantumInstance', ctx=Load()), Name(id='Backend', ctx=Load())], ctx=Load())
Load()
Name(id='bounds_min', ctx=Load())
Index(value=Name(id='i', ctx=Load()))
Load()
Name(id='bounds_max', ctx=Load())
Index(value=Name(id='i', ctx=Load()))
Load()
Load()
Load()
Load()
Name(id='data', ctx=Load())
Index(value=Num(n=0))
Load()
Name(id='np', ctx=Load())
Load()
Load()
Load()
Load()
Name(id='np', ctx=Load())
Load()
Call(func=Name(id='len', ctx=Load()), args=[Subscript(value=Name(id='data', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())], keywords=[])
Load()
Load()
Tuple(elts=[Name(id='QuantumInstance', ctx=Load()), Name(id='Backend', ctx=Load())], ctx=Load())
Load()
Load()
Load()
Load()
Tuple(elts=[Name(id='Callable', ctx=Load()), Name(id='Gradient', ctx=Load())], ctx=Load())
Load()
Load()
Load()
Load()
Name(id='i', ctx=Load())
Load()
Name(id='j', ctx=Load())
Name(id='os', ctx=Load())
Load()
Load()
Name(id='np', ctx=Load())
Load()
Load()
Name(id='np', ctx=Load())
Load()
Load()
Name(id='self', ctx=Load())
Load()
Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load())
Load()
Name(id='self', ctx=Load())
Load()
Load()
Load()
Load()
Name(id='len', ctx=Load())
Attribute(value=Name(id='self', ctx=Load()), attr='_data', ctx=Load())
Load()
Load()
Load()
Load()
Load()
Name(id='index', ctx=Load())
Add()
Attribute(value=Name(id='self', ctx=Load()), attr='_batch_size', ctx=Load())
Name(id='self', ctx=Load())
Load()
Load()
Name(id='self', ctx=Load())
Load()
Name(id='self', ctx=Load())
Load()
Load()
Load()
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='ones', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='real_batch', ctx=Load())], keywords=[])], keywords=[])
Div()
Call(func=Name(id='len', ctx=Load()), args=[Name(id='real_batch', ctx=Load())], keywords=[])
Load()
Load()
Name(id='self', ctx=Load())
Load()
Load()
Name(id='self', ctx=Load())
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Name(id='np', ctx=Load())
Load()
Load()
Name(id='np', ctx=Load())
Load()
Load()
Name(id='np', ctx=Load())
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())
Name(id='List', ctx=Load())
Load()
Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())
Name(id='List', ctx=Load())
Load()
Name(id='QuantumInstance', ctx=Load())
Name(id='Backend', ctx=Load())
Load()
Load()
Name(id='i', ctx=Load())
Load()
Name(id='i', ctx=Load())
Load()
Num(n=0)
Load()
Load()
Name(id='len', ctx=Load())
Subscript(value=Name(id='data', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())
Name(id='QuantumInstance', ctx=Load())
Name(id='Backend', ctx=Load())
Load()
Name(id='Callable', ctx=Load())
Name(id='Gradient', ctx=Load())
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Name(id='os', ctx=Load())
Load()
Load()
Load()
Name(id='self', ctx=Load())
Load()
Load()
Name(id='self', ctx=Load())
Load()
Load()
Load()
Load()
Attribute(value=Name(id='np', ctx=Load()), attr='ones', ctx=Load())
Call(func=Name(id='len', ctx=Load()), args=[Name(id='real_batch', ctx=Load())], keywords=[])
Name(id='len', ctx=Load())
Name(id='real_batch', ctx=Load())
Load()
Load()
Load()
Load()
Load()
Name(id='np', ctx=Load())
Load()
Load()
Name(id='np', ctx=Load())
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Name(id='data', ctx=Load())
Index(value=Num(n=0))
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Name(id='np', ctx=Load())
Load()
Name(id='len', ctx=Load())
Name(id='real_batch', ctx=Load())
Load()
Load()
Load()
Load()
Load()
Num(n=0)
Load()
Load()
Load()
Module(body=[Expr(value=Str(s='Quantum Generative Adversarial Network.')), ImportFrom(module='typing', names=[alias(name='Optional', asname=None), alias(name='Union', asname=None), alias(name='List', asname=None), alias(name='Dict', asname=None), alias(name='Any', asname=None), alias(name='Callable', asname=None)], level=0), ImportFrom(module='types', names=[alias(name='FunctionType', asname=None)], level=0), Import(names=[alias(name='csv', asname=None)]), Import(names=[alias(name='os', asname=None)]), Import(names=[alias(name='logging', asname=None)]), Import(names=[alias(name='numpy', asname='np')]), ImportFrom(module='scipy.stats', names=[alias(name='entropy', asname=None)], level=0), ImportFrom(module='qiskit.circuit', names=[alias(name='QuantumCircuit', asname=None)], level=0), ImportFrom(module='qiskit.providers', names=[alias(name='Backend', asname=None)], level=0), ImportFrom(module='qiskit.utils', names=[alias(name='QuantumInstance', asname=None), alias(name='algorithm_globals', asname=None)], level=0), ImportFrom(module='qiskit.algorithms.optimizers', names=[alias(name='Optimizer', asname=None)], level=0), ImportFrom(module='qiskit.opflow.gradients', names=[alias(name='Gradient', asname=None)], level=0), ImportFrom(module='qiskit.utils.validation', names=[alias(name='validate_min', asname=None)], level=0), ImportFrom(module='datasets.dataset_helper', names=[alias(name='discretize_and_truncate', asname=None)], level=4), ImportFrom(module='exceptions', names=[alias(name='QiskitMachineLearningError', asname=None)], level=4), ImportFrom(module='discriminative_network', names=[alias(name='DiscriminativeNetwork', asname=None)], level=1), ImportFrom(module='generative_network', names=[alias(name='GenerativeNetwork', asname=None)], level=1), ImportFrom(module='quantum_generator', names=[alias(name='QuantumGenerator', asname=None)], level=1), ImportFrom(module='numpy_discriminator', names=[alias(name='NumPyDiscriminator', asname=None)], level=1), Assign(targets=[Name(id='logger', ctx=Store())], value=Call(func=Attribute(value=Name(id='logging', ctx=Load()), attr='getLogger', ctx=Load()), args=[Name(id='__name__', ctx=Load())], keywords=[])), ClassDef(name='QGAN', bases=[], keywords=[], body=[Expr(value=Str(s="The Quantum Generative Adversarial Network algorithm.\n\n    The qGAN [1] is a hybrid quantum-classical algorithm used for generative modeling tasks.\n\n    This adaptive algorithm uses the interplay of a generative\n    :class:`~qiskit_machine_learning.neural_networks.GenerativeNetwork` and a\n    discriminative :class:`~qiskit_machine_learning.neural_networks.DiscriminativeNetwork`\n    network to learn the probability distribution underlying given training data.\n\n    These networks are trained in alternating optimization steps, where the discriminator tries to\n    differentiate between training data samples and data samples from the generator and the\n    generator aims at generating samples which the discriminator classifies as training data\n    samples. Eventually, the quantum generator learns the training data's underlying probability\n    distribution. The trained quantum generator loads a quantum state which is a model of the\n    target distribution.\n\n    **References:**\n\n    [1] Zoufal et al.,\n        `Quantum Generative Adversarial Networks for learning and loading random distributions\n        <https://www.nature.com/articles/s41534-019-0223-2>`_\n    ")), FunctionDef(name='__init__', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='data', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Name(id='List', ctx=Load())], ctx=Load())), ctx=Load())), arg(arg='bounds', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Name(id='List', ctx=Load())], ctx=Load())), ctx=Load())), ctx=Load())), arg(arg='num_qubits', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Name(id='List', ctx=Load())], ctx=Load())), ctx=Load())), ctx=Load())), arg(arg='batch_size', annotation=Name(id='int', ctx=Load())), arg(arg='num_epochs', annotation=Name(id='int', ctx=Load())), arg(arg='seed', annotation=Name(id='int', ctx=Load())), arg(arg='discriminator', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Name(id='DiscriminativeNetwork', ctx=Load())), ctx=Load())), arg(arg='generator', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Name(id='GenerativeNetwork', ctx=Load())), ctx=Load())), arg(arg='tol_rel_ent', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Name(id='float', ctx=Load())), ctx=Load())), arg(arg='snapshot_dir', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Name(id='str', ctx=Load())), ctx=Load())), arg(arg='quantum_instance', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='QuantumInstance', ctx=Load()), Name(id='Backend', ctx=Load())], ctx=Load())), ctx=Load())), ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[NameConstant(value=None), NameConstant(value=None), Num(n=500), Num(n=3000), Num(n=7), NameConstant(value=None), NameConstant(value=None), NameConstant(value=None), NameConstant(value=None), NameConstant(value=None)]), body=[Expr(value=Str(s="\n\n        Args:\n            data: Training data of dimension k\n            bounds: k min/max data values [[min_0,max_0],...,[min_k-1,max_k-1]]\n                if univariate data: [min_0,max_0]\n            num_qubits: k numbers of qubits to determine representation resolution,\n                i.e. n qubits enable the representation of 2**n values\n                [num_qubits_0,..., num_qubits_k-1]\n            batch_size: Batch size, has a min. value of 1.\n            num_epochs: Number of training epochs\n            seed: Random number seed\n            discriminator: Discriminates between real and fake data samples\n            generator: Generates 'fake' data samples\n            tol_rel_ent: Set tolerance level for relative entropy.\n                If the training achieves relative entropy equal or lower than tolerance it finishes.\n            snapshot_dir: Directory in to which to store cvs file with parameters,\n                if None (default) then no cvs file is created.\n            quantum_instance: Quantum Instance or Backend\n        Raises:\n            QiskitMachineLearningError: invalid input\n        ")), Expr(value=Call(func=Name(id='validate_min', ctx=Load()), args=[Str(s='batch_size'), Name(id='batch_size', ctx=Load()), Num(n=1)], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Store())], value=NameConstant(value=None)), If(test=Name(id='quantum_instance', ctx=Load()), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='quantum_instance', ctx=Store())], value=Name(id='quantum_instance', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='data', ctx=Load()), ops=[Is()], comparators=[NameConstant(value=None)]), body=[Raise(exc=Call(func=Name(id='QiskitMachineLearningError', ctx=Load()), args=[Str(s='Training data not given.')], keywords=[]), cause=None)], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_data', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='array', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='bounds', ctx=Load()), ops=[Is()], comparators=[NameConstant(value=None)]), body=[Assign(targets=[Name(id='bounds_min', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='percentile', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_data', ctx=Load()), Num(n=5)], keywords=[keyword(arg='axis', value=Num(n=0))])), Assign(targets=[Name(id='bounds_max', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='percentile', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_data', ctx=Load()), Num(n=95)], keywords=[keyword(arg='axis', value=Num(n=0))])), Assign(targets=[Name(id='bounds', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='_', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='bounds_min', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='bounds', ctx=Load()), attr='append', ctx=Load()), args=[List(elts=[Subscript(value=Name(id='bounds_min', ctx=Load()), slice=Index(value=Name(id='i', ctx=Load())), ctx=Load()), Subscript(value=Name(id='bounds_max', ctx=Load()), slice=Index(value=Name(id='i', ctx=Load())), ctx=Load())], ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), If(test=Compare(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='ndim', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Num(n=1)]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='bounds', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[BoolOp(op=Or(), values=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='num_qubits', ctx=Load())], keywords=[]), Call(func=Name(id='len', ctx=Load()), args=[Subscript(value=Name(id='data', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())], keywords=[])])]), body=[Raise(exc=Call(func=Name(id='QiskitMachineLearningError', ctx=Load()), args=[Str(s='Dimensions of the data, the length of the data bounds and the numbers of qubits per dimension are incompatible.')], keywords=[]), cause=None)], orelse=[])], orelse=[If(test=Compare(left=BoolOp(op=Or(), values=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='ndim', ctx=Load()), args=[Name(id='bounds', ctx=Load())], keywords=[]), Call(func=Name(id='len', ctx=Load()), args=[Name(id='num_qubits', ctx=Load())], keywords=[])]), ops=[NotEq()], comparators=[Num(n=1)]), body=[Raise(exc=Call(func=Name(id='QiskitMachineLearningError', ctx=Load()), args=[Str(s='Dimensions of the data, the length of the data bounds and the numbers of qubits per dimension are incompatible.')], keywords=[]), cause=None)], orelse=[])]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_bounds', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='array', ctx=Load()), args=[Name(id='bounds', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_num_qubits', ctx=Store())], value=Name(id='num_qubits', ctx=Load())), If(test=Compare(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='ndim', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Num(n=1)]), body=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_num_qubits', ctx=Load()), ops=[Is()], comparators=[NameConstant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_num_qubits', ctx=Store())], value=BinOp(left=Subscript(value=Attribute(value=Name(id='np', ctx=Load()), attr='ones', ctx=Load()), slice=Index(value=Call(func=Name(id='len', ctx=Load()), args=[Subscript(value=Name(id='data', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())], keywords=[])), ctx=Load()), op=Mult(), right=Num(n=3)))], orelse=[])], orelse=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_num_qubits', ctx=Load()), ops=[Is()], comparators=[NameConstant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_num_qubits', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='array', ctx=Load()), args=[List(elts=[Num(n=3)], ctx=Load())], keywords=[]))], orelse=[])]), Assign(targets=[Tuple(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='_data', ctx=Store()), Attribute(value=Name(id='self', ctx=Load()), attr='_data_grid', ctx=Store()), Attribute(value=Name(id='self', ctx=Load()), attr='_grid_elements', ctx=Store()), Attribute(value=Name(id='self', ctx=Load()), attr='_prob_data', ctx=Store())], ctx=Store())], value=Call(func=Name(id='discretize_and_truncate', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_data', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_bounds', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_num_qubits', ctx=Load())], keywords=[keyword(arg='return_data_grid_elements', value=NameConstant(value=True)), keyword(arg='return_prob', value=NameConstant(value=True)), keyword(arg='prob_non_zero', value=NameConstant(value=True))])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_batch_size', ctx=Store())], value=Name(id='batch_size', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_num_epochs', ctx=Store())], value=Name(id='num_epochs', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_snapshot_dir', ctx=Store())], value=Name(id='snapshot_dir', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_g_loss', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_d_loss', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_rel_entr', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_tol_rel_ent', ctx=Store())], value=Name(id='tol_rel_ent', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_random_seed', ctx=Store())], value=Name(id='seed', ctx=Load())), If(test=Compare(left=Name(id='generator', ctx=Load()), ops=[Is()], comparators=[NameConstant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='set_generator', ctx=Load()), args=[], keywords=[]))], orelse=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_generator', ctx=Store())], value=Name(id='generator', ctx=Load()))]), If(test=Compare(left=Name(id='discriminator', ctx=Load()), ops=[Is()], comparators=[NameConstant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='set_discriminator', ctx=Load()), args=[], keywords=[]))], orelse=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_discriminator', ctx=Store())], value=Name(id='discriminator', ctx=Load()))]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='seed', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_random_seed', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_ret', ctx=Store())], value=Dict(keys=[], values=[]))], decorator_list=[], returns=NameConstant(value=None)), FunctionDef(name='random', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Return a numpy random.')), Return(value=Attribute(value=Name(id='algorithm_globals', ctx=Load()), attr='random', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=None), FunctionDef(name='run', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='quantum_instance', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='QuantumInstance', ctx=Load()), Name(id='Backend', ctx=Load())], ctx=Load())), ctx=Load())), ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs', annotation=None), defaults=[NameConstant(value=None)]), body=[Expr(value=Str(s='Execute the algorithm with selected backend.\n        Args:\n            quantum_instance: the experimental setting.\n            **kwargs (dict): kwargs\n        Returns:\n            dict: results of an algorithm.\n        Raises:\n            QiskitMachineLearningError: If a quantum instance or\n                                        backend has not been provided\n        ')), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='quantum_instance', ctx=Load()), ops=[Is()], comparators=[NameConstant(value=None)]), Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='quantum_instance', ctx=Load()), ops=[Is()], comparators=[NameConstant(value=None)])]), body=[Raise(exc=Call(func=Name(id='QiskitMachineLearningError', ctx=Load()), args=[Str(s='A QuantumInstance or Backend must be supplied to run the quantum algorithm.')], keywords=[]), cause=None)], orelse=[]), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='quantum_instance', ctx=Load()), Name(id='Backend', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='set_backend', ctx=Load()), args=[Name(id='quantum_instance', ctx=Load())], keywords=[keyword(arg=None, value=Name(id='kwargs', ctx=Load()))]))], orelse=[If(test=Compare(left=Name(id='quantum_instance', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='quantum_instance', ctx=Store())], value=Name(id='quantum_instance', ctx=Load()))], orelse=[])]), Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_run', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Name(id='Dict', ctx=Load())), FunctionDef(name='quantum_instance', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Returns quantum instance.')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Name(id='QuantumInstance', ctx=Load())), ctx=Load())), FunctionDef(name='quantum_instance', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='quantum_instance', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='QuantumInstance', ctx=Load()), Name(id='Backend', ctx=Load())], ctx=Load())), ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Sets quantum instance.')), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='quantum_instance', ctx=Load()), Name(id='Backend', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='quantum_instance', ctx=Store())], value=Call(func=Name(id='QuantumInstance', ctx=Load()), args=[Name(id='quantum_instance', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Store())], value=Name(id='quantum_instance', ctx=Load()))], decorator_list=[Attribute(value=Name(id='quantum_instance', ctx=Load()), attr='setter', ctx=Load())], returns=NameConstant(value=None)), FunctionDef(name='set_backend', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='backend', annotation=Name(id='Backend', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs', annotation=None), defaults=[]), body=[Expr(value=Str(s='Sets backend with configuration.')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='quantum_instance', ctx=Store())], value=Call(func=Name(id='QuantumInstance', ctx=Load()), args=[Name(id='backend', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='quantum_instance', ctx=Load()), attr='set_config', ctx=Load()), args=[], keywords=[keyword(arg=None, value=Name(id='kwargs', ctx=Load()))]))], decorator_list=[], returns=NameConstant(value=None)), FunctionDef(name='backend', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Returns backend.')), Return(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='quantum_instance', ctx=Load()), attr='backend', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='Backend', ctx=Load())), FunctionDef(name='backend', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='backend', annotation=Name(id='Backend', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Sets backend without additional configuration.')), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='set_backend', ctx=Load()), args=[Name(id='backend', ctx=Load())], keywords=[]))], decorator_list=[Attribute(value=Name(id='backend', ctx=Load()), attr='setter', ctx=Load())], returns=None), FunctionDef(name='seed', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Returns random seed')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_random_seed', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=None), FunctionDef(name='seed', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='s', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='\n        Sets the random seed for QGAN and updates the algorithm_globals seed\n        at the same time\n\n        Args:\n            s (int): random seed\n        ')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_random_seed', ctx=Store())], value=Name(id='s', ctx=Load())), Assign(targets=[Attribute(value=Name(id='algorithm_globals', ctx=Load()), attr='random_seed', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_random_seed', ctx=Load())), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_discriminator', ctx=Load()), attr='set_seed', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_random_seed', ctx=Load())], keywords=[]))], decorator_list=[Attribute(value=Name(id='seed', ctx=Load()), attr='setter', ctx=Load())], returns=None), FunctionDef(name='tol_rel_ent', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Returns tolerance for relative entropy')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_tol_rel_ent', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=None), FunctionDef(name='tol_rel_ent', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='t', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='\n        Set tolerance for relative entropy\n\n        Args:\n            t (float): or None, Set tolerance level for relative entropy.\n                If the training achieves relative\n                entropy equal or lower than tolerance it finishes.\n        ')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_tol_rel_ent', ctx=Store())], value=Name(id='t', ctx=Load()))], decorator_list=[Attribute(value=Name(id='tol_rel_ent', ctx=Load()), attr='setter', ctx=Load())], returns=None), FunctionDef(name='generator', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Returns generator')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_generator', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=None), FunctionDef(name='set_generator', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='generator_circuit', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Name(id='QuantumCircuit', ctx=Load())), ctx=Load())), arg(arg='generator_init_params', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), ctx=Load())), arg(arg='generator_optimizer', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Name(id='Optimizer', ctx=Load())), ctx=Load())), arg(arg='generator_gradient', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='Callable', ctx=Load()), Name(id='Gradient', ctx=Load())], ctx=Load())), ctx=Load())), ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[NameConstant(value=None), NameConstant(value=None), NameConstant(value=None), NameConstant(value=None)]), body=[Expr(value=Str(s='Initialize generator.\n\n        Args:\n            generator_circuit: parameterized quantum circuit which sets\n                the structure of the quantum generator\n            generator_init_params: initial parameters for the generator circuit\n            generator_optimizer: optimizer to be used for the training of the generator\n            generator_gradient: A Gradient object, or a function returning partial\n                derivatives of the loss function w.r.t. the generator variational\n                params.\n        Raises:\n            QiskitMachineLearningError: invalid input\n        ')), If(test=Name(id='generator_gradient', ctx=Load()), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='generator_gradient', ctx=Load()), Tuple(elts=[Name(id='Gradient', ctx=Load()), Name(id='FunctionType', ctx=Load())], ctx=Load())], keywords=[])), body=[Raise(exc=Call(func=Name(id='QiskitMachineLearningError', ctx=Load()), args=[Str(s='Please pass either a Gradient object or a function as the generator_gradient argument.')], keywords=[]), cause=None)], orelse=[])], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_generator', ctx=Store())], value=Call(func=Name(id='QuantumGenerator', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_bounds', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_num_qubits', ctx=Load()), Name(id='generator_circuit', ctx=Load()), Name(id='generator_init_params', ctx=Load()), Name(id='generator_optimizer', ctx=Load()), Name(id='generator_gradient', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_snapshot_dir', ctx=Load())], keywords=[]))], decorator_list=[], returns=None), FunctionDef(name='discriminator', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Returns discriminator')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_discriminator', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=None), FunctionDef(name='set_discriminator', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='discriminator', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[NameConstant(value=None)]), body=[Expr(value=Str(s='\n        Initialize discriminator.\n\n        Args:\n            discriminator (Discriminator): discriminator\n        ')), If(test=Compare(left=Name(id='discriminator', ctx=Load()), ops=[Is()], comparators=[NameConstant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_discriminator', ctx=Store())], value=Call(func=Name(id='NumPyDiscriminator', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_num_qubits', ctx=Load())], keywords=[])], keywords=[]))], orelse=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_discriminator', ctx=Store())], value=Name(id='discriminator', ctx=Load()))]), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_discriminator', ctx=Load()), attr='set_seed', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_random_seed', ctx=Load())], keywords=[]))], decorator_list=[], returns=None), FunctionDef(name='g_loss', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Returns generator loss')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_g_loss', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='float', ctx=Load())), ctx=Load())), FunctionDef(name='d_loss', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Returns discriminator loss')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_d_loss', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='float', ctx=Load())), ctx=Load())), FunctionDef(name='rel_entr', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Returns relative entropy between target and trained distribution')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_rel_entr', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='float', ctx=Load())), ctx=Load())), FunctionDef(name='get_rel_entr', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Get relative entropy between target and trained distribution')), Assign(targets=[Tuple(elts=[Name(id='samples_gen', ctx=Store()), Name(id='prob_gen', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_generator', ctx=Load()), attr='get_output', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load())], keywords=[])), Assign(targets=[Name(id='temp', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='zeros', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_grid_elements', ctx=Load())], keywords=[])], keywords=[])), For(target=Tuple(elts=[Name(id='j', ctx=Store()), Name(id='sample', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='samples_gen', ctx=Load())], keywords=[]), body=[For(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='element', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_grid_elements', ctx=Load())], keywords=[]), body=[If(test=Compare(left=Name(id='sample', ctx=Load()), ops=[Eq()], comparators=[Name(id='element', ctx=Load())]), body=[AugAssign(target=Subscript(value=Name(id='temp', ctx=Load()), slice=Index(value=Name(id='i', ctx=Load())), ctx=Store()), op=Add(), value=Subscript(value=Name(id='prob_gen', ctx=Load()), slice=Index(value=Name(id='j', ctx=Load())), ctx=Load()))], orelse=[])], orelse=[])], orelse=[]), Assign(targets=[Name(id='prob_gen', ctx=Store())], value=ListComp(elt=IfExp(test=Compare(left=Name(id='x', ctx=Load()), ops=[Eq()], comparators=[Num(n=0)]), body=Num(n=1e-08), orelse=Name(id='x', ctx=Load())), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='temp', ctx=Load()), ifs=[], is_async=0)])), Assign(targets=[Name(id='rel_entr', ctx=Store())], value=Call(func=Name(id='entropy', ctx=Load()), args=[Name(id='prob_gen', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_prob_data', ctx=Load())], keywords=[])), Return(value=Name(id='rel_entr', ctx=Load()))], decorator_list=[], returns=Name(id='float', ctx=Load())), FunctionDef(name='_store_params', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='e', annotation=None), arg(arg='d_loss', annotation=None), arg(arg='g_loss', annotation=None), arg(arg='rel_entr', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_snapshot_dir', ctx=Load()), Str(s='output.csv')], keywords=[])], keywords=[keyword(arg='mode', value=Str(s='a')), keyword(arg='encoding', value=Str(s='utf8'))]), optional_vars=Name(id='csv_file', ctx=Store()))], body=[Assign(targets=[Name(id='fieldnames', ctx=Store())], value=List(elts=[Str(s='epoch'), Str(s='loss_discriminator'), Str(s='loss_generator'), Str(s='params_generator'), Str(s='rel_entropy')], ctx=Load())), Assign(targets=[Name(id='writer', ctx=Store())], value=Call(func=Attribute(value=Name(id='csv', ctx=Load()), attr='DictWriter', ctx=Load()), args=[Name(id='csv_file', ctx=Load())], keywords=[keyword(arg='fieldnames', value=Name(id='fieldnames', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='writer', ctx=Load()), attr='writerow', ctx=Load()), args=[Dict(keys=[Str(s='epoch'), Str(s='loss_discriminator'), Str(s='loss_generator'), Str(s='params_generator'), Str(s='rel_entropy')], values=[Name(id='e', ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='average', ctx=Load()), args=[Name(id='d_loss', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='average', ctx=Load()), args=[Name(id='g_loss', ctx=Load())], keywords=[]), Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_generator', ctx=Load()), attr='parameter_values', ctx=Load()), Name(id='rel_entr', ctx=Load())])], keywords=[]))]), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_discriminator', ctx=Load()), attr='save_model', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_snapshot_dir', ctx=Load())], keywords=[]))], decorator_list=[], returns=None), FunctionDef(name='train', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='\n        Train the qGAN\n\n        Raises:\n            QiskitMachineLearningError: Batch size bigger than the number of\n                                        items in the truncated data set\n        ')), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_snapshot_dir', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=[With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_snapshot_dir', ctx=Load()), Str(s='output.csv')], keywords=[])], keywords=[keyword(arg='mode', value=Str(s='w')), keyword(arg='encoding', value=Str(s='utf8'))]), optional_vars=Name(id='csv_file', ctx=Store()))], body=[Assign(targets=[Name(id='fieldnames', ctx=Store())], value=List(elts=[Str(s='epoch'), Str(s='loss_discriminator'), Str(s='loss_generator'), Str(s='params_generator'), Str(s='rel_entropy')], ctx=Load())), Assign(targets=[Name(id='writer', ctx=Store())], value=Call(func=Attribute(value=Name(id='csv', ctx=Load()), attr='DictWriter', ctx=Load()), args=[Name(id='csv_file', ctx=Load())], keywords=[keyword(arg='fieldnames', value=Name(id='fieldnames', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='writer', ctx=Load()), attr='writeheader', ctx=Load()), args=[], keywords=[]))])], orelse=[]), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_data', ctx=Load())], keywords=[]), ops=[Lt()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='_batch_size', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='QiskitMachineLearningError', ctx=Load()), args=[JoinedStr(values=[Str(s='The batch size needs to be less than the truncated data size of '), FormattedValue(value=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_data', ctx=Load())], keywords=[]), conversion=-1, format_spec=None)])], keywords=[]), cause=None)], orelse=[]), For(target=Name(id='e', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_num_epochs', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='algorithm_globals', ctx=Load()), attr='random', ctx=Load()), attr='shuffle', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_data', ctx=Load())], keywords=[])), Assign(targets=[Name(id='index', ctx=Store())], value=Num(n=0)), While(test=Compare(left=BinOp(left=Name(id='index', ctx=Load()), op=Add(), right=Attribute(value=Name(id='self', ctx=Load()), attr='_batch_size', ctx=Load())), ops=[LtE()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_data', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='real_batch', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_data', ctx=Load()), slice=Slice(lower=Name(id='index', ctx=Load()), upper=BinOp(left=Name(id='index', ctx=Load()), op=Add(), right=Attribute(value=Name(id='self', ctx=Load()), attr='_batch_size', ctx=Load())), step=None), ctx=Load())), AugAssign(target=Name(id='index', ctx=Store()), op=Add(), value=Attribute(value=Name(id='self', ctx=Load()), attr='_batch_size', ctx=Load())), Assign(targets=[Tuple(elts=[Name(id='generated_batch', ctx=Store()), Name(id='generated_prob', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_generator', ctx=Load()), attr='get_output', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load())], keywords=[keyword(arg='shots', value=Attribute(value=Name(id='self', ctx=Load()), attr='_batch_size', ctx=Load()))])), Assign(targets=[Name(id='ret_d', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_discriminator', ctx=Load()), attr='train', ctx=Load()), args=[List(elts=[Name(id='real_batch', ctx=Load()), Name(id='generated_batch', ctx=Load())], ctx=Load()), List(elts=[BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='ones', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='real_batch', ctx=Load())], keywords=[])], keywords=[]), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='real_batch', ctx=Load())], keywords=[])), Name(id='generated_prob', ctx=Load())], ctx=Load())], keywords=[])), Assign(targets=[Name(id='d_loss_min', ctx=Store())], value=Subscript(value=Name(id='ret_d', ctx=Load()), slice=Index(value=Str(s='loss')), ctx=Load())), Assign(targets=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_generator', ctx=Load()), attr='discriminator', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_discriminator', ctx=Load())), Assign(targets=[Name(id='ret_g', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_generator', ctx=Load()), attr='train', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load())], keywords=[keyword(arg='shots', value=Attribute(value=Name(id='self', ctx=Load()), attr='_batch_size', ctx=Load()))])), Assign(targets=[Name(id='g_loss_min', ctx=Store())], value=Subscript(value=Name(id='ret_g', ctx=Load()), slice=Index(value=Str(s='loss')), ctx=Load()))], orelse=[]), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_d_loss', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load()), args=[Call(func=Name(id='float', ctx=Load()), args=[Name(id='d_loss_min', ctx=Load())], keywords=[]), Num(n=4)], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_g_loss', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load()), args=[Name(id='g_loss_min', ctx=Load()), Num(n=4)], keywords=[])], keywords=[])), Assign(targets=[Name(id='rel_entr', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_rel_entr', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_rel_entr', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load()), args=[Name(id='rel_entr', ctx=Load()), Num(n=4)], keywords=[])], keywords=[])), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_ret', ctx=Load()), slice=Index(value=Str(s='params_d')), ctx=Store())], value=Subscript(value=Name(id='ret_d', ctx=Load()), slice=Index(value=Str(s='params')), ctx=Load())), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_ret', ctx=Load()), slice=Index(value=Str(s='params_g')), ctx=Store())], value=Subscript(value=Name(id='ret_g', ctx=Load()), slice=Index(value=Str(s='params')), ctx=Load())), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_ret', ctx=Load()), slice=Index(value=Str(s='loss_d')), ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load()), args=[Call(func=Name(id='float', ctx=Load()), args=[Name(id='d_loss_min', ctx=Load())], keywords=[]), Num(n=4)], keywords=[])), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_ret', ctx=Load()), slice=Index(value=Str(s='loss_g')), ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load()), args=[Name(id='g_loss_min', ctx=Load()), Num(n=4)], keywords=[])), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_ret', ctx=Load()), slice=Index(value=Str(s='rel_entr')), ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load()), args=[Name(id='rel_entr', ctx=Load()), Num(n=4)], keywords=[])), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_snapshot_dir', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_store_params', ctx=Load()), args=[Name(id='e', ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load()), args=[Name(id='d_loss_min', ctx=Load()), Num(n=4)], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load()), args=[Name(id='g_loss_min', ctx=Load()), Num(n=4)], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load()), args=[Name(id='rel_entr', ctx=Load()), Num(n=4)], keywords=[])], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Str(s='Epoch %s/%s...'), BinOp(left=Name(id='e', ctx=Load()), op=Add(), right=Num(n=1)), Attribute(value=Name(id='self', ctx=Load()), attr='_num_epochs', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Str(s='Loss Discriminator: %s'), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load()), args=[Call(func=Name(id='float', ctx=Load()), args=[Name(id='d_loss_min', ctx=Load())], keywords=[]), Num(n=4)], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Str(s='Loss Generator: %s'), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load()), args=[Name(id='g_loss_min', ctx=Load()), Num(n=4)], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Str(s='Relative Entropy: %s'), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load()), args=[Name(id='rel_entr', ctx=Load()), Num(n=4)], keywords=[])], keywords=[])), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_tol_rel_ent', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=[If(test=Compare(left=Name(id='rel_entr', ctx=Load()), ops=[LtE()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='_tol_rel_ent', ctx=Load())]), body=[Break()], orelse=[])], orelse=[])], orelse=[])], decorator_list=[], returns=None), FunctionDef(name='_run', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='\n        Run qGAN training\n\n        Returns:\n            dict: with generator(discriminator) parameters & loss, relative entropy\n        Raises:\n            QiskitMachineLearningError: invalid backend\n        ')), If(test=Compare(left=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()), attr='backend_name', ctx=Load()), ops=[Eq()], comparators=[BoolOp(op=Or(), values=[Str(s='unitary_simulator'), Str(s='clifford_simulator')])]), body=[Raise(exc=Call(func=Name(id='QiskitMachineLearningError', ctx=Load()), args=[Str(s='Chosen backend not supported - Set backend either to statevector_simulator, qasm_simulator or actual quantum hardware')], keywords=[]), cause=None)], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='train', ctx=Load()), args=[], keywords=[])), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_ret', ctx=Load()))], decorator_list=[], returns=None)], decorator_list=[])])
Expr(value=Str(s='Quantum Generative Adversarial Network.'))
ImportFrom(module='typing', names=[alias(name='Optional', asname=None), alias(name='Union', asname=None), alias(name='List', asname=None), alias(name='Dict', asname=None), alias(name='Any', asname=None), alias(name='Callable', asname=None)], level=0)
ImportFrom(module='types', names=[alias(name='FunctionType', asname=None)], level=0)
Import(names=[alias(name='csv', asname=None)])
Import(names=[alias(name='os', asname=None)])
Import(names=[alias(name='logging', asname=None)])
Import(names=[alias(name='numpy', asname='np')])
ImportFrom(module='scipy.stats', names=[alias(name='entropy', asname=None)], level=0)
ImportFrom(module='qiskit.circuit', names=[alias(name='QuantumCircuit', asname=None)], level=0)
ImportFrom(module='qiskit.providers', names=[alias(name='Backend', asname=None)], level=0)
ImportFrom(module='qiskit.utils', names=[alias(name='QuantumInstance', asname=None), alias(name='algorithm_globals', asname=None)], level=0)
ImportFrom(module='qiskit.algorithms.optimizers', names=[alias(name='Optimizer', asname=None)], level=0)
ImportFrom(module='qiskit.opflow.gradients', names=[alias(name='Gradient', asname=None)], level=0)
ImportFrom(module='qiskit.utils.validation', names=[alias(name='validate_min', asname=None)], level=0)
ImportFrom(module='datasets.dataset_helper', names=[alias(name='discretize_and_truncate', asname=None)], level=4)
ImportFrom(module='exceptions', names=[alias(name='QiskitMachineLearningError', asname=None)], level=4)
ImportFrom(module='discriminative_network', names=[alias(name='DiscriminativeNetwork', asname=None)], level=1)
ImportFrom(module='generative_network', names=[alias(name='GenerativeNetwork', asname=None)], level=1)
ImportFrom(module='quantum_generator', names=[alias(name='QuantumGenerator', asname=None)], level=1)
ImportFrom(module='numpy_discriminator', names=[alias(name='NumPyDiscriminator', asname=None)], level=1)
Assign(targets=[Name(id='logger', ctx=Store())], value=Call(func=Attribute(value=Name(id='logging', ctx=Load()), attr='getLogger', ctx=Load()), args=[Name(id='__name__', ctx=Load())], keywords=[]))
ClassDef(name='QGAN', bases=[], keywords=[], body=[Expr(value=Str(s="The Quantum Generative Adversarial Network algorithm.\n\n    The qGAN [1] is a hybrid quantum-classical algorithm used for generative modeling tasks.\n\n    This adaptive algorithm uses the interplay of a generative\n    :class:`~qiskit_machine_learning.neural_networks.GenerativeNetwork` and a\n    discriminative :class:`~qiskit_machine_learning.neural_networks.DiscriminativeNetwork`\n    network to learn the probability distribution underlying given training data.\n\n    These networks are trained in alternating optimization steps, where the discriminator tries to\n    differentiate between training data samples and data samples from the generator and the\n    generator aims at generating samples which the discriminator classifies as training data\n    samples. Eventually, the quantum generator learns the training data's underlying probability\n    distribution. The trained quantum generator loads a quantum state which is a model of the\n    target distribution.\n\n    **References:**\n\n    [1] Zoufal et al.,\n        `Quantum Generative Adversarial Networks for learning and loading random distributions\n        <https://www.nature.com/articles/s41534-019-0223-2>`_\n    ")), FunctionDef(name='__init__', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='data', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Name(id='List', ctx=Load())], ctx=Load())), ctx=Load())), arg(arg='bounds', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Name(id='List', ctx=Load())], ctx=Load())), ctx=Load())), ctx=Load())), arg(arg='num_qubits', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Name(id='List', ctx=Load())], ctx=Load())), ctx=Load())), ctx=Load())), arg(arg='batch_size', annotation=Name(id='int', ctx=Load())), arg(arg='num_epochs', annotation=Name(id='int', ctx=Load())), arg(arg='seed', annotation=Name(id='int', ctx=Load())), arg(arg='discriminator', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Name(id='DiscriminativeNetwork', ctx=Load())), ctx=Load())), arg(arg='generator', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Name(id='GenerativeNetwork', ctx=Load())), ctx=Load())), arg(arg='tol_rel_ent', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Name(id='float', ctx=Load())), ctx=Load())), arg(arg='snapshot_dir', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Name(id='str', ctx=Load())), ctx=Load())), arg(arg='quantum_instance', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='QuantumInstance', ctx=Load()), Name(id='Backend', ctx=Load())], ctx=Load())), ctx=Load())), ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[NameConstant(value=None), NameConstant(value=None), Num(n=500), Num(n=3000), Num(n=7), NameConstant(value=None), NameConstant(value=None), NameConstant(value=None), NameConstant(value=None), NameConstant(value=None)]), body=[Expr(value=Str(s="\n\n        Args:\n            data: Training data of dimension k\n            bounds: k min/max data values [[min_0,max_0],...,[min_k-1,max_k-1]]\n                if univariate data: [min_0,max_0]\n            num_qubits: k numbers of qubits to determine representation resolution,\n                i.e. n qubits enable the representation of 2**n values\n                [num_qubits_0,..., num_qubits_k-1]\n            batch_size: Batch size, has a min. value of 1.\n            num_epochs: Number of training epochs\n            seed: Random number seed\n            discriminator: Discriminates between real and fake data samples\n            generator: Generates 'fake' data samples\n            tol_rel_ent: Set tolerance level for relative entropy.\n                If the training achieves relative entropy equal or lower than tolerance it finishes.\n            snapshot_dir: Directory in to which to store cvs file with parameters,\n                if None (default) then no cvs file is created.\n            quantum_instance: Quantum Instance or Backend\n        Raises:\n            QiskitMachineLearningError: invalid input\n        ")), Expr(value=Call(func=Name(id='validate_min', ctx=Load()), args=[Str(s='batch_size'), Name(id='batch_size', ctx=Load()), Num(n=1)], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Store())], value=NameConstant(value=None)), If(test=Name(id='quantum_instance', ctx=Load()), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='quantum_instance', ctx=Store())], value=Name(id='quantum_instance', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='data', ctx=Load()), ops=[Is()], comparators=[NameConstant(value=None)]), body=[Raise(exc=Call(func=Name(id='QiskitMachineLearningError', ctx=Load()), args=[Str(s='Training data not given.')], keywords=[]), cause=None)], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_data', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='array', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='bounds', ctx=Load()), ops=[Is()], comparators=[NameConstant(value=None)]), body=[Assign(targets=[Name(id='bounds_min', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='percentile', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_data', ctx=Load()), Num(n=5)], keywords=[keyword(arg='axis', value=Num(n=0))])), Assign(targets=[Name(id='bounds_max', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='percentile', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_data', ctx=Load()), Num(n=95)], keywords=[keyword(arg='axis', value=Num(n=0))])), Assign(targets=[Name(id='bounds', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='_', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='bounds_min', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='bounds', ctx=Load()), attr='append', ctx=Load()), args=[List(elts=[Subscript(value=Name(id='bounds_min', ctx=Load()), slice=Index(value=Name(id='i', ctx=Load())), ctx=Load()), Subscript(value=Name(id='bounds_max', ctx=Load()), slice=Index(value=Name(id='i', ctx=Load())), ctx=Load())], ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), If(test=Compare(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='ndim', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Num(n=1)]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='bounds', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[BoolOp(op=Or(), values=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='num_qubits', ctx=Load())], keywords=[]), Call(func=Name(id='len', ctx=Load()), args=[Subscript(value=Name(id='data', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())], keywords=[])])]), body=[Raise(exc=Call(func=Name(id='QiskitMachineLearningError', ctx=Load()), args=[Str(s='Dimensions of the data, the length of the data bounds and the numbers of qubits per dimension are incompatible.')], keywords=[]), cause=None)], orelse=[])], orelse=[If(test=Compare(left=BoolOp(op=Or(), values=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='ndim', ctx=Load()), args=[Name(id='bounds', ctx=Load())], keywords=[]), Call(func=Name(id='len', ctx=Load()), args=[Name(id='num_qubits', ctx=Load())], keywords=[])]), ops=[NotEq()], comparators=[Num(n=1)]), body=[Raise(exc=Call(func=Name(id='QiskitMachineLearningError', ctx=Load()), args=[Str(s='Dimensions of the data, the length of the data bounds and the numbers of qubits per dimension are incompatible.')], keywords=[]), cause=None)], orelse=[])]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_bounds', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='array', ctx=Load()), args=[Name(id='bounds', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_num_qubits', ctx=Store())], value=Name(id='num_qubits', ctx=Load())), If(test=Compare(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='ndim', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Num(n=1)]), body=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_num_qubits', ctx=Load()), ops=[Is()], comparators=[NameConstant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_num_qubits', ctx=Store())], value=BinOp(left=Subscript(value=Attribute(value=Name(id='np', ctx=Load()), attr='ones', ctx=Load()), slice=Index(value=Call(func=Name(id='len', ctx=Load()), args=[Subscript(value=Name(id='data', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())], keywords=[])), ctx=Load()), op=Mult(), right=Num(n=3)))], orelse=[])], orelse=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_num_qubits', ctx=Load()), ops=[Is()], comparators=[NameConstant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_num_qubits', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='array', ctx=Load()), args=[List(elts=[Num(n=3)], ctx=Load())], keywords=[]))], orelse=[])]), Assign(targets=[Tuple(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='_data', ctx=Store()), Attribute(value=Name(id='self', ctx=Load()), attr='_data_grid', ctx=Store()), Attribute(value=Name(id='self', ctx=Load()), attr='_grid_elements', ctx=Store()), Attribute(value=Name(id='self', ctx=Load()), attr='_prob_data', ctx=Store())], ctx=Store())], value=Call(func=Name(id='discretize_and_truncate', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_data', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_bounds', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_num_qubits', ctx=Load())], keywords=[keyword(arg='return_data_grid_elements', value=NameConstant(value=True)), keyword(arg='return_prob', value=NameConstant(value=True)), keyword(arg='prob_non_zero', value=NameConstant(value=True))])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_batch_size', ctx=Store())], value=Name(id='batch_size', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_num_epochs', ctx=Store())], value=Name(id='num_epochs', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_snapshot_dir', ctx=Store())], value=Name(id='snapshot_dir', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_g_loss', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_d_loss', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_rel_entr', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_tol_rel_ent', ctx=Store())], value=Name(id='tol_rel_ent', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_random_seed', ctx=Store())], value=Name(id='seed', ctx=Load())), If(test=Compare(left=Name(id='generator', ctx=Load()), ops=[Is()], comparators=[NameConstant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='set_generator', ctx=Load()), args=[], keywords=[]))], orelse=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_generator', ctx=Store())], value=Name(id='generator', ctx=Load()))]), If(test=Compare(left=Name(id='discriminator', ctx=Load()), ops=[Is()], comparators=[NameConstant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='set_discriminator', ctx=Load()), args=[], keywords=[]))], orelse=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_discriminator', ctx=Store())], value=Name(id='discriminator', ctx=Load()))]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='seed', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_random_seed', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_ret', ctx=Store())], value=Dict(keys=[], values=[]))], decorator_list=[], returns=NameConstant(value=None)), FunctionDef(name='random', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Return a numpy random.')), Return(value=Attribute(value=Name(id='algorithm_globals', ctx=Load()), attr='random', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=None), FunctionDef(name='run', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='quantum_instance', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='QuantumInstance', ctx=Load()), Name(id='Backend', ctx=Load())], ctx=Load())), ctx=Load())), ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs', annotation=None), defaults=[NameConstant(value=None)]), body=[Expr(value=Str(s='Execute the algorithm with selected backend.\n        Args:\n            quantum_instance: the experimental setting.\n            **kwargs (dict): kwargs\n        Returns:\n            dict: results of an algorithm.\n        Raises:\n            QiskitMachineLearningError: If a quantum instance or\n                                        backend has not been provided\n        ')), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='quantum_instance', ctx=Load()), ops=[Is()], comparators=[NameConstant(value=None)]), Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='quantum_instance', ctx=Load()), ops=[Is()], comparators=[NameConstant(value=None)])]), body=[Raise(exc=Call(func=Name(id='QiskitMachineLearningError', ctx=Load()), args=[Str(s='A QuantumInstance or Backend must be supplied to run the quantum algorithm.')], keywords=[]), cause=None)], orelse=[]), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='quantum_instance', ctx=Load()), Name(id='Backend', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='set_backend', ctx=Load()), args=[Name(id='quantum_instance', ctx=Load())], keywords=[keyword(arg=None, value=Name(id='kwargs', ctx=Load()))]))], orelse=[If(test=Compare(left=Name(id='quantum_instance', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='quantum_instance', ctx=Store())], value=Name(id='quantum_instance', ctx=Load()))], orelse=[])]), Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_run', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Name(id='Dict', ctx=Load())), FunctionDef(name='quantum_instance', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Returns quantum instance.')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Name(id='QuantumInstance', ctx=Load())), ctx=Load())), FunctionDef(name='quantum_instance', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='quantum_instance', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='QuantumInstance', ctx=Load()), Name(id='Backend', ctx=Load())], ctx=Load())), ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Sets quantum instance.')), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='quantum_instance', ctx=Load()), Name(id='Backend', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='quantum_instance', ctx=Store())], value=Call(func=Name(id='QuantumInstance', ctx=Load()), args=[Name(id='quantum_instance', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Store())], value=Name(id='quantum_instance', ctx=Load()))], decorator_list=[Attribute(value=Name(id='quantum_instance', ctx=Load()), attr='setter', ctx=Load())], returns=NameConstant(value=None)), FunctionDef(name='set_backend', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='backend', annotation=Name(id='Backend', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs', annotation=None), defaults=[]), body=[Expr(value=Str(s='Sets backend with configuration.')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='quantum_instance', ctx=Store())], value=Call(func=Name(id='QuantumInstance', ctx=Load()), args=[Name(id='backend', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='quantum_instance', ctx=Load()), attr='set_config', ctx=Load()), args=[], keywords=[keyword(arg=None, value=Name(id='kwargs', ctx=Load()))]))], decorator_list=[], returns=NameConstant(value=None)), FunctionDef(name='backend', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Returns backend.')), Return(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='quantum_instance', ctx=Load()), attr='backend', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='Backend', ctx=Load())), FunctionDef(name='backend', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='backend', annotation=Name(id='Backend', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Sets backend without additional configuration.')), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='set_backend', ctx=Load()), args=[Name(id='backend', ctx=Load())], keywords=[]))], decorator_list=[Attribute(value=Name(id='backend', ctx=Load()), attr='setter', ctx=Load())], returns=None), FunctionDef(name='seed', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Returns random seed')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_random_seed', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=None), FunctionDef(name='seed', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='s', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='\n        Sets the random seed for QGAN and updates the algorithm_globals seed\n        at the same time\n\n        Args:\n            s (int): random seed\n        ')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_random_seed', ctx=Store())], value=Name(id='s', ctx=Load())), Assign(targets=[Attribute(value=Name(id='algorithm_globals', ctx=Load()), attr='random_seed', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_random_seed', ctx=Load())), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_discriminator', ctx=Load()), attr='set_seed', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_random_seed', ctx=Load())], keywords=[]))], decorator_list=[Attribute(value=Name(id='seed', ctx=Load()), attr='setter', ctx=Load())], returns=None), FunctionDef(name='tol_rel_ent', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Returns tolerance for relative entropy')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_tol_rel_ent', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=None), FunctionDef(name='tol_rel_ent', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='t', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='\n        Set tolerance for relative entropy\n\n        Args:\n            t (float): or None, Set tolerance level for relative entropy.\n                If the training achieves relative\n                entropy equal or lower than tolerance it finishes.\n        ')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_tol_rel_ent', ctx=Store())], value=Name(id='t', ctx=Load()))], decorator_list=[Attribute(value=Name(id='tol_rel_ent', ctx=Load()), attr='setter', ctx=Load())], returns=None), FunctionDef(name='generator', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Returns generator')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_generator', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=None), FunctionDef(name='set_generator', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='generator_circuit', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Name(id='QuantumCircuit', ctx=Load())), ctx=Load())), arg(arg='generator_init_params', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), ctx=Load())), arg(arg='generator_optimizer', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Name(id='Optimizer', ctx=Load())), ctx=Load())), arg(arg='generator_gradient', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='Callable', ctx=Load()), Name(id='Gradient', ctx=Load())], ctx=Load())), ctx=Load())), ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[NameConstant(value=None), NameConstant(value=None), NameConstant(value=None), NameConstant(value=None)]), body=[Expr(value=Str(s='Initialize generator.\n\n        Args:\n            generator_circuit: parameterized quantum circuit which sets\n                the structure of the quantum generator\n            generator_init_params: initial parameters for the generator circuit\n            generator_optimizer: optimizer to be used for the training of the generator\n            generator_gradient: A Gradient object, or a function returning partial\n                derivatives of the loss function w.r.t. the generator variational\n                params.\n        Raises:\n            QiskitMachineLearningError: invalid input\n        ')), If(test=Name(id='generator_gradient', ctx=Load()), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='generator_gradient', ctx=Load()), Tuple(elts=[Name(id='Gradient', ctx=Load()), Name(id='FunctionType', ctx=Load())], ctx=Load())], keywords=[])), body=[Raise(exc=Call(func=Name(id='QiskitMachineLearningError', ctx=Load()), args=[Str(s='Please pass either a Gradient object or a function as the generator_gradient argument.')], keywords=[]), cause=None)], orelse=[])], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_generator', ctx=Store())], value=Call(func=Name(id='QuantumGenerator', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_bounds', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_num_qubits', ctx=Load()), Name(id='generator_circuit', ctx=Load()), Name(id='generator_init_params', ctx=Load()), Name(id='generator_optimizer', ctx=Load()), Name(id='generator_gradient', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_snapshot_dir', ctx=Load())], keywords=[]))], decorator_list=[], returns=None), FunctionDef(name='discriminator', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Returns discriminator')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_discriminator', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=None), FunctionDef(name='set_discriminator', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='discriminator', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[NameConstant(value=None)]), body=[Expr(value=Str(s='\n        Initialize discriminator.\n\n        Args:\n            discriminator (Discriminator): discriminator\n        ')), If(test=Compare(left=Name(id='discriminator', ctx=Load()), ops=[Is()], comparators=[NameConstant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_discriminator', ctx=Store())], value=Call(func=Name(id='NumPyDiscriminator', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_num_qubits', ctx=Load())], keywords=[])], keywords=[]))], orelse=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_discriminator', ctx=Store())], value=Name(id='discriminator', ctx=Load()))]), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_discriminator', ctx=Load()), attr='set_seed', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_random_seed', ctx=Load())], keywords=[]))], decorator_list=[], returns=None), FunctionDef(name='g_loss', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Returns generator loss')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_g_loss', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='float', ctx=Load())), ctx=Load())), FunctionDef(name='d_loss', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Returns discriminator loss')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_d_loss', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='float', ctx=Load())), ctx=Load())), FunctionDef(name='rel_entr', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Returns relative entropy between target and trained distribution')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_rel_entr', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='float', ctx=Load())), ctx=Load())), FunctionDef(name='get_rel_entr', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Get relative entropy between target and trained distribution')), Assign(targets=[Tuple(elts=[Name(id='samples_gen', ctx=Store()), Name(id='prob_gen', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_generator', ctx=Load()), attr='get_output', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load())], keywords=[])), Assign(targets=[Name(id='temp', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='zeros', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_grid_elements', ctx=Load())], keywords=[])], keywords=[])), For(target=Tuple(elts=[Name(id='j', ctx=Store()), Name(id='sample', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='samples_gen', ctx=Load())], keywords=[]), body=[For(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='element', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_grid_elements', ctx=Load())], keywords=[]), body=[If(test=Compare(left=Name(id='sample', ctx=Load()), ops=[Eq()], comparators=[Name(id='element', ctx=Load())]), body=[AugAssign(target=Subscript(value=Name(id='temp', ctx=Load()), slice=Index(value=Name(id='i', ctx=Load())), ctx=Store()), op=Add(), value=Subscript(value=Name(id='prob_gen', ctx=Load()), slice=Index(value=Name(id='j', ctx=Load())), ctx=Load()))], orelse=[])], orelse=[])], orelse=[]), Assign(targets=[Name(id='prob_gen', ctx=Store())], value=ListComp(elt=IfExp(test=Compare(left=Name(id='x', ctx=Load()), ops=[Eq()], comparators=[Num(n=0)]), body=Num(n=1e-08), orelse=Name(id='x', ctx=Load())), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='temp', ctx=Load()), ifs=[], is_async=0)])), Assign(targets=[Name(id='rel_entr', ctx=Store())], value=Call(func=Name(id='entropy', ctx=Load()), args=[Name(id='prob_gen', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_prob_data', ctx=Load())], keywords=[])), Return(value=Name(id='rel_entr', ctx=Load()))], decorator_list=[], returns=Name(id='float', ctx=Load())), FunctionDef(name='_store_params', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='e', annotation=None), arg(arg='d_loss', annotation=None), arg(arg='g_loss', annotation=None), arg(arg='rel_entr', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_snapshot_dir', ctx=Load()), Str(s='output.csv')], keywords=[])], keywords=[keyword(arg='mode', value=Str(s='a')), keyword(arg='encoding', value=Str(s='utf8'))]), optional_vars=Name(id='csv_file', ctx=Store()))], body=[Assign(targets=[Name(id='fieldnames', ctx=Store())], value=List(elts=[Str(s='epoch'), Str(s='loss_discriminator'), Str(s='loss_generator'), Str(s='params_generator'), Str(s='rel_entropy')], ctx=Load())), Assign(targets=[Name(id='writer', ctx=Store())], value=Call(func=Attribute(value=Name(id='csv', ctx=Load()), attr='DictWriter', ctx=Load()), args=[Name(id='csv_file', ctx=Load())], keywords=[keyword(arg='fieldnames', value=Name(id='fieldnames', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='writer', ctx=Load()), attr='writerow', ctx=Load()), args=[Dict(keys=[Str(s='epoch'), Str(s='loss_discriminator'), Str(s='loss_generator'), Str(s='params_generator'), Str(s='rel_entropy')], values=[Name(id='e', ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='average', ctx=Load()), args=[Name(id='d_loss', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='average', ctx=Load()), args=[Name(id='g_loss', ctx=Load())], keywords=[]), Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_generator', ctx=Load()), attr='parameter_values', ctx=Load()), Name(id='rel_entr', ctx=Load())])], keywords=[]))]), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_discriminator', ctx=Load()), attr='save_model', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_snapshot_dir', ctx=Load())], keywords=[]))], decorator_list=[], returns=None), FunctionDef(name='train', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='\n        Train the qGAN\n\n        Raises:\n            QiskitMachineLearningError: Batch size bigger than the number of\n                                        items in the truncated data set\n        ')), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_snapshot_dir', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=[With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_snapshot_dir', ctx=Load()), Str(s='output.csv')], keywords=[])], keywords=[keyword(arg='mode', value=Str(s='w')), keyword(arg='encoding', value=Str(s='utf8'))]), optional_vars=Name(id='csv_file', ctx=Store()))], body=[Assign(targets=[Name(id='fieldnames', ctx=Store())], value=List(elts=[Str(s='epoch'), Str(s='loss_discriminator'), Str(s='loss_generator'), Str(s='params_generator'), Str(s='rel_entropy')], ctx=Load())), Assign(targets=[Name(id='writer', ctx=Store())], value=Call(func=Attribute(value=Name(id='csv', ctx=Load()), attr='DictWriter', ctx=Load()), args=[Name(id='csv_file', ctx=Load())], keywords=[keyword(arg='fieldnames', value=Name(id='fieldnames', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='writer', ctx=Load()), attr='writeheader', ctx=Load()), args=[], keywords=[]))])], orelse=[]), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_data', ctx=Load())], keywords=[]), ops=[Lt()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='_batch_size', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='QiskitMachineLearningError', ctx=Load()), args=[JoinedStr(values=[Str(s='The batch size needs to be less than the truncated data size of '), FormattedValue(value=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_data', ctx=Load())], keywords=[]), conversion=-1, format_spec=None)])], keywords=[]), cause=None)], orelse=[]), For(target=Name(id='e', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_num_epochs', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='algorithm_globals', ctx=Load()), attr='random', ctx=Load()), attr='shuffle', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_data', ctx=Load())], keywords=[])), Assign(targets=[Name(id='index', ctx=Store())], value=Num(n=0)), While(test=Compare(left=BinOp(left=Name(id='index', ctx=Load()), op=Add(), right=Attribute(value=Name(id='self', ctx=Load()), attr='_batch_size', ctx=Load())), ops=[LtE()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_data', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='real_batch', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_data', ctx=Load()), slice=Slice(lower=Name(id='index', ctx=Load()), upper=BinOp(left=Name(id='index', ctx=Load()), op=Add(), right=Attribute(value=Name(id='self', ctx=Load()), attr='_batch_size', ctx=Load())), step=None), ctx=Load())), AugAssign(target=Name(id='index', ctx=Store()), op=Add(), value=Attribute(value=Name(id='self', ctx=Load()), attr='_batch_size', ctx=Load())), Assign(targets=[Tuple(elts=[Name(id='generated_batch', ctx=Store()), Name(id='generated_prob', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_generator', ctx=Load()), attr='get_output', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load())], keywords=[keyword(arg='shots', value=Attribute(value=Name(id='self', ctx=Load()), attr='_batch_size', ctx=Load()))])), Assign(targets=[Name(id='ret_d', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_discriminator', ctx=Load()), attr='train', ctx=Load()), args=[List(elts=[Name(id='real_batch', ctx=Load()), Name(id='generated_batch', ctx=Load())], ctx=Load()), List(elts=[BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='ones', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='real_batch', ctx=Load())], keywords=[])], keywords=[]), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='real_batch', ctx=Load())], keywords=[])), Name(id='generated_prob', ctx=Load())], ctx=Load())], keywords=[])), Assign(targets=[Name(id='d_loss_min', ctx=Store())], value=Subscript(value=Name(id='ret_d', ctx=Load()), slice=Index(value=Str(s='loss')), ctx=Load())), Assign(targets=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_generator', ctx=Load()), attr='discriminator', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_discriminator', ctx=Load())), Assign(targets=[Name(id='ret_g', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_generator', ctx=Load()), attr='train', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load())], keywords=[keyword(arg='shots', value=Attribute(value=Name(id='self', ctx=Load()), attr='_batch_size', ctx=Load()))])), Assign(targets=[Name(id='g_loss_min', ctx=Store())], value=Subscript(value=Name(id='ret_g', ctx=Load()), slice=Index(value=Str(s='loss')), ctx=Load()))], orelse=[]), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_d_loss', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load()), args=[Call(func=Name(id='float', ctx=Load()), args=[Name(id='d_loss_min', ctx=Load())], keywords=[]), Num(n=4)], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_g_loss', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load()), args=[Name(id='g_loss_min', ctx=Load()), Num(n=4)], keywords=[])], keywords=[])), Assign(targets=[Name(id='rel_entr', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_rel_entr', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_rel_entr', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load()), args=[Name(id='rel_entr', ctx=Load()), Num(n=4)], keywords=[])], keywords=[])), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_ret', ctx=Load()), slice=Index(value=Str(s='params_d')), ctx=Store())], value=Subscript(value=Name(id='ret_d', ctx=Load()), slice=Index(value=Str(s='params')), ctx=Load())), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_ret', ctx=Load()), slice=Index(value=Str(s='params_g')), ctx=Store())], value=Subscript(value=Name(id='ret_g', ctx=Load()), slice=Index(value=Str(s='params')), ctx=Load())), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_ret', ctx=Load()), slice=Index(value=Str(s='loss_d')), ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load()), args=[Call(func=Name(id='float', ctx=Load()), args=[Name(id='d_loss_min', ctx=Load())], keywords=[]), Num(n=4)], keywords=[])), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_ret', ctx=Load()), slice=Index(value=Str(s='loss_g')), ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load()), args=[Name(id='g_loss_min', ctx=Load()), Num(n=4)], keywords=[])), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_ret', ctx=Load()), slice=Index(value=Str(s='rel_entr')), ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load()), args=[Name(id='rel_entr', ctx=Load()), Num(n=4)], keywords=[])), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_snapshot_dir', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_store_params', ctx=Load()), args=[Name(id='e', ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load()), args=[Name(id='d_loss_min', ctx=Load()), Num(n=4)], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load()), args=[Name(id='g_loss_min', ctx=Load()), Num(n=4)], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load()), args=[Name(id='rel_entr', ctx=Load()), Num(n=4)], keywords=[])], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Str(s='Epoch %s/%s...'), BinOp(left=Name(id='e', ctx=Load()), op=Add(), right=Num(n=1)), Attribute(value=Name(id='self', ctx=Load()), attr='_num_epochs', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Str(s='Loss Discriminator: %s'), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load()), args=[Call(func=Name(id='float', ctx=Load()), args=[Name(id='d_loss_min', ctx=Load())], keywords=[]), Num(n=4)], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Str(s='Loss Generator: %s'), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load()), args=[Name(id='g_loss_min', ctx=Load()), Num(n=4)], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Str(s='Relative Entropy: %s'), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load()), args=[Name(id='rel_entr', ctx=Load()), Num(n=4)], keywords=[])], keywords=[])), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_tol_rel_ent', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=[If(test=Compare(left=Name(id='rel_entr', ctx=Load()), ops=[LtE()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='_tol_rel_ent', ctx=Load())]), body=[Break()], orelse=[])], orelse=[])], orelse=[])], decorator_list=[], returns=None), FunctionDef(name='_run', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='\n        Run qGAN training\n\n        Returns:\n            dict: with generator(discriminator) parameters & loss, relative entropy\n        Raises:\n            QiskitMachineLearningError: invalid backend\n        ')), If(test=Compare(left=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()), attr='backend_name', ctx=Load()), ops=[Eq()], comparators=[BoolOp(op=Or(), values=[Str(s='unitary_simulator'), Str(s='clifford_simulator')])]), body=[Raise(exc=Call(func=Name(id='QiskitMachineLearningError', ctx=Load()), args=[Str(s='Chosen backend not supported - Set backend either to statevector_simulator, qasm_simulator or actual quantum hardware')], keywords=[]), cause=None)], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='train', ctx=Load()), args=[], keywords=[])), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_ret', ctx=Load()))], decorator_list=[], returns=None)], decorator_list=[])
Str(s='Quantum Generative Adversarial Network.')
alias(name='Optional', asname=None)
alias(name='Union', asname=None)
alias(name='List', asname=None)
alias(name='Dict', asname=None)
alias(name='Any', asname=None)
alias(name='Callable', asname=None)
alias(name='FunctionType', asname=None)
alias(name='csv', asname=None)
alias(name='os', asname=None)
alias(name='logging', asname=None)
alias(name='numpy', asname='np')
alias(name='entropy', asname=None)
alias(name='QuantumCircuit', asname=None)
alias(name='Backend', asname=None)
alias(name='QuantumInstance', asname=None)
alias(name='algorithm_globals', asname=None)
alias(name='Optimizer', asname=None)
alias(name='Gradient', asname=None)
alias(name='validate_min', asname=None)
alias(name='discretize_and_truncate', asname=None)
alias(name='QiskitMachineLearningError', asname=None)
alias(name='DiscriminativeNetwork', asname=None)
alias(name='GenerativeNetwork', asname=None)
alias(name='QuantumGenerator', asname=None)
alias(name='NumPyDiscriminator', asname=None)
Name(id='logger', ctx=Store())
Call(func=Attribute(value=Name(id='logging', ctx=Load()), attr='getLogger', ctx=Load()), args=[Name(id='__name__', ctx=Load())], keywords=[])
Expr(value=Str(s="The Quantum Generative Adversarial Network algorithm.\n\n    The qGAN [1] is a hybrid quantum-classical algorithm used for generative modeling tasks.\n\n    This adaptive algorithm uses the interplay of a generative\n    :class:`~qiskit_machine_learning.neural_networks.GenerativeNetwork` and a\n    discriminative :class:`~qiskit_machine_learning.neural_networks.DiscriminativeNetwork`\n    network to learn the probability distribution underlying given training data.\n\n    These networks are trained in alternating optimization steps, where the discriminator tries to\n    differentiate between training data samples and data samples from the generator and the\n    generator aims at generating samples which the discriminator classifies as training data\n    samples. Eventually, the quantum generator learns the training data's underlying probability\n    distribution. The trained quantum generator loads a quantum state which is a model of the\n    target distribution.\n\n    **References:**\n\n    [1] Zoufal et al.,\n        `Quantum Generative Adversarial Networks for learning and loading random distributions\n        <https://www.nature.com/articles/s41534-019-0223-2>`_\n    "))
FunctionDef(name='__init__', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='data', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Name(id='List', ctx=Load())], ctx=Load())), ctx=Load())), arg(arg='bounds', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Name(id='List', ctx=Load())], ctx=Load())), ctx=Load())), ctx=Load())), arg(arg='num_qubits', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Name(id='List', ctx=Load())], ctx=Load())), ctx=Load())), ctx=Load())), arg(arg='batch_size', annotation=Name(id='int', ctx=Load())), arg(arg='num_epochs', annotation=Name(id='int', ctx=Load())), arg(arg='seed', annotation=Name(id='int', ctx=Load())), arg(arg='discriminator', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Name(id='DiscriminativeNetwork', ctx=Load())), ctx=Load())), arg(arg='generator', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Name(id='GenerativeNetwork', ctx=Load())), ctx=Load())), arg(arg='tol_rel_ent', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Name(id='float', ctx=Load())), ctx=Load())), arg(arg='snapshot_dir', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Name(id='str', ctx=Load())), ctx=Load())), arg(arg='quantum_instance', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='QuantumInstance', ctx=Load()), Name(id='Backend', ctx=Load())], ctx=Load())), ctx=Load())), ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[NameConstant(value=None), NameConstant(value=None), Num(n=500), Num(n=3000), Num(n=7), NameConstant(value=None), NameConstant(value=None), NameConstant(value=None), NameConstant(value=None), NameConstant(value=None)]), body=[Expr(value=Str(s="\n\n        Args:\n            data: Training data of dimension k\n            bounds: k min/max data values [[min_0,max_0],...,[min_k-1,max_k-1]]\n                if univariate data: [min_0,max_0]\n            num_qubits: k numbers of qubits to determine representation resolution,\n                i.e. n qubits enable the representation of 2**n values\n                [num_qubits_0,..., num_qubits_k-1]\n            batch_size: Batch size, has a min. value of 1.\n            num_epochs: Number of training epochs\n            seed: Random number seed\n            discriminator: Discriminates between real and fake data samples\n            generator: Generates 'fake' data samples\n            tol_rel_ent: Set tolerance level for relative entropy.\n                If the training achieves relative entropy equal or lower than tolerance it finishes.\n            snapshot_dir: Directory in to which to store cvs file with parameters,\n                if None (default) then no cvs file is created.\n            quantum_instance: Quantum Instance or Backend\n        Raises:\n            QiskitMachineLearningError: invalid input\n        ")), Expr(value=Call(func=Name(id='validate_min', ctx=Load()), args=[Str(s='batch_size'), Name(id='batch_size', ctx=Load()), Num(n=1)], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Store())], value=NameConstant(value=None)), If(test=Name(id='quantum_instance', ctx=Load()), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='quantum_instance', ctx=Store())], value=Name(id='quantum_instance', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='data', ctx=Load()), ops=[Is()], comparators=[NameConstant(value=None)]), body=[Raise(exc=Call(func=Name(id='QiskitMachineLearningError', ctx=Load()), args=[Str(s='Training data not given.')], keywords=[]), cause=None)], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_data', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='array', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='bounds', ctx=Load()), ops=[Is()], comparators=[NameConstant(value=None)]), body=[Assign(targets=[Name(id='bounds_min', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='percentile', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_data', ctx=Load()), Num(n=5)], keywords=[keyword(arg='axis', value=Num(n=0))])), Assign(targets=[Name(id='bounds_max', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='percentile', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_data', ctx=Load()), Num(n=95)], keywords=[keyword(arg='axis', value=Num(n=0))])), Assign(targets=[Name(id='bounds', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='_', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='bounds_min', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='bounds', ctx=Load()), attr='append', ctx=Load()), args=[List(elts=[Subscript(value=Name(id='bounds_min', ctx=Load()), slice=Index(value=Name(id='i', ctx=Load())), ctx=Load()), Subscript(value=Name(id='bounds_max', ctx=Load()), slice=Index(value=Name(id='i', ctx=Load())), ctx=Load())], ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), If(test=Compare(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='ndim', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Num(n=1)]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='bounds', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[BoolOp(op=Or(), values=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='num_qubits', ctx=Load())], keywords=[]), Call(func=Name(id='len', ctx=Load()), args=[Subscript(value=Name(id='data', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())], keywords=[])])]), body=[Raise(exc=Call(func=Name(id='QiskitMachineLearningError', ctx=Load()), args=[Str(s='Dimensions of the data, the length of the data bounds and the numbers of qubits per dimension are incompatible.')], keywords=[]), cause=None)], orelse=[])], orelse=[If(test=Compare(left=BoolOp(op=Or(), values=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='ndim', ctx=Load()), args=[Name(id='bounds', ctx=Load())], keywords=[]), Call(func=Name(id='len', ctx=Load()), args=[Name(id='num_qubits', ctx=Load())], keywords=[])]), ops=[NotEq()], comparators=[Num(n=1)]), body=[Raise(exc=Call(func=Name(id='QiskitMachineLearningError', ctx=Load()), args=[Str(s='Dimensions of the data, the length of the data bounds and the numbers of qubits per dimension are incompatible.')], keywords=[]), cause=None)], orelse=[])]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_bounds', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='array', ctx=Load()), args=[Name(id='bounds', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_num_qubits', ctx=Store())], value=Name(id='num_qubits', ctx=Load())), If(test=Compare(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='ndim', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Num(n=1)]), body=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_num_qubits', ctx=Load()), ops=[Is()], comparators=[NameConstant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_num_qubits', ctx=Store())], value=BinOp(left=Subscript(value=Attribute(value=Name(id='np', ctx=Load()), attr='ones', ctx=Load()), slice=Index(value=Call(func=Name(id='len', ctx=Load()), args=[Subscript(value=Name(id='data', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())], keywords=[])), ctx=Load()), op=Mult(), right=Num(n=3)))], orelse=[])], orelse=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_num_qubits', ctx=Load()), ops=[Is()], comparators=[NameConstant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_num_qubits', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='array', ctx=Load()), args=[List(elts=[Num(n=3)], ctx=Load())], keywords=[]))], orelse=[])]), Assign(targets=[Tuple(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='_data', ctx=Store()), Attribute(value=Name(id='self', ctx=Load()), attr='_data_grid', ctx=Store()), Attribute(value=Name(id='self', ctx=Load()), attr='_grid_elements', ctx=Store()), Attribute(value=Name(id='self', ctx=Load()), attr='_prob_data', ctx=Store())], ctx=Store())], value=Call(func=Name(id='discretize_and_truncate', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_data', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_bounds', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_num_qubits', ctx=Load())], keywords=[keyword(arg='return_data_grid_elements', value=NameConstant(value=True)), keyword(arg='return_prob', value=NameConstant(value=True)), keyword(arg='prob_non_zero', value=NameConstant(value=True))])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_batch_size', ctx=Store())], value=Name(id='batch_size', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_num_epochs', ctx=Store())], value=Name(id='num_epochs', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_snapshot_dir', ctx=Store())], value=Name(id='snapshot_dir', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_g_loss', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_d_loss', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_rel_entr', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_tol_rel_ent', ctx=Store())], value=Name(id='tol_rel_ent', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_random_seed', ctx=Store())], value=Name(id='seed', ctx=Load())), If(test=Compare(left=Name(id='generator', ctx=Load()), ops=[Is()], comparators=[NameConstant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='set_generator', ctx=Load()), args=[], keywords=[]))], orelse=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_generator', ctx=Store())], value=Name(id='generator', ctx=Load()))]), If(test=Compare(left=Name(id='discriminator', ctx=Load()), ops=[Is()], comparators=[NameConstant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='set_discriminator', ctx=Load()), args=[], keywords=[]))], orelse=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_discriminator', ctx=Store())], value=Name(id='discriminator', ctx=Load()))]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='seed', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_random_seed', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_ret', ctx=Store())], value=Dict(keys=[], values=[]))], decorator_list=[], returns=NameConstant(value=None))
FunctionDef(name='random', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Return a numpy random.')), Return(value=Attribute(value=Name(id='algorithm_globals', ctx=Load()), attr='random', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=None)
FunctionDef(name='run', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='quantum_instance', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='QuantumInstance', ctx=Load()), Name(id='Backend', ctx=Load())], ctx=Load())), ctx=Load())), ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs', annotation=None), defaults=[NameConstant(value=None)]), body=[Expr(value=Str(s='Execute the algorithm with selected backend.\n        Args:\n            quantum_instance: the experimental setting.\n            **kwargs (dict): kwargs\n        Returns:\n            dict: results of an algorithm.\n        Raises:\n            QiskitMachineLearningError: If a quantum instance or\n                                        backend has not been provided\n        ')), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='quantum_instance', ctx=Load()), ops=[Is()], comparators=[NameConstant(value=None)]), Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='quantum_instance', ctx=Load()), ops=[Is()], comparators=[NameConstant(value=None)])]), body=[Raise(exc=Call(func=Name(id='QiskitMachineLearningError', ctx=Load()), args=[Str(s='A QuantumInstance or Backend must be supplied to run the quantum algorithm.')], keywords=[]), cause=None)], orelse=[]), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='quantum_instance', ctx=Load()), Name(id='Backend', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='set_backend', ctx=Load()), args=[Name(id='quantum_instance', ctx=Load())], keywords=[keyword(arg=None, value=Name(id='kwargs', ctx=Load()))]))], orelse=[If(test=Compare(left=Name(id='quantum_instance', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='quantum_instance', ctx=Store())], value=Name(id='quantum_instance', ctx=Load()))], orelse=[])]), Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_run', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Name(id='Dict', ctx=Load()))
FunctionDef(name='quantum_instance', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Returns quantum instance.')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Name(id='QuantumInstance', ctx=Load())), ctx=Load()))
FunctionDef(name='quantum_instance', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='quantum_instance', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='QuantumInstance', ctx=Load()), Name(id='Backend', ctx=Load())], ctx=Load())), ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Sets quantum instance.')), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='quantum_instance', ctx=Load()), Name(id='Backend', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='quantum_instance', ctx=Store())], value=Call(func=Name(id='QuantumInstance', ctx=Load()), args=[Name(id='quantum_instance', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Store())], value=Name(id='quantum_instance', ctx=Load()))], decorator_list=[Attribute(value=Name(id='quantum_instance', ctx=Load()), attr='setter', ctx=Load())], returns=NameConstant(value=None))
FunctionDef(name='set_backend', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='backend', annotation=Name(id='Backend', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs', annotation=None), defaults=[]), body=[Expr(value=Str(s='Sets backend with configuration.')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='quantum_instance', ctx=Store())], value=Call(func=Name(id='QuantumInstance', ctx=Load()), args=[Name(id='backend', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='quantum_instance', ctx=Load()), attr='set_config', ctx=Load()), args=[], keywords=[keyword(arg=None, value=Name(id='kwargs', ctx=Load()))]))], decorator_list=[], returns=NameConstant(value=None))
FunctionDef(name='backend', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Returns backend.')), Return(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='quantum_instance', ctx=Load()), attr='backend', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='Backend', ctx=Load()))
FunctionDef(name='backend', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='backend', annotation=Name(id='Backend', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Sets backend without additional configuration.')), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='set_backend', ctx=Load()), args=[Name(id='backend', ctx=Load())], keywords=[]))], decorator_list=[Attribute(value=Name(id='backend', ctx=Load()), attr='setter', ctx=Load())], returns=None)
FunctionDef(name='seed', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Returns random seed')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_random_seed', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=None)
FunctionDef(name='seed', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='s', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='\n        Sets the random seed for QGAN and updates the algorithm_globals seed\n        at the same time\n\n        Args:\n            s (int): random seed\n        ')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_random_seed', ctx=Store())], value=Name(id='s', ctx=Load())), Assign(targets=[Attribute(value=Name(id='algorithm_globals', ctx=Load()), attr='random_seed', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_random_seed', ctx=Load())), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_discriminator', ctx=Load()), attr='set_seed', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_random_seed', ctx=Load())], keywords=[]))], decorator_list=[Attribute(value=Name(id='seed', ctx=Load()), attr='setter', ctx=Load())], returns=None)
FunctionDef(name='tol_rel_ent', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Returns tolerance for relative entropy')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_tol_rel_ent', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=None)
FunctionDef(name='tol_rel_ent', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='t', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='\n        Set tolerance for relative entropy\n\n        Args:\n            t (float): or None, Set tolerance level for relative entropy.\n                If the training achieves relative\n                entropy equal or lower than tolerance it finishes.\n        ')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_tol_rel_ent', ctx=Store())], value=Name(id='t', ctx=Load()))], decorator_list=[Attribute(value=Name(id='tol_rel_ent', ctx=Load()), attr='setter', ctx=Load())], returns=None)
FunctionDef(name='generator', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Returns generator')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_generator', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=None)
FunctionDef(name='set_generator', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='generator_circuit', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Name(id='QuantumCircuit', ctx=Load())), ctx=Load())), arg(arg='generator_init_params', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), ctx=Load())), arg(arg='generator_optimizer', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Name(id='Optimizer', ctx=Load())), ctx=Load())), arg(arg='generator_gradient', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='Callable', ctx=Load()), Name(id='Gradient', ctx=Load())], ctx=Load())), ctx=Load())), ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[NameConstant(value=None), NameConstant(value=None), NameConstant(value=None), NameConstant(value=None)]), body=[Expr(value=Str(s='Initialize generator.\n\n        Args:\n            generator_circuit: parameterized quantum circuit which sets\n                the structure of the quantum generator\n            generator_init_params: initial parameters for the generator circuit\n            generator_optimizer: optimizer to be used for the training of the generator\n            generator_gradient: A Gradient object, or a function returning partial\n                derivatives of the loss function w.r.t. the generator variational\n                params.\n        Raises:\n            QiskitMachineLearningError: invalid input\n        ')), If(test=Name(id='generator_gradient', ctx=Load()), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='generator_gradient', ctx=Load()), Tuple(elts=[Name(id='Gradient', ctx=Load()), Name(id='FunctionType', ctx=Load())], ctx=Load())], keywords=[])), body=[Raise(exc=Call(func=Name(id='QiskitMachineLearningError', ctx=Load()), args=[Str(s='Please pass either a Gradient object or a function as the generator_gradient argument.')], keywords=[]), cause=None)], orelse=[])], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_generator', ctx=Store())], value=Call(func=Name(id='QuantumGenerator', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_bounds', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_num_qubits', ctx=Load()), Name(id='generator_circuit', ctx=Load()), Name(id='generator_init_params', ctx=Load()), Name(id='generator_optimizer', ctx=Load()), Name(id='generator_gradient', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_snapshot_dir', ctx=Load())], keywords=[]))], decorator_list=[], returns=None)
FunctionDef(name='discriminator', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Returns discriminator')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_discriminator', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=None)
FunctionDef(name='set_discriminator', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='discriminator', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[NameConstant(value=None)]), body=[Expr(value=Str(s='\n        Initialize discriminator.\n\n        Args:\n            discriminator (Discriminator): discriminator\n        ')), If(test=Compare(left=Name(id='discriminator', ctx=Load()), ops=[Is()], comparators=[NameConstant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_discriminator', ctx=Store())], value=Call(func=Name(id='NumPyDiscriminator', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_num_qubits', ctx=Load())], keywords=[])], keywords=[]))], orelse=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_discriminator', ctx=Store())], value=Name(id='discriminator', ctx=Load()))]), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_discriminator', ctx=Load()), attr='set_seed', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_random_seed', ctx=Load())], keywords=[]))], decorator_list=[], returns=None)
FunctionDef(name='g_loss', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Returns generator loss')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_g_loss', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='float', ctx=Load())), ctx=Load()))
FunctionDef(name='d_loss', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Returns discriminator loss')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_d_loss', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='float', ctx=Load())), ctx=Load()))
FunctionDef(name='rel_entr', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Returns relative entropy between target and trained distribution')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_rel_entr', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='float', ctx=Load())), ctx=Load()))
FunctionDef(name='get_rel_entr', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Get relative entropy between target and trained distribution')), Assign(targets=[Tuple(elts=[Name(id='samples_gen', ctx=Store()), Name(id='prob_gen', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_generator', ctx=Load()), attr='get_output', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load())], keywords=[])), Assign(targets=[Name(id='temp', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='zeros', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_grid_elements', ctx=Load())], keywords=[])], keywords=[])), For(target=Tuple(elts=[Name(id='j', ctx=Store()), Name(id='sample', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='samples_gen', ctx=Load())], keywords=[]), body=[For(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='element', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_grid_elements', ctx=Load())], keywords=[]), body=[If(test=Compare(left=Name(id='sample', ctx=Load()), ops=[Eq()], comparators=[Name(id='element', ctx=Load())]), body=[AugAssign(target=Subscript(value=Name(id='temp', ctx=Load()), slice=Index(value=Name(id='i', ctx=Load())), ctx=Store()), op=Add(), value=Subscript(value=Name(id='prob_gen', ctx=Load()), slice=Index(value=Name(id='j', ctx=Load())), ctx=Load()))], orelse=[])], orelse=[])], orelse=[]), Assign(targets=[Name(id='prob_gen', ctx=Store())], value=ListComp(elt=IfExp(test=Compare(left=Name(id='x', ctx=Load()), ops=[Eq()], comparators=[Num(n=0)]), body=Num(n=1e-08), orelse=Name(id='x', ctx=Load())), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='temp', ctx=Load()), ifs=[], is_async=0)])), Assign(targets=[Name(id='rel_entr', ctx=Store())], value=Call(func=Name(id='entropy', ctx=Load()), args=[Name(id='prob_gen', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_prob_data', ctx=Load())], keywords=[])), Return(value=Name(id='rel_entr', ctx=Load()))], decorator_list=[], returns=Name(id='float', ctx=Load()))
FunctionDef(name='_store_params', args=arguments(args=[arg(arg='self', annotation=None), arg(arg='e', annotation=None), arg(arg='d_loss', annotation=None), arg(arg='g_loss', annotation=None), arg(arg='rel_entr', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_snapshot_dir', ctx=Load()), Str(s='output.csv')], keywords=[])], keywords=[keyword(arg='mode', value=Str(s='a')), keyword(arg='encoding', value=Str(s='utf8'))]), optional_vars=Name(id='csv_file', ctx=Store()))], body=[Assign(targets=[Name(id='fieldnames', ctx=Store())], value=List(elts=[Str(s='epoch'), Str(s='loss_discriminator'), Str(s='loss_generator'), Str(s='params_generator'), Str(s='rel_entropy')], ctx=Load())), Assign(targets=[Name(id='writer', ctx=Store())], value=Call(func=Attribute(value=Name(id='csv', ctx=Load()), attr='DictWriter', ctx=Load()), args=[Name(id='csv_file', ctx=Load())], keywords=[keyword(arg='fieldnames', value=Name(id='fieldnames', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='writer', ctx=Load()), attr='writerow', ctx=Load()), args=[Dict(keys=[Str(s='epoch'), Str(s='loss_discriminator'), Str(s='loss_generator'), Str(s='params_generator'), Str(s='rel_entropy')], values=[Name(id='e', ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='average', ctx=Load()), args=[Name(id='d_loss', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='average', ctx=Load()), args=[Name(id='g_loss', ctx=Load())], keywords=[]), Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_generator', ctx=Load()), attr='parameter_values', ctx=Load()), Name(id='rel_entr', ctx=Load())])], keywords=[]))]), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_discriminator', ctx=Load()), attr='save_model', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_snapshot_dir', ctx=Load())], keywords=[]))], decorator_list=[], returns=None)
FunctionDef(name='train', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='\n        Train the qGAN\n\n        Raises:\n            QiskitMachineLearningError: Batch size bigger than the number of\n                                        items in the truncated data set\n        ')), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_snapshot_dir', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=[With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_snapshot_dir', ctx=Load()), Str(s='output.csv')], keywords=[])], keywords=[keyword(arg='mode', value=Str(s='w')), keyword(arg='encoding', value=Str(s='utf8'))]), optional_vars=Name(id='csv_file', ctx=Store()))], body=[Assign(targets=[Name(id='fieldnames', ctx=Store())], value=List(elts=[Str(s='epoch'), Str(s='loss_discriminator'), Str(s='loss_generator'), Str(s='params_generator'), Str(s='rel_entropy')], ctx=Load())), Assign(targets=[Name(id='writer', ctx=Store())], value=Call(func=Attribute(value=Name(id='csv', ctx=Load()), attr='DictWriter', ctx=Load()), args=[Name(id='csv_file', ctx=Load())], keywords=[keyword(arg='fieldnames', value=Name(id='fieldnames', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='writer', ctx=Load()), attr='writeheader', ctx=Load()), args=[], keywords=[]))])], orelse=[]), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_data', ctx=Load())], keywords=[]), ops=[Lt()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='_batch_size', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='QiskitMachineLearningError', ctx=Load()), args=[JoinedStr(values=[Str(s='The batch size needs to be less than the truncated data size of '), FormattedValue(value=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_data', ctx=Load())], keywords=[]), conversion=-1, format_spec=None)])], keywords=[]), cause=None)], orelse=[]), For(target=Name(id='e', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_num_epochs', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='algorithm_globals', ctx=Load()), attr='random', ctx=Load()), attr='shuffle', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_data', ctx=Load())], keywords=[])), Assign(targets=[Name(id='index', ctx=Store())], value=Num(n=0)), While(test=Compare(left=BinOp(left=Name(id='index', ctx=Load()), op=Add(), right=Attribute(value=Name(id='self', ctx=Load()), attr='_batch_size', ctx=Load())), ops=[LtE()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_data', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='real_batch', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_data', ctx=Load()), slice=Slice(lower=Name(id='index', ctx=Load()), upper=BinOp(left=Name(id='index', ctx=Load()), op=Add(), right=Attribute(value=Name(id='self', ctx=Load()), attr='_batch_size', ctx=Load())), step=None), ctx=Load())), AugAssign(target=Name(id='index', ctx=Store()), op=Add(), value=Attribute(value=Name(id='self', ctx=Load()), attr='_batch_size', ctx=Load())), Assign(targets=[Tuple(elts=[Name(id='generated_batch', ctx=Store()), Name(id='generated_prob', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_generator', ctx=Load()), attr='get_output', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load())], keywords=[keyword(arg='shots', value=Attribute(value=Name(id='self', ctx=Load()), attr='_batch_size', ctx=Load()))])), Assign(targets=[Name(id='ret_d', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_discriminator', ctx=Load()), attr='train', ctx=Load()), args=[List(elts=[Name(id='real_batch', ctx=Load()), Name(id='generated_batch', ctx=Load())], ctx=Load()), List(elts=[BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='ones', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='real_batch', ctx=Load())], keywords=[])], keywords=[]), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='real_batch', ctx=Load())], keywords=[])), Name(id='generated_prob', ctx=Load())], ctx=Load())], keywords=[])), Assign(targets=[Name(id='d_loss_min', ctx=Store())], value=Subscript(value=Name(id='ret_d', ctx=Load()), slice=Index(value=Str(s='loss')), ctx=Load())), Assign(targets=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_generator', ctx=Load()), attr='discriminator', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_discriminator', ctx=Load())), Assign(targets=[Name(id='ret_g', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_generator', ctx=Load()), attr='train', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load())], keywords=[keyword(arg='shots', value=Attribute(value=Name(id='self', ctx=Load()), attr='_batch_size', ctx=Load()))])), Assign(targets=[Name(id='g_loss_min', ctx=Store())], value=Subscript(value=Name(id='ret_g', ctx=Load()), slice=Index(value=Str(s='loss')), ctx=Load()))], orelse=[]), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_d_loss', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load()), args=[Call(func=Name(id='float', ctx=Load()), args=[Name(id='d_loss_min', ctx=Load())], keywords=[]), Num(n=4)], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_g_loss', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load()), args=[Name(id='g_loss_min', ctx=Load()), Num(n=4)], keywords=[])], keywords=[])), Assign(targets=[Name(id='rel_entr', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_rel_entr', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_rel_entr', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load()), args=[Name(id='rel_entr', ctx=Load()), Num(n=4)], keywords=[])], keywords=[])), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_ret', ctx=Load()), slice=Index(value=Str(s='params_d')), ctx=Store())], value=Subscript(value=Name(id='ret_d', ctx=Load()), slice=Index(value=Str(s='params')), ctx=Load())), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_ret', ctx=Load()), slice=Index(value=Str(s='params_g')), ctx=Store())], value=Subscript(value=Name(id='ret_g', ctx=Load()), slice=Index(value=Str(s='params')), ctx=Load())), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_ret', ctx=Load()), slice=Index(value=Str(s='loss_d')), ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load()), args=[Call(func=Name(id='float', ctx=Load()), args=[Name(id='d_loss_min', ctx=Load())], keywords=[]), Num(n=4)], keywords=[])), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_ret', ctx=Load()), slice=Index(value=Str(s='loss_g')), ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load()), args=[Name(id='g_loss_min', ctx=Load()), Num(n=4)], keywords=[])), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_ret', ctx=Load()), slice=Index(value=Str(s='rel_entr')), ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load()), args=[Name(id='rel_entr', ctx=Load()), Num(n=4)], keywords=[])), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_snapshot_dir', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_store_params', ctx=Load()), args=[Name(id='e', ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load()), args=[Name(id='d_loss_min', ctx=Load()), Num(n=4)], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load()), args=[Name(id='g_loss_min', ctx=Load()), Num(n=4)], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load()), args=[Name(id='rel_entr', ctx=Load()), Num(n=4)], keywords=[])], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Str(s='Epoch %s/%s...'), BinOp(left=Name(id='e', ctx=Load()), op=Add(), right=Num(n=1)), Attribute(value=Name(id='self', ctx=Load()), attr='_num_epochs', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Str(s='Loss Discriminator: %s'), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load()), args=[Call(func=Name(id='float', ctx=Load()), args=[Name(id='d_loss_min', ctx=Load())], keywords=[]), Num(n=4)], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Str(s='Loss Generator: %s'), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load()), args=[Name(id='g_loss_min', ctx=Load()), Num(n=4)], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Str(s='Relative Entropy: %s'), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load()), args=[Name(id='rel_entr', ctx=Load()), Num(n=4)], keywords=[])], keywords=[])), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_tol_rel_ent', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=[If(test=Compare(left=Name(id='rel_entr', ctx=Load()), ops=[LtE()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='_tol_rel_ent', ctx=Load())]), body=[Break()], orelse=[])], orelse=[])], orelse=[])], decorator_list=[], returns=None)
FunctionDef(name='_run', args=arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='\n        Run qGAN training\n\n        Returns:\n            dict: with generator(discriminator) parameters & loss, relative entropy\n        Raises:\n            QiskitMachineLearningError: invalid backend\n        ')), If(test=Compare(left=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()), attr='backend_name', ctx=Load()), ops=[Eq()], comparators=[BoolOp(op=Or(), values=[Str(s='unitary_simulator'), Str(s='clifford_simulator')])]), body=[Raise(exc=Call(func=Name(id='QiskitMachineLearningError', ctx=Load()), args=[Str(s='Chosen backend not supported - Set backend either to statevector_simulator, qasm_simulator or actual quantum hardware')], keywords=[]), cause=None)], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='train', ctx=Load()), args=[], keywords=[])), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_ret', ctx=Load()))], decorator_list=[], returns=None)
Store()
Attribute(value=Name(id='logging', ctx=Load()), attr='getLogger', ctx=Load())
Name(id='__name__', ctx=Load())
Str(s="The Quantum Generative Adversarial Network algorithm.\n\n    The qGAN [1] is a hybrid quantum-classical algorithm used for generative modeling tasks.\n\n    This adaptive algorithm uses the interplay of a generative\n    :class:`~qiskit_machine_learning.neural_networks.GenerativeNetwork` and a\n    discriminative :class:`~qiskit_machine_learning.neural_networks.DiscriminativeNetwork`\n    network to learn the probability distribution underlying given training data.\n\n    These networks are trained in alternating optimization steps, where the discriminator tries to\n    differentiate between training data samples and data samples from the generator and the\n    generator aims at generating samples which the discriminator classifies as training data\n    samples. Eventually, the quantum generator learns the training data's underlying probability\n    distribution. The trained quantum generator loads a quantum state which is a model of the\n    target distribution.\n\n    **References:**\n\n    [1] Zoufal et al.,\n        `Quantum Generative Adversarial Networks for learning and loading random distributions\n        <https://www.nature.com/articles/s41534-019-0223-2>`_\n    ")
arguments(args=[arg(arg='self', annotation=None), arg(arg='data', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Name(id='List', ctx=Load())], ctx=Load())), ctx=Load())), arg(arg='bounds', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Name(id='List', ctx=Load())], ctx=Load())), ctx=Load())), ctx=Load())), arg(arg='num_qubits', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Name(id='List', ctx=Load())], ctx=Load())), ctx=Load())), ctx=Load())), arg(arg='batch_size', annotation=Name(id='int', ctx=Load())), arg(arg='num_epochs', annotation=Name(id='int', ctx=Load())), arg(arg='seed', annotation=Name(id='int', ctx=Load())), arg(arg='discriminator', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Name(id='DiscriminativeNetwork', ctx=Load())), ctx=Load())), arg(arg='generator', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Name(id='GenerativeNetwork', ctx=Load())), ctx=Load())), arg(arg='tol_rel_ent', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Name(id='float', ctx=Load())), ctx=Load())), arg(arg='snapshot_dir', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Name(id='str', ctx=Load())), ctx=Load())), arg(arg='quantum_instance', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='QuantumInstance', ctx=Load()), Name(id='Backend', ctx=Load())], ctx=Load())), ctx=Load())), ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[NameConstant(value=None), NameConstant(value=None), Num(n=500), Num(n=3000), Num(n=7), NameConstant(value=None), NameConstant(value=None), NameConstant(value=None), NameConstant(value=None), NameConstant(value=None)])
Expr(value=Str(s="\n\n        Args:\n            data: Training data of dimension k\n            bounds: k min/max data values [[min_0,max_0],...,[min_k-1,max_k-1]]\n                if univariate data: [min_0,max_0]\n            num_qubits: k numbers of qubits to determine representation resolution,\n                i.e. n qubits enable the representation of 2**n values\n                [num_qubits_0,..., num_qubits_k-1]\n            batch_size: Batch size, has a min. value of 1.\n            num_epochs: Number of training epochs\n            seed: Random number seed\n            discriminator: Discriminates between real and fake data samples\n            generator: Generates 'fake' data samples\n            tol_rel_ent: Set tolerance level for relative entropy.\n                If the training achieves relative entropy equal or lower than tolerance it finishes.\n            snapshot_dir: Directory in to which to store cvs file with parameters,\n                if None (default) then no cvs file is created.\n            quantum_instance: Quantum Instance or Backend\n        Raises:\n            QiskitMachineLearningError: invalid input\n        "))
Expr(value=Call(func=Name(id='validate_min', ctx=Load()), args=[Str(s='batch_size'), Name(id='batch_size', ctx=Load()), Num(n=1)], keywords=[]))
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Store())], value=NameConstant(value=None))
If(test=Name(id='quantum_instance', ctx=Load()), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='quantum_instance', ctx=Store())], value=Name(id='quantum_instance', ctx=Load()))], orelse=[])
If(test=Compare(left=Name(id='data', ctx=Load()), ops=[Is()], comparators=[NameConstant(value=None)]), body=[Raise(exc=Call(func=Name(id='QiskitMachineLearningError', ctx=Load()), args=[Str(s='Training data not given.')], keywords=[]), cause=None)], orelse=[])
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_data', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='array', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[]))
If(test=Compare(left=Name(id='bounds', ctx=Load()), ops=[Is()], comparators=[NameConstant(value=None)]), body=[Assign(targets=[Name(id='bounds_min', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='percentile', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_data', ctx=Load()), Num(n=5)], keywords=[keyword(arg='axis', value=Num(n=0))])), Assign(targets=[Name(id='bounds_max', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='percentile', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_data', ctx=Load()), Num(n=95)], keywords=[keyword(arg='axis', value=Num(n=0))])), Assign(targets=[Name(id='bounds', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='_', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='bounds_min', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='bounds', ctx=Load()), attr='append', ctx=Load()), args=[List(elts=[Subscript(value=Name(id='bounds_min', ctx=Load()), slice=Index(value=Name(id='i', ctx=Load())), ctx=Load()), Subscript(value=Name(id='bounds_max', ctx=Load()), slice=Index(value=Name(id='i', ctx=Load())), ctx=Load())], ctx=Load())], keywords=[]))], orelse=[])], orelse=[])
If(test=Compare(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='ndim', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Num(n=1)]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='bounds', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[BoolOp(op=Or(), values=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='num_qubits', ctx=Load())], keywords=[]), Call(func=Name(id='len', ctx=Load()), args=[Subscript(value=Name(id='data', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())], keywords=[])])]), body=[Raise(exc=Call(func=Name(id='QiskitMachineLearningError', ctx=Load()), args=[Str(s='Dimensions of the data, the length of the data bounds and the numbers of qubits per dimension are incompatible.')], keywords=[]), cause=None)], orelse=[])], orelse=[If(test=Compare(left=BoolOp(op=Or(), values=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='ndim', ctx=Load()), args=[Name(id='bounds', ctx=Load())], keywords=[]), Call(func=Name(id='len', ctx=Load()), args=[Name(id='num_qubits', ctx=Load())], keywords=[])]), ops=[NotEq()], comparators=[Num(n=1)]), body=[Raise(exc=Call(func=Name(id='QiskitMachineLearningError', ctx=Load()), args=[Str(s='Dimensions of the data, the length of the data bounds and the numbers of qubits per dimension are incompatible.')], keywords=[]), cause=None)], orelse=[])])
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_bounds', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='array', ctx=Load()), args=[Name(id='bounds', ctx=Load())], keywords=[]))
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_num_qubits', ctx=Store())], value=Name(id='num_qubits', ctx=Load()))
If(test=Compare(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='ndim', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Num(n=1)]), body=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_num_qubits', ctx=Load()), ops=[Is()], comparators=[NameConstant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_num_qubits', ctx=Store())], value=BinOp(left=Subscript(value=Attribute(value=Name(id='np', ctx=Load()), attr='ones', ctx=Load()), slice=Index(value=Call(func=Name(id='len', ctx=Load()), args=[Subscript(value=Name(id='data', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())], keywords=[])), ctx=Load()), op=Mult(), right=Num(n=3)))], orelse=[])], orelse=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_num_qubits', ctx=Load()), ops=[Is()], comparators=[NameConstant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_num_qubits', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='array', ctx=Load()), args=[List(elts=[Num(n=3)], ctx=Load())], keywords=[]))], orelse=[])])
Assign(targets=[Tuple(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='_data', ctx=Store()), Attribute(value=Name(id='self', ctx=Load()), attr='_data_grid', ctx=Store()), Attribute(value=Name(id='self', ctx=Load()), attr='_grid_elements', ctx=Store()), Attribute(value=Name(id='self', ctx=Load()), attr='_prob_data', ctx=Store())], ctx=Store())], value=Call(func=Name(id='discretize_and_truncate', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_data', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_bounds', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_num_qubits', ctx=Load())], keywords=[keyword(arg='return_data_grid_elements', value=NameConstant(value=True)), keyword(arg='return_prob', value=NameConstant(value=True)), keyword(arg='prob_non_zero', value=NameConstant(value=True))]))
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_batch_size', ctx=Store())], value=Name(id='batch_size', ctx=Load()))
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_num_epochs', ctx=Store())], value=Name(id='num_epochs', ctx=Load()))
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_snapshot_dir', ctx=Store())], value=Name(id='snapshot_dir', ctx=Load()))
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_g_loss', ctx=Store())], value=List(elts=[], ctx=Load()))
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_d_loss', ctx=Store())], value=List(elts=[], ctx=Load()))
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_rel_entr', ctx=Store())], value=List(elts=[], ctx=Load()))
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_tol_rel_ent', ctx=Store())], value=Name(id='tol_rel_ent', ctx=Load()))
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_random_seed', ctx=Store())], value=Name(id='seed', ctx=Load()))
If(test=Compare(left=Name(id='generator', ctx=Load()), ops=[Is()], comparators=[NameConstant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='set_generator', ctx=Load()), args=[], keywords=[]))], orelse=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_generator', ctx=Store())], value=Name(id='generator', ctx=Load()))])
If(test=Compare(left=Name(id='discriminator', ctx=Load()), ops=[Is()], comparators=[NameConstant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='set_discriminator', ctx=Load()), args=[], keywords=[]))], orelse=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_discriminator', ctx=Store())], value=Name(id='discriminator', ctx=Load()))])
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='seed', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_random_seed', ctx=Load()))
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_ret', ctx=Store())], value=Dict(keys=[], values=[]))
NameConstant(value=None)
arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Expr(value=Str(s='Return a numpy random.'))
Return(value=Attribute(value=Name(id='algorithm_globals', ctx=Load()), attr='random', ctx=Load()))
Name(id='property', ctx=Load())
arguments(args=[arg(arg='self', annotation=None), arg(arg='quantum_instance', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='QuantumInstance', ctx=Load()), Name(id='Backend', ctx=Load())], ctx=Load())), ctx=Load())), ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs', annotation=None), defaults=[NameConstant(value=None)])
Expr(value=Str(s='Execute the algorithm with selected backend.\n        Args:\n            quantum_instance: the experimental setting.\n            **kwargs (dict): kwargs\n        Returns:\n            dict: results of an algorithm.\n        Raises:\n            QiskitMachineLearningError: If a quantum instance or\n                                        backend has not been provided\n        '))
If(test=BoolOp(op=And(), values=[Compare(left=Name(id='quantum_instance', ctx=Load()), ops=[Is()], comparators=[NameConstant(value=None)]), Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='quantum_instance', ctx=Load()), ops=[Is()], comparators=[NameConstant(value=None)])]), body=[Raise(exc=Call(func=Name(id='QiskitMachineLearningError', ctx=Load()), args=[Str(s='A QuantumInstance or Backend must be supplied to run the quantum algorithm.')], keywords=[]), cause=None)], orelse=[])
If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='quantum_instance', ctx=Load()), Name(id='Backend', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='set_backend', ctx=Load()), args=[Name(id='quantum_instance', ctx=Load())], keywords=[keyword(arg=None, value=Name(id='kwargs', ctx=Load()))]))], orelse=[If(test=Compare(left=Name(id='quantum_instance', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='quantum_instance', ctx=Store())], value=Name(id='quantum_instance', ctx=Load()))], orelse=[])])
Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_run', ctx=Load()), args=[], keywords=[]))
Name(id='Dict', ctx=Load())
arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Expr(value=Str(s='Returns quantum instance.'))
Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()))
Name(id='property', ctx=Load())
Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Name(id='QuantumInstance', ctx=Load())), ctx=Load())
arguments(args=[arg(arg='self', annotation=None), arg(arg='quantum_instance', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='QuantumInstance', ctx=Load()), Name(id='Backend', ctx=Load())], ctx=Load())), ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Expr(value=Str(s='Sets quantum instance.'))
If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='quantum_instance', ctx=Load()), Name(id='Backend', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='quantum_instance', ctx=Store())], value=Call(func=Name(id='QuantumInstance', ctx=Load()), args=[Name(id='quantum_instance', ctx=Load())], keywords=[]))], orelse=[])
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Store())], value=Name(id='quantum_instance', ctx=Load()))
Attribute(value=Name(id='quantum_instance', ctx=Load()), attr='setter', ctx=Load())
NameConstant(value=None)
arguments(args=[arg(arg='self', annotation=None), arg(arg='backend', annotation=Name(id='Backend', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs', annotation=None), defaults=[])
Expr(value=Str(s='Sets backend with configuration.'))
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='quantum_instance', ctx=Store())], value=Call(func=Name(id='QuantumInstance', ctx=Load()), args=[Name(id='backend', ctx=Load())], keywords=[]))
Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='quantum_instance', ctx=Load()), attr='set_config', ctx=Load()), args=[], keywords=[keyword(arg=None, value=Name(id='kwargs', ctx=Load()))]))
NameConstant(value=None)
arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Expr(value=Str(s='Returns backend.'))
Return(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='quantum_instance', ctx=Load()), attr='backend', ctx=Load()))
Name(id='property', ctx=Load())
Name(id='Backend', ctx=Load())
arguments(args=[arg(arg='self', annotation=None), arg(arg='backend', annotation=Name(id='Backend', ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Expr(value=Str(s='Sets backend without additional configuration.'))
Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='set_backend', ctx=Load()), args=[Name(id='backend', ctx=Load())], keywords=[]))
Attribute(value=Name(id='backend', ctx=Load()), attr='setter', ctx=Load())
arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Expr(value=Str(s='Returns random seed'))
Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_random_seed', ctx=Load()))
Name(id='property', ctx=Load())
arguments(args=[arg(arg='self', annotation=None), arg(arg='s', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Expr(value=Str(s='\n        Sets the random seed for QGAN and updates the algorithm_globals seed\n        at the same time\n\n        Args:\n            s (int): random seed\n        '))
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_random_seed', ctx=Store())], value=Name(id='s', ctx=Load()))
Assign(targets=[Attribute(value=Name(id='algorithm_globals', ctx=Load()), attr='random_seed', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_random_seed', ctx=Load()))
Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_discriminator', ctx=Load()), attr='set_seed', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_random_seed', ctx=Load())], keywords=[]))
Attribute(value=Name(id='seed', ctx=Load()), attr='setter', ctx=Load())
arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Expr(value=Str(s='Returns tolerance for relative entropy'))
Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_tol_rel_ent', ctx=Load()))
Name(id='property', ctx=Load())
arguments(args=[arg(arg='self', annotation=None), arg(arg='t', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Expr(value=Str(s='\n        Set tolerance for relative entropy\n\n        Args:\n            t (float): or None, Set tolerance level for relative entropy.\n                If the training achieves relative\n                entropy equal or lower than tolerance it finishes.\n        '))
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_tol_rel_ent', ctx=Store())], value=Name(id='t', ctx=Load()))
Attribute(value=Name(id='tol_rel_ent', ctx=Load()), attr='setter', ctx=Load())
arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Expr(value=Str(s='Returns generator'))
Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_generator', ctx=Load()))
Name(id='property', ctx=Load())
arguments(args=[arg(arg='self', annotation=None), arg(arg='generator_circuit', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Name(id='QuantumCircuit', ctx=Load())), ctx=Load())), arg(arg='generator_init_params', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), ctx=Load())), arg(arg='generator_optimizer', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Name(id='Optimizer', ctx=Load())), ctx=Load())), arg(arg='generator_gradient', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='Callable', ctx=Load()), Name(id='Gradient', ctx=Load())], ctx=Load())), ctx=Load())), ctx=Load()))], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[NameConstant(value=None), NameConstant(value=None), NameConstant(value=None), NameConstant(value=None)])
Expr(value=Str(s='Initialize generator.\n\n        Args:\n            generator_circuit: parameterized quantum circuit which sets\n                the structure of the quantum generator\n            generator_init_params: initial parameters for the generator circuit\n            generator_optimizer: optimizer to be used for the training of the generator\n            generator_gradient: A Gradient object, or a function returning partial\n                derivatives of the loss function w.r.t. the generator variational\n                params.\n        Raises:\n            QiskitMachineLearningError: invalid input\n        '))
If(test=Name(id='generator_gradient', ctx=Load()), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='generator_gradient', ctx=Load()), Tuple(elts=[Name(id='Gradient', ctx=Load()), Name(id='FunctionType', ctx=Load())], ctx=Load())], keywords=[])), body=[Raise(exc=Call(func=Name(id='QiskitMachineLearningError', ctx=Load()), args=[Str(s='Please pass either a Gradient object or a function as the generator_gradient argument.')], keywords=[]), cause=None)], orelse=[])], orelse=[])
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_generator', ctx=Store())], value=Call(func=Name(id='QuantumGenerator', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_bounds', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_num_qubits', ctx=Load()), Name(id='generator_circuit', ctx=Load()), Name(id='generator_init_params', ctx=Load()), Name(id='generator_optimizer', ctx=Load()), Name(id='generator_gradient', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_snapshot_dir', ctx=Load())], keywords=[]))
arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Expr(value=Str(s='Returns discriminator'))
Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_discriminator', ctx=Load()))
Name(id='property', ctx=Load())
arguments(args=[arg(arg='self', annotation=None), arg(arg='discriminator', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[NameConstant(value=None)])
Expr(value=Str(s='\n        Initialize discriminator.\n\n        Args:\n            discriminator (Discriminator): discriminator\n        '))
If(test=Compare(left=Name(id='discriminator', ctx=Load()), ops=[Is()], comparators=[NameConstant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_discriminator', ctx=Store())], value=Call(func=Name(id='NumPyDiscriminator', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_num_qubits', ctx=Load())], keywords=[])], keywords=[]))], orelse=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_discriminator', ctx=Store())], value=Name(id='discriminator', ctx=Load()))])
Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_discriminator', ctx=Load()), attr='set_seed', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_random_seed', ctx=Load())], keywords=[]))
arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Expr(value=Str(s='Returns generator loss'))
Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_g_loss', ctx=Load()))
Name(id='property', ctx=Load())
Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='float', ctx=Load())), ctx=Load())
arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Expr(value=Str(s='Returns discriminator loss'))
Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_d_loss', ctx=Load()))
Name(id='property', ctx=Load())
Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='float', ctx=Load())), ctx=Load())
arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Expr(value=Str(s='Returns relative entropy between target and trained distribution'))
Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_rel_entr', ctx=Load()))
Name(id='property', ctx=Load())
Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='float', ctx=Load())), ctx=Load())
arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Expr(value=Str(s='Get relative entropy between target and trained distribution'))
Assign(targets=[Tuple(elts=[Name(id='samples_gen', ctx=Store()), Name(id='prob_gen', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_generator', ctx=Load()), attr='get_output', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load())], keywords=[]))
Assign(targets=[Name(id='temp', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='zeros', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_grid_elements', ctx=Load())], keywords=[])], keywords=[]))
For(target=Tuple(elts=[Name(id='j', ctx=Store()), Name(id='sample', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='samples_gen', ctx=Load())], keywords=[]), body=[For(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='element', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_grid_elements', ctx=Load())], keywords=[]), body=[If(test=Compare(left=Name(id='sample', ctx=Load()), ops=[Eq()], comparators=[Name(id='element', ctx=Load())]), body=[AugAssign(target=Subscript(value=Name(id='temp', ctx=Load()), slice=Index(value=Name(id='i', ctx=Load())), ctx=Store()), op=Add(), value=Subscript(value=Name(id='prob_gen', ctx=Load()), slice=Index(value=Name(id='j', ctx=Load())), ctx=Load()))], orelse=[])], orelse=[])], orelse=[])
Assign(targets=[Name(id='prob_gen', ctx=Store())], value=ListComp(elt=IfExp(test=Compare(left=Name(id='x', ctx=Load()), ops=[Eq()], comparators=[Num(n=0)]), body=Num(n=1e-08), orelse=Name(id='x', ctx=Load())), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='temp', ctx=Load()), ifs=[], is_async=0)]))
Assign(targets=[Name(id='rel_entr', ctx=Store())], value=Call(func=Name(id='entropy', ctx=Load()), args=[Name(id='prob_gen', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_prob_data', ctx=Load())], keywords=[]))
Return(value=Name(id='rel_entr', ctx=Load()))
Name(id='float', ctx=Load())
arguments(args=[arg(arg='self', annotation=None), arg(arg='e', annotation=None), arg(arg='d_loss', annotation=None), arg(arg='g_loss', annotation=None), arg(arg='rel_entr', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_snapshot_dir', ctx=Load()), Str(s='output.csv')], keywords=[])], keywords=[keyword(arg='mode', value=Str(s='a')), keyword(arg='encoding', value=Str(s='utf8'))]), optional_vars=Name(id='csv_file', ctx=Store()))], body=[Assign(targets=[Name(id='fieldnames', ctx=Store())], value=List(elts=[Str(s='epoch'), Str(s='loss_discriminator'), Str(s='loss_generator'), Str(s='params_generator'), Str(s='rel_entropy')], ctx=Load())), Assign(targets=[Name(id='writer', ctx=Store())], value=Call(func=Attribute(value=Name(id='csv', ctx=Load()), attr='DictWriter', ctx=Load()), args=[Name(id='csv_file', ctx=Load())], keywords=[keyword(arg='fieldnames', value=Name(id='fieldnames', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='writer', ctx=Load()), attr='writerow', ctx=Load()), args=[Dict(keys=[Str(s='epoch'), Str(s='loss_discriminator'), Str(s='loss_generator'), Str(s='params_generator'), Str(s='rel_entropy')], values=[Name(id='e', ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='average', ctx=Load()), args=[Name(id='d_loss', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='average', ctx=Load()), args=[Name(id='g_loss', ctx=Load())], keywords=[]), Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_generator', ctx=Load()), attr='parameter_values', ctx=Load()), Name(id='rel_entr', ctx=Load())])], keywords=[]))])
Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_discriminator', ctx=Load()), attr='save_model', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_snapshot_dir', ctx=Load())], keywords=[]))
arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Expr(value=Str(s='\n        Train the qGAN\n\n        Raises:\n            QiskitMachineLearningError: Batch size bigger than the number of\n                                        items in the truncated data set\n        '))
If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_snapshot_dir', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=[With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_snapshot_dir', ctx=Load()), Str(s='output.csv')], keywords=[])], keywords=[keyword(arg='mode', value=Str(s='w')), keyword(arg='encoding', value=Str(s='utf8'))]), optional_vars=Name(id='csv_file', ctx=Store()))], body=[Assign(targets=[Name(id='fieldnames', ctx=Store())], value=List(elts=[Str(s='epoch'), Str(s='loss_discriminator'), Str(s='loss_generator'), Str(s='params_generator'), Str(s='rel_entropy')], ctx=Load())), Assign(targets=[Name(id='writer', ctx=Store())], value=Call(func=Attribute(value=Name(id='csv', ctx=Load()), attr='DictWriter', ctx=Load()), args=[Name(id='csv_file', ctx=Load())], keywords=[keyword(arg='fieldnames', value=Name(id='fieldnames', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='writer', ctx=Load()), attr='writeheader', ctx=Load()), args=[], keywords=[]))])], orelse=[])
If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_data', ctx=Load())], keywords=[]), ops=[Lt()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='_batch_size', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='QiskitMachineLearningError', ctx=Load()), args=[JoinedStr(values=[Str(s='The batch size needs to be less than the truncated data size of '), FormattedValue(value=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_data', ctx=Load())], keywords=[]), conversion=-1, format_spec=None)])], keywords=[]), cause=None)], orelse=[])
For(target=Name(id='e', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_num_epochs', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='algorithm_globals', ctx=Load()), attr='random', ctx=Load()), attr='shuffle', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_data', ctx=Load())], keywords=[])), Assign(targets=[Name(id='index', ctx=Store())], value=Num(n=0)), While(test=Compare(left=BinOp(left=Name(id='index', ctx=Load()), op=Add(), right=Attribute(value=Name(id='self', ctx=Load()), attr='_batch_size', ctx=Load())), ops=[LtE()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_data', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='real_batch', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_data', ctx=Load()), slice=Slice(lower=Name(id='index', ctx=Load()), upper=BinOp(left=Name(id='index', ctx=Load()), op=Add(), right=Attribute(value=Name(id='self', ctx=Load()), attr='_batch_size', ctx=Load())), step=None), ctx=Load())), AugAssign(target=Name(id='index', ctx=Store()), op=Add(), value=Attribute(value=Name(id='self', ctx=Load()), attr='_batch_size', ctx=Load())), Assign(targets=[Tuple(elts=[Name(id='generated_batch', ctx=Store()), Name(id='generated_prob', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_generator', ctx=Load()), attr='get_output', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load())], keywords=[keyword(arg='shots', value=Attribute(value=Name(id='self', ctx=Load()), attr='_batch_size', ctx=Load()))])), Assign(targets=[Name(id='ret_d', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_discriminator', ctx=Load()), attr='train', ctx=Load()), args=[List(elts=[Name(id='real_batch', ctx=Load()), Name(id='generated_batch', ctx=Load())], ctx=Load()), List(elts=[BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='ones', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='real_batch', ctx=Load())], keywords=[])], keywords=[]), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='real_batch', ctx=Load())], keywords=[])), Name(id='generated_prob', ctx=Load())], ctx=Load())], keywords=[])), Assign(targets=[Name(id='d_loss_min', ctx=Store())], value=Subscript(value=Name(id='ret_d', ctx=Load()), slice=Index(value=Str(s='loss')), ctx=Load())), Assign(targets=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_generator', ctx=Load()), attr='discriminator', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_discriminator', ctx=Load())), Assign(targets=[Name(id='ret_g', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_generator', ctx=Load()), attr='train', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load())], keywords=[keyword(arg='shots', value=Attribute(value=Name(id='self', ctx=Load()), attr='_batch_size', ctx=Load()))])), Assign(targets=[Name(id='g_loss_min', ctx=Store())], value=Subscript(value=Name(id='ret_g', ctx=Load()), slice=Index(value=Str(s='loss')), ctx=Load()))], orelse=[]), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_d_loss', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load()), args=[Call(func=Name(id='float', ctx=Load()), args=[Name(id='d_loss_min', ctx=Load())], keywords=[]), Num(n=4)], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_g_loss', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load()), args=[Name(id='g_loss_min', ctx=Load()), Num(n=4)], keywords=[])], keywords=[])), Assign(targets=[Name(id='rel_entr', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_rel_entr', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_rel_entr', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load()), args=[Name(id='rel_entr', ctx=Load()), Num(n=4)], keywords=[])], keywords=[])), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_ret', ctx=Load()), slice=Index(value=Str(s='params_d')), ctx=Store())], value=Subscript(value=Name(id='ret_d', ctx=Load()), slice=Index(value=Str(s='params')), ctx=Load())), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_ret', ctx=Load()), slice=Index(value=Str(s='params_g')), ctx=Store())], value=Subscript(value=Name(id='ret_g', ctx=Load()), slice=Index(value=Str(s='params')), ctx=Load())), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_ret', ctx=Load()), slice=Index(value=Str(s='loss_d')), ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load()), args=[Call(func=Name(id='float', ctx=Load()), args=[Name(id='d_loss_min', ctx=Load())], keywords=[]), Num(n=4)], keywords=[])), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_ret', ctx=Load()), slice=Index(value=Str(s='loss_g')), ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load()), args=[Name(id='g_loss_min', ctx=Load()), Num(n=4)], keywords=[])), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_ret', ctx=Load()), slice=Index(value=Str(s='rel_entr')), ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load()), args=[Name(id='rel_entr', ctx=Load()), Num(n=4)], keywords=[])), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_snapshot_dir', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_store_params', ctx=Load()), args=[Name(id='e', ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load()), args=[Name(id='d_loss_min', ctx=Load()), Num(n=4)], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load()), args=[Name(id='g_loss_min', ctx=Load()), Num(n=4)], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load()), args=[Name(id='rel_entr', ctx=Load()), Num(n=4)], keywords=[])], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Str(s='Epoch %s/%s...'), BinOp(left=Name(id='e', ctx=Load()), op=Add(), right=Num(n=1)), Attribute(value=Name(id='self', ctx=Load()), attr='_num_epochs', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Str(s='Loss Discriminator: %s'), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load()), args=[Call(func=Name(id='float', ctx=Load()), args=[Name(id='d_loss_min', ctx=Load())], keywords=[]), Num(n=4)], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Str(s='Loss Generator: %s'), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load()), args=[Name(id='g_loss_min', ctx=Load()), Num(n=4)], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Str(s='Relative Entropy: %s'), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load()), args=[Name(id='rel_entr', ctx=Load()), Num(n=4)], keywords=[])], keywords=[])), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_tol_rel_ent', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=[If(test=Compare(left=Name(id='rel_entr', ctx=Load()), ops=[LtE()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='_tol_rel_ent', ctx=Load())]), body=[Break()], orelse=[])], orelse=[])], orelse=[])
arguments(args=[arg(arg='self', annotation=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[])
Expr(value=Str(s='\n        Run qGAN training\n\n        Returns:\n            dict: with generator(discriminator) parameters & loss, relative entropy\n        Raises:\n            QiskitMachineLearningError: invalid backend\n        '))
If(test=Compare(left=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()), attr='backend_name', ctx=Load()), ops=[Eq()], comparators=[BoolOp(op=Or(), values=[Str(s='unitary_simulator'), Str(s='clifford_simulator')])]), body=[Raise(exc=Call(func=Name(id='QiskitMachineLearningError', ctx=Load()), args=[Str(s='Chosen backend not supported - Set backend either to statevector_simulator, qasm_simulator or actual quantum hardware')], keywords=[]), cause=None)], orelse=[])
Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='train', ctx=Load()), args=[], keywords=[]))
Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_ret', ctx=Load()))
Name(id='logging', ctx=Load())
Load()
Load()
arg(arg='self', annotation=None)
arg(arg='data', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Name(id='List', ctx=Load())], ctx=Load())), ctx=Load()))
arg(arg='bounds', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Name(id='List', ctx=Load())], ctx=Load())), ctx=Load())), ctx=Load()))
arg(arg='num_qubits', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Name(id='List', ctx=Load())], ctx=Load())), ctx=Load())), ctx=Load()))
arg(arg='batch_size', annotation=Name(id='int', ctx=Load()))
arg(arg='num_epochs', annotation=Name(id='int', ctx=Load()))
arg(arg='seed', annotation=Name(id='int', ctx=Load()))
arg(arg='discriminator', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Name(id='DiscriminativeNetwork', ctx=Load())), ctx=Load()))
arg(arg='generator', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Name(id='GenerativeNetwork', ctx=Load())), ctx=Load()))
arg(arg='tol_rel_ent', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Name(id='float', ctx=Load())), ctx=Load()))
arg(arg='snapshot_dir', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Name(id='str', ctx=Load())), ctx=Load()))
arg(arg='quantum_instance', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='QuantumInstance', ctx=Load()), Name(id='Backend', ctx=Load())], ctx=Load())), ctx=Load())), ctx=Load()))
NameConstant(value=None)
NameConstant(value=None)
Num(n=500)
Num(n=3000)
Num(n=7)
NameConstant(value=None)
NameConstant(value=None)
NameConstant(value=None)
NameConstant(value=None)
NameConstant(value=None)
Str(s="\n\n        Args:\n            data: Training data of dimension k\n            bounds: k min/max data values [[min_0,max_0],...,[min_k-1,max_k-1]]\n                if univariate data: [min_0,max_0]\n            num_qubits: k numbers of qubits to determine representation resolution,\n                i.e. n qubits enable the representation of 2**n values\n                [num_qubits_0,..., num_qubits_k-1]\n            batch_size: Batch size, has a min. value of 1.\n            num_epochs: Number of training epochs\n            seed: Random number seed\n            discriminator: Discriminates between real and fake data samples\n            generator: Generates 'fake' data samples\n            tol_rel_ent: Set tolerance level for relative entropy.\n                If the training achieves relative entropy equal or lower than tolerance it finishes.\n            snapshot_dir: Directory in to which to store cvs file with parameters,\n                if None (default) then no cvs file is created.\n            quantum_instance: Quantum Instance or Backend\n        Raises:\n            QiskitMachineLearningError: invalid input\n        ")
Call(func=Name(id='validate_min', ctx=Load()), args=[Str(s='batch_size'), Name(id='batch_size', ctx=Load()), Num(n=1)], keywords=[])
Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Store())
NameConstant(value=None)
Name(id='quantum_instance', ctx=Load())
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='quantum_instance', ctx=Store())], value=Name(id='quantum_instance', ctx=Load()))
Compare(left=Name(id='data', ctx=Load()), ops=[Is()], comparators=[NameConstant(value=None)])
Raise(exc=Call(func=Name(id='QiskitMachineLearningError', ctx=Load()), args=[Str(s='Training data not given.')], keywords=[]), cause=None)
Attribute(value=Name(id='self', ctx=Load()), attr='_data', ctx=Store())
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='array', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[])
Compare(left=Name(id='bounds', ctx=Load()), ops=[Is()], comparators=[NameConstant(value=None)])
Assign(targets=[Name(id='bounds_min', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='percentile', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_data', ctx=Load()), Num(n=5)], keywords=[keyword(arg='axis', value=Num(n=0))]))
Assign(targets=[Name(id='bounds_max', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='percentile', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_data', ctx=Load()), Num(n=95)], keywords=[keyword(arg='axis', value=Num(n=0))]))
Assign(targets=[Name(id='bounds', ctx=Store())], value=List(elts=[], ctx=Load()))
For(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='_', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='bounds_min', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='bounds', ctx=Load()), attr='append', ctx=Load()), args=[List(elts=[Subscript(value=Name(id='bounds_min', ctx=Load()), slice=Index(value=Name(id='i', ctx=Load())), ctx=Load()), Subscript(value=Name(id='bounds_max', ctx=Load()), slice=Index(value=Name(id='i', ctx=Load())), ctx=Load())], ctx=Load())], keywords=[]))], orelse=[])
Compare(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='ndim', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Num(n=1)])
If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='bounds', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[BoolOp(op=Or(), values=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='num_qubits', ctx=Load())], keywords=[]), Call(func=Name(id='len', ctx=Load()), args=[Subscript(value=Name(id='data', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())], keywords=[])])]), body=[Raise(exc=Call(func=Name(id='QiskitMachineLearningError', ctx=Load()), args=[Str(s='Dimensions of the data, the length of the data bounds and the numbers of qubits per dimension are incompatible.')], keywords=[]), cause=None)], orelse=[])
If(test=Compare(left=BoolOp(op=Or(), values=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='ndim', ctx=Load()), args=[Name(id='bounds', ctx=Load())], keywords=[]), Call(func=Name(id='len', ctx=Load()), args=[Name(id='num_qubits', ctx=Load())], keywords=[])]), ops=[NotEq()], comparators=[Num(n=1)]), body=[Raise(exc=Call(func=Name(id='QiskitMachineLearningError', ctx=Load()), args=[Str(s='Dimensions of the data, the length of the data bounds and the numbers of qubits per dimension are incompatible.')], keywords=[]), cause=None)], orelse=[])
Attribute(value=Name(id='self', ctx=Load()), attr='_bounds', ctx=Store())
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='array', ctx=Load()), args=[Name(id='bounds', ctx=Load())], keywords=[])
Attribute(value=Name(id='self', ctx=Load()), attr='_num_qubits', ctx=Store())
Name(id='num_qubits', ctx=Load())
Compare(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='ndim', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Num(n=1)])
If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_num_qubits', ctx=Load()), ops=[Is()], comparators=[NameConstant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_num_qubits', ctx=Store())], value=BinOp(left=Subscript(value=Attribute(value=Name(id='np', ctx=Load()), attr='ones', ctx=Load()), slice=Index(value=Call(func=Name(id='len', ctx=Load()), args=[Subscript(value=Name(id='data', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())], keywords=[])), ctx=Load()), op=Mult(), right=Num(n=3)))], orelse=[])
If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_num_qubits', ctx=Load()), ops=[Is()], comparators=[NameConstant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_num_qubits', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='array', ctx=Load()), args=[List(elts=[Num(n=3)], ctx=Load())], keywords=[]))], orelse=[])
Tuple(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='_data', ctx=Store()), Attribute(value=Name(id='self', ctx=Load()), attr='_data_grid', ctx=Store()), Attribute(value=Name(id='self', ctx=Load()), attr='_grid_elements', ctx=Store()), Attribute(value=Name(id='self', ctx=Load()), attr='_prob_data', ctx=Store())], ctx=Store())
Call(func=Name(id='discretize_and_truncate', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_data', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_bounds', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_num_qubits', ctx=Load())], keywords=[keyword(arg='return_data_grid_elements', value=NameConstant(value=True)), keyword(arg='return_prob', value=NameConstant(value=True)), keyword(arg='prob_non_zero', value=NameConstant(value=True))])
Attribute(value=Name(id='self', ctx=Load()), attr='_batch_size', ctx=Store())
Name(id='batch_size', ctx=Load())
Attribute(value=Name(id='self', ctx=Load()), attr='_num_epochs', ctx=Store())
Name(id='num_epochs', ctx=Load())
Attribute(value=Name(id='self', ctx=Load()), attr='_snapshot_dir', ctx=Store())
Name(id='snapshot_dir', ctx=Load())
Attribute(value=Name(id='self', ctx=Load()), attr='_g_loss', ctx=Store())
List(elts=[], ctx=Load())
Attribute(value=Name(id='self', ctx=Load()), attr='_d_loss', ctx=Store())
List(elts=[], ctx=Load())
Attribute(value=Name(id='self', ctx=Load()), attr='_rel_entr', ctx=Store())
List(elts=[], ctx=Load())
Attribute(value=Name(id='self', ctx=Load()), attr='_tol_rel_ent', ctx=Store())
Name(id='tol_rel_ent', ctx=Load())
Attribute(value=Name(id='self', ctx=Load()), attr='_random_seed', ctx=Store())
Name(id='seed', ctx=Load())
Compare(left=Name(id='generator', ctx=Load()), ops=[Is()], comparators=[NameConstant(value=None)])
Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='set_generator', ctx=Load()), args=[], keywords=[]))
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_generator', ctx=Store())], value=Name(id='generator', ctx=Load()))
Compare(left=Name(id='discriminator', ctx=Load()), ops=[Is()], comparators=[NameConstant(value=None)])
Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='set_discriminator', ctx=Load()), args=[], keywords=[]))
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_discriminator', ctx=Store())], value=Name(id='discriminator', ctx=Load()))
Attribute(value=Name(id='self', ctx=Load()), attr='seed', ctx=Store())
Attribute(value=Name(id='self', ctx=Load()), attr='_random_seed', ctx=Load())
Attribute(value=Name(id='self', ctx=Load()), attr='_ret', ctx=Store())
Dict(keys=[], values=[])
arg(arg='self', annotation=None)
Str(s='Return a numpy random.')
Attribute(value=Name(id='algorithm_globals', ctx=Load()), attr='random', ctx=Load())
Load()
arg(arg='self', annotation=None)
arg(arg='quantum_instance', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='QuantumInstance', ctx=Load()), Name(id='Backend', ctx=Load())], ctx=Load())), ctx=Load())), ctx=Load()))
arg(arg='kwargs', annotation=None)
NameConstant(value=None)
Str(s='Execute the algorithm with selected backend.\n        Args:\n            quantum_instance: the experimental setting.\n            **kwargs (dict): kwargs\n        Returns:\n            dict: results of an algorithm.\n        Raises:\n            QiskitMachineLearningError: If a quantum instance or\n                                        backend has not been provided\n        ')
BoolOp(op=And(), values=[Compare(left=Name(id='quantum_instance', ctx=Load()), ops=[Is()], comparators=[NameConstant(value=None)]), Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='quantum_instance', ctx=Load()), ops=[Is()], comparators=[NameConstant(value=None)])])
Raise(exc=Call(func=Name(id='QiskitMachineLearningError', ctx=Load()), args=[Str(s='A QuantumInstance or Backend must be supplied to run the quantum algorithm.')], keywords=[]), cause=None)
Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='quantum_instance', ctx=Load()), Name(id='Backend', ctx=Load())], keywords=[])
Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='set_backend', ctx=Load()), args=[Name(id='quantum_instance', ctx=Load())], keywords=[keyword(arg=None, value=Name(id='kwargs', ctx=Load()))]))
If(test=Compare(left=Name(id='quantum_instance', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='quantum_instance', ctx=Store())], value=Name(id='quantum_instance', ctx=Load()))], orelse=[])
Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_run', ctx=Load()), args=[], keywords=[])
Load()
arg(arg='self', annotation=None)
Str(s='Returns quantum instance.')
Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load())
Load()
Name(id='Optional', ctx=Load())
Index(value=Name(id='QuantumInstance', ctx=Load()))
Load()
arg(arg='self', annotation=None)
arg(arg='quantum_instance', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='QuantumInstance', ctx=Load()), Name(id='Backend', ctx=Load())], ctx=Load())), ctx=Load()))
Str(s='Sets quantum instance.')
Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='quantum_instance', ctx=Load()), Name(id='Backend', ctx=Load())], keywords=[])
Assign(targets=[Name(id='quantum_instance', ctx=Store())], value=Call(func=Name(id='QuantumInstance', ctx=Load()), args=[Name(id='quantum_instance', ctx=Load())], keywords=[]))
Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Store())
Name(id='quantum_instance', ctx=Load())
Name(id='quantum_instance', ctx=Load())
Load()
arg(arg='self', annotation=None)
arg(arg='backend', annotation=Name(id='Backend', ctx=Load()))
arg(arg='kwargs', annotation=None)
Str(s='Sets backend with configuration.')
Attribute(value=Name(id='self', ctx=Load()), attr='quantum_instance', ctx=Store())
Call(func=Name(id='QuantumInstance', ctx=Load()), args=[Name(id='backend', ctx=Load())], keywords=[])
Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='quantum_instance', ctx=Load()), attr='set_config', ctx=Load()), args=[], keywords=[keyword(arg=None, value=Name(id='kwargs', ctx=Load()))])
arg(arg='self', annotation=None)
Str(s='Returns backend.')
Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='quantum_instance', ctx=Load()), attr='backend', ctx=Load())
Load()
Load()
arg(arg='self', annotation=None)
arg(arg='backend', annotation=Name(id='Backend', ctx=Load()))
Str(s='Sets backend without additional configuration.')
Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='set_backend', ctx=Load()), args=[Name(id='backend', ctx=Load())], keywords=[])
Name(id='backend', ctx=Load())
Load()
arg(arg='self', annotation=None)
Str(s='Returns random seed')
Attribute(value=Name(id='self', ctx=Load()), attr='_random_seed', ctx=Load())
Load()
arg(arg='self', annotation=None)
arg(arg='s', annotation=None)
Str(s='\n        Sets the random seed for QGAN and updates the algorithm_globals seed\n        at the same time\n\n        Args:\n            s (int): random seed\n        ')
Attribute(value=Name(id='self', ctx=Load()), attr='_random_seed', ctx=Store())
Name(id='s', ctx=Load())
Attribute(value=Name(id='algorithm_globals', ctx=Load()), attr='random_seed', ctx=Store())
Attribute(value=Name(id='self', ctx=Load()), attr='_random_seed', ctx=Load())
Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_discriminator', ctx=Load()), attr='set_seed', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_random_seed', ctx=Load())], keywords=[])
Name(id='seed', ctx=Load())
Load()
arg(arg='self', annotation=None)
Str(s='Returns tolerance for relative entropy')
Attribute(value=Name(id='self', ctx=Load()), attr='_tol_rel_ent', ctx=Load())
Load()
arg(arg='self', annotation=None)
arg(arg='t', annotation=None)
Str(s='\n        Set tolerance for relative entropy\n\n        Args:\n            t (float): or None, Set tolerance level for relative entropy.\n                If the training achieves relative\n                entropy equal or lower than tolerance it finishes.\n        ')
Attribute(value=Name(id='self', ctx=Load()), attr='_tol_rel_ent', ctx=Store())
Name(id='t', ctx=Load())
Name(id='tol_rel_ent', ctx=Load())
Load()
arg(arg='self', annotation=None)
Str(s='Returns generator')
Attribute(value=Name(id='self', ctx=Load()), attr='_generator', ctx=Load())
Load()
arg(arg='self', annotation=None)
arg(arg='generator_circuit', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Name(id='QuantumCircuit', ctx=Load())), ctx=Load()))
arg(arg='generator_init_params', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), ctx=Load()))
arg(arg='generator_optimizer', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Name(id='Optimizer', ctx=Load())), ctx=Load()))
arg(arg='generator_gradient', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='Callable', ctx=Load()), Name(id='Gradient', ctx=Load())], ctx=Load())), ctx=Load())), ctx=Load()))
NameConstant(value=None)
NameConstant(value=None)
NameConstant(value=None)
NameConstant(value=None)
Str(s='Initialize generator.\n\n        Args:\n            generator_circuit: parameterized quantum circuit which sets\n                the structure of the quantum generator\n            generator_init_params: initial parameters for the generator circuit\n            generator_optimizer: optimizer to be used for the training of the generator\n            generator_gradient: A Gradient object, or a function returning partial\n                derivatives of the loss function w.r.t. the generator variational\n                params.\n        Raises:\n            QiskitMachineLearningError: invalid input\n        ')
Name(id='generator_gradient', ctx=Load())
If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='generator_gradient', ctx=Load()), Tuple(elts=[Name(id='Gradient', ctx=Load()), Name(id='FunctionType', ctx=Load())], ctx=Load())], keywords=[])), body=[Raise(exc=Call(func=Name(id='QiskitMachineLearningError', ctx=Load()), args=[Str(s='Please pass either a Gradient object or a function as the generator_gradient argument.')], keywords=[]), cause=None)], orelse=[])
Attribute(value=Name(id='self', ctx=Load()), attr='_generator', ctx=Store())
Call(func=Name(id='QuantumGenerator', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_bounds', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_num_qubits', ctx=Load()), Name(id='generator_circuit', ctx=Load()), Name(id='generator_init_params', ctx=Load()), Name(id='generator_optimizer', ctx=Load()), Name(id='generator_gradient', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_snapshot_dir', ctx=Load())], keywords=[])
arg(arg='self', annotation=None)
Str(s='Returns discriminator')
Attribute(value=Name(id='self', ctx=Load()), attr='_discriminator', ctx=Load())
Load()
arg(arg='self', annotation=None)
arg(arg='discriminator', annotation=None)
NameConstant(value=None)
Str(s='\n        Initialize discriminator.\n\n        Args:\n            discriminator (Discriminator): discriminator\n        ')
Compare(left=Name(id='discriminator', ctx=Load()), ops=[Is()], comparators=[NameConstant(value=None)])
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_discriminator', ctx=Store())], value=Call(func=Name(id='NumPyDiscriminator', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_num_qubits', ctx=Load())], keywords=[])], keywords=[]))
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_discriminator', ctx=Store())], value=Name(id='discriminator', ctx=Load()))
Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_discriminator', ctx=Load()), attr='set_seed', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_random_seed', ctx=Load())], keywords=[])
arg(arg='self', annotation=None)
Str(s='Returns generator loss')
Attribute(value=Name(id='self', ctx=Load()), attr='_g_loss', ctx=Load())
Load()
Name(id='List', ctx=Load())
Index(value=Name(id='float', ctx=Load()))
Load()
arg(arg='self', annotation=None)
Str(s='Returns discriminator loss')
Attribute(value=Name(id='self', ctx=Load()), attr='_d_loss', ctx=Load())
Load()
Name(id='List', ctx=Load())
Index(value=Name(id='float', ctx=Load()))
Load()
arg(arg='self', annotation=None)
Str(s='Returns relative entropy between target and trained distribution')
Attribute(value=Name(id='self', ctx=Load()), attr='_rel_entr', ctx=Load())
Load()
Name(id='List', ctx=Load())
Index(value=Name(id='float', ctx=Load()))
Load()
arg(arg='self', annotation=None)
Str(s='Get relative entropy between target and trained distribution')
Tuple(elts=[Name(id='samples_gen', ctx=Store()), Name(id='prob_gen', ctx=Store())], ctx=Store())
Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_generator', ctx=Load()), attr='get_output', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load())], keywords=[])
Name(id='temp', ctx=Store())
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='zeros', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_grid_elements', ctx=Load())], keywords=[])], keywords=[])
Tuple(elts=[Name(id='j', ctx=Store()), Name(id='sample', ctx=Store())], ctx=Store())
Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='samples_gen', ctx=Load())], keywords=[])
For(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='element', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_grid_elements', ctx=Load())], keywords=[]), body=[If(test=Compare(left=Name(id='sample', ctx=Load()), ops=[Eq()], comparators=[Name(id='element', ctx=Load())]), body=[AugAssign(target=Subscript(value=Name(id='temp', ctx=Load()), slice=Index(value=Name(id='i', ctx=Load())), ctx=Store()), op=Add(), value=Subscript(value=Name(id='prob_gen', ctx=Load()), slice=Index(value=Name(id='j', ctx=Load())), ctx=Load()))], orelse=[])], orelse=[])
Name(id='prob_gen', ctx=Store())
ListComp(elt=IfExp(test=Compare(left=Name(id='x', ctx=Load()), ops=[Eq()], comparators=[Num(n=0)]), body=Num(n=1e-08), orelse=Name(id='x', ctx=Load())), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='temp', ctx=Load()), ifs=[], is_async=0)])
Name(id='rel_entr', ctx=Store())
Call(func=Name(id='entropy', ctx=Load()), args=[Name(id='prob_gen', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_prob_data', ctx=Load())], keywords=[])
Name(id='rel_entr', ctx=Load())
Load()
arg(arg='self', annotation=None)
arg(arg='e', annotation=None)
arg(arg='d_loss', annotation=None)
arg(arg='g_loss', annotation=None)
arg(arg='rel_entr', annotation=None)
withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_snapshot_dir', ctx=Load()), Str(s='output.csv')], keywords=[])], keywords=[keyword(arg='mode', value=Str(s='a')), keyword(arg='encoding', value=Str(s='utf8'))]), optional_vars=Name(id='csv_file', ctx=Store()))
Assign(targets=[Name(id='fieldnames', ctx=Store())], value=List(elts=[Str(s='epoch'), Str(s='loss_discriminator'), Str(s='loss_generator'), Str(s='params_generator'), Str(s='rel_entropy')], ctx=Load()))
Assign(targets=[Name(id='writer', ctx=Store())], value=Call(func=Attribute(value=Name(id='csv', ctx=Load()), attr='DictWriter', ctx=Load()), args=[Name(id='csv_file', ctx=Load())], keywords=[keyword(arg='fieldnames', value=Name(id='fieldnames', ctx=Load()))]))
Expr(value=Call(func=Attribute(value=Name(id='writer', ctx=Load()), attr='writerow', ctx=Load()), args=[Dict(keys=[Str(s='epoch'), Str(s='loss_discriminator'), Str(s='loss_generator'), Str(s='params_generator'), Str(s='rel_entropy')], values=[Name(id='e', ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='average', ctx=Load()), args=[Name(id='d_loss', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='average', ctx=Load()), args=[Name(id='g_loss', ctx=Load())], keywords=[]), Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_generator', ctx=Load()), attr='parameter_values', ctx=Load()), Name(id='rel_entr', ctx=Load())])], keywords=[]))
Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_discriminator', ctx=Load()), attr='save_model', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_snapshot_dir', ctx=Load())], keywords=[])
arg(arg='self', annotation=None)
Str(s='\n        Train the qGAN\n\n        Raises:\n            QiskitMachineLearningError: Batch size bigger than the number of\n                                        items in the truncated data set\n        ')
Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_snapshot_dir', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)])
With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_snapshot_dir', ctx=Load()), Str(s='output.csv')], keywords=[])], keywords=[keyword(arg='mode', value=Str(s='w')), keyword(arg='encoding', value=Str(s='utf8'))]), optional_vars=Name(id='csv_file', ctx=Store()))], body=[Assign(targets=[Name(id='fieldnames', ctx=Store())], value=List(elts=[Str(s='epoch'), Str(s='loss_discriminator'), Str(s='loss_generator'), Str(s='params_generator'), Str(s='rel_entropy')], ctx=Load())), Assign(targets=[Name(id='writer', ctx=Store())], value=Call(func=Attribute(value=Name(id='csv', ctx=Load()), attr='DictWriter', ctx=Load()), args=[Name(id='csv_file', ctx=Load())], keywords=[keyword(arg='fieldnames', value=Name(id='fieldnames', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='writer', ctx=Load()), attr='writeheader', ctx=Load()), args=[], keywords=[]))])
Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_data', ctx=Load())], keywords=[]), ops=[Lt()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='_batch_size', ctx=Load())])
Raise(exc=Call(func=Name(id='QiskitMachineLearningError', ctx=Load()), args=[JoinedStr(values=[Str(s='The batch size needs to be less than the truncated data size of '), FormattedValue(value=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_data', ctx=Load())], keywords=[]), conversion=-1, format_spec=None)])], keywords=[]), cause=None)
Name(id='e', ctx=Store())
Call(func=Name(id='range', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_num_epochs', ctx=Load())], keywords=[])
Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='algorithm_globals', ctx=Load()), attr='random', ctx=Load()), attr='shuffle', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_data', ctx=Load())], keywords=[]))
Assign(targets=[Name(id='index', ctx=Store())], value=Num(n=0))
While(test=Compare(left=BinOp(left=Name(id='index', ctx=Load()), op=Add(), right=Attribute(value=Name(id='self', ctx=Load()), attr='_batch_size', ctx=Load())), ops=[LtE()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_data', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='real_batch', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_data', ctx=Load()), slice=Slice(lower=Name(id='index', ctx=Load()), upper=BinOp(left=Name(id='index', ctx=Load()), op=Add(), right=Attribute(value=Name(id='self', ctx=Load()), attr='_batch_size', ctx=Load())), step=None), ctx=Load())), AugAssign(target=Name(id='index', ctx=Store()), op=Add(), value=Attribute(value=Name(id='self', ctx=Load()), attr='_batch_size', ctx=Load())), Assign(targets=[Tuple(elts=[Name(id='generated_batch', ctx=Store()), Name(id='generated_prob', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_generator', ctx=Load()), attr='get_output', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load())], keywords=[keyword(arg='shots', value=Attribute(value=Name(id='self', ctx=Load()), attr='_batch_size', ctx=Load()))])), Assign(targets=[Name(id='ret_d', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_discriminator', ctx=Load()), attr='train', ctx=Load()), args=[List(elts=[Name(id='real_batch', ctx=Load()), Name(id='generated_batch', ctx=Load())], ctx=Load()), List(elts=[BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='ones', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='real_batch', ctx=Load())], keywords=[])], keywords=[]), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='real_batch', ctx=Load())], keywords=[])), Name(id='generated_prob', ctx=Load())], ctx=Load())], keywords=[])), Assign(targets=[Name(id='d_loss_min', ctx=Store())], value=Subscript(value=Name(id='ret_d', ctx=Load()), slice=Index(value=Str(s='loss')), ctx=Load())), Assign(targets=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_generator', ctx=Load()), attr='discriminator', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_discriminator', ctx=Load())), Assign(targets=[Name(id='ret_g', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_generator', ctx=Load()), attr='train', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load())], keywords=[keyword(arg='shots', value=Attribute(value=Name(id='self', ctx=Load()), attr='_batch_size', ctx=Load()))])), Assign(targets=[Name(id='g_loss_min', ctx=Store())], value=Subscript(value=Name(id='ret_g', ctx=Load()), slice=Index(value=Str(s='loss')), ctx=Load()))], orelse=[])
Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_d_loss', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load()), args=[Call(func=Name(id='float', ctx=Load()), args=[Name(id='d_loss_min', ctx=Load())], keywords=[]), Num(n=4)], keywords=[])], keywords=[]))
Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_g_loss', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load()), args=[Name(id='g_loss_min', ctx=Load()), Num(n=4)], keywords=[])], keywords=[]))
Assign(targets=[Name(id='rel_entr', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_rel_entr', ctx=Load()), args=[], keywords=[]))
Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_rel_entr', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load()), args=[Name(id='rel_entr', ctx=Load()), Num(n=4)], keywords=[])], keywords=[]))
Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_ret', ctx=Load()), slice=Index(value=Str(s='params_d')), ctx=Store())], value=Subscript(value=Name(id='ret_d', ctx=Load()), slice=Index(value=Str(s='params')), ctx=Load()))
Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_ret', ctx=Load()), slice=Index(value=Str(s='params_g')), ctx=Store())], value=Subscript(value=Name(id='ret_g', ctx=Load()), slice=Index(value=Str(s='params')), ctx=Load()))
Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_ret', ctx=Load()), slice=Index(value=Str(s='loss_d')), ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load()), args=[Call(func=Name(id='float', ctx=Load()), args=[Name(id='d_loss_min', ctx=Load())], keywords=[]), Num(n=4)], keywords=[]))
Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_ret', ctx=Load()), slice=Index(value=Str(s='loss_g')), ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load()), args=[Name(id='g_loss_min', ctx=Load()), Num(n=4)], keywords=[]))
Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_ret', ctx=Load()), slice=Index(value=Str(s='rel_entr')), ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load()), args=[Name(id='rel_entr', ctx=Load()), Num(n=4)], keywords=[]))
If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_snapshot_dir', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_store_params', ctx=Load()), args=[Name(id='e', ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load()), args=[Name(id='d_loss_min', ctx=Load()), Num(n=4)], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load()), args=[Name(id='g_loss_min', ctx=Load()), Num(n=4)], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load()), args=[Name(id='rel_entr', ctx=Load()), Num(n=4)], keywords=[])], keywords=[]))], orelse=[])
Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Str(s='Epoch %s/%s...'), BinOp(left=Name(id='e', ctx=Load()), op=Add(), right=Num(n=1)), Attribute(value=Name(id='self', ctx=Load()), attr='_num_epochs', ctx=Load())], keywords=[]))
Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Str(s='Loss Discriminator: %s'), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load()), args=[Call(func=Name(id='float', ctx=Load()), args=[Name(id='d_loss_min', ctx=Load())], keywords=[]), Num(n=4)], keywords=[])], keywords=[]))
Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Str(s='Loss Generator: %s'), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load()), args=[Name(id='g_loss_min', ctx=Load()), Num(n=4)], keywords=[])], keywords=[]))
Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Str(s='Relative Entropy: %s'), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load()), args=[Name(id='rel_entr', ctx=Load()), Num(n=4)], keywords=[])], keywords=[]))
If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_tol_rel_ent', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)]), body=[If(test=Compare(left=Name(id='rel_entr', ctx=Load()), ops=[LtE()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='_tol_rel_ent', ctx=Load())]), body=[Break()], orelse=[])], orelse=[])
arg(arg='self', annotation=None)
Str(s='\n        Run qGAN training\n\n        Returns:\n            dict: with generator(discriminator) parameters & loss, relative entropy\n        Raises:\n            QiskitMachineLearningError: invalid backend\n        ')
Compare(left=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()), attr='backend_name', ctx=Load()), ops=[Eq()], comparators=[BoolOp(op=Or(), values=[Str(s='unitary_simulator'), Str(s='clifford_simulator')])])
Raise(exc=Call(func=Name(id='QiskitMachineLearningError', ctx=Load()), args=[Str(s='Chosen backend not supported - Set backend either to statevector_simulator, qasm_simulator or actual quantum hardware')], keywords=[]), cause=None)
Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='train', ctx=Load()), args=[], keywords=[])
Attribute(value=Name(id='self', ctx=Load()), attr='_ret', ctx=Load())
Load()
Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Name(id='List', ctx=Load())], ctx=Load())), ctx=Load())
Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Name(id='List', ctx=Load())], ctx=Load())), ctx=Load())), ctx=Load())
Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Name(id='List', ctx=Load())], ctx=Load())), ctx=Load())), ctx=Load())
Name(id='int', ctx=Load())
Name(id='int', ctx=Load())
Name(id='int', ctx=Load())
Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Name(id='DiscriminativeNetwork', ctx=Load())), ctx=Load())
Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Name(id='GenerativeNetwork', ctx=Load())), ctx=Load())
Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Name(id='float', ctx=Load())), ctx=Load())
Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Name(id='str', ctx=Load())), ctx=Load())
Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='QuantumInstance', ctx=Load()), Name(id='Backend', ctx=Load())], ctx=Load())), ctx=Load())), ctx=Load())
Name(id='validate_min', ctx=Load())
Str(s='batch_size')
Name(id='batch_size', ctx=Load())
Num(n=1)
Name(id='self', ctx=Load())
Store()
Load()
Attribute(value=Name(id='self', ctx=Load()), attr='quantum_instance', ctx=Store())
Name(id='quantum_instance', ctx=Load())
Name(id='data', ctx=Load())
Is()
NameConstant(value=None)
Call(func=Name(id='QiskitMachineLearningError', ctx=Load()), args=[Str(s='Training data not given.')], keywords=[])
Name(id='self', ctx=Load())
Store()
Attribute(value=Name(id='np', ctx=Load()), attr='array', ctx=Load())
Name(id='data', ctx=Load())
Name(id='bounds', ctx=Load())
Is()
NameConstant(value=None)
Name(id='bounds_min', ctx=Store())
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='percentile', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_data', ctx=Load()), Num(n=5)], keywords=[keyword(arg='axis', value=Num(n=0))])
Name(id='bounds_max', ctx=Store())
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='percentile', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_data', ctx=Load()), Num(n=95)], keywords=[keyword(arg='axis', value=Num(n=0))])
Name(id='bounds', ctx=Store())
List(elts=[], ctx=Load())
Tuple(elts=[Name(id='i', ctx=Store()), Name(id='_', ctx=Store())], ctx=Store())
Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='bounds_min', ctx=Load())], keywords=[])
Expr(value=Call(func=Attribute(value=Name(id='bounds', ctx=Load()), attr='append', ctx=Load()), args=[List(elts=[Subscript(value=Name(id='bounds_min', ctx=Load()), slice=Index(value=Name(id='i', ctx=Load())), ctx=Load()), Subscript(value=Name(id='bounds_max', ctx=Load()), slice=Index(value=Name(id='i', ctx=Load())), ctx=Load())], ctx=Load())], keywords=[]))
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='ndim', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[])
Gt()
Num(n=1)
Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='bounds', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[BoolOp(op=Or(), values=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='num_qubits', ctx=Load())], keywords=[]), Call(func=Name(id='len', ctx=Load()), args=[Subscript(value=Name(id='data', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())], keywords=[])])])
Raise(exc=Call(func=Name(id='QiskitMachineLearningError', ctx=Load()), args=[Str(s='Dimensions of the data, the length of the data bounds and the numbers of qubits per dimension are incompatible.')], keywords=[]), cause=None)
Compare(left=BoolOp(op=Or(), values=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='ndim', ctx=Load()), args=[Name(id='bounds', ctx=Load())], keywords=[]), Call(func=Name(id='len', ctx=Load()), args=[Name(id='num_qubits', ctx=Load())], keywords=[])]), ops=[NotEq()], comparators=[Num(n=1)])
Raise(exc=Call(func=Name(id='QiskitMachineLearningError', ctx=Load()), args=[Str(s='Dimensions of the data, the length of the data bounds and the numbers of qubits per dimension are incompatible.')], keywords=[]), cause=None)
Name(id='self', ctx=Load())
Store()
Attribute(value=Name(id='np', ctx=Load()), attr='array', ctx=Load())
Name(id='bounds', ctx=Load())
Name(id='self', ctx=Load())
Store()
Load()
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='ndim', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[])
Gt()
Num(n=1)
Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_num_qubits', ctx=Load()), ops=[Is()], comparators=[NameConstant(value=None)])
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_num_qubits', ctx=Store())], value=BinOp(left=Subscript(value=Attribute(value=Name(id='np', ctx=Load()), attr='ones', ctx=Load()), slice=Index(value=Call(func=Name(id='len', ctx=Load()), args=[Subscript(value=Name(id='data', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())], keywords=[])), ctx=Load()), op=Mult(), right=Num(n=3)))
Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_num_qubits', ctx=Load()), ops=[Is()], comparators=[NameConstant(value=None)])
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_num_qubits', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='array', ctx=Load()), args=[List(elts=[Num(n=3)], ctx=Load())], keywords=[]))
Attribute(value=Name(id='self', ctx=Load()), attr='_data', ctx=Store())
Attribute(value=Name(id='self', ctx=Load()), attr='_data_grid', ctx=Store())
Attribute(value=Name(id='self', ctx=Load()), attr='_grid_elements', ctx=Store())
Attribute(value=Name(id='self', ctx=Load()), attr='_prob_data', ctx=Store())
Store()
Name(id='discretize_and_truncate', ctx=Load())
Attribute(value=Name(id='self', ctx=Load()), attr='_data', ctx=Load())
Attribute(value=Name(id='self', ctx=Load()), attr='_bounds', ctx=Load())
Attribute(value=Name(id='self', ctx=Load()), attr='_num_qubits', ctx=Load())
keyword(arg='return_data_grid_elements', value=NameConstant(value=True))
keyword(arg='return_prob', value=NameConstant(value=True))
keyword(arg='prob_non_zero', value=NameConstant(value=True))
Name(id='self', ctx=Load())
Store()
Load()
Name(id='self', ctx=Load())
Store()
Load()
Name(id='self', ctx=Load())
Store()
Load()
Name(id='self', ctx=Load())
Store()
Load()
Name(id='self', ctx=Load())
Store()
Load()
Name(id='self', ctx=Load())
Store()
Load()
Name(id='self', ctx=Load())
Store()
Load()
Name(id='self', ctx=Load())
Store()
Load()
Name(id='generator', ctx=Load())
Is()
NameConstant(value=None)
Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='set_generator', ctx=Load()), args=[], keywords=[])
Attribute(value=Name(id='self', ctx=Load()), attr='_generator', ctx=Store())
Name(id='generator', ctx=Load())
Name(id='discriminator', ctx=Load())
Is()
NameConstant(value=None)
Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='set_discriminator', ctx=Load()), args=[], keywords=[])
Attribute(value=Name(id='self', ctx=Load()), attr='_discriminator', ctx=Store())
Name(id='discriminator', ctx=Load())
Name(id='self', ctx=Load())
Store()
Name(id='self', ctx=Load())
Load()
Name(id='self', ctx=Load())
Store()
Name(id='algorithm_globals', ctx=Load())
Load()
Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='QuantumInstance', ctx=Load()), Name(id='Backend', ctx=Load())], ctx=Load())), ctx=Load())), ctx=Load())
And()
Compare(left=Name(id='quantum_instance', ctx=Load()), ops=[Is()], comparators=[NameConstant(value=None)])
Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='quantum_instance', ctx=Load()), ops=[Is()], comparators=[NameConstant(value=None)])
Call(func=Name(id='QiskitMachineLearningError', ctx=Load()), args=[Str(s='A QuantumInstance or Backend must be supplied to run the quantum algorithm.')], keywords=[])
Name(id='isinstance', ctx=Load())
Name(id='quantum_instance', ctx=Load())
Name(id='Backend', ctx=Load())
Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='set_backend', ctx=Load()), args=[Name(id='quantum_instance', ctx=Load())], keywords=[keyword(arg=None, value=Name(id='kwargs', ctx=Load()))])
Compare(left=Name(id='quantum_instance', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)])
Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='quantum_instance', ctx=Store())], value=Name(id='quantum_instance', ctx=Load()))
Attribute(value=Name(id='self', ctx=Load()), attr='_run', ctx=Load())
Name(id='self', ctx=Load())
Load()
Load()
Name(id='QuantumInstance', ctx=Load())
Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='QuantumInstance', ctx=Load()), Name(id='Backend', ctx=Load())], ctx=Load())), ctx=Load())
Name(id='isinstance', ctx=Load())
Name(id='quantum_instance', ctx=Load())
Name(id='Backend', ctx=Load())
Name(id='quantum_instance', ctx=Store())
Call(func=Name(id='QuantumInstance', ctx=Load()), args=[Name(id='quantum_instance', ctx=Load())], keywords=[])
Name(id='self', ctx=Load())
Store()
Load()
Load()
Name(id='Backend', ctx=Load())
Name(id='self', ctx=Load())
Store()
Name(id='QuantumInstance', ctx=Load())
Name(id='backend', ctx=Load())
Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='quantum_instance', ctx=Load()), attr='set_config', ctx=Load())
keyword(arg=None, value=Name(id='kwargs', ctx=Load()))
Attribute(value=Name(id='self', ctx=Load()), attr='quantum_instance', ctx=Load())
Load()
Name(id='Backend', ctx=Load())
Attribute(value=Name(id='self', ctx=Load()), attr='set_backend', ctx=Load())
Name(id='backend', ctx=Load())
Load()
Name(id='self', ctx=Load())
Load()
Name(id='self', ctx=Load())
Store()
Load()
Name(id='algorithm_globals', ctx=Load())
Store()
Name(id='self', ctx=Load())
Load()
Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_discriminator', ctx=Load()), attr='set_seed', ctx=Load())
Attribute(value=Name(id='self', ctx=Load()), attr='_random_seed', ctx=Load())
Load()
Name(id='self', ctx=Load())
Load()
Name(id='self', ctx=Load())
Store()
Load()
Load()
Name(id='self', ctx=Load())
Load()
Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Name(id='QuantumCircuit', ctx=Load())), ctx=Load())
Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())), ctx=Load())
Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Name(id='Optimizer', ctx=Load())), ctx=Load())
Subscript(value=Name(id='Optional', ctx=Load()), slice=Index(value=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='Callable', ctx=Load()), Name(id='Gradient', ctx=Load())], ctx=Load())), ctx=Load())), ctx=Load())
Load()
UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='generator_gradient', ctx=Load()), Tuple(elts=[Name(id='Gradient', ctx=Load()), Name(id='FunctionType', ctx=Load())], ctx=Load())], keywords=[]))
Raise(exc=Call(func=Name(id='QiskitMachineLearningError', ctx=Load()), args=[Str(s='Please pass either a Gradient object or a function as the generator_gradient argument.')], keywords=[]), cause=None)
Name(id='self', ctx=Load())
Store()
Name(id='QuantumGenerator', ctx=Load())
Attribute(value=Name(id='self', ctx=Load()), attr='_bounds', ctx=Load())
Attribute(value=Name(id='self', ctx=Load()), attr='_num_qubits', ctx=Load())
Name(id='generator_circuit', ctx=Load())
Name(id='generator_init_params', ctx=Load())
Name(id='generator_optimizer', ctx=Load())
Name(id='generator_gradient', ctx=Load())
Attribute(value=Name(id='self', ctx=Load()), attr='_snapshot_dir', ctx=Load())
Name(id='self', ctx=Load())
Load()
Name(id='discriminator', ctx=Load())
Is()
NameConstant(value=None)
Attribute(value=Name(id='self', ctx=Load()), attr='_discriminator', ctx=Store())
Call(func=Name(id='NumPyDiscriminator', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_num_qubits', ctx=Load())], keywords=[])], keywords=[])
Attribute(value=Name(id='self', ctx=Load()), attr='_discriminator', ctx=Store())
Name(id='discriminator', ctx=Load())
Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_discriminator', ctx=Load()), attr='set_seed', ctx=Load())
Attribute(value=Name(id='self', ctx=Load()), attr='_random_seed', ctx=Load())
Name(id='self', ctx=Load())
Load()
Load()
Name(id='float', ctx=Load())
Name(id='self', ctx=Load())
Load()
Load()
Name(id='float', ctx=Load())
Name(id='self', ctx=Load())
Load()
Load()
Name(id='float', ctx=Load())
Name(id='samples_gen', ctx=Store())
Name(id='prob_gen', ctx=Store())
Store()
Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_generator', ctx=Load()), attr='get_output', ctx=Load())
Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load())
Store()
Attribute(value=Name(id='np', ctx=Load()), attr='zeros', ctx=Load())
Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_grid_elements', ctx=Load())], keywords=[])
Name(id='j', ctx=Store())
Name(id='sample', ctx=Store())
Store()
Name(id='enumerate', ctx=Load())
Name(id='samples_gen', ctx=Load())
Tuple(elts=[Name(id='i', ctx=Store()), Name(id='element', ctx=Store())], ctx=Store())
Call(func=Name(id='enumerate', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_grid_elements', ctx=Load())], keywords=[])
If(test=Compare(left=Name(id='sample', ctx=Load()), ops=[Eq()], comparators=[Name(id='element', ctx=Load())]), body=[AugAssign(target=Subscript(value=Name(id='temp', ctx=Load()), slice=Index(value=Name(id='i', ctx=Load())), ctx=Store()), op=Add(), value=Subscript(value=Name(id='prob_gen', ctx=Load()), slice=Index(value=Name(id='j', ctx=Load())), ctx=Load()))], orelse=[])
Store()
IfExp(test=Compare(left=Name(id='x', ctx=Load()), ops=[Eq()], comparators=[Num(n=0)]), body=Num(n=1e-08), orelse=Name(id='x', ctx=Load()))
comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='temp', ctx=Load()), ifs=[], is_async=0)
Store()
Name(id='entropy', ctx=Load())
Name(id='prob_gen', ctx=Load())
Attribute(value=Name(id='self', ctx=Load()), attr='_prob_data', ctx=Load())
Load()
Call(func=Name(id='open', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_snapshot_dir', ctx=Load()), Str(s='output.csv')], keywords=[])], keywords=[keyword(arg='mode', value=Str(s='a')), keyword(arg='encoding', value=Str(s='utf8'))])
Name(id='csv_file', ctx=Store())
Name(id='fieldnames', ctx=Store())
List(elts=[Str(s='epoch'), Str(s='loss_discriminator'), Str(s='loss_generator'), Str(s='params_generator'), Str(s='rel_entropy')], ctx=Load())
Name(id='writer', ctx=Store())
Call(func=Attribute(value=Name(id='csv', ctx=Load()), attr='DictWriter', ctx=Load()), args=[Name(id='csv_file', ctx=Load())], keywords=[keyword(arg='fieldnames', value=Name(id='fieldnames', ctx=Load()))])
Call(func=Attribute(value=Name(id='writer', ctx=Load()), attr='writerow', ctx=Load()), args=[Dict(keys=[Str(s='epoch'), Str(s='loss_discriminator'), Str(s='loss_generator'), Str(s='params_generator'), Str(s='rel_entropy')], values=[Name(id='e', ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='average', ctx=Load()), args=[Name(id='d_loss', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='average', ctx=Load()), args=[Name(id='g_loss', ctx=Load())], keywords=[]), Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_generator', ctx=Load()), attr='parameter_values', ctx=Load()), Name(id='rel_entr', ctx=Load())])], keywords=[])
Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_discriminator', ctx=Load()), attr='save_model', ctx=Load())
Attribute(value=Name(id='self', ctx=Load()), attr='_snapshot_dir', ctx=Load())
Attribute(value=Name(id='self', ctx=Load()), attr='_snapshot_dir', ctx=Load())
IsNot()
NameConstant(value=None)
withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_snapshot_dir', ctx=Load()), Str(s='output.csv')], keywords=[])], keywords=[keyword(arg='mode', value=Str(s='w')), keyword(arg='encoding', value=Str(s='utf8'))]), optional_vars=Name(id='csv_file', ctx=Store()))
Assign(targets=[Name(id='fieldnames', ctx=Store())], value=List(elts=[Str(s='epoch'), Str(s='loss_discriminator'), Str(s='loss_generator'), Str(s='params_generator'), Str(s='rel_entropy')], ctx=Load()))
Assign(targets=[Name(id='writer', ctx=Store())], value=Call(func=Attribute(value=Name(id='csv', ctx=Load()), attr='DictWriter', ctx=Load()), args=[Name(id='csv_file', ctx=Load())], keywords=[keyword(arg='fieldnames', value=Name(id='fieldnames', ctx=Load()))]))
Expr(value=Call(func=Attribute(value=Name(id='writer', ctx=Load()), attr='writeheader', ctx=Load()), args=[], keywords=[]))
Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_data', ctx=Load())], keywords=[])
Lt()
Attribute(value=Name(id='self', ctx=Load()), attr='_batch_size', ctx=Load())
Call(func=Name(id='QiskitMachineLearningError', ctx=Load()), args=[JoinedStr(values=[Str(s='The batch size needs to be less than the truncated data size of '), FormattedValue(value=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_data', ctx=Load())], keywords=[]), conversion=-1, format_spec=None)])], keywords=[])
Store()
Name(id='range', ctx=Load())
Attribute(value=Name(id='self', ctx=Load()), attr='_num_epochs', ctx=Load())
Call(func=Attribute(value=Attribute(value=Name(id='algorithm_globals', ctx=Load()), attr='random', ctx=Load()), attr='shuffle', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_data', ctx=Load())], keywords=[])
Name(id='index', ctx=Store())
Num(n=0)
Compare(left=BinOp(left=Name(id='index', ctx=Load()), op=Add(), right=Attribute(value=Name(id='self', ctx=Load()), attr='_batch_size', ctx=Load())), ops=[LtE()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_data', ctx=Load())], keywords=[])])
Assign(targets=[Name(id='real_batch', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_data', ctx=Load()), slice=Slice(lower=Name(id='index', ctx=Load()), upper=BinOp(left=Name(id='index', ctx=Load()), op=Add(), right=Attribute(value=Name(id='self', ctx=Load()), attr='_batch_size', ctx=Load())), step=None), ctx=Load()))
AugAssign(target=Name(id='index', ctx=Store()), op=Add(), value=Attribute(value=Name(id='self', ctx=Load()), attr='_batch_size', ctx=Load()))
Assign(targets=[Tuple(elts=[Name(id='generated_batch', ctx=Store()), Name(id='generated_prob', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_generator', ctx=Load()), attr='get_output', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load())], keywords=[keyword(arg='shots', value=Attribute(value=Name(id='self', ctx=Load()), attr='_batch_size', ctx=Load()))]))
Assign(targets=[Name(id='ret_d', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_discriminator', ctx=Load()), attr='train', ctx=Load()), args=[List(elts=[Name(id='real_batch', ctx=Load()), Name(id='generated_batch', ctx=Load())], ctx=Load()), List(elts=[BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='ones', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='real_batch', ctx=Load())], keywords=[])], keywords=[]), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='real_batch', ctx=Load())], keywords=[])), Name(id='generated_prob', ctx=Load())], ctx=Load())], keywords=[]))
Assign(targets=[Name(id='d_loss_min', ctx=Store())], value=Subscript(value=Name(id='ret_d', ctx=Load()), slice=Index(value=Str(s='loss')), ctx=Load()))
Assign(targets=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_generator', ctx=Load()), attr='discriminator', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_discriminator', ctx=Load()))
Assign(targets=[Name(id='ret_g', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_generator', ctx=Load()), attr='train', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load())], keywords=[keyword(arg='shots', value=Attribute(value=Name(id='self', ctx=Load()), attr='_batch_size', ctx=Load()))]))
Assign(targets=[Name(id='g_loss_min', ctx=Store())], value=Subscript(value=Name(id='ret_g', ctx=Load()), slice=Index(value=Str(s='loss')), ctx=Load()))
Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_d_loss', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load()), args=[Call(func=Name(id='float', ctx=Load()), args=[Name(id='d_loss_min', ctx=Load())], keywords=[]), Num(n=4)], keywords=[])], keywords=[])
Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_g_loss', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load()), args=[Name(id='g_loss_min', ctx=Load()), Num(n=4)], keywords=[])], keywords=[])
Name(id='rel_entr', ctx=Store())
Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_rel_entr', ctx=Load()), args=[], keywords=[])
Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_rel_entr', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load()), args=[Name(id='rel_entr', ctx=Load()), Num(n=4)], keywords=[])], keywords=[])
Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_ret', ctx=Load()), slice=Index(value=Str(s='params_d')), ctx=Store())
Subscript(value=Name(id='ret_d', ctx=Load()), slice=Index(value=Str(s='params')), ctx=Load())
Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_ret', ctx=Load()), slice=Index(value=Str(s='params_g')), ctx=Store())
Subscript(value=Name(id='ret_g', ctx=Load()), slice=Index(value=Str(s='params')), ctx=Load())
Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_ret', ctx=Load()), slice=Index(value=Str(s='loss_d')), ctx=Store())
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load()), args=[Call(func=Name(id='float', ctx=Load()), args=[Name(id='d_loss_min', ctx=Load())], keywords=[]), Num(n=4)], keywords=[])
Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_ret', ctx=Load()), slice=Index(value=Str(s='loss_g')), ctx=Store())
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load()), args=[Name(id='g_loss_min', ctx=Load()), Num(n=4)], keywords=[])
Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_ret', ctx=Load()), slice=Index(value=Str(s='rel_entr')), ctx=Store())
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load()), args=[Name(id='rel_entr', ctx=Load()), Num(n=4)], keywords=[])
Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_snapshot_dir', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)])
Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_store_params', ctx=Load()), args=[Name(id='e', ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load()), args=[Name(id='d_loss_min', ctx=Load()), Num(n=4)], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load()), args=[Name(id='g_loss_min', ctx=Load()), Num(n=4)], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load()), args=[Name(id='rel_entr', ctx=Load()), Num(n=4)], keywords=[])], keywords=[]))
Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Str(s='Epoch %s/%s...'), BinOp(left=Name(id='e', ctx=Load()), op=Add(), right=Num(n=1)), Attribute(value=Name(id='self', ctx=Load()), attr='_num_epochs', ctx=Load())], keywords=[])
Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Str(s='Loss Discriminator: %s'), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load()), args=[Call(func=Name(id='float', ctx=Load()), args=[Name(id='d_loss_min', ctx=Load())], keywords=[]), Num(n=4)], keywords=[])], keywords=[])
Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Str(s='Loss Generator: %s'), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load()), args=[Name(id='g_loss_min', ctx=Load()), Num(n=4)], keywords=[])], keywords=[])
Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Str(s='Relative Entropy: %s'), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load()), args=[Name(id='rel_entr', ctx=Load()), Num(n=4)], keywords=[])], keywords=[])
Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_tol_rel_ent', ctx=Load()), ops=[IsNot()], comparators=[NameConstant(value=None)])
If(test=Compare(left=Name(id='rel_entr', ctx=Load()), ops=[LtE()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='_tol_rel_ent', ctx=Load())]), body=[Break()], orelse=[])
Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load()), attr='backend_name', ctx=Load())
Eq()
BoolOp(op=Or(), values=[Str(s='unitary_simulator'), Str(s='clifford_simulator')])
Call(func=Name(id='QiskitMachineLearningError', ctx=Load()), args=[Str(s='Chosen backend not supported - Set backend either to statevector_simulator, qasm_simulator or actual quantum hardware')], keywords=[])
Attribute(value=Name(id='self', ctx=Load()), attr='train', ctx=Load())
Name(id='self', ctx=Load())
Load()
Name(id='Union', ctx=Load())
Index(value=Tuple(elts=[Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Name(id='List', ctx=Load())], ctx=Load()))
Load()
Name(id='Optional', ctx=Load())
Index(value=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Name(id='List', ctx=Load())], ctx=Load())), ctx=Load()))
Load()
Name(id='Optional', ctx=Load())
Index(value=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Name(id='List', ctx=Load())], ctx=Load())), ctx=Load()))
Load()
Load()
Load()
Load()
Name(id='Optional', ctx=Load())
Index(value=Name(id='DiscriminativeNetwork', ctx=Load()))
Load()
Name(id='Optional', ctx=Load())
Index(value=Name(id='GenerativeNetwork', ctx=Load()))
Load()
Name(id='Optional', ctx=Load())
Index(value=Name(id='float', ctx=Load()))
Load()
Name(id='Optional', ctx=Load())
Index(value=Name(id='str', ctx=Load()))
Load()
Name(id='Optional', ctx=Load())
Index(value=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='QuantumInstance', ctx=Load()), Name(id='Backend', ctx=Load())], ctx=Load())), ctx=Load()))
Load()
Load()
Load()
Load()
Name(id='self', ctx=Load())
Store()
Load()
Load()
Name(id='QiskitMachineLearningError', ctx=Load())
Str(s='Training data not given.')
Load()
Name(id='np', ctx=Load())
Load()
Load()
Load()
Store()
Attribute(value=Name(id='np', ctx=Load()), attr='percentile', ctx=Load())
Attribute(value=Name(id='self', ctx=Load()), attr='_data', ctx=Load())
Num(n=5)
keyword(arg='axis', value=Num(n=0))
Store()
Attribute(value=Name(id='np', ctx=Load()), attr='percentile', ctx=Load())
Attribute(value=Name(id='self', ctx=Load()), attr='_data', ctx=Load())
Num(n=95)
keyword(arg='axis', value=Num(n=0))
Store()
Load()
Name(id='i', ctx=Store())
Name(id='_', ctx=Store())
Store()
Name(id='enumerate', ctx=Load())
Name(id='bounds_min', ctx=Load())
Call(func=Attribute(value=Name(id='bounds', ctx=Load()), attr='append', ctx=Load()), args=[List(elts=[Subscript(value=Name(id='bounds_min', ctx=Load()), slice=Index(value=Name(id='i', ctx=Load())), ctx=Load()), Subscript(value=Name(id='bounds_max', ctx=Load()), slice=Index(value=Name(id='i', ctx=Load())), ctx=Load())], ctx=Load())], keywords=[])
Attribute(value=Name(id='np', ctx=Load()), attr='ndim', ctx=Load())
Name(id='data', ctx=Load())
Call(func=Name(id='len', ctx=Load()), args=[Name(id='bounds', ctx=Load())], keywords=[])
NotEq()
BoolOp(op=Or(), values=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='num_qubits', ctx=Load())], keywords=[]), Call(func=Name(id='len', ctx=Load()), args=[Subscript(value=Name(id='data', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())], keywords=[])])
Call(func=Name(id='QiskitMachineLearningError', ctx=Load()), args=[Str(s='Dimensions of the data, the length of the data bounds and the numbers of qubits per dimension are incompatible.')], keywords=[])
BoolOp(op=Or(), values=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='ndim', ctx=Load()), args=[Name(id='bounds', ctx=Load())], keywords=[]), Call(func=Name(id='len', ctx=Load()), args=[Name(id='num_qubits', ctx=Load())], keywords=[])])
NotEq()
Num(n=1)
Call(func=Name(id='QiskitMachineLearningError', ctx=Load()), args=[Str(s='Dimensions of the data, the length of the data bounds and the numbers of qubits per dimension are incompatible.')], keywords=[])
Load()
Name(id='np', ctx=Load())
Load()
Load()
Load()
Attribute(value=Name(id='np', ctx=Load()), attr='ndim', ctx=Load())
Name(id='data', ctx=Load())
Attribute(value=Name(id='self', ctx=Load()), attr='_num_qubits', ctx=Load())
Is()
NameConstant(value=None)
Attribute(value=Name(id='self', ctx=Load()), attr='_num_qubits', ctx=Store())
BinOp(left=Subscript(value=Attribute(value=Name(id='np', ctx=Load()), attr='ones', ctx=Load()), slice=Index(value=Call(func=Name(id='len', ctx=Load()), args=[Subscript(value=Name(id='data', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())], keywords=[])), ctx=Load()), op=Mult(), right=Num(n=3))
Attribute(value=Name(id='self', ctx=Load()), attr='_num_qubits', ctx=Load())
Is()
NameConstant(value=None)
Attribute(value=Name(id='self', ctx=Load()), attr='_num_qubits', ctx=Store())
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='array', ctx=Load()), args=[List(elts=[Num(n=3)], ctx=Load())], keywords=[])
Name(id='self', ctx=Load())
Store()
Name(id='self', ctx=Load())
Store()
Name(id='self', ctx=Load())
Store()
Name(id='self', ctx=Load())
Store()
Load()
Name(id='self', ctx=Load())
Load()
Name(id='self', ctx=Load())
Load()
Name(id='self', ctx=Load())
Load()
NameConstant(value=True)
NameConstant(value=True)
NameConstant(value=True)
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Attribute(value=Name(id='self', ctx=Load()), attr='set_generator', ctx=Load())
Name(id='self', ctx=Load())
Store()
Load()
Load()
Attribute(value=Name(id='self', ctx=Load()), attr='set_discriminator', ctx=Load())
Name(id='self', ctx=Load())
Store()
Load()
Load()
Load()
Load()
Load()
Name(id='Optional', ctx=Load())
Index(value=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='QuantumInstance', ctx=Load()), Name(id='Backend', ctx=Load())], ctx=Load())), ctx=Load()))
Load()
Name(id='quantum_instance', ctx=Load())
Is()
NameConstant(value=None)
Attribute(value=Name(id='self', ctx=Load()), attr='quantum_instance', ctx=Load())
Is()
NameConstant(value=None)
Name(id='QiskitMachineLearningError', ctx=Load())
Str(s='A QuantumInstance or Backend must be supplied to run the quantum algorithm.')
Load()
Load()
Load()
Attribute(value=Name(id='self', ctx=Load()), attr='set_backend', ctx=Load())
Name(id='quantum_instance', ctx=Load())
keyword(arg=None, value=Name(id='kwargs', ctx=Load()))
Name(id='quantum_instance', ctx=Load())
IsNot()
NameConstant(value=None)
Attribute(value=Name(id='self', ctx=Load()), attr='quantum_instance', ctx=Store())
Name(id='quantum_instance', ctx=Load())
Name(id='self', ctx=Load())
Load()
Load()
Load()
Name(id='Union', ctx=Load())
Index(value=Tuple(elts=[Name(id='QuantumInstance', ctx=Load()), Name(id='Backend', ctx=Load())], ctx=Load()))
Load()
Load()
Load()
Load()
Store()
Name(id='QuantumInstance', ctx=Load())
Name(id='quantum_instance', ctx=Load())
Load()
Load()
Load()
Load()
Load()
Attribute(value=Name(id='self', ctx=Load()), attr='quantum_instance', ctx=Load())
Load()
Name(id='kwargs', ctx=Load())
Name(id='self', ctx=Load())
Load()
Load()
Name(id='self', ctx=Load())
Load()
Load()
Load()
Load()
Load()
Load()
Attribute(value=Name(id='self', ctx=Load()), attr='_discriminator', ctx=Load())
Load()
Name(id='self', ctx=Load())
Load()
Load()
Load()
Load()
Name(id='Optional', ctx=Load())
Index(value=Name(id='QuantumCircuit', ctx=Load()))
Load()
Name(id='Optional', ctx=Load())
Index(value=Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()))
Load()
Name(id='Optional', ctx=Load())
Index(value=Name(id='Optimizer', ctx=Load()))
Load()
Name(id='Optional', ctx=Load())
Index(value=Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='Callable', ctx=Load()), Name(id='Gradient', ctx=Load())], ctx=Load())), ctx=Load()))
Load()
Not()
Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='generator_gradient', ctx=Load()), Tuple(elts=[Name(id='Gradient', ctx=Load()), Name(id='FunctionType', ctx=Load())], ctx=Load())], keywords=[])
Call(func=Name(id='QiskitMachineLearningError', ctx=Load()), args=[Str(s='Please pass either a Gradient object or a function as the generator_gradient argument.')], keywords=[])
Load()
Load()
Name(id='self', ctx=Load())
Load()
Name(id='self', ctx=Load())
Load()
Load()
Load()
Load()
Load()
Name(id='self', ctx=Load())
Load()
Load()
Load()
Name(id='self', ctx=Load())
Store()
Name(id='NumPyDiscriminator', ctx=Load())
Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_num_qubits', ctx=Load())], keywords=[])
Name(id='self', ctx=Load())
Store()
Load()
Attribute(value=Name(id='self', ctx=Load()), attr='_discriminator', ctx=Load())
Load()
Name(id='self', ctx=Load())
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Store()
Store()
Attribute(value=Name(id='self', ctx=Load()), attr='_generator', ctx=Load())
Load()
Name(id='self', ctx=Load())
Load()
Name(id='np', ctx=Load())
Load()
Name(id='len', ctx=Load())
Attribute(value=Name(id='self', ctx=Load()), attr='_grid_elements', ctx=Load())
Store()
Store()
Load()
Load()
Name(id='i', ctx=Store())
Name(id='element', ctx=Store())
Store()
Name(id='enumerate', ctx=Load())
Attribute(value=Name(id='self', ctx=Load()), attr='_grid_elements', ctx=Load())
Compare(left=Name(id='sample', ctx=Load()), ops=[Eq()], comparators=[Name(id='element', ctx=Load())])
AugAssign(target=Subscript(value=Name(id='temp', ctx=Load()), slice=Index(value=Name(id='i', ctx=Load())), ctx=Store()), op=Add(), value=Subscript(value=Name(id='prob_gen', ctx=Load()), slice=Index(value=Name(id='j', ctx=Load())), ctx=Load()))
Compare(left=Name(id='x', ctx=Load()), ops=[Eq()], comparators=[Num(n=0)])
Num(n=1e-08)
Name(id='x', ctx=Load())
Name(id='x', ctx=Store())
Name(id='temp', ctx=Load())
Load()
Load()
Name(id='self', ctx=Load())
Load()
Name(id='open', ctx=Load())
Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_snapshot_dir', ctx=Load()), Str(s='output.csv')], keywords=[])
keyword(arg='mode', value=Str(s='a'))
keyword(arg='encoding', value=Str(s='utf8'))
Store()
Store()
Str(s='epoch')
Str(s='loss_discriminator')
Str(s='loss_generator')
Str(s='params_generator')
Str(s='rel_entropy')
Load()
Store()
Attribute(value=Name(id='csv', ctx=Load()), attr='DictWriter', ctx=Load())
Name(id='csv_file', ctx=Load())
keyword(arg='fieldnames', value=Name(id='fieldnames', ctx=Load()))
Attribute(value=Name(id='writer', ctx=Load()), attr='writerow', ctx=Load())
Dict(keys=[Str(s='epoch'), Str(s='loss_discriminator'), Str(s='loss_generator'), Str(s='params_generator'), Str(s='rel_entropy')], values=[Name(id='e', ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='average', ctx=Load()), args=[Name(id='d_loss', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='average', ctx=Load()), args=[Name(id='g_loss', ctx=Load())], keywords=[]), Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_generator', ctx=Load()), attr='parameter_values', ctx=Load()), Name(id='rel_entr', ctx=Load())])
Attribute(value=Name(id='self', ctx=Load()), attr='_discriminator', ctx=Load())
Load()
Name(id='self', ctx=Load())
Load()
Name(id='self', ctx=Load())
Load()
Call(func=Name(id='open', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_snapshot_dir', ctx=Load()), Str(s='output.csv')], keywords=[])], keywords=[keyword(arg='mode', value=Str(s='w')), keyword(arg='encoding', value=Str(s='utf8'))])
Name(id='csv_file', ctx=Store())
Name(id='fieldnames', ctx=Store())
List(elts=[Str(s='epoch'), Str(s='loss_discriminator'), Str(s='loss_generator'), Str(s='params_generator'), Str(s='rel_entropy')], ctx=Load())
Name(id='writer', ctx=Store())
Call(func=Attribute(value=Name(id='csv', ctx=Load()), attr='DictWriter', ctx=Load()), args=[Name(id='csv_file', ctx=Load())], keywords=[keyword(arg='fieldnames', value=Name(id='fieldnames', ctx=Load()))])
Call(func=Attribute(value=Name(id='writer', ctx=Load()), attr='writeheader', ctx=Load()), args=[], keywords=[])
Name(id='len', ctx=Load())
Attribute(value=Name(id='self', ctx=Load()), attr='_data', ctx=Load())
Name(id='self', ctx=Load())
Load()
Name(id='QiskitMachineLearningError', ctx=Load())
JoinedStr(values=[Str(s='The batch size needs to be less than the truncated data size of '), FormattedValue(value=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_data', ctx=Load())], keywords=[]), conversion=-1, format_spec=None)])
Load()
Name(id='self', ctx=Load())
Load()
Attribute(value=Attribute(value=Name(id='algorithm_globals', ctx=Load()), attr='random', ctx=Load()), attr='shuffle', ctx=Load())
Attribute(value=Name(id='self', ctx=Load()), attr='_data', ctx=Load())
Store()
BinOp(left=Name(id='index', ctx=Load()), op=Add(), right=Attribute(value=Name(id='self', ctx=Load()), attr='_batch_size', ctx=Load()))
LtE()
Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_data', ctx=Load())], keywords=[])
Name(id='real_batch', ctx=Store())
Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_data', ctx=Load()), slice=Slice(lower=Name(id='index', ctx=Load()), upper=BinOp(left=Name(id='index', ctx=Load()), op=Add(), right=Attribute(value=Name(id='self', ctx=Load()), attr='_batch_size', ctx=Load())), step=None), ctx=Load())
Name(id='index', ctx=Store())
Add()
Attribute(value=Name(id='self', ctx=Load()), attr='_batch_size', ctx=Load())
Tuple(elts=[Name(id='generated_batch', ctx=Store()), Name(id='generated_prob', ctx=Store())], ctx=Store())
Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_generator', ctx=Load()), attr='get_output', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load())], keywords=[keyword(arg='shots', value=Attribute(value=Name(id='self', ctx=Load()), attr='_batch_size', ctx=Load()))])
Name(id='ret_d', ctx=Store())
Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_discriminator', ctx=Load()), attr='train', ctx=Load()), args=[List(elts=[Name(id='real_batch', ctx=Load()), Name(id='generated_batch', ctx=Load())], ctx=Load()), List(elts=[BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='ones', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='real_batch', ctx=Load())], keywords=[])], keywords=[]), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='real_batch', ctx=Load())], keywords=[])), Name(id='generated_prob', ctx=Load())], ctx=Load())], keywords=[])
Name(id='d_loss_min', ctx=Store())
Subscript(value=Name(id='ret_d', ctx=Load()), slice=Index(value=Str(s='loss')), ctx=Load())
Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_generator', ctx=Load()), attr='discriminator', ctx=Store())
Attribute(value=Name(id='self', ctx=Load()), attr='_discriminator', ctx=Load())
Name(id='ret_g', ctx=Store())
Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_generator', ctx=Load()), attr='train', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load())], keywords=[keyword(arg='shots', value=Attribute(value=Name(id='self', ctx=Load()), attr='_batch_size', ctx=Load()))])
Name(id='g_loss_min', ctx=Store())
Subscript(value=Name(id='ret_g', ctx=Load()), slice=Index(value=Str(s='loss')), ctx=Load())
Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_d_loss', ctx=Load()), attr='append', ctx=Load())
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load()), args=[Call(func=Name(id='float', ctx=Load()), args=[Name(id='d_loss_min', ctx=Load())], keywords=[]), Num(n=4)], keywords=[])
Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_g_loss', ctx=Load()), attr='append', ctx=Load())
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load()), args=[Name(id='g_loss_min', ctx=Load()), Num(n=4)], keywords=[])
Store()
Attribute(value=Name(id='self', ctx=Load()), attr='get_rel_entr', ctx=Load())
Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_rel_entr', ctx=Load()), attr='append', ctx=Load())
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load()), args=[Name(id='rel_entr', ctx=Load()), Num(n=4)], keywords=[])
Attribute(value=Name(id='self', ctx=Load()), attr='_ret', ctx=Load())
Index(value=Str(s='params_d'))
Store()
Name(id='ret_d', ctx=Load())
Index(value=Str(s='params'))
Load()
Attribute(value=Name(id='self', ctx=Load()), attr='_ret', ctx=Load())
Index(value=Str(s='params_g'))
Store()
Name(id='ret_g', ctx=Load())
Index(value=Str(s='params'))
Load()
Attribute(value=Name(id='self', ctx=Load()), attr='_ret', ctx=Load())
Index(value=Str(s='loss_d'))
Store()
Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load())
Call(func=Name(id='float', ctx=Load()), args=[Name(id='d_loss_min', ctx=Load())], keywords=[])
Num(n=4)
Attribute(value=Name(id='self', ctx=Load()), attr='_ret', ctx=Load())
Index(value=Str(s='loss_g'))
Store()
Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load())
Name(id='g_loss_min', ctx=Load())
Num(n=4)
Attribute(value=Name(id='self', ctx=Load()), attr='_ret', ctx=Load())
Index(value=Str(s='rel_entr'))
Store()
Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load())
Name(id='rel_entr', ctx=Load())
Num(n=4)
Attribute(value=Name(id='self', ctx=Load()), attr='_snapshot_dir', ctx=Load())
IsNot()
NameConstant(value=None)
Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_store_params', ctx=Load()), args=[Name(id='e', ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load()), args=[Name(id='d_loss_min', ctx=Load()), Num(n=4)], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load()), args=[Name(id='g_loss_min', ctx=Load()), Num(n=4)], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load()), args=[Name(id='rel_entr', ctx=Load()), Num(n=4)], keywords=[])], keywords=[])
Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load())
Str(s='Epoch %s/%s...')
BinOp(left=Name(id='e', ctx=Load()), op=Add(), right=Num(n=1))
Attribute(value=Name(id='self', ctx=Load()), attr='_num_epochs', ctx=Load())
Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load())
Str(s='Loss Discriminator: %s')
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load()), args=[Call(func=Name(id='float', ctx=Load()), args=[Name(id='d_loss_min', ctx=Load())], keywords=[]), Num(n=4)], keywords=[])
Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load())
Str(s='Loss Generator: %s')
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load()), args=[Name(id='g_loss_min', ctx=Load()), Num(n=4)], keywords=[])
Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load())
Str(s='Relative Entropy: %s')
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load()), args=[Name(id='rel_entr', ctx=Load()), Num(n=4)], keywords=[])
Attribute(value=Name(id='self', ctx=Load()), attr='_tol_rel_ent', ctx=Load())
IsNot()
NameConstant(value=None)
Compare(left=Name(id='rel_entr', ctx=Load()), ops=[LtE()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='_tol_rel_ent', ctx=Load())])
Break()
Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load())
Load()
Or()
Str(s='unitary_simulator')
Str(s='clifford_simulator')
Name(id='QiskitMachineLearningError', ctx=Load())
Str(s='Chosen backend not supported - Set backend either to statevector_simulator, qasm_simulator or actual quantum hardware')
Name(id='self', ctx=Load())
Load()
Load()
Load()
Tuple(elts=[Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Name(id='List', ctx=Load())], ctx=Load())
Load()
Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Name(id='List', ctx=Load())], ctx=Load())), ctx=Load())
Load()
Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Name(id='List', ctx=Load())], ctx=Load())), ctx=Load())
Load()
Name(id='DiscriminativeNetwork', ctx=Load())
Load()
Name(id='GenerativeNetwork', ctx=Load())
Load()
Name(id='float', ctx=Load())
Load()
Name(id='str', ctx=Load())
Load()
Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='QuantumInstance', ctx=Load()), Name(id='Backend', ctx=Load())], ctx=Load())), ctx=Load())
Load()
Load()
Load()
Name(id='np', ctx=Load())
Load()
Name(id='self', ctx=Load())
Load()
Num(n=0)
Name(id='np', ctx=Load())
Load()
Name(id='self', ctx=Load())
Load()
Num(n=0)
Store()
Store()
Load()
Load()
Attribute(value=Name(id='bounds', ctx=Load()), attr='append', ctx=Load())
List(elts=[Subscript(value=Name(id='bounds_min', ctx=Load()), slice=Index(value=Name(id='i', ctx=Load())), ctx=Load()), Subscript(value=Name(id='bounds_max', ctx=Load()), slice=Index(value=Name(id='i', ctx=Load())), ctx=Load())], ctx=Load())
Name(id='np', ctx=Load())
Load()
Load()
Name(id='len', ctx=Load())
Name(id='bounds', ctx=Load())
Or()
Call(func=Name(id='len', ctx=Load()), args=[Name(id='num_qubits', ctx=Load())], keywords=[])
Call(func=Name(id='len', ctx=Load()), args=[Subscript(value=Name(id='data', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())], keywords=[])
Name(id='QiskitMachineLearningError', ctx=Load())
Str(s='Dimensions of the data, the length of the data bounds and the numbers of qubits per dimension are incompatible.')
Or()
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='ndim', ctx=Load()), args=[Name(id='bounds', ctx=Load())], keywords=[])
Call(func=Name(id='len', ctx=Load()), args=[Name(id='num_qubits', ctx=Load())], keywords=[])
Name(id='QiskitMachineLearningError', ctx=Load())
Str(s='Dimensions of the data, the length of the data bounds and the numbers of qubits per dimension are incompatible.')
Load()
Name(id='np', ctx=Load())
Load()
Load()
Name(id='self', ctx=Load())
Load()
Name(id='self', ctx=Load())
Store()
Subscript(value=Attribute(value=Name(id='np', ctx=Load()), attr='ones', ctx=Load()), slice=Index(value=Call(func=Name(id='len', ctx=Load()), args=[Subscript(value=Name(id='data', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())], keywords=[])), ctx=Load())
Mult()
Num(n=3)
Name(id='self', ctx=Load())
Load()
Name(id='self', ctx=Load())
Store()
Attribute(value=Name(id='np', ctx=Load()), attr='array', ctx=Load())
List(elts=[Num(n=3)], ctx=Load())
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Name(id='self', ctx=Load())
Load()
Load()
Name(id='self', ctx=Load())
Load()
Load()
Load()
Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='QuantumInstance', ctx=Load()), Name(id='Backend', ctx=Load())], ctx=Load())), ctx=Load())
Load()
Name(id='self', ctx=Load())
Load()
Load()
Name(id='self', ctx=Load())
Load()
Load()
Name(id='kwargs', ctx=Load())
Load()
Name(id='self', ctx=Load())
Store()
Load()
Load()
Load()
Tuple(elts=[Name(id='QuantumInstance', ctx=Load()), Name(id='Backend', ctx=Load())], ctx=Load())
Load()
Load()
Name(id='self', ctx=Load())
Load()
Load()
Load()
Load()
Name(id='self', ctx=Load())
Load()
Load()
Load()
Name(id='QuantumCircuit', ctx=Load())
Load()
Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())
Load()
Name(id='Optimizer', ctx=Load())
Load()
Subscript(value=Name(id='Union', ctx=Load()), slice=Index(value=Tuple(elts=[Name(id='Callable', ctx=Load()), Name(id='Gradient', ctx=Load())], ctx=Load())), ctx=Load())
Name(id='isinstance', ctx=Load())
Name(id='generator_gradient', ctx=Load())
Tuple(elts=[Name(id='Gradient', ctx=Load()), Name(id='FunctionType', ctx=Load())], ctx=Load())
Name(id='QiskitMachineLearningError', ctx=Load())
Str(s='Please pass either a Gradient object or a function as the generator_gradient argument.')
Load()
Load()
Load()
Load()
Load()
Name(id='len', ctx=Load())
Attribute(value=Name(id='self', ctx=Load()), attr='_num_qubits', ctx=Load())
Load()
Name(id='self', ctx=Load())
Load()
Load()
Name(id='self', ctx=Load())
Load()
Load()
Load()
Load()
Name(id='self', ctx=Load())
Load()
Store()
Store()
Load()
Name(id='self', ctx=Load())
Load()
Name(id='sample', ctx=Load())
Eq()
Name(id='element', ctx=Load())
Subscript(value=Name(id='temp', ctx=Load()), slice=Index(value=Name(id='i', ctx=Load())), ctx=Store())
Add()
Subscript(value=Name(id='prob_gen', ctx=Load()), slice=Index(value=Name(id='j', ctx=Load())), ctx=Load())
Name(id='x', ctx=Load())
Eq()
Num(n=0)
Load()
Store()
Load()
Load()
Load()
Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load())
Attribute(value=Name(id='self', ctx=Load()), attr='_snapshot_dir', ctx=Load())
Str(s='output.csv')
Str(s='a')
Str(s='utf8')
Name(id='csv', ctx=Load())
Load()
Load()
Name(id='fieldnames', ctx=Load())
Name(id='writer', ctx=Load())
Load()
Str(s='epoch')
Str(s='loss_discriminator')
Str(s='loss_generator')
Str(s='params_generator')
Str(s='rel_entropy')
Name(id='e', ctx=Load())
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='average', ctx=Load()), args=[Name(id='d_loss', ctx=Load())], keywords=[])
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='average', ctx=Load()), args=[Name(id='g_loss', ctx=Load())], keywords=[])
Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_generator', ctx=Load()), attr='parameter_values', ctx=Load())
Name(id='rel_entr', ctx=Load())
Name(id='self', ctx=Load())
Load()
Load()
Load()
Name(id='open', ctx=Load())
Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_snapshot_dir', ctx=Load()), Str(s='output.csv')], keywords=[])
keyword(arg='mode', value=Str(s='w'))
keyword(arg='encoding', value=Str(s='utf8'))
Store()
Store()
Str(s='epoch')
Str(s='loss_discriminator')
Str(s='loss_generator')
Str(s='params_generator')
Str(s='rel_entropy')
Load()
Store()
Attribute(value=Name(id='csv', ctx=Load()), attr='DictWriter', ctx=Load())
Name(id='csv_file', ctx=Load())
keyword(arg='fieldnames', value=Name(id='fieldnames', ctx=Load()))
Attribute(value=Name(id='writer', ctx=Load()), attr='writeheader', ctx=Load())
Load()
Name(id='self', ctx=Load())
Load()
Load()
Load()
Str(s='The batch size needs to be less than the truncated data size of ')
FormattedValue(value=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_data', ctx=Load())], keywords=[]), conversion=-1, format_spec=None)
Load()
Attribute(value=Name(id='algorithm_globals', ctx=Load()), attr='random', ctx=Load())
Load()
Name(id='self', ctx=Load())
Load()
Name(id='index', ctx=Load())
Add()
Attribute(value=Name(id='self', ctx=Load()), attr='_batch_size', ctx=Load())
Name(id='len', ctx=Load())
Attribute(value=Name(id='self', ctx=Load()), attr='_data', ctx=Load())
Store()
Attribute(value=Name(id='self', ctx=Load()), attr='_data', ctx=Load())
Slice(lower=Name(id='index', ctx=Load()), upper=BinOp(left=Name(id='index', ctx=Load()), op=Add(), right=Attribute(value=Name(id='self', ctx=Load()), attr='_batch_size', ctx=Load())), step=None)
Load()
Store()
Name(id='self', ctx=Load())
Load()
Name(id='generated_batch', ctx=Store())
Name(id='generated_prob', ctx=Store())
Store()
Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_generator', ctx=Load()), attr='get_output', ctx=Load())
Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load())
keyword(arg='shots', value=Attribute(value=Name(id='self', ctx=Load()), attr='_batch_size', ctx=Load()))
Store()
Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_discriminator', ctx=Load()), attr='train', ctx=Load())
List(elts=[Name(id='real_batch', ctx=Load()), Name(id='generated_batch', ctx=Load())], ctx=Load())
List(elts=[BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='ones', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='real_batch', ctx=Load())], keywords=[])], keywords=[]), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='real_batch', ctx=Load())], keywords=[])), Name(id='generated_prob', ctx=Load())], ctx=Load())
Store()
Name(id='ret_d', ctx=Load())
Index(value=Str(s='loss'))
Load()
Attribute(value=Name(id='self', ctx=Load()), attr='_generator', ctx=Load())
Store()
Name(id='self', ctx=Load())
Load()
Store()
Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_generator', ctx=Load()), attr='train', ctx=Load())
Attribute(value=Name(id='self', ctx=Load()), attr='_quantum_instance', ctx=Load())
keyword(arg='shots', value=Attribute(value=Name(id='self', ctx=Load()), attr='_batch_size', ctx=Load()))
Store()
Name(id='ret_g', ctx=Load())
Index(value=Str(s='loss'))
Load()
Attribute(value=Name(id='self', ctx=Load()), attr='_d_loss', ctx=Load())
Load()
Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load())
Call(func=Name(id='float', ctx=Load()), args=[Name(id='d_loss_min', ctx=Load())], keywords=[])
Num(n=4)
Attribute(value=Name(id='self', ctx=Load()), attr='_g_loss', ctx=Load())
Load()
Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load())
Name(id='g_loss_min', ctx=Load())
Num(n=4)
Name(id='self', ctx=Load())
Load()
Attribute(value=Name(id='self', ctx=Load()), attr='_rel_entr', ctx=Load())
Load()
Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load())
Name(id='rel_entr', ctx=Load())
Num(n=4)
Name(id='self', ctx=Load())
Load()
Str(s='params_d')
Load()
Str(s='params')
Name(id='self', ctx=Load())
Load()
Str(s='params_g')
Load()
Str(s='params')
Name(id='self', ctx=Load())
Load()
Str(s='loss_d')
Name(id='np', ctx=Load())
Load()
Name(id='float', ctx=Load())
Name(id='d_loss_min', ctx=Load())
Name(id='self', ctx=Load())
Load()
Str(s='loss_g')
Name(id='np', ctx=Load())
Load()
Load()
Name(id='self', ctx=Load())
Load()
Str(s='rel_entr')
Name(id='np', ctx=Load())
Load()
Load()
Name(id='self', ctx=Load())
Load()
Attribute(value=Name(id='self', ctx=Load()), attr='_store_params', ctx=Load())
Name(id='e', ctx=Load())
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load()), args=[Name(id='d_loss_min', ctx=Load()), Num(n=4)], keywords=[])
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load()), args=[Name(id='g_loss_min', ctx=Load()), Num(n=4)], keywords=[])
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load()), args=[Name(id='rel_entr', ctx=Load()), Num(n=4)], keywords=[])
Name(id='logger', ctx=Load())
Load()
Name(id='e', ctx=Load())
Add()
Num(n=1)
Name(id='self', ctx=Load())
Load()
Name(id='logger', ctx=Load())
Load()
Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load())
Call(func=Name(id='float', ctx=Load()), args=[Name(id='d_loss_min', ctx=Load())], keywords=[])
Num(n=4)
Name(id='logger', ctx=Load())
Load()
Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load())
Name(id='g_loss_min', ctx=Load())
Num(n=4)
Name(id='logger', ctx=Load())
Load()
Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load())
Name(id='rel_entr', ctx=Load())
Num(n=4)
Name(id='self', ctx=Load())
Load()
Name(id='rel_entr', ctx=Load())
LtE()
Attribute(value=Name(id='self', ctx=Load()), attr='_tol_rel_ent', ctx=Load())
Name(id='self', ctx=Load())
Load()
Load()
Load()
Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())
Name(id='List', ctx=Load())
Load()
Name(id='Union', ctx=Load())
Index(value=Tuple(elts=[Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Name(id='List', ctx=Load())], ctx=Load()))
Load()
Name(id='Union', ctx=Load())
Index(value=Tuple(elts=[Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Name(id='List', ctx=Load())], ctx=Load()))
Load()
Load()
Load()
Load()
Load()
Name(id='Union', ctx=Load())
Index(value=Tuple(elts=[Name(id='QuantumInstance', ctx=Load()), Name(id='Backend', ctx=Load())], ctx=Load()))
Load()
Load()
Load()
Load()
Load()
Name(id='bounds', ctx=Load())
Load()
Subscript(value=Name(id='bounds_min', ctx=Load()), slice=Index(value=Name(id='i', ctx=Load())), ctx=Load())
Subscript(value=Name(id='bounds_max', ctx=Load()), slice=Index(value=Name(id='i', ctx=Load())), ctx=Load())
Load()
Load()
Load()
Load()
Name(id='len', ctx=Load())
Name(id='num_qubits', ctx=Load())
Name(id='len', ctx=Load())
Subscript(value=Name(id='data', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())
Load()
Attribute(value=Name(id='np', ctx=Load()), attr='ndim', ctx=Load())
Name(id='bounds', ctx=Load())
Name(id='len', ctx=Load())
Name(id='num_qubits', ctx=Load())
Load()
Load()
Load()
Load()
Attribute(value=Name(id='np', ctx=Load()), attr='ones', ctx=Load())
Index(value=Call(func=Name(id='len', ctx=Load()), args=[Subscript(value=Name(id='data', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())], keywords=[]))
Load()
Load()
Load()
Name(id='np', ctx=Load())
Load()
Num(n=3)
Load()
Load()
Load()
Name(id='Union', ctx=Load())
Index(value=Tuple(elts=[Name(id='QuantumInstance', ctx=Load()), Name(id='Backend', ctx=Load())], ctx=Load()))
Load()
Load()
Load()
Load()
Load()
Name(id='QuantumInstance', ctx=Load())
Name(id='Backend', ctx=Load())
Load()
Load()
Load()
Load()
Name(id='np', ctx=Load())
Load()
Load()
Name(id='Union', ctx=Load())
Index(value=Tuple(elts=[Name(id='Callable', ctx=Load()), Name(id='Gradient', ctx=Load())], ctx=Load()))
Load()
Load()
Load()
Name(id='Gradient', ctx=Load())
Name(id='FunctionType', ctx=Load())
Load()
Load()
Load()
Name(id='self', ctx=Load())
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Name(id='temp', ctx=Load())
Index(value=Name(id='i', ctx=Load()))
Store()
Name(id='prob_gen', ctx=Load())
Index(value=Name(id='j', ctx=Load()))
Load()
Load()
Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load())
Load()
Name(id='self', ctx=Load())
Load()
Load()
Load()
Load()
Load()
Attribute(value=Name(id='np', ctx=Load()), attr='average', ctx=Load())
Name(id='d_loss', ctx=Load())
Attribute(value=Name(id='np', ctx=Load()), attr='average', ctx=Load())
Name(id='g_loss', ctx=Load())
Attribute(value=Name(id='self', ctx=Load()), attr='_generator', ctx=Load())
Load()
Load()
Load()
Load()
Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load())
Attribute(value=Name(id='self', ctx=Load()), attr='_snapshot_dir', ctx=Load())
Str(s='output.csv')
Str(s='w')
Str(s='utf8')
Name(id='csv', ctx=Load())
Load()
Load()
Name(id='fieldnames', ctx=Load())
Name(id='writer', ctx=Load())
Load()
Load()
Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_data', ctx=Load())], keywords=[])
Name(id='algorithm_globals', ctx=Load())
Load()
Load()
Load()
Name(id='self', ctx=Load())
Load()
Load()
Name(id='self', ctx=Load())
Load()
Name(id='self', ctx=Load())
Load()
Name(id='index', ctx=Load())
BinOp(left=Name(id='index', ctx=Load()), op=Add(), right=Attribute(value=Name(id='self', ctx=Load()), attr='_batch_size', ctx=Load()))
Load()
Store()
Store()
Attribute(value=Name(id='self', ctx=Load()), attr='_generator', ctx=Load())
Load()
Name(id='self', ctx=Load())
Load()
Attribute(value=Name(id='self', ctx=Load()), attr='_batch_size', ctx=Load())
Attribute(value=Name(id='self', ctx=Load()), attr='_discriminator', ctx=Load())
Load()
Name(id='real_batch', ctx=Load())
Name(id='generated_batch', ctx=Load())
Load()
BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='ones', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='real_batch', ctx=Load())], keywords=[])], keywords=[]), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='real_batch', ctx=Load())], keywords=[]))
Name(id='generated_prob', ctx=Load())
Load()
Load()
Str(s='loss')
Name(id='self', ctx=Load())
Load()
Load()
Attribute(value=Name(id='self', ctx=Load()), attr='_generator', ctx=Load())
Load()
Name(id='self', ctx=Load())
Load()
Attribute(value=Name(id='self', ctx=Load()), attr='_batch_size', ctx=Load())
Load()
Str(s='loss')
Name(id='self', ctx=Load())
Load()
Name(id='np', ctx=Load())
Load()
Name(id='float', ctx=Load())
Name(id='d_loss_min', ctx=Load())
Name(id='self', ctx=Load())
Load()
Name(id='np', ctx=Load())
Load()
Load()
Load()
Name(id='self', ctx=Load())
Load()
Name(id='np', ctx=Load())
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Name(id='self', ctx=Load())
Load()
Load()
Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load())
Name(id='d_loss_min', ctx=Load())
Num(n=4)
Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load())
Name(id='g_loss_min', ctx=Load())
Num(n=4)
Attribute(value=Name(id='np', ctx=Load()), attr='around', ctx=Load())
Name(id='rel_entr', ctx=Load())
Num(n=4)
Load()
Load()
Load()
Load()
Name(id='np', ctx=Load())
Load()
Name(id='float', ctx=Load())
Name(id='d_loss_min', ctx=Load())
Load()
Name(id='np', ctx=Load())
Load()
Load()
Load()
Name(id='np', ctx=Load())
Load()
Load()
Load()
Load()
Name(id='self', ctx=Load())
Load()
Load()
Name(id='np', ctx=Load())
Load()
Load()
Load()
Tuple(elts=[Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Name(id='List', ctx=Load())], ctx=Load())
Load()
Tuple(elts=[Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load()), Name(id='List', ctx=Load())], ctx=Load())
Load()
Tuple(elts=[Name(id='QuantumInstance', ctx=Load()), Name(id='Backend', ctx=Load())], ctx=Load())
Load()
Name(id='bounds_min', ctx=Load())
Index(value=Name(id='i', ctx=Load()))
Load()
Name(id='bounds_max', ctx=Load())
Index(value=Name(id='i', ctx=Load()))
Load()
Load()
Load()
Load()
Name(id='data', ctx=Load())
Index(value=Num(n=0))
Load()
Name(id='np', ctx=Load())
Load()
Load()
Load()
Load()
Name(id='np', ctx=Load())
Load()
Call(func=Name(id='len', ctx=Load()), args=[Subscript(value=Name(id='data', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())], keywords=[])
Load()
Load()
Tuple(elts=[Name(id='QuantumInstance', ctx=Load()), Name(id='Backend', ctx=Load())], ctx=Load())
Load()
Load()
Load()
Load()
Tuple(elts=[Name(id='Callable', ctx=Load()), Name(id='Gradient', ctx=Load())], ctx=Load())
Load()
Load()
Load()
Load()
Name(id='i', ctx=Load())
Load()
Name(id='j', ctx=Load())
Name(id='os', ctx=Load())
Load()
Load()
Name(id='np', ctx=Load())
Load()
Load()
Name(id='np', ctx=Load())
Load()
Load()
Name(id='self', ctx=Load())
Load()
Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load())
Load()
Name(id='self', ctx=Load())
Load()
Load()
Load()
Load()
Name(id='len', ctx=Load())
Attribute(value=Name(id='self', ctx=Load()), attr='_data', ctx=Load())
Load()
Load()
Load()
Load()
Load()
Name(id='index', ctx=Load())
Add()
Attribute(value=Name(id='self', ctx=Load()), attr='_batch_size', ctx=Load())
Name(id='self', ctx=Load())
Load()
Load()
Name(id='self', ctx=Load())
Load()
Name(id='self', ctx=Load())
Load()
Load()
Load()
Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='ones', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='real_batch', ctx=Load())], keywords=[])], keywords=[])
Div()
Call(func=Name(id='len', ctx=Load()), args=[Name(id='real_batch', ctx=Load())], keywords=[])
Load()
Load()
Name(id='self', ctx=Load())
Load()
Load()
Name(id='self', ctx=Load())
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Name(id='np', ctx=Load())
Load()
Load()
Name(id='np', ctx=Load())
Load()
Load()
Name(id='np', ctx=Load())
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())
Name(id='List', ctx=Load())
Load()
Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())
Name(id='List', ctx=Load())
Load()
Name(id='QuantumInstance', ctx=Load())
Name(id='Backend', ctx=Load())
Load()
Load()
Name(id='i', ctx=Load())
Load()
Name(id='i', ctx=Load())
Load()
Num(n=0)
Load()
Load()
Name(id='len', ctx=Load())
Subscript(value=Name(id='data', ctx=Load()), slice=Index(value=Num(n=0)), ctx=Load())
Name(id='QuantumInstance', ctx=Load())
Name(id='Backend', ctx=Load())
Load()
Name(id='Callable', ctx=Load())
Name(id='Gradient', ctx=Load())
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Name(id='os', ctx=Load())
Load()
Load()
Load()
Name(id='self', ctx=Load())
Load()
Load()
Name(id='self', ctx=Load())
Load()
Load()
Load()
Load()
Attribute(value=Name(id='np', ctx=Load()), attr='ones', ctx=Load())
Call(func=Name(id='len', ctx=Load()), args=[Name(id='real_batch', ctx=Load())], keywords=[])
Name(id='len', ctx=Load())
Name(id='real_batch', ctx=Load())
Load()
Load()
Load()
Load()
Load()
Name(id='np', ctx=Load())
Load()
Load()
Name(id='np', ctx=Load())
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Name(id='data', ctx=Load())
Index(value=Num(n=0))
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Load()
Name(id='np', ctx=Load())
Load()
Name(id='len', ctx=Load())
Name(id='real_batch', ctx=Load())
Load()
Load()
Load()
Load()
Load()
Num(n=0)
Load()
Load()
Load()
  metric  value
0     NC      0
DONE!
